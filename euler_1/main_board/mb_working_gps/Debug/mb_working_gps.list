
mb_working_gps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b640  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf0  0801b810  0801b810  0002b810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c500  0801c500  00030284  2**0
                  CONTENTS
  4 .ARM          00000008  0801c500  0801c500  0002c500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c508  0801c508  00030284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c508  0801c508  0002c508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c50c  0801c50c  0002c50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  0801c510  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001bfa0  20000284  0801c794  00030284  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2001c224  0801c794  0003c224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY
 12 .debug_info   000451f4  00000000  00000000  000302b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000862d  00000000  00000000  000754a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000029d0  00000000  00000000  0007dad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000025e8  00000000  00000000  000804a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033c31  00000000  00000000  00082a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002eb50  00000000  00000000  000b66c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010aa6c  00000000  00000000  000e5211  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001efc7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b690  00000000  00000000  001efcf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000284 	.word	0x20000284
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801b7f8 	.word	0x0801b7f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000288 	.word	0x20000288
 800020c:	0801b7f8 	.word	0x0801b7f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <calculateCRC>:
 *      Author: Jonas
 */
#include "EPOS4/epos4.h"


uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
  uint16_t shifter, c;
  uint16_t carry;
  uint16_t crc = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	827b      	strh	r3, [r7, #18]

  for (int i = 0; i < len + 2; i += 2) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e03c      	b.n	8001008 <calculateCRC+0x90>
    shifter = 0x8000;
 8000f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f92:	82fb      	strh	r3, [r7, #22]
    if (i == len) {
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d102      	bne.n	8000fa2 <calculateCRC+0x2a>
      c = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	82bb      	strh	r3, [r7, #20]
 8000fa0:	e00e      	b.n	8000fc0 <calculateCRC+0x48>
    } else {
      c = data[i+1] << 8 | data[i];
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	82bb      	strh	r3, [r7, #20]
    }
    do {
      carry = crc & 0x8000;
 8000fc0:	8a7b      	ldrh	r3, [r7, #18]
 8000fc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fca:	817b      	strh	r3, [r7, #10]
      crc <<= 1;
 8000fcc:	8a7b      	ldrh	r3, [r7, #18]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	827b      	strh	r3, [r7, #18]
      if(c & shifter) crc++;
 8000fd2:	8aba      	ldrh	r2, [r7, #20]
 8000fd4:	8afb      	ldrh	r3, [r7, #22]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <calculateCRC+0x6c>
 8000fde:	8a7b      	ldrh	r3, [r7, #18]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	827b      	strh	r3, [r7, #18]
      if(carry) crc ^= 0x1021;
 8000fe4:	897b      	ldrh	r3, [r7, #10]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <calculateCRC+0x7e>
 8000fea:	8a7b      	ldrh	r3, [r7, #18]
 8000fec:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000ff0:	f083 0301 	eor.w	r3, r3, #1
 8000ff4:	827b      	strh	r3, [r7, #18]
      shifter >>= 1;
 8000ff6:	8afb      	ldrh	r3, [r7, #22]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	82fb      	strh	r3, [r7, #22]
    } while(shifter);
 8000ffc:	8afb      	ldrh	r3, [r7, #22]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1de      	bne.n	8000fc0 <calculateCRC+0x48>
  for (int i = 0; i < len + 2; i += 2) {
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3302      	adds	r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	3302      	adds	r3, #2
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbbd      	blt.n	8000f8e <calculateCRC+0x16>
  }
  return crc;
 8001012:	8a7b      	ldrh	r3, [r7, #18]
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <EnableMotor>:

osStatus_t EnableMotor(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Register for Motor Control */
	command[0] = 0x60;
 800102c:	2360      	movs	r3, #96	; 0x60
 800102e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	data[0] = 0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 8001044:	2300      	movs	r3, #0
 8001046:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x06;
 800104a:	2306      	movs	r3, #6
 800104c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001050:	f107 0218 	add.w	r2, r7, #24
 8001054:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f957 	bl	8001310 <WriteCommand>
 8001062:	6378      	str	r0, [r7, #52]	; 0x34

	/* Register for Motor Control */
	command[0] = 0x60;
 8001064:	2360      	movs	r3, #96	; 0x60
 8001066:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	/* Fully Enable Controller */
	data[0] = 0x00;
 8001070:	2300      	movs	r3, #0
 8001072:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x0F;
 8001082:	230f      	movs	r3, #15
 8001084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001088:	f107 0218 	add.w	r2, r7, #24
 800108c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f93b 	bl	8001310 <WriteCommand>
 800109a:	6378      	str	r0, [r7, #52]	; 0x34


	/* Check if Motor is enabled */
	uint8_t rx_buffer_read[20];

	command[0] = 0x60;
 800109c:	2360      	movs	r3, #96	; 0x60
 800109e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x41;
 80010a2:	2341      	movs	r3, #65	; 0x41
 80010a4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	status = ReadCommand(command, rx_buffer_read);
 80010a8:	1d3a      	adds	r2, r7, #4
 80010aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f9b1 	bl	8001418 <ReadCommand>
 80010b6:	6378      	str	r0, [r7, #52]	; 0x34

	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
 80010ba:	2b37      	cmp	r3, #55	; 0x37
 80010bc:	d104      	bne.n	80010c8 <EnableMotor+0xa8>
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d101      	bne.n	80010c8 <EnableMotor+0xa8>
		status = osOK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return status;
 80010c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3738      	adds	r7, #56	; 0x38
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <SetPositionMode>:
	status = WriteCommand(command, data, rx_buffer_write);

	return status;
}

osStatus_t SetPositionMode(int8_t position_mode){
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b08a      	sub	sp, #40	; 0x28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
	osStatus_t status = osError;
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t data[4];
	uint8_t rx_buffer_write[20];


	/* Position Mode Register */
	command[0] = 0x60;
 80010e2:	2360      	movs	r3, #96	; 0x60
 80010e4:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x60;
 80010e8:	2360      	movs	r3, #96	; 0x60
 80010ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


	/* Enable Cyclic Sync Position Mode */
	data[0] = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80010f2:	2300      	movs	r3, #0
 80010f4:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80010f6:	2300      	movs	r3, #0
 80010f8:	77bb      	strb	r3, [r7, #30]
	data[3] = position_mode;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 80010fe:	f107 0208 	add.w	r2, r7, #8
 8001102:	f107 011c 	add.w	r1, r7, #28
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f900 	bl	8001310 <WriteCommand>
 8001110:	6278      	str	r0, [r7, #36]	; 0x24

	return status;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001114:	4618      	mov	r0, r3
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <MoveToPositionPPM>:

	return status;

}

osStatus_t MoveToPositionPPM(int32_t position){
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	osStatus_t status = osError;
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Write Desired Position */
	command[0] = 0x60;
 800112a:	2360      	movs	r3, #96	; 0x60
 800112c:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x7A;
 8001130:	237a      	movs	r3, #122	; 0x7a
 8001132:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = (position >> 24) & 0xFF;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	0e1b      	lsrs	r3, r3, #24
 800113a:	b2db      	uxtb	r3, r3
 800113c:	773b      	strb	r3, [r7, #28]
	data[1] = (position >> 16) & 0xFF;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	141b      	asrs	r3, r3, #16
 8001142:	b2db      	uxtb	r3, r3
 8001144:	777b      	strb	r3, [r7, #29]
	data[2] = (position >> 8) & 0xFF;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	121b      	asrs	r3, r3, #8
 800114a:	b2db      	uxtb	r3, r3
 800114c:	77bb      	strb	r3, [r7, #30]
	data[3] = position & 0xFF;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001154:	f107 0208 	add.w	r2, r7, #8
 8001158:	f107 011c 	add.w	r1, r7, #28
 800115c:	f107 0320 	add.w	r3, r7, #32
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f8d5 	bl	8001310 <WriteCommand>
 8001166:	6278      	str	r0, [r7, #36]	; 0x24

	/* Goto Position */
	command[0] = 0x60;
 8001168:	2360      	movs	r3, #96	; 0x60
 800116a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800116e:	2340      	movs	r3, #64	; 0x40
 8001170:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001174:	2300      	movs	r3, #0
 8001176:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001178:	2300      	movs	r3, #0
 800117a:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 800117c:	2300      	movs	r3, #0
 800117e:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x3F;
 8001180:	233f      	movs	r3, #63	; 0x3f
 8001182:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	f107 011c 	add.w	r1, r7, #28
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f8bd 	bl	8001310 <WriteCommand>
 8001196:	6278      	str	r0, [r7, #36]	; 0x24

	/* Disabe Movement Again */
	command[0] = 0x60;
 8001198:	2360      	movs	r3, #96	; 0x60
 800119a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800119e:	2340      	movs	r3, #64	; 0x40
 80011a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 80011a4:	2300      	movs	r3, #0
 80011a6:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80011a8:	2300      	movs	r3, #0
 80011aa:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80011ac:	2300      	movs	r3, #0
 80011ae:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x0F;
 80011b0:	230f      	movs	r3, #15
 80011b2:	77fb      	strb	r3, [r7, #31]

	/* Goto Position */
	status = WriteCommand(command, data, rx_buffer_write);
 80011b4:	f107 0208 	add.w	r2, r7, #8
 80011b8:	f107 011c 	add.w	r1, r7, #28
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f8a5 	bl	8001310 <WriteCommand>
 80011c6:	6278      	str	r0, [r7, #36]	; 0x24


	return status;
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <ConfigurePPM>:

osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b08c      	sub	sp, #48	; 0x30
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]

	osStatus_t status = osError;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Configure desired Velocity to be reached during Position Change */
	command[0] = 0x60;
 80011e4:	2360      	movs	r3, #96	; 0x60
 80011e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x81;
 80011ea:	2381      	movs	r3, #129	; 0x81
 80011ec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (velocity >> 24) & 0xFF;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	0e1b      	lsrs	r3, r3, #24
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (velocity >> 16) & 0xFF;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	141b      	asrs	r3, r3, #16
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (velocity >> 8) & 0xFF;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	121b      	asrs	r3, r3, #8
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = velocity & 0xFF;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 8001216:	f107 0210 	add.w	r2, r7, #16
 800121a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f874 	bl	8001310 <WriteCommand>
 8001228:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 800122a:	2360      	movs	r3, #96	; 0x60
 800122c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x83;
 8001230:	2383      	movs	r3, #131	; 0x83
 8001232:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (acceleration >> 24) & 0xFF;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	0e1b      	lsrs	r3, r3, #24
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (acceleration >> 16) & 0xFF;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	141b      	asrs	r3, r3, #16
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (acceleration >> 8) & 0xFF;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	121b      	asrs	r3, r3, #8
 800124e:	b2db      	uxtb	r3, r3
 8001250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = acceleration & 0xFF;
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 800125c:	f107 0210 	add.w	r2, r7, #16
 8001260:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f851 	bl	8001310 <WriteCommand>
 800126e:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 8001270:	2360      	movs	r3, #96	; 0x60
 8001272:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x84;
 8001276:	2384      	movs	r3, #132	; 0x84
 8001278:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (deceleration >> 24) & 0xFF;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	0e1b      	lsrs	r3, r3, #24
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (deceleration >> 16) & 0xFF;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	141b      	asrs	r3, r3, #16
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (deceleration >> 8) & 0xFF;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	121b      	asrs	r3, r3, #8
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = deceleration & 0xFF;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 80012a2:	f107 0210 	add.w	r2, r7, #16
 80012a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f82e 	bl	8001310 <WriteCommand>
 80012b4:	62f8      	str	r0, [r7, #44]	; 0x2c

	return status;
 80012b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3730      	adds	r7, #48	; 0x30
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <GetPosition>:

osStatus_t GetPosition(int32_t *position){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

	osStatus_t status = osError;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t command[2];
	uint8_t rx_buffer_read[20];

	/* Register where the Current Position is written */
	command[0] = 0x60;
 80012ce:	2360      	movs	r3, #96	; 0x60
 80012d0:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x64;
 80012d4:	2364      	movs	r3, #100	; 0x64
 80012d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	status = ReadCommand(command, rx_buffer_read);
 80012da:	f107 020c 	add.w	r2, r7, #12
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 f897 	bl	8001418 <ReadCommand>
 80012ea:	6278      	str	r0, [r7, #36]	; 0x24

	*position = rx_buffer_read[6] +
 80012ec:	7cbb      	ldrb	r3, [r7, #18]
 80012ee:	461a      	mov	r2, r3
			(rx_buffer_read[7] << 8) +
 80012f0:	7cfb      	ldrb	r3, [r7, #19]
 80012f2:	021b      	lsls	r3, r3, #8
	*position = rx_buffer_read[6] +
 80012f4:	441a      	add	r2, r3
			(rx_buffer_read[8] << 16) +
 80012f6:	7d3b      	ldrb	r3, [r7, #20]
 80012f8:	041b      	lsls	r3, r3, #16
			(rx_buffer_read[7] << 8) +
 80012fa:	441a      	add	r2, r3
			(rx_buffer_read[9] << 24);
 80012fc:	7d7b      	ldrb	r3, [r7, #21]
 80012fe:	061b      	lsls	r3, r3, #24
			(rx_buffer_read[8] << 16) +
 8001300:	441a      	add	r2, r3
	*position = rx_buffer_read[6] +
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]

	return status;
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24


}
 8001308:	4618      	mov	r0, r3
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <WriteCommand>:

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 8001310:	b580      	push	{r7, lr}
 8001312:	b08c      	sub	sp, #48	; 0x30
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	osStatus_t status = osError;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t byte_stream_write[14] = { 0 };
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	819a      	strh	r2, [r3, #12]

	byte_stream_write[0] = 0x90;			// DLE
 8001330:	2390      	movs	r3, #144	; 0x90
 8001332:	773b      	strb	r3, [r7, #28]
	byte_stream_write[1] = 0x02;			// STX
 8001334:	2302      	movs	r3, #2
 8001336:	777b      	strb	r3, [r7, #29]
	byte_stream_write[2] = 0x68;			// Write Object
 8001338:	2368      	movs	r3, #104	; 0x68
 800133a:	77bb      	strb	r3, [r7, #30]
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 800133c:	2304      	movs	r3, #4
 800133e:	77fb      	strb	r3, [r7, #31]
	byte_stream_write[4] = 0x01;			// Node ID
 8001340:	2301      	movs	r3, #1
 8001342:	f887 3020 	strb.w	r3, [r7, #32]
	byte_stream_write[5] = command[1];		// Index Low Byte
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	785b      	ldrb	r3, [r3, #1]
 800134a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	byte_stream_write[6] = command[0];		// Index High byte
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	byte_stream_write[7] = 0x00;			// Subindex of object
 8001356:	2300      	movs	r3, #0
 8001358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	byte_stream_write[8] = data[3];			// Data - low byte
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	78db      	ldrb	r3, [r3, #3]
 8001360:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	byte_stream_write[9] = data[2];			// Data
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	789b      	ldrb	r3, [r3, #2]
 8001368:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	byte_stream_write[10] = data[1];		// Data
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	785b      	ldrb	r3, [r3, #1]
 8001370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	byte_stream_write[11] = data[0];		// Data - high byte
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	811a      	strh	r2, [r3, #8]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	f107 021e 	add.w	r2, r7, #30
 8001390:	6810      	ldr	r0, [r2, #0]
 8001392:	6851      	ldr	r1, [r2, #4]
 8001394:	c303      	stmia	r3!, {r0, r1}
 8001396:	8912      	ldrh	r2, [r2, #8]
 8001398:	801a      	strh	r2, [r3, #0]

	uint16_t crc_calc = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	857b      	strh	r3, [r7, #42]	; 0x2a
	crc_calc = calculateCRC(crc_data_array, 10);
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	210a      	movs	r1, #10
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fde7 	bl	8000f78 <calculateCRC>
 80013aa:	4603      	mov	r3, r0
 80013ac:	857b      	strh	r3, [r7, #42]	; 0x2a

	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 80013ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 80013b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 80013c2:	f107 011c 	add.w	r1, r7, #28
 80013c6:	230a      	movs	r3, #10
 80013c8:	220e      	movs	r2, #14
 80013ca:	4812      	ldr	r0, [pc, #72]	; (8001414 <WriteCommand+0x104>)
 80013cc:	f00b f9ce 	bl	800c76c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 20, 10);
 80013d0:	230a      	movs	r3, #10
 80013d2:	2214      	movs	r2, #20
 80013d4:	6879      	ldr	r1, [r7, #4]
 80013d6:	480f      	ldr	r0, [pc, #60]	; (8001414 <WriteCommand+0x104>)
 80013d8:	f00b fa59 	bl	800c88e <HAL_UART_Receive>

	/* Check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3307      	adds	r3, #7
 80013e0:	781a      	ldrb	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3306      	adds	r3, #6
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3305      	adds	r3, #5
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3304      	adds	r3, #4
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <WriteCommand+0xf8>
		status = osOK;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	return status;
 8001408:	6afb      	ldr	r3, [r7, #44]	; 0x2c

}
 800140a:	4618      	mov	r0, r3
 800140c:	3730      	adds	r7, #48	; 0x30
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200096f4 	.word	0x200096f4

08001418 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
	osStatus_t status = osError;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	61fb      	str	r3, [r7, #28]

	uint8_t byte_stream_read[10];

	byte_stream_read[0] = 0x90;				// DLE
 8001428:	2390      	movs	r3, #144	; 0x90
 800142a:	743b      	strb	r3, [r7, #16]
	byte_stream_read[1] = 0x02;				// STX
 800142c:	2302      	movs	r3, #2
 800142e:	747b      	strb	r3, [r7, #17]
	byte_stream_read[2] = 0x60;				// Read Object
 8001430:	2360      	movs	r3, #96	; 0x60
 8001432:	74bb      	strb	r3, [r7, #18]
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 8001434:	2302      	movs	r3, #2
 8001436:	74fb      	strb	r3, [r7, #19]
	byte_stream_read[4] = 0x01;				// Node ID
 8001438:	2301      	movs	r3, #1
 800143a:	753b      	strb	r3, [r7, #20]
	byte_stream_read[5] = command[1];		// Index Low Byte
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	785b      	ldrb	r3, [r3, #1]
 8001440:	757b      	strb	r3, [r7, #21]
	byte_stream_read[6] = command[0];		// Index High byte
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	75bb      	strb	r3, [r7, #22]
	byte_stream_read[7] = 0x00;				// Subindex of object
 8001448:	2300      	movs	r3, #0
 800144a:	75fb      	strb	r3, [r7, #23]

	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	809a      	strh	r2, [r3, #4]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	f107 0212 	add.w	r2, r7, #18
 800145e:	6810      	ldr	r0, [r2, #0]
 8001460:	6018      	str	r0, [r3, #0]
 8001462:	8892      	ldrh	r2, [r2, #4]
 8001464:	809a      	strh	r2, [r3, #4]

	uint16_t crc_calc = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	837b      	strh	r3, [r7, #26]
	crc_calc = calculateCRC(crc_data_array, 6);
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	2106      	movs	r1, #6
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fd81 	bl	8000f78 <calculateCRC>
 8001476:	4603      	mov	r3, r0
 8001478:	837b      	strh	r3, [r7, #26]

	byte_stream_read[8] = crc_calc & 0xFF;;				// CRC low byte
 800147a:	8b7b      	ldrh	r3, [r7, #26]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	763b      	strb	r3, [r7, #24]
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001480:	8b7b      	ldrh	r3, [r7, #26]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	b29b      	uxth	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart7, byte_stream_read, 10, 10);
 800148a:	f107 0110 	add.w	r1, r7, #16
 800148e:	230a      	movs	r3, #10
 8001490:	220a      	movs	r2, #10
 8001492:	4812      	ldr	r0, [pc, #72]	; (80014dc <ReadCommand+0xc4>)
 8001494:	f00b f96a 	bl	800c76c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 20, 10);
 8001498:	230a      	movs	r3, #10
 800149a:	2214      	movs	r2, #20
 800149c:	6839      	ldr	r1, [r7, #0]
 800149e:	480f      	ldr	r0, [pc, #60]	; (80014dc <ReadCommand+0xc4>)
 80014a0:	f00b f9f5 	bl	800c88e <HAL_UART_Receive>

	/* check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	3307      	adds	r3, #7
 80014a8:	781a      	ldrb	r2, [r3, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	3306      	adds	r3, #6
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	3305      	adds	r3, #5
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	3304      	adds	r3, #4
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <ReadCommand+0xb8>
		status = osOK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
	}
	return status;
 80014d0:	69fb      	ldr	r3, [r7, #28]

}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200096f4 	.word	0x200096f4

080014e0 <_gps_search_start>:

#include "GPS/gps.h"

const uint8_t ubxgga[HEADER_SIZE] = {'G','G','A'};

uint32_t _gps_search_start(uint8_t *arr){
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 80014e8:	2303      	movs	r3, #3
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	e01c      	b.n	8001528 <_gps_search_start+0x48>
			{
			  if(arr[i-2] == ubxgga[0] && arr[i-1] == ubxgga[1] && arr[i] == ubxgga[2])
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3b02      	subs	r3, #2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2247      	movs	r2, #71	; 0x47
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d111      	bne.n	8001522 <_gps_search_start+0x42>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3b01      	subs	r3, #1
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2247      	movs	r2, #71	; 0x47
 800150a:	4293      	cmp	r3, r2
 800150c:	d109      	bne.n	8001522 <_gps_search_start+0x42>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2241      	movs	r2, #65	; 0x41
 8001518:	4293      	cmp	r3, r2
 800151a:	d102      	bne.n	8001522 <_gps_search_start+0x42>
			    return i+1;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	3301      	adds	r3, #1
 8001520:	e008      	b.n	8001534 <_gps_search_start+0x54>
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3301      	adds	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f240 32a1 	movw	r2, #929	; 0x3a1
 800152e:	4293      	cmp	r3, r2
 8001530:	dddd      	ble.n	80014ee <_gps_search_start+0xe>
			}
	return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_parse_data>:

uint8_t _parse_data (struct gps_device *dev, uint8_t* data){
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]


	if (data[22] == 'N' || data[22] == 'S'){
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	3316      	adds	r3, #22
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b4e      	cmp	r3, #78	; 0x4e
 8001552:	d005      	beq.n	8001560 <_parse_data+0x20>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	3316      	adds	r3, #22
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b53      	cmp	r3, #83	; 0x53
 800155c:	f040 81e7 	bne.w	800192e <_parse_data+0x3ee>

		// ASCII to decimal conversion
		for(int i = 0; i < DATA_SIZE; i++) data[i] = data[i]-48;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	e00c      	b.n	8001580 <_parse_data+0x40>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	4413      	add	r3, r2
 800156c:	781a      	ldrb	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	440b      	add	r3, r1
 8001574:	3a30      	subs	r2, #48	; 0x30
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3301      	adds	r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b45      	cmp	r3, #69	; 0x45
 8001584:	ddef      	ble.n	8001566 <_parse_data+0x26>


		dev->data.hour = data[1]*10 + data[2];
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	461a      	mov	r2, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	3302      	adds	r3, #2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	609a      	str	r2, [r3, #8]
		dev->data.minute = data[3]*10 + data[4];
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	3303      	adds	r3, #3
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	461a      	mov	r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3304      	adds	r3, #4
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60da      	str	r2, [r3, #12]
		dev->data.second = data[5]*10 + data[6];
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	3305      	adds	r3, #5
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	461a      	mov	r2, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	3306      	adds	r3, #6
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	4413      	add	r3, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	611a      	str	r2, [r3, #16]

		dev->data.lat_deg = data[11]*10 +data[12];
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	330b      	adds	r3, #11
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	330c      	adds	r3, #12
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4413      	add	r3, r2
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	751a      	strb	r2, [r3, #20]
		dev->data.lat_decimal = (data[13]*1e7 + data[14]*1e6 + data[16]*1e5 + data[17]*1e4 + data[18]*1e3 + data[19]*1e2 + data[20])/6;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	330d      	adds	r3, #13
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffaa 	bl	8000564 <__aeabi_i2d>
 8001610:	a3cb      	add	r3, pc, #812	; (adr r3, 8001940 <_parse_data+0x400>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7ff f80f 	bl	8000638 <__aeabi_dmul>
 800161a:	4603      	mov	r3, r0
 800161c:	460c      	mov	r4, r1
 800161e:	4625      	mov	r5, r4
 8001620:	461c      	mov	r4, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	330e      	adds	r3, #14
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff9b 	bl	8000564 <__aeabi_i2d>
 800162e:	a3c6      	add	r3, pc, #792	; (adr r3, 8001948 <_parse_data+0x408>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff f800 	bl	8000638 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4620      	mov	r0, r4
 800163e:	4629      	mov	r1, r5
 8001640:	f7fe fe44 	bl	80002cc <__adddf3>
 8001644:	4603      	mov	r3, r0
 8001646:	460c      	mov	r4, r1
 8001648:	4625      	mov	r5, r4
 800164a:	461c      	mov	r4, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	3310      	adds	r3, #16
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff86 	bl	8000564 <__aeabi_i2d>
 8001658:	a3bd      	add	r3, pc, #756	; (adr r3, 8001950 <_parse_data+0x410>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7fe ffeb 	bl	8000638 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7fe fe2f 	bl	80002cc <__adddf3>
 800166e:	4603      	mov	r3, r0
 8001670:	460c      	mov	r4, r1
 8001672:	4625      	mov	r5, r4
 8001674:	461c      	mov	r4, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3311      	adds	r3, #17
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff71 	bl	8000564 <__aeabi_i2d>
 8001682:	a3b5      	add	r3, pc, #724	; (adr r3, 8001958 <_parse_data+0x418>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7fe ffd6 	bl	8000638 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4620      	mov	r0, r4
 8001692:	4629      	mov	r1, r5
 8001694:	f7fe fe1a 	bl	80002cc <__adddf3>
 8001698:	4603      	mov	r3, r0
 800169a:	460c      	mov	r4, r1
 800169c:	4625      	mov	r5, r4
 800169e:	461c      	mov	r4, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	3312      	adds	r3, #18
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff5c 	bl	8000564 <__aeabi_i2d>
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	4bab      	ldr	r3, [pc, #684]	; (8001960 <_parse_data+0x420>)
 80016b2:	f7fe ffc1 	bl	8000638 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4620      	mov	r0, r4
 80016bc:	4629      	mov	r1, r5
 80016be:	f7fe fe05 	bl	80002cc <__adddf3>
 80016c2:	4603      	mov	r3, r0
 80016c4:	460c      	mov	r4, r1
 80016c6:	4625      	mov	r5, r4
 80016c8:	461c      	mov	r4, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	3313      	adds	r3, #19
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff47 	bl	8000564 <__aeabi_i2d>
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4ba2      	ldr	r3, [pc, #648]	; (8001964 <_parse_data+0x424>)
 80016dc:	f7fe ffac 	bl	8000638 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe fdf0 	bl	80002cc <__adddf3>
 80016ec:	4603      	mov	r3, r0
 80016ee:	460c      	mov	r4, r1
 80016f0:	4625      	mov	r5, r4
 80016f2:	461c      	mov	r4, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	3314      	adds	r3, #20
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff32 	bl	8000564 <__aeabi_i2d>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4620      	mov	r0, r4
 8001706:	4629      	mov	r1, r5
 8001708:	f7fe fde0 	bl	80002cc <__adddf3>
 800170c:	4603      	mov	r3, r0
 800170e:	460c      	mov	r4, r1
 8001710:	4618      	mov	r0, r3
 8001712:	4621      	mov	r1, r4
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b93      	ldr	r3, [pc, #588]	; (8001968 <_parse_data+0x428>)
 800171a:	f7ff f8b7 	bl	800088c <__aeabi_ddiv>
 800171e:	4603      	mov	r3, r0
 8001720:	460c      	mov	r4, r1
 8001722:	4618      	mov	r0, r3
 8001724:	4621      	mov	r1, r4
 8001726:	f7ff fa37 	bl	8000b98 <__aeabi_d2uiz>
 800172a:	4602      	mov	r2, r0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	619a      	str	r2, [r3, #24]

		dev->data.lon_deg = data[25]*10 +data[26];
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	3319      	adds	r3, #25
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	0092      	lsls	r2, r2, #2
 800173a:	4413      	add	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	b2da      	uxtb	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	331a      	adds	r3, #26
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	b2da      	uxtb	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	771a      	strb	r2, [r3, #28]
		dev->data.lon_decimal = (data[27]*1e7 + data[28]*1e6 + data[30]*1e5 + data[31]*1e4 + data[32]*1e3 + data[33]*1e2 + data[34])/6;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	331b      	adds	r3, #27
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe ff05 	bl	8000564 <__aeabi_i2d>
 800175a:	a379      	add	r3, pc, #484	; (adr r3, 8001940 <_parse_data+0x400>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7fe ff6a 	bl	8000638 <__aeabi_dmul>
 8001764:	4603      	mov	r3, r0
 8001766:	460c      	mov	r4, r1
 8001768:	4625      	mov	r5, r4
 800176a:	461c      	mov	r4, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	331c      	adds	r3, #28
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fef6 	bl	8000564 <__aeabi_i2d>
 8001778:	a373      	add	r3, pc, #460	; (adr r3, 8001948 <_parse_data+0x408>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe ff5b 	bl	8000638 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4620      	mov	r0, r4
 8001788:	4629      	mov	r1, r5
 800178a:	f7fe fd9f 	bl	80002cc <__adddf3>
 800178e:	4603      	mov	r3, r0
 8001790:	460c      	mov	r4, r1
 8001792:	4625      	mov	r5, r4
 8001794:	461c      	mov	r4, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	331e      	adds	r3, #30
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fee1 	bl	8000564 <__aeabi_i2d>
 80017a2:	a36b      	add	r3, pc, #428	; (adr r3, 8001950 <_parse_data+0x410>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7fe ff46 	bl	8000638 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4620      	mov	r0, r4
 80017b2:	4629      	mov	r1, r5
 80017b4:	f7fe fd8a 	bl	80002cc <__adddf3>
 80017b8:	4603      	mov	r3, r0
 80017ba:	460c      	mov	r4, r1
 80017bc:	4625      	mov	r5, r4
 80017be:	461c      	mov	r4, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	331f      	adds	r3, #31
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fecc 	bl	8000564 <__aeabi_i2d>
 80017cc:	a362      	add	r3, pc, #392	; (adr r3, 8001958 <_parse_data+0x418>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7fe ff31 	bl	8000638 <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4620      	mov	r0, r4
 80017dc:	4629      	mov	r1, r5
 80017de:	f7fe fd75 	bl	80002cc <__adddf3>
 80017e2:	4603      	mov	r3, r0
 80017e4:	460c      	mov	r4, r1
 80017e6:	4625      	mov	r5, r4
 80017e8:	461c      	mov	r4, r3
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3320      	adds	r3, #32
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe feb7 	bl	8000564 <__aeabi_i2d>
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	4b59      	ldr	r3, [pc, #356]	; (8001960 <_parse_data+0x420>)
 80017fc:	f7fe ff1c 	bl	8000638 <__aeabi_dmul>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4620      	mov	r0, r4
 8001806:	4629      	mov	r1, r5
 8001808:	f7fe fd60 	bl	80002cc <__adddf3>
 800180c:	4603      	mov	r3, r0
 800180e:	460c      	mov	r4, r1
 8001810:	4625      	mov	r5, r4
 8001812:	461c      	mov	r4, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	3321      	adds	r3, #33	; 0x21
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fea2 	bl	8000564 <__aeabi_i2d>
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <_parse_data+0x424>)
 8001826:	f7fe ff07 	bl	8000638 <__aeabi_dmul>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4620      	mov	r0, r4
 8001830:	4629      	mov	r1, r5
 8001832:	f7fe fd4b 	bl	80002cc <__adddf3>
 8001836:	4603      	mov	r3, r0
 8001838:	460c      	mov	r4, r1
 800183a:	4625      	mov	r5, r4
 800183c:	461c      	mov	r4, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	3322      	adds	r3, #34	; 0x22
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe8d 	bl	8000564 <__aeabi_i2d>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f7fe fd3b 	bl	80002cc <__adddf3>
 8001856:	4603      	mov	r3, r0
 8001858:	460c      	mov	r4, r1
 800185a:	4618      	mov	r0, r3
 800185c:	4621      	mov	r1, r4
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <_parse_data+0x428>)
 8001864:	f7ff f812 	bl	800088c <__aeabi_ddiv>
 8001868:	4603      	mov	r3, r0
 800186a:	460c      	mov	r4, r1
 800186c:	4618      	mov	r0, r3
 800186e:	4621      	mov	r1, r4
 8001870:	f7ff f992 	bl	8000b98 <__aeabi_d2uiz>
 8001874:	4602      	mov	r2, r0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	621a      	str	r2, [r3, #32]

		dev->data.fix = data[38];
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		dev->data.satellite = data[40]*10 + data[41];
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	3328      	adds	r3, #40	; 0x28
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	0092      	lsls	r2, r2, #2
 8001890:	4413      	add	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	b2da      	uxtb	r2, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	3329      	adds	r3, #41	; 0x29
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4413      	add	r3, r2
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		dev->data.HDOP = data[43]*100+data[45]*10+data[46];
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	332b      	adds	r3, #43	; 0x2b
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	0092      	lsls	r2, r2, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	0091      	lsls	r1, r2, #2
 80018b8:	461a      	mov	r2, r3
 80018ba:	460b      	mov	r3, r1
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	332d      	adds	r3, #45	; 0x2d
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	4619      	mov	r1, r3
 80018cc:	0089      	lsls	r1, r1, #2
 80018ce:	440b      	add	r3, r1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	332e      	adds	r3, #46	; 0x2e
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4413      	add	r3, r2
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	84da      	strh	r2, [r3, #38]	; 0x26

		dev->data.altitude= data[48]*100+data[49]*10+data[50];
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	3330      	adds	r3, #48	; 0x30
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	461a      	mov	r2, r3
 80018f8:	0091      	lsls	r1, r2, #2
 80018fa:	461a      	mov	r2, r3
 80018fc:	460b      	mov	r3, r1
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	b29a      	uxth	r2, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	3331      	adds	r3, #49	; 0x31
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	4619      	mov	r1, r3
 800190e:	0089      	lsls	r1, r1, #2
 8001910:	440b      	add	r3, r1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	b29b      	uxth	r3, r3
 8001916:	4413      	add	r3, r2
 8001918:	b29a      	uxth	r2, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	3332      	adds	r3, #50	; 0x32
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b29b      	uxth	r3, r3
 8001922:	4413      	add	r3, r2
 8001924:	b29a      	uxth	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	851a      	strh	r2, [r3, #40]	; 0x28
	}
	else {
		dev->data.fix = 0;
		return 0;
	}
	return 1;
 800192a:	2301      	movs	r3, #1
 800192c:	e004      	b.n	8001938 <_parse_data+0x3f8>
		dev->data.fix = 0;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return 0;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bdb0      	pop	{r4, r5, r7, pc}
 8001940:	00000000 	.word	0x00000000
 8001944:	416312d0 	.word	0x416312d0
 8001948:	00000000 	.word	0x00000000
 800194c:	412e8480 	.word	0x412e8480
 8001950:	00000000 	.word	0x00000000
 8001954:	40f86a00 	.word	0x40f86a00
 8001958:	00000000 	.word	0x00000000
 800195c:	40c38800 	.word	0x40c38800
 8001960:	408f4000 	.word	0x408f4000
 8001964:	40590000 	.word	0x40590000
 8001968:	40180000 	.word	0x40180000

0800196c <gps_dma_init>:


void gps_dma_init(struct gps_device *dev){
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(dev->uart_bus);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4618      	mov	r0, r3
 800197a:	f00b f973 	bl	800cc64 <HAL_UART_DMAStop>

	HAL_UART_Receive_DMA(dev->uart_bus, gps_data[dev->id], BUFFER_SIZE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6858      	ldr	r0, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198c:	fb03 f302 	mul.w	r3, r3, r2
 8001990:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <gps_dma_init+0x44>)
 8001992:	4413      	add	r3, r2
 8001994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001998:	4619      	mov	r1, r3
 800199a:	f00b f845 	bl	800ca28 <HAL_UART_Receive_DMA>

	HAL_UART_DMAResume(dev->uart_bus);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f00b f918 	bl	800cbd8 <HAL_UART_DMAResume>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20008a64 	.word	0x20008a64

080019b4 <gps_read_sensor>:



uint8_t gps_read_sensor (struct gps_device *dev){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAPause(dev->uart_bus);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f00b f8b5 	bl	800cb30 <HAL_UART_DMAPause>

	uint32_t data_start = _gps_search_start(gps_data[dev->id]);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d0:	fb03 f302 	mul.w	r3, r3, r2
 80019d4:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <gps_read_sensor+0x8c>)
 80019d6:	4413      	add	r3, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fd81 	bl	80014e0 <_gps_search_start>
 80019de:	60f8      	str	r0, [r7, #12]
	if (data_start > 0) memcpy(gps_gga[dev->id], gps_data[dev->id] + data_start, DATA_SIZE);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d016      	beq.n	8001a14 <gps_read_sensor+0x60>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	2346      	movs	r3, #70	; 0x46
 80019ee:	fb03 f302 	mul.w	r3, r3, r2
 80019f2:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <gps_read_sensor+0x90>)
 80019f4:	1898      	adds	r0, r3, r2
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a00:	fb03 f302 	mul.w	r3, r3, r2
 8001a04:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <gps_read_sensor+0x8c>)
 8001a06:	441a      	add	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	2246      	movs	r2, #70	; 0x46
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f017 fc3e 	bl	8019290 <memcpy>

	HAL_UART_DMAResume(dev->uart_bus);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f00b f8dd 	bl	800cbd8 <HAL_UART_DMAResume>

	return _parse_data(dev, gps_gga[dev->id]);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	2346      	movs	r3, #70	; 0x46
 8001a26:	fb03 f302 	mul.w	r3, r3, r2
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <gps_read_sensor+0x90>)
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff fd85 	bl	8001540 <_parse_data>
 8001a36:	4603      	mov	r3, r0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20008a64 	.word	0x20008a64
 8001a44:	200088c0 	.word	0x200088c0

08001a48 <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	6018      	str	r0, [r3, #0]

    const double coeff0[POLY_DEG+1] = {};
 8001a54:	4a27      	ldr	r2, [pc, #156]	; (8001af4 <init_coeff+0xac>)
 8001a56:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	22f8      	movs	r2, #248	; 0xf8
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f017 fc16 	bl	8019290 <memcpy>
    const double coeff1[POLY_DEG+1] = {};
 8001a64:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001a68:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <init_coeff+0xb0>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	23f8      	movs	r3, #248	; 0xf8
 8001a70:	461a      	mov	r2, r3
 8001a72:	f017 fc0d 	bl	8019290 <memcpy>
    const double coeff2[POLY_DEG+1] = {};
 8001a76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001a7a:	4a20      	ldr	r2, [pc, #128]	; (8001afc <init_coeff+0xb4>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	4611      	mov	r1, r2
 8001a80:	23f8      	movs	r3, #248	; 0xf8
 8001a82:	461a      	mov	r2, r3
 8001a84:	f017 fc04 	bl	8019290 <memcpy>
    const double coeff3[POLY_DEG+1] = {};
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <init_coeff+0xb8>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	4611      	mov	r1, r2
 8001a92:	23f8      	movs	r3, #248	; 0xf8
 8001a94:	461a      	mov	r2, r3
 8001a96:	f017 fbfb 	bl	8019290 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3340      	adds	r3, #64	; 0x40
 8001aa0:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8001aa4:	22f8      	movs	r2, #248	; 0xf8
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f017 fbf2 	bl	8019290 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001ab4:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001ab8:	22f8      	movs	r2, #248	; 0xf8
 8001aba:	4618      	mov	r0, r3
 8001abc:	f017 fbe8 	bl	8019290 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001ac8:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001acc:	22f8      	movs	r2, #248	; 0xf8
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f017 fbde 	bl	8019290 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001adc:	f107 0108 	add.w	r1, r7, #8
 8001ae0:	22f8      	movs	r2, #248	; 0xf8
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f017 fbd4 	bl	8019290 <memcpy>
}
 8001ae8:	bf00      	nop
 8001aea:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	0801b810 	.word	0x0801b810
 8001af8:	0801b908 	.word	0x0801b908
 8001afc:	0801ba00 	.word	0x0801ba00
 8001b00:	0801baf8 	.word	0x0801baf8

08001b04 <control_data_reset>:
        }
    }
}


void control_data_reset(control_data_t *control_data){
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
    control_data->control_input = 0;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
    control_data->reference_error = 0;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
    control_data->integrated_error = 0;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <control_data_init>:

void control_data_init(control_data_t *control_data){
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
    control_data_reset(control_data);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ffe3 	bl	8001b04 <control_data_reset>

    control_data->lowerboundary_aw = 0;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
    control_data->upperboundary_aw = 0;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]

    control_data->safety_counter = 0;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	841a      	strh	r2, [r3, #32]
    control_data->apogee_approach_phase = false;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    init_coeff(control_data);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff73 	bl	8001a48 <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	e00d      	b.n	8001b84 <control_data_init+0x54>
        control_data->gains[i] = 0;
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3305      	adds	r3, #5
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	441a      	add	r2, r3
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	f04f 0400 	mov.w	r4, #0
 8001b7a:	e9c2 3400 	strd	r3, r4, [r2]
    for(int i = 0; i < NUM_GAINS; i++){
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	3301      	adds	r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	ddee      	ble.n	8001b68 <control_data_init+0x38>
    }
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}
	...

08001b94 <compute_test_control_input>:
//    }
//    fprintf(fptr,"\n");
//    fclose(fptr);
//}

void compute_test_control_input(control_data_t *control_data){
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    float control_input = 0.0f;
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
    if(TEST_CONTROLLER_USE_VELOCITY){
        control_input = 0.5f + 0.5f * control_data->sf_velocity / TEST_CONTROLLER_MAX_VELOCITY;
    }
    else {
        control_input = (float)(control_data->sf_ref_altitude_AGL / (float)TEST_CONTROLLER_MAX_ALTITUDE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ba8:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001bac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bb0:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    control_data->control_input = fmaxf(fminf(control_input, 1), 0);
 8001bb4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001bb8:	ed97 0a03 	vldr	s0, [r7, #12]
 8001bbc:	f017 ffe0 	bl	8019b80 <fminf>
 8001bc0:	eef0 7a40 	vmov.f32	s15, s0
 8001bc4:	eddf 0a07 	vldr	s1, [pc, #28]	; 8001be4 <compute_test_control_input+0x50>
 8001bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bcc:	f017 ffbd 	bl	8019b4a <fmaxf>
 8001bd0:	eef0 7a40 	vmov.f32	s15, s0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	edc3 7a00 	vstr	s15, [r3]
}
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	00000000 	.word	0x00000000

08001be8 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, TEMPERATURE_REFERENCE, PRESSURE_REFERENCE);
 8001bf0:	eddf 0a07 	vldr	s1, [pc, #28]	; 8001c10 <init_env+0x28>
 8001bf4:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f80d 	bl	8001c18 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 8001bfe:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f82c 	bl	8001c60 <update_env>
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	47c5e680 	.word	0x47c5e680
 8001c14:	00000000 	.word	0x00000000

08001c18 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c24:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7fe fcad 	bl	8000588 <__aeabi_f2d>
 8001c2e:	a30a      	add	r3, pc, #40	; (adr r3, 8001c58 <calibrate_env+0x40>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f7fe fb4a 	bl	80002cc <__adddf3>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	4621      	mov	r1, r4
 8001c40:	f7fe ffca 	bl	8000bd8 <__aeabi_d2f>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	601a      	str	r2, [r3, #0]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	66666666 	.word	0x66666666
 8001c5c:	40711266 	.word	0x40711266

08001c60 <update_env>:

void update_env(env_t *env, float T) {
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8001c6c:	6838      	ldr	r0, [r7, #0]
 8001c6e:	f7fe fc8b 	bl	8000588 <__aeabi_f2d>
 8001c72:	a317      	add	r3, pc, #92	; (adr r3, 8001cd0 <update_env+0x70>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe fb28 	bl	80002cc <__adddf3>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	460c      	mov	r4, r1
 8001c80:	4618      	mov	r0, r3
 8001c82:	4621      	mov	r1, r4
 8001c84:	f7fe ffa8 	bl	8000bd8 <__aeabi_d2f>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc78 	bl	8000588 <__aeabi_f2d>
 8001c98:	a30f      	add	r3, pc, #60	; (adr r3, 8001cd8 <update_env+0x78>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	f7fe fccb 	bl	8000638 <__aeabi_dmul>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	460c      	mov	r4, r1
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	4621      	mov	r1, r4
 8001caa:	f7fe ff95 	bl	8000bd8 <__aeabi_d2f>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001cb4:	ee00 3a10 	vmov	s0, r3
 8001cb8:	f018 f964 	bl	8019f84 <powf>
 8001cbc:	eef0 7a40 	vmov.f32	s15, s0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd90      	pop	{r4, r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	66666666 	.word	0x66666666
 8001cd4:	40711266 	.word	0x40711266
 8001cd8:	8c1557b7 	.word	0x8c1557b7
 8001cdc:	40791e2f 	.word	0x40791e2f

08001ce0 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 8001cec:	edd7 7a00 	vldr	s15, [r7]
 8001cf0:	eef0 6ae7 	vabs.f32	s13, s15
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cfe:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	ee07 3a90 	vmov	s15, r3
}
 8001d08:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001d18:	b5b0      	push	{r4, r5, r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e043      	b.n	8001db4 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d03a      	beq.n	8001dae <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fc23 	bl	8000588 <__aeabi_f2d>
 8001d42:	a322      	add	r3, pc, #136	; (adr r3, 8001dcc <pressure2altitudeAGL+0xb4>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fda0 	bl	800088c <__aeabi_ddiv>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	460c      	mov	r4, r1
 8001d50:	4625      	mov	r5, r4
 8001d52:	461c      	mov	r4, r3
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	ed93 7a00 	vldr	s14, [r3]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d6a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001dc8 <pressure2altitudeAGL+0xb0>
 8001d6e:	eeb0 0a66 	vmov.f32	s0, s13
 8001d72:	f018 f907 	bl	8019f84 <powf>
 8001d76:	eeb0 7a40 	vmov.f32	s14, s0
 8001d7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001d7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d82:	ee17 0a90 	vmov	r0, s15
 8001d86:	f7fe fbff 	bl	8000588 <__aeabi_f2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4620      	mov	r0, r4
 8001d90:	4629      	mov	r1, r5
 8001d92:	f7fe fc51 	bl	8000638 <__aeabi_dmul>
 8001d96:	4603      	mov	r3, r0
 8001d98:	460c      	mov	r4, r1
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001da4:	18d4      	adds	r4, r2, r3
 8001da6:	f7fe ff17 	bl	8000bd8 <__aeabi_d2f>
 8001daa:	4603      	mov	r3, r0
 8001dac:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	dbb7      	blt.n	8001d2c <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 8001dbc:	bf00      	nop
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc4:	f3af 8000 	nop.w
 8001dc8:	3e42c4dc 	.word	0x3e42c4dc
 8001dcc:	76c8b439 	.word	0x76c8b439
 8001dd0:	3f7a9fbe 	.word	0x3f7a9fbe
 8001dd4:	00000000 	.word	0x00000000

08001dd8 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001dd8:	b5b0      	push	{r4, r5, r7, lr}
 8001dda:	ed2d 8b02 	vpush	{d8}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e047      	b.n	8001e80 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d03e      	beq.n	8001e7a <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	ed93 8a00 	vldr	s16, [r3]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fbbb 	bl	8000588 <__aeabi_f2d>
 8001e12:	a323      	add	r3, pc, #140	; (adr r3, 8001ea0 <altitudeAGL2pressure+0xc8>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	f7fe fc0e 	bl	8000638 <__aeabi_dmul>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	4625      	mov	r5, r4
 8001e22:	461c      	mov	r4, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fbad 	bl	8000588 <__aeabi_f2d>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4620      	mov	r0, r4
 8001e34:	4629      	mov	r1, r5
 8001e36:	f7fe fd29 	bl	800088c <__aeabi_ddiv>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	460c      	mov	r4, r1
 8001e3e:	461a      	mov	r2, r3
 8001e40:	4623      	mov	r3, r4
 8001e42:	f04f 0000 	mov.w	r0, #0
 8001e46:	4914      	ldr	r1, [pc, #80]	; (8001e98 <altitudeAGL2pressure+0xc0>)
 8001e48:	f7fe fa3e 	bl	80002c8 <__aeabi_dsub>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	460c      	mov	r4, r1
 8001e50:	4618      	mov	r0, r3
 8001e52:	4621      	mov	r1, r4
 8001e54:	f7fe fec0 	bl	8000bd8 <__aeabi_d2f>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001e9c <altitudeAGL2pressure+0xc4>
 8001e5e:	ee00 3a10 	vmov	s0, r3
 8001e62:	f018 f88f 	bl	8019f84 <powf>
 8001e66:	eef0 7a40 	vmov.f32	s15, s0
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e70:	4413      	add	r3, r2
 8001e72:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001e76:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dbb3      	blt.n	8001df0 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8001e88:	bf00      	nop
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	ecbd 8b02 	vpop	{d8}
 8001e92:	bdb0      	pop	{r4, r5, r7, pc}
 8001e94:	f3af 8000 	nop.w
 8001e98:	3ff00000 	.word	0x3ff00000
 8001e9c:	40a83d87 	.word	0x40a83d87
 8001ea0:	76c8b439 	.word	0x76c8b439
 8001ea4:	3f7a9fbe 	.word	0x3f7a9fbe

08001ea8 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8001ea8:	b5b0      	push	{r4, r5, r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fb65 	bl	8000588 <__aeabi_f2d>
 8001ebe:	a323      	add	r3, pc, #140	; (adr r3, 8001f4c <altitude_gradient+0xa4>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fbb8 	bl	8000638 <__aeabi_dmul>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	460c      	mov	r4, r1
 8001ecc:	4625      	mov	r5, r4
 8001ece:	461c      	mov	r4, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fb57 	bl	8000588 <__aeabi_f2d>
 8001eda:	a31e      	add	r3, pc, #120	; (adr r3, 8001f54 <altitude_gradient+0xac>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe fbaa 	bl	8000638 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4620      	mov	r0, r4
 8001eea:	4629      	mov	r1, r5
 8001eec:	f7fe fcce 	bl	800088c <__aeabi_ddiv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	460c      	mov	r4, r1
 8001ef4:	4625      	mov	r5, r4
 8001ef6:	461c      	mov	r4, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	ed97 7a00 	vldr	s14, [r7]
 8001f02:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f06:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001f48 <altitude_gradient+0xa0>
 8001f0a:	eeb0 0a66 	vmov.f32	s0, s13
 8001f0e:	f018 f839 	bl	8019f84 <powf>
 8001f12:	ee10 3a10 	vmov	r3, s0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fb36 	bl	8000588 <__aeabi_f2d>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4620      	mov	r0, r4
 8001f22:	4629      	mov	r1, r5
 8001f24:	f7fe fb88 	bl	8000638 <__aeabi_dmul>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	4621      	mov	r1, r4
 8001f30:	f7fe fe52 	bl	8000bd8 <__aeabi_d2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	ee07 3a90 	vmov	s15, r3
}
 8001f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bdb0      	pop	{r4, r5, r7, pc}
 8001f48:	bf4f4ec9 	.word	0xbf4f4ec9
 8001f4c:	640f3ea7 	.word	0x640f3ea7
 8001f50:	c071f0fd 	.word	0xc071f0fd
 8001f54:	51eb851f 	.word	0x51eb851f
 8001f58:	40239eb8 	.word	0x40239eb8
 8001f5c:	00000000 	.word	0x00000000

08001f60 <detect_flight_phase>:
#include "Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	f200 80a6 	bhi.w	80020c4 <detect_flight_phase+0x164>
 8001f78:	a201      	add	r2, pc, #4	; (adr r2, 8001f80 <detect_flight_phase+0x20>)
 8001f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7e:	bf00      	nop
 8001f80:	08001f95 	.word	0x08001f95
 8001f84:	080020c5 	.word	0x080020c5
 8001f88:	08001fe3 	.word	0x08001fe3
 8001f8c:	0800202d 	.word	0x0800202d
 8001f90:	08002077 	.word	0x08002077
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa0:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8002160 <detect_flight_phase+0x200>
 8001fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb4:	dc00      	bgt.n	8001fb8 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001fb6:	e087      	b.n	80020c8 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	b25a      	sxtb	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	dd79      	ble.n	80020c8 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	721a      	strb	r2, [r3, #8]
        break;
 8001fe0:	e072      	b.n	80020c8 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fee:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002160 <detect_flight_phase+0x200>
 8001ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffe:	d400      	bmi.n	8002002 <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8002000:	e064      	b.n	80020cc <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3301      	adds	r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	b25a      	sxtb	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800201a:	2b03      	cmp	r3, #3
 800201c:	dd56      	ble.n	80020cc <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2204      	movs	r2, #4
 8002022:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	721a      	strb	r2, [r3, #8]
        break;
 800202a:	e04f      	b.n	80020cc <detect_flight_phase+0x16c>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002038:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002160 <detect_flight_phase+0x200>
 800203c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002040:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002048:	d400      	bmi.n	800204c <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 800204a:	e041      	b.n	80020d0 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	b25a      	sxtb	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002064:	2b03      	cmp	r3, #3
 8002066:	dd33      	ble.n	80020d0 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2205      	movs	r2, #5
 800206c:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	721a      	strb	r2, [r3, #8]
        break;
 8002074:	e02c      	b.n	80020d0 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002082:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002160 <detect_flight_phase+0x200>
 8002086:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800208a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800208e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002096:	d400      	bmi.n	800209a <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8002098:	e01c      	b.n	80020d4 <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	b25a      	sxtb	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	dd0e      	ble.n	80020d4 <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2206      	movs	r2, #6
 80020ba:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	721a      	strb	r2, [r3, #8]
        break;
 80020c2:	e007      	b.n	80020d4 <detect_flight_phase+0x174>

        default:
        break;
 80020c4:	bf00      	nop
 80020c6:	e006      	b.n	80020d6 <detect_flight_phase+0x176>
        break;
 80020c8:	bf00      	nop
 80020ca:	e004      	b.n	80020d6 <detect_flight_phase+0x176>
        break;
 80020cc:	bf00      	nop
 80020ce:	e002      	b.n	80020d6 <detect_flight_phase+0x176>
        break;
 80020d0:	bf00      	nop
 80020d2:	e000      	b.n	80020d6 <detect_flight_phase+0x176>
        break;
 80020d4:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	ee07 3a90 	vmov	s15, r3
 80020de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002160 <detect_flight_phase+0x200>
 80020e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020ea:	eeb0 0a66 	vmov.f32	s0, s13
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff fdf6 	bl	8001ce0 <mach_number>
 80020f4:	eef0 7a40 	vmov.f32	s15, s0
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fa40 	bl	8000588 <__aeabi_f2d>
 8002108:	a311      	add	r3, pc, #68	; (adr r3, 8002150 <detect_flight_phase+0x1f0>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	f7fe fd19 	bl	8000b44 <__aeabi_dcmpge>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2203      	movs	r2, #3
 800211c:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 800211e:	e013      	b.n	8002148 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fa2f 	bl	8000588 <__aeabi_f2d>
 800212a:	a30b      	add	r3, pc, #44	; (adr r3, 8002158 <detect_flight_phase+0x1f8>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe fd08 	bl	8000b44 <__aeabi_dcmpge>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2202      	movs	r2, #2
 800213e:	705a      	strb	r2, [r3, #1]
}
 8002140:	e002      	b.n	8002148 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	705a      	strb	r2, [r3, #1]
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	cccccccd 	.word	0xcccccccd
 8002154:	3ff4cccc 	.word	0x3ff4cccc
 8002158:	9999999a 	.word	0x9999999a
 800215c:	3fe99999 	.word	0x3fe99999
 8002160:	447a0000 	.word	0x447a0000

08002164 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	721a      	strb	r2, [r3, #8]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 8002194:	b5b0      	push	{r4, r5, r7, lr}
 8002196:	b0b0      	sub	sp, #192	; 0xc0
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800219c:	4b45      	ldr	r3, [pc, #276]	; (80022b4 <reset_kf_state+0x120>)
 800219e:	f107 040c 	add.w	r4, r7, #12
 80021a2:	461d      	mov	r5, r3
 80021a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ac:	682b      	ldr	r3, [r5, #0]
 80021ae:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 80021b0:	4a41      	ldr	r2, [pc, #260]	; (80022b8 <reset_kf_state+0x124>)
 80021b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80021b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 80021bc:	4a3e      	ldr	r2, [pc, #248]	; (80022b8 <reset_kf_state+0x124>)
 80021be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80021c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f107 010c 	add.w	r1, r7, #12
 80021ce:	2224      	movs	r2, #36	; 0x24
 80021d0:	4618      	mov	r0, r3
 80021d2:	f017 f85d 	bl	8019290 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3348      	adds	r3, #72	; 0x48
 80021da:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80021de:	220c      	movs	r2, #12
 80021e0:	4618      	mov	r0, r3
 80021e2:	f017 f855 	bl	8019290 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3354      	adds	r3, #84	; 0x54
 80021ea:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80021ee:	220c      	movs	r2, #12
 80021f0:	4618      	mov	r0, r3
 80021f2:	f017 f84d 	bl	8019290 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 800220e:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <reset_kf_state+0x128>)
 8002210:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002214:	461d      	mov	r5, r3
 8002216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800221a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800221c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800221e:	682b      	ldr	r3, [r5, #0]
 8002220:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002228:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800222c:	220c      	movs	r2, #12
 800222e:	4618      	mov	r0, r3
 8002230:	f017 f82e 	bl	8019290 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800223a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800223e:	2224      	movs	r2, #36	; 0x24
 8002240:	4618      	mov	r0, r3
 8002242:	f017 f825 	bl	8019290 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	33b4      	adds	r3, #180	; 0xb4
 800224a:	2204      	movs	r2, #4
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f017 f829 	bl	80192a6 <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	33b8      	adds	r3, #184	; 0xb8
 8002258:	2224      	movs	r2, #36	; 0x24
 800225a:	2100      	movs	r1, #0
 800225c:	4618      	mov	r0, r3
 800225e:	f017 f822 	bl	80192a6 <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002268:	220c      	movs	r2, #12
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f017 f81a 	bl	80192a6 <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002278:	2203      	movs	r2, #3
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f017 f812 	bl	80192a6 <memset>
    kf_state->num_z_active = 0;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3324      	adds	r3, #36	; 0x24
 8002290:	2103      	movs	r1, #3
 8002292:	2003      	movs	r0, #3
 8002294:	f000 fd48 	bl	8002d28 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3360      	adds	r3, #96	; 0x60
 80022a2:	2101      	movs	r1, #1
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 fd3f 	bl	8002d28 <transpose>
}
 80022aa:	bf00      	nop
 80022ac:	37c0      	adds	r7, #192	; 0xc0
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bdb0      	pop	{r4, r5, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	0801bbf0 	.word	0x0801bbf0
 80022b8:	0801bc14 	.word	0x0801bc14
 80022bc:	0801bc20 	.word	0x0801bc20

080022c0 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af04      	add	r7, sp, #16
 80022c6:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f503 7082 	add.w	r0, r3, #260	; 0x104
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80022d6:	2201      	movs	r2, #1
 80022d8:	9201      	str	r2, [sp, #4]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	4603      	mov	r3, r0
 80022de:	460a      	mov	r2, r1
 80022e0:	2103      	movs	r1, #3
 80022e2:	2003      	movs	r0, #3
 80022e4:	f000 ff4a 	bl	800317c <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80022fa:	2200      	movs	r2, #0
 80022fc:	9201      	str	r2, [sp, #4]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4603      	mov	r3, r0
 8002302:	460a      	mov	r2, r1
 8002304:	2101      	movs	r1, #1
 8002306:	2003      	movs	r0, #3
 8002308:	f000 ff38 	bl	800317c <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	f502 7205 	add.w	r2, r2, #532	; 0x214
 800231a:	2101      	movs	r1, #1
 800231c:	9102      	str	r1, [sp, #8]
 800231e:	9201      	str	r2, [sp, #4]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	4603      	mov	r3, r0
 8002324:	2203      	movs	r2, #3
 8002326:	2103      	movs	r1, #3
 8002328:	2003      	movs	r0, #3
 800232a:	f000 fe8d 	bl	8003048 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	33b4      	adds	r3, #180	; 0xb4
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800233e:	2101      	movs	r1, #1
 8002340:	9102      	str	r1, [sp, #8]
 8002342:	9201      	str	r2, [sp, #4]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	4603      	mov	r3, r0
 8002348:	2201      	movs	r2, #1
 800234a:	2101      	movs	r1, #1
 800234c:	2003      	movs	r0, #3
 800234e:	f000 fe7b 	bl	8003048 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3324      	adds	r3, #36	; 0x24
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8002362:	2101      	movs	r1, #1
 8002364:	9102      	str	r1, [sp, #8]
 8002366:	9201      	str	r2, [sp, #4]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	4603      	mov	r3, r0
 800236c:	2203      	movs	r2, #3
 800236e:	2103      	movs	r1, #3
 8002370:	2003      	movs	r0, #3
 8002372:	f000 fe69 	bl	8003048 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f503 700e 	add.w	r0, r3, #568	; 0x238
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3360      	adds	r3, #96	; 0x60
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8002386:	2100      	movs	r1, #0
 8002388:	9102      	str	r1, [sp, #8]
 800238a:	9201      	str	r2, [sp, #4]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	4603      	mov	r3, r0
 8002390:	2203      	movs	r2, #3
 8002392:	2101      	movs	r1, #1
 8002394:	2003      	movs	r0, #3
 8002396:	f000 fe57 	bl	8003048 <matmul>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	336c      	adds	r3, #108	; 0x6c
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f016 ff77 	bl	80192a6 <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e01e      	b.n	80023fc <select_kf_observation_matrices+0x5a>
        if (kf_state->z_active[i]) {
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	336c      	adds	r3, #108	; 0x6c
 80023de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e007      	b.n	80023f6 <select_kf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4413      	add	r3, r2
 80023ee:	33b8      	adds	r3, #184	; 0xb8
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3301      	adds	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	dddd      	ble.n	80023be <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3390      	adds	r3, #144	; 0x90
 800240c:	2103      	movs	r1, #3
 800240e:	2003      	movs	r0, #3
 8002410:	f000 fc8a 	bl	8002d28 <transpose>
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <kf_update>:

void kf_update(kf_state_t *kf_state) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af04      	add	r7, sp, #16
 8002422:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f503 709a 	add.w	r0, r3, #308	; 0x134
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002436:	2201      	movs	r2, #1
 8002438:	9201      	str	r2, [sp, #4]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	4603      	mov	r3, r0
 800243e:	460a      	mov	r2, r1
 8002440:	2103      	movs	r1, #3
 8002442:	2003      	movs	r0, #3
 8002444:	f000 fe9a 	bl	800317c <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800245a:	2003      	movs	r0, #3
 800245c:	f000 fce3 	bl	8002e26 <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	f502 7211 	add.w	r2, r2, #580	; 0x244
 8002472:	2101      	movs	r1, #1
 8002474:	9102      	str	r1, [sp, #8]
 8002476:	9201      	str	r2, [sp, #4]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	4603      	mov	r3, r0
 800247c:	2203      	movs	r2, #3
 800247e:	2103      	movs	r1, #3
 8002480:	2003      	movs	r0, #3
 8002482:	f000 fde1 	bl	8003048 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f503 7011 	add.w	r0, r3, #580	; 0x244
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3390      	adds	r3, #144	; 0x90
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8002496:	2101      	movs	r1, #1
 8002498:	9102      	str	r1, [sp, #8]
 800249a:	9201      	str	r2, [sp, #4]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	4603      	mov	r3, r0
 80024a0:	2203      	movs	r2, #3
 80024a2:	2103      	movs	r1, #3
 80024a4:	2003      	movs	r0, #3
 80024a6:	f000 fdcf 	bl	8003048 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	460b      	mov	r3, r1
 80024c0:	2103      	movs	r1, #3
 80024c2:	2003      	movs	r0, #3
 80024c4:	f000 fcda 	bl	8002e7c <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80024ce:	2224      	movs	r2, #36	; 0x24
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f016 fee7 	bl	80192a6 <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80024e4:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80025f4 <kf_update+0x1d8>
 80024e8:	461a      	mov	r2, r3
 80024ea:	2003      	movs	r0, #3
 80024ec:	f001 f812 	bl	8003514 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3390      	adds	r3, #144	; 0x90
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8002500:	2101      	movs	r1, #1
 8002502:	9102      	str	r1, [sp, #8]
 8002504:	9201      	str	r2, [sp, #4]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	4603      	mov	r3, r0
 800250a:	2203      	movs	r2, #3
 800250c:	2103      	movs	r1, #3
 800250e:	2003      	movs	r0, #3
 8002510:	f000 fd9a 	bl	8003048 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f503 701a 	add.w	r0, r3, #616	; 0x268
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 8002526:	2101      	movs	r1, #1
 8002528:	9102      	str	r1, [sp, #8]
 800252a:	9201      	str	r2, [sp, #4]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	4603      	mov	r3, r0
 8002530:	2203      	movs	r2, #3
 8002532:	2103      	movs	r1, #3
 8002534:	2003      	movs	r0, #3
 8002536:	f000 fd87 	bl	8003048 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f503 71f4 	add.w	r1, r3, #488	; 0x1e8
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800254c:	2201      	movs	r2, #1
 800254e:	9201      	str	r2, [sp, #4]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	4603      	mov	r3, r0
 8002554:	460a      	mov	r2, r1
 8002556:	2103      	movs	r1, #3
 8002558:	2003      	movs	r0, #3
 800255a:	f000 fe0f 	bl	800317c <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002570:	2003      	movs	r0, #3
 8002572:	f000 fc2d 	bl	8002dd0 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800257c:	4619      	mov	r1, r3
 800257e:	2003      	movs	r0, #3
 8002580:	f000 fb86 	bl	8002c90 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	336c      	adds	r3, #108	; 0x6c
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	f502 7235 	add.w	r2, r2, #724	; 0x2d4
 8002594:	2101      	movs	r1, #1
 8002596:	9102      	str	r1, [sp, #8]
 8002598:	9201      	str	r2, [sp, #4]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	4603      	mov	r3, r0
 800259e:	2203      	movs	r2, #3
 80025a0:	2103      	movs	r1, #3
 80025a2:	2003      	movs	r0, #3
 80025a4:	f000 fd50 	bl	8003048 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f503 722c 	add.w	r2, r3, #688	; 0x2b0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	460b      	mov	r3, r1
 80025be:	2103      	movs	r1, #3
 80025c0:	2003      	movs	r0, #3
 80025c2:	f000 fcce 	bl	8002f62 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	f502 7288 	add.w	r2, r2, #272	; 0x110
 80025d8:	2101      	movs	r1, #1
 80025da:	9102      	str	r1, [sp, #8]
 80025dc:	9201      	str	r2, [sp, #4]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4603      	mov	r3, r0
 80025e2:	2203      	movs	r2, #3
 80025e4:	2103      	movs	r1, #3
 80025e6:	2003      	movs	r0, #3
 80025e8:	f000 fd2e 	bl	8003048 <matmul>
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	38d1b717 	.word	0x38d1b717

080025f8 <update_state_est_data>:
#include "Sim_Con/state_est.h"
#include "Sim_Con/state_est_settings.h"

void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8002608:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002690 <update_state_est_data+0x98>
 800260c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002614:	ee17 2a90 	vmov	r2, s15
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8002622:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002690 <update_state_est_data+0x98>
 8002626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800262a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800262e:	ee17 2a90 	vmov	r2, s15
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 800263c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002690 <update_state_est_data+0x98>
 8002640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002648:	ee17 2a90 	vmov	r2, s15
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002656:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002690 <update_state_est_data+0x98>
 800265a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800265e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002662:	ee17 2a90 	vmov	r2, s15
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002670:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002690 <update_state_est_data+0x98>
 8002674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800267c:	ee17 2a90 	vmov	r2, s15
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	447a0000 	.word	0x447a0000
 8002694:	00000000 	.word	0x00000000

08002698 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b095      	sub	sp, #84	; 0x54
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 80026a6:	2300      	movs	r3, #0
 80026a8:	647b      	str	r3, [r7, #68]	; 0x44
 80026aa:	e09a      	b.n	80027e2 <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	3308      	adds	r3, #8
 80026bc:	6819      	ldr	r1, [r3, #0]
 80026be:	6838      	ldr	r0, [r7, #0]
 80026c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4403      	add	r3, r0
 80026cc:	3308      	adds	r3, #8
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4299      	cmp	r1, r3
 80026d2:	d92b      	bls.n	800272c <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026e8:	3362      	adds	r3, #98	; 0x62
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	3304      	adds	r3, #4
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002718:	440b      	add	r3, r1
 800271a:	3b20      	subs	r3, #32
 800271c:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 800271e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002724:	4413      	add	r3, r2
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e01d      	b.n	8002768 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002730:	3362      	adds	r3, #98	; 0x62
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002740:	4413      	add	r3, r2
 8002742:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 800274a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002752:	4413      	add	r3, r2
 8002754:	3b20      	subs	r3, #32
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 800275c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002762:	4413      	add	r3, r2
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	1a9b      	subs	r3, r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	333c      	adds	r3, #60	; 0x3c
 8002778:	6819      	ldr	r1, [r3, #0]
 800277a:	6838      	ldr	r0, [r7, #0]
 800277c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4403      	add	r3, r0
 8002788:	333c      	adds	r3, #60	; 0x3c
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4299      	cmp	r1, r3
 800278e:	d916      	bls.n	80027be <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	1a9b      	subs	r3, r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	3330      	adds	r3, #48	; 0x30
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80027aa:	440b      	add	r3, r1
 80027ac:	3b30      	subs	r3, #48	; 0x30
 80027ae:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 80027b0:	f107 0214 	add.w	r2, r7, #20
 80027b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b6:	4413      	add	r3, r2
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e00e      	b.n	80027dc <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 80027be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027c6:	4413      	add	r3, r2
 80027c8:	3b30      	subs	r3, #48	; 0x30
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 80027d0:	f107 0214 	add.w	r2, r7, #20
 80027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d6:	4413      	add	r3, r2
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 80027dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027de:	3301      	adds	r3, #1
 80027e0:	647b      	str	r3, [r7, #68]	; 0x44
 80027e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	f77f af61 	ble.w	80026ac <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80027f6:	461a      	mov	r2, r3
 80027f8:	2003      	movs	r0, #3
 80027fa:	f000 f975 	bl	8002ae8 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 80027fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002806:	4619      	mov	r1, r3
 8002808:	2003      	movs	r0, #3
 800280a:	f000 f96d 	bl	8002ae8 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 800280e:	f107 0214 	add.w	r2, r7, #20
 8002812:	f107 0318 	add.w	r3, r7, #24
 8002816:	4619      	mov	r1, r3
 8002818:	2003      	movs	r0, #3
 800281a:	f000 f965 	bl	8002ae8 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2200      	movs	r2, #0
 8002822:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    kf_state->u[0] = 0;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    int32_t num_acc_x_meas_active = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t num_temp_meas_active = 0;
 800283a:	2300      	movs	r3, #0
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800283e:	2300      	movs	r3, #0
 8002840:	637b      	str	r3, [r7, #52]	; 0x34
 8002842:	e049      	b.n	80028d8 <process_measurements+0x240>
        if (kf_state->z_active[i]){
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002848:	4413      	add	r3, r2
 800284a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d006      	beq.n	8002862 <process_measurements+0x1ca>
            kf_state->num_z_active += 1;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        }
        if (acc_x_meas_active[i]) {
 8002862:	f107 0214 	add.w	r2, r7, #20
 8002866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002868:	4413      	add	r3, r2
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d012      	beq.n	8002896 <process_measurements+0x1fe>
            kf_state->u[0] += acc_x_meas[i];
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 8002876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800287e:	4413      	add	r3, r2
 8002880:	3b30      	subs	r3, #48	; 0x30
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
            num_acc_x_meas_active += 1;
 8002890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002892:	3301      	adds	r3, #1
 8002894:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (temp_meas[i]) {
 8002896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800289e:	4413      	add	r3, r2
 80028a0:	3b20      	subs	r3, #32
 80028a2:	edd3 7a00 	vldr	s15, [r3]
 80028a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ae:	d010      	beq.n	80028d2 <process_measurements+0x23a>
            temp_meas_mean += temp_meas[i];
 80028b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80028b8:	4413      	add	r3, r2
 80028ba:	3b20      	subs	r3, #32
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80028c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            num_temp_meas_active += 1;
 80028cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ce:	3301      	adds	r3, #1
 80028d0:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80028d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d4:	3301      	adds	r3, #1
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
 80028d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028da:	2b02      	cmp	r3, #2
 80028dc:	ddb2      	ble.n	8002844 <process_measurements+0x1ac>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f503 7103 	add.w	r1, r3, #524	; 0x20c
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	460b      	mov	r3, r1
 80028f4:	2103      	movs	r1, #3
 80028f6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80028f8:	f7ff fa0e 	bl	8001d18 <pressure2altitudeAGL>

    if (num_acc_x_meas_active > 0){
 80028fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	dd21      	ble.n	8002946 <process_measurements+0x2ae>
        kf_state->u[0] /= num_acc_x_meas_active;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	edd3 6a40 	vldr	s13, [r3, #256]	; 0x100
 8002908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
        /* gravity compensation for accelerometer */
        kf_state->u[0] -= GRAVITATION;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fe30 	bl	8000588 <__aeabi_f2d>
 8002928:	a313      	add	r3, pc, #76	; (adr r3, 8002978 <process_measurements+0x2e0>)
 800292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292e:	f7fd fccb 	bl	80002c8 <__aeabi_dsub>
 8002932:	4603      	mov	r3, r0
 8002934:	460c      	mov	r4, r1
 8002936:	4618      	mov	r0, r3
 8002938:	4621      	mov	r1, r4
 800293a:	f7fe f94d 	bl	8000bd8 <__aeabi_d2f>
 800293e:	4602      	mov	r2, r0
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    if (num_temp_meas_active > 0){
 8002946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002948:	2b00      	cmp	r3, #0
 800294a:	dd0f      	ble.n	800296c <process_measurements+0x2d4>
        temp_meas_mean /= num_temp_meas_active;
 800294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002956:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800295a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800295e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        update_env(env, temp_meas_mean);
 8002962:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002966:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002968:	f7ff f97a 	bl	8001c60 <update_env>
    }
} 
 800296c:	bf00      	nop
 800296e:	374c      	adds	r7, #76	; 0x4c
 8002970:	46bd      	mov	sp, r7
 8002972:	bd90      	pop	{r4, r7, pc}
 8002974:	f3af 8000 	nop.w
 8002978:	51eb851f 	.word	0x51eb851f
 800297c:	40239eb8 	.word	0x40239eb8

08002980 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b091      	sub	sp, #68	; 0x44
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	3b01      	subs	r3, #1
 8002994:	2b05      	cmp	r3, #5
 8002996:	d823      	bhi.n	80029e0 <select_noise_models+0x60>
 8002998:	a201      	add	r2, pc, #4	; (adr r2, 80029a0 <select_noise_models+0x20>)
 800299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299e:	bf00      	nop
 80029a0:	080029b9 	.word	0x080029b9
 80029a4:	080029b9 	.word	0x080029b9
 80029a8:	080029c3 	.word	0x080029c3
 80029ac:	080029cd 	.word	0x080029cd
 80029b0:	080029d7 	.word	0x080029d7
 80029b4:	080029b9 	.word	0x080029b9
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 80029b8:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <select_noise_models+0x148>)
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 80029bc:	4b43      	ldr	r3, [pc, #268]	; (8002acc <select_noise_models+0x14c>)
 80029be:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80029c0:	e00e      	b.n	80029e0 <select_noise_models+0x60>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 80029c2:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <select_noise_models+0x150>)
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 80029c6:	4b43      	ldr	r3, [pc, #268]	; (8002ad4 <select_noise_models+0x154>)
 80029c8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80029ca:	e009      	b.n	80029e0 <select_noise_models+0x60>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 80029cc:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <select_noise_models+0x158>)
 80029ce:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 80029d0:	4b42      	ldr	r3, [pc, #264]	; (8002adc <select_noise_models+0x15c>)
 80029d2:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80029d4:	e004      	b.n	80029e0 <select_noise_models+0x60>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 80029d6:	4b42      	ldr	r3, [pc, #264]	; (8002ae0 <select_noise_models+0x160>)
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 80029da:	4b42      	ldr	r3, [pc, #264]	; (8002ae4 <select_noise_models+0x164>)
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80029de:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 80029e0:	2300      	movs	r3, #0
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e4:	e01b      	b.n	8002a1e <select_noise_models+0x9e>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80029e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029e8:	f7fd fdce 	bl	8000588 <__aeabi_f2d>
 80029ec:	4603      	mov	r3, r0
 80029ee:	460c      	mov	r4, r1
 80029f0:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8002ac0 <select_noise_models+0x140>
 80029f4:	ec44 3b10 	vmov	d0, r3, r4
 80029f8:	f017 f8fa 	bl	8019bf0 <pow>
 80029fc:	ec54 3b10 	vmov	r3, r4, d0
 8002a00:	4618      	mov	r0, r3
 8002a02:	4621      	mov	r1, r4
 8002a04:	f7fe f8e8 	bl	8000bd8 <__aeabi_d2f>
 8002a08:	4601      	mov	r1, r0
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	3316      	adds	r3, #22
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	3304      	adds	r3, #4
 8002a16:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	dde0      	ble.n	80029e6 <select_noise_models+0x66>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002a2a:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 8002a30:	f107 0114 	add.w	r1, r7, #20
 8002a34:	f107 0218 	add.w	r2, r7, #24
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	2101      	movs	r1, #1
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff f9c8 	bl	8001dd8 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 8002a48:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fa29 	bl	8001ea8 <altitude_gradient>
 8002a56:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 8002a5a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002a5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a66:	eef0 7ae7 	vabs.f32	s15, s15
 8002a6a:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002a6e:	2300      	movs	r3, #0
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a72:	e01a      	b.n	8002aaa <select_noise_models+0x12a>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 8002a74:	6a38      	ldr	r0, [r7, #32]
 8002a76:	f7fd fd87 	bl	8000588 <__aeabi_f2d>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	460c      	mov	r4, r1
 8002a7e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002ac0 <select_noise_models+0x140>
 8002a82:	ec44 3b10 	vmov	d0, r3, r4
 8002a86:	f017 f8b3 	bl	8019bf0 <pow>
 8002a8a:	ec54 3b10 	vmov	r3, r4, d0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	4621      	mov	r1, r4
 8002a92:	f7fe f8a1 	bl	8000bd8 <__aeabi_d2f>
 8002a96:	4601      	mov	r1, r0
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	4413      	add	r3, r2
 8002aa0:	33b8      	adds	r3, #184	; 0xb8
 8002aa2:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	dde1      	ble.n	8002a74 <select_noise_models+0xf4>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ab4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002ab8:	bf00      	nop
 8002aba:	373c      	adds	r7, #60	; 0x3c
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd90      	pop	{r4, r7, pc}
 8002ac0:	00000000 	.word	0x00000000
 8002ac4:	40000000 	.word	0x40000000
 8002ac8:	3c97e316 	.word	0x3c97e316
 8002acc:	3fef3b64 	.word	0x3fef3b64
 8002ad0:	3fa01965 	.word	0x3fa01965
 8002ad4:	41500000 	.word	0x41500000
 8002ad8:	3f1e3737 	.word	0x3f1e3737
 8002adc:	40ec28f6 	.word	0x40ec28f6
 8002ae0:	3ffa41cc 	.word	0x3ffa41cc
 8002ae4:	40795810 	.word	0x40795810

08002ae8 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8002ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aea:	b08b      	sub	sp, #44	; 0x2c
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int32_t num_active = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e017      	b.n	8002b34 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00e      	beq.n	8002b2e <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	3301      	adds	r3, #1
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	edd3 7a00 	vldr	s15, [r3]
 8002b22:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2a:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3301      	adds	r3, #1
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	69fa      	ldr	r2, [r7, #28]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	dbe3      	blt.n	8002b04 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	dd0a      	ble.n	8002b58 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	ee07 3a90 	vmov	s15, r3
 8002b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b4c:	edd7 6a08 	vldr	s13, [r7, #32]
 8002b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b54:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e033      	b.n	8002bcc <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d02a      	beq.n	8002bc6 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	4413      	add	r3, r2
 8002b78:	ed93 7a00 	vldr	s14, [r3]
 8002b7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b84:	ee17 0a90 	vmov	r0, s15
 8002b88:	f7fd fcfe 	bl	8000588 <__aeabi_f2d>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	460c      	mov	r4, r1
 8002b90:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8002c88 <sensor_elimination_by_stdev+0x1a0>
 8002b94:	ec44 3b10 	vmov	d0, r3, r4
 8002b98:	f017 f82a 	bl	8019bf0 <pow>
 8002b9c:	ec56 5b10 	vmov	r5, r6, d0
 8002ba0:	69b8      	ldr	r0, [r7, #24]
 8002ba2:	f7fd fcf1 	bl	8000588 <__aeabi_f2d>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	460c      	mov	r4, r1
 8002baa:	461a      	mov	r2, r3
 8002bac:	4623      	mov	r3, r4
 8002bae:	4628      	mov	r0, r5
 8002bb0:	4631      	mov	r1, r6
 8002bb2:	f7fd fb8b 	bl	80002cc <__adddf3>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	460c      	mov	r4, r1
 8002bba:	4618      	mov	r0, r3
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	f7fe f80b 	bl	8000bd8 <__aeabi_d2f>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	dbc7      	blt.n	8002b64 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	dd1a      	ble.n	8002c10 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	ee07 3a90 	vmov	s15, r3
 8002be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002be8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bec:	ee16 0a90 	vmov	r0, s13
 8002bf0:	f7fd fcca 	bl	8000588 <__aeabi_f2d>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	ec44 3b10 	vmov	d0, r3, r4
 8002bfc:	f017 f968 	bl	8019ed0 <sqrt>
 8002c00:	ec54 3b10 	vmov	r3, r4, d0
 8002c04:	4618      	mov	r0, r3
 8002c06:	4621      	mov	r1, r4
 8002c08:	f7fd ffe6 	bl	8000bd8 <__aeabi_d2f>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	e02f      	b.n	8002c76 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d026      	beq.n	8002c70 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	4413      	add	r3, r2
 8002c2a:	ed93 7a00 	vldr	s14, [r3]
 8002c2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c36:	eef0 7ae7 	vabs.f32	s15, s15
 8002c3a:	ee17 0a90 	vmov	r0, s15
 8002c3e:	f7fd fca3 	bl	8000588 <__aeabi_f2d>
 8002c42:	4604      	mov	r4, r0
 8002c44:	460d      	mov	r5, r1
 8002c46:	69b8      	ldr	r0, [r7, #24]
 8002c48:	f7fd fc9e 	bl	8000588 <__aeabi_f2d>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	f7fd fb3c 	bl	80002cc <__adddf3>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4620      	mov	r0, r4
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	f7fd ff7c 	bl	8000b58 <__aeabi_dcmpgt>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	3301      	adds	r3, #1
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	dbcb      	blt.n	8002c16 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 8002c7e:	bf00      	nop
 8002c80:	372c      	adds	r7, #44	; 0x2c
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c86:	bf00      	nop
 8002c88:	00000000 	.word	0x00000000
 8002c8c:	40000000 	.word	0x40000000

08002c90 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 8002c90:	b490      	push	{r4, r7}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	1e43      	subs	r3, r0, #1
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	f04f 0400 	mov.w	r4, #0
 8002cb0:	0154      	lsls	r4, r2, #5
 8002cb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cb6:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	e02b      	b.n	8002d16 <eye+0x86>
        for(int j = 0; j < dim; j++){
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e021      	b.n	8002d08 <eye+0x78>
            if (i == j){
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d10d      	bne.n	8002ce8 <eye+0x58>
				A[i][j] = 1;
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	fb03 f302 	mul.w	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	441a      	add	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e00c      	b.n	8002d02 <eye+0x72>
			} else {
				A[i][j] = 0;
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	fb03 f302 	mul.w	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	441a      	add	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	dbd9      	blt.n	8002cc4 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	3301      	adds	r3, #1
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	dbcf      	blt.n	8002cbe <eye+0x2e>
			}
        }
    }
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc90      	pop	{r4, r7}
 8002d26:	4770      	bx	lr

08002d28 <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 8002d28:	b4b0      	push	{r4, r5, r7}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	68b8      	ldr	r0, [r7, #8]
 8002d38:	1e43      	subs	r3, r0, #1
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f04f 0400 	mov.w	r4, #0
 8002d4c:	0154      	lsls	r4, r2, #5
 8002d4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d52:	014b      	lsls	r3, r1, #5
 8002d54:	68fd      	ldr	r5, [r7, #12]
 8002d56:	1e6b      	subs	r3, r5, #1
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	462b      	mov	r3, r5
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	f04f 0400 	mov.w	r4, #0
 8002d6a:	0154      	lsls	r4, r2, #5
 8002d6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d70:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8002d72:	2300      	movs	r3, #0
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	e022      	b.n	8002dbe <transpose+0x96>
		for(int j = 0; j < n; j++){
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	e018      	b.n	8002db0 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8002d7e:	4602      	mov	r2, r0
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	fb03 f302 	mul.w	r3, r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	441a      	add	r2, r3
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fb03 f301 	mul.w	r3, r3, r1
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	4419      	add	r1, r3
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3301      	adds	r3, #1
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	dbe2      	blt.n	8002d7e <transpose+0x56>
	for(int i = 0; i < m; i++){
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	dbd8      	blt.n	8002d78 <transpose+0x50>
		}
	}
}
 8002dc6:	bf00      	nop
 8002dc8:	3724      	adds	r7, #36	; 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bcb0      	pop	{r4, r5, r7}
 8002dce:	4770      	bx	lr

08002dd0 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e016      	b.n	8002e12 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	4413      	add	r3, r2
 8002dec:	ed93 7a00 	vldr	s14, [r3]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e08:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	dbe4      	blt.n	8002de4 <vecadd+0x14>
	}
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8002e26:	b480      	push	{r7}
 8002e28:	b087      	sub	sp, #28
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	60f8      	str	r0, [r7, #12]
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e016      	b.n	8002e68 <vecsub+0x42>
		c[i] = a[i] - b[i];
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	4413      	add	r3, r2
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	4413      	add	r3, r2
 8002e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e5e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3301      	adds	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	dbe4      	blt.n	8002e3a <vecsub+0x14>
	}
}
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8002e7c:	b4f0      	push	{r4, r5, r6, r7}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	68b8      	ldr	r0, [r7, #8]
 8002e8c:	1e43      	subs	r3, r0, #1
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e90:	4603      	mov	r3, r0
 8002e92:	4619      	mov	r1, r3
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	f04f 0400 	mov.w	r4, #0
 8002ea0:	0154      	lsls	r4, r2, #5
 8002ea2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ea6:	014b      	lsls	r3, r1, #5
 8002ea8:	68bd      	ldr	r5, [r7, #8]
 8002eaa:	1e6b      	subs	r3, r5, #1
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	462b      	mov	r3, r5
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	f04f 0400 	mov.w	r4, #0
 8002ebe:	0154      	lsls	r4, r2, #5
 8002ec0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ec4:	014b      	lsls	r3, r1, #5
 8002ec6:	68be      	ldr	r6, [r7, #8]
 8002ec8:	1e73      	subs	r3, r6, #1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	4633      	mov	r3, r6
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	f04f 0400 	mov.w	r4, #0
 8002edc:	0154      	lsls	r4, r2, #5
 8002ede:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ee2:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
 8002ee8:	e032      	b.n	8002f50 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8002eea:	2300      	movs	r3, #0
 8002eec:	623b      	str	r3, [r7, #32]
 8002eee:	e028      	b.n	8002f42 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	fb03 f302 	mul.w	r3, r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	441a      	add	r2, r3
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	ed93 7a00 	vldr	s14, [r3]
 8002f08:	462a      	mov	r2, r5
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fb03 f302 	mul.w	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	441a      	add	r2, r3
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	4632      	mov	r2, r6
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fb03 f302 	mul.w	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f2c:	441a      	add	r2, r3
 8002f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	623b      	str	r3, [r7, #32]
 8002f42:	6a3a      	ldr	r2, [r7, #32]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	dbd2      	blt.n	8002ef0 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	dbc8      	blt.n	8002eea <matadd+0x6e>
        }
    }
}
 8002f58:	bf00      	nop
 8002f5a:	3728      	adds	r7, #40	; 0x28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bcf0      	pop	{r4, r5, r6, r7}
 8002f60:	4770      	bx	lr

08002f62 <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8002f62:	b4f0      	push	{r4, r5, r6, r7}
 8002f64:	b08a      	sub	sp, #40	; 0x28
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	68b8      	ldr	r0, [r7, #8]
 8002f72:	1e43      	subs	r3, r0, #1
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
 8002f76:	4603      	mov	r3, r0
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	f04f 0400 	mov.w	r4, #0
 8002f86:	0154      	lsls	r4, r2, #5
 8002f88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f8c:	014b      	lsls	r3, r1, #5
 8002f8e:	68bd      	ldr	r5, [r7, #8]
 8002f90:	1e6b      	subs	r3, r5, #1
 8002f92:	61bb      	str	r3, [r7, #24]
 8002f94:	462b      	mov	r3, r5
 8002f96:	4619      	mov	r1, r3
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	f04f 0400 	mov.w	r4, #0
 8002fa4:	0154      	lsls	r4, r2, #5
 8002fa6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002faa:	014b      	lsls	r3, r1, #5
 8002fac:	68be      	ldr	r6, [r7, #8]
 8002fae:	1e73      	subs	r3, r6, #1
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	4633      	mov	r3, r6
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	f04f 0400 	mov.w	r4, #0
 8002fc2:	0154      	lsls	r4, r2, #5
 8002fc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fc8:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	e032      	b.n	8003036 <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	623b      	str	r3, [r7, #32]
 8002fd4:	e028      	b.n	8003028 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	fb03 f302 	mul.w	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	441a      	add	r2, r3
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	ed93 7a00 	vldr	s14, [r3]
 8002fee:	462a      	mov	r2, r5
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	fb03 f302 	mul.w	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	441a      	add	r2, r3
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	edd3 7a00 	vldr	s15, [r3]
 8003006:	4632      	mov	r2, r6
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	fb03 f302 	mul.w	r3, r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003012:	441a      	add	r2, r3
 8003014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	3301      	adds	r3, #1
 8003026:	623b      	str	r3, [r7, #32]
 8003028:	6a3a      	ldr	r2, [r7, #32]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	dbd2      	blt.n	8002fd6 <matsub+0x74>
	for(int i = 0; i < m; i++){
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	3301      	adds	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	429a      	cmp	r2, r3
 800303c:	dbc8      	blt.n	8002fd0 <matsub+0x6e>
        }
    }
}
 800303e:	bf00      	nop
 8003040:	3728      	adds	r7, #40	; 0x28
 8003042:	46bd      	mov	sp, r7
 8003044:	bcf0      	pop	{r4, r5, r6, r7}
 8003046:	4770      	bx	lr

08003048 <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8003048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304a:	b08d      	sub	sp, #52	; 0x34
 800304c:	af00      	add	r7, sp, #0
 800304e:	6178      	str	r0, [r7, #20]
 8003050:	6139      	str	r1, [r7, #16]
 8003052:	60fa      	str	r2, [r7, #12]
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	693e      	ldr	r6, [r7, #16]
 8003058:	1e73      	subs	r3, r6, #1
 800305a:	623b      	str	r3, [r7, #32]
 800305c:	4633      	mov	r3, r6
 800305e:	4619      	mov	r1, r3
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	f04f 0400 	mov.w	r4, #0
 800306c:	0154      	lsls	r4, r2, #5
 800306e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003072:	014b      	lsls	r3, r1, #5
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	3b01      	subs	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	4613      	mov	r3, r2
 8003080:	4619      	mov	r1, r3
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	f04f 0400 	mov.w	r4, #0
 800308e:	0154      	lsls	r4, r2, #5
 8003090:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003094:	014b      	lsls	r3, r1, #5
 8003096:	68fd      	ldr	r5, [r7, #12]
 8003098:	1e6b      	subs	r3, r5, #1
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	462b      	mov	r3, r5
 800309e:	4619      	mov	r1, r3
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	f04f 0400 	mov.w	r4, #0
 80030ac:	0154      	lsls	r4, r2, #5
 80030ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030b2:	014b      	lsls	r3, r1, #5
	if (reset) {
 80030b4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	fb02 f303 	mul.w	r3, r2, r3
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	461a      	mov	r2, r3
 80030c8:	2100      	movs	r1, #0
 80030ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80030cc:	f016 f8eb 	bl	80192a6 <memset>
	}
	for(int i = 0; i < m; i++){
 80030d0:	2300      	movs	r3, #0
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
 80030d4:	e04a      	b.n	800316c <matmul+0x124>
        for(int j = 0; j < o; j++){
 80030d6:	2300      	movs	r3, #0
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80030da:	e040      	b.n	800315e <matmul+0x116>
            for(int k = 0; k < n; k++){
 80030dc:	2300      	movs	r3, #0
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e0:	e036      	b.n	8003150 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 80030e2:	4632      	mov	r2, r6
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	fb03 f302 	mul.w	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	441a      	add	r2, r3
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	ed93 7a00 	vldr	s14, [r3]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	fb03 f302 	mul.w	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003106:	441a      	add	r2, r3
 8003108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003116:	462a      	mov	r2, r5
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	fb03 f302 	mul.w	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003122:	441a      	add	r2, r3
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	edd3 7a00 	vldr	s15, [r3]
 800312e:	462a      	mov	r2, r5
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	fb03 f302 	mul.w	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800313a:	441a      	add	r2, r3
 800313c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	3301      	adds	r3, #1
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	429a      	cmp	r2, r3
 8003156:	dbc4      	blt.n	80030e2 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	3301      	adds	r3, #1
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
 800315e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	429a      	cmp	r2, r3
 8003164:	dbba      	blt.n	80030dc <matmul+0x94>
	for(int i = 0; i < m; i++){
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	3301      	adds	r3, #1
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
 800316c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	429a      	cmp	r2, r3
 8003172:	dbb0      	blt.n	80030d6 <matmul+0x8e>
            }
        }
    }
}
 8003174:	bf00      	nop
 8003176:	3734      	adds	r7, #52	; 0x34
 8003178:	46bd      	mov	sp, r7
 800317a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800317c <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 800317c:	b5b0      	push	{r4, r5, r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	68bd      	ldr	r5, [r7, #8]
 800318c:	1e6b      	subs	r3, r5, #1
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	462b      	mov	r3, r5
 8003192:	4619      	mov	r1, r3
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	f04f 0400 	mov.w	r4, #0
 80031a0:	0154      	lsls	r4, r2, #5
 80031a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031a6:	014b      	lsls	r3, r1, #5
	if (reset) {
 80031a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	461a      	mov	r2, r3
 80031b6:	2100      	movs	r1, #0
 80031b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ba:	f016 f874 	bl	80192a6 <memset>
	}
	for(int i = 0; i < m; i++){
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	e02e      	b.n	8003222 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	e024      	b.n	8003214 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 80031ca:	462a      	mov	r2, r5
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fb03 f302 	mul.w	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	441a      	add	r2, r3
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	ed93 7a00 	vldr	s14, [r3]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	4413      	add	r3, r2
 80031ea:	edd3 7a00 	vldr	s15, [r3]
 80031ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031f8:	4413      	add	r3, r2
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003204:	4413      	add	r3, r2
 8003206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800320a:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3301      	adds	r3, #1
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	429a      	cmp	r2, r3
 800321a:	dbd6      	blt.n	80031ca <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	3301      	adds	r3, #1
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	429a      	cmp	r2, r3
 8003228:	dbcc      	blt.n	80031c4 <matvecprod+0x48>
        }
    }
}
 800322a:	bf00      	nop
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bdb0      	pop	{r4, r5, r7, pc}

08003232 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 8003232:	b480      	push	{r7}
 8003234:	b08b      	sub	sp, #44	; 0x2c
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
 800323a:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 800323c:	2300      	movs	r3, #0
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	e01d      	b.n	8003282 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003254:	d102      	bne.n	800325c <lower_triangular_inverse+0x2a>
 8003256:	f04f 33ff 	mov.w	r3, #4294967295
 800325a:	e076      	b.n	800334a <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	ed93 7a00 	vldr	s14, [r3]
 8003262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3301      	adds	r3, #1
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	3301      	adds	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	dbdd      	blt.n	8003246 <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 800328a:	2301      	movs	r3, #1
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4413      	add	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
 8003298:	e052      	b.n	8003340 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 800329a:	2300      	movs	r3, #0
 800329c:	623b      	str	r3, [r7, #32]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e041      	b.n	8003328 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	e01b      	b.n	80032ec <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4413      	add	r3, r2
 80032bc:	ed93 7a00 	vldr	s14, [r3]
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4413      	add	r3, r2
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80032d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d8:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	3301      	adds	r3, #1
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	429a      	cmp	r2, r3
 80032f2:	dbdf      	blt.n	80032b4 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4413      	add	r3, r2
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	eeb1 7a67 	vneg.f32	s14, s15
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4413      	add	r3, r2
 800330c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003314:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	4413      	add	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	3301      	adds	r3, #1
 8003326:	623b      	str	r3, [r7, #32]
 8003328:	6a3a      	ldr	r2, [r7, #32]
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	429a      	cmp	r2, r3
 800332e:	dbb9      	blt.n	80032a4 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	3301      	adds	r3, #1
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4413      	add	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	dba8      	blt.n	800329a <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	372c      	adds	r7, #44	; 0x2c
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
	...

08003358 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 8003358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800335c:	b08b      	sub	sp, #44	; 0x2c
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	68fe      	ldr	r6, [r7, #12]
 8003368:	1e73      	subs	r3, r6, #1
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	4633      	mov	r3, r6
 800336e:	4619      	mov	r1, r3
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	f04f 0400 	mov.w	r4, #0
 800337c:	0154      	lsls	r4, r2, #5
 800337e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003382:	014b      	lsls	r3, r1, #5
 8003384:	68fd      	ldr	r5, [r7, #12]
 8003386:	1e6b      	subs	r3, r5, #1
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	462b      	mov	r3, r5
 800338c:	4619      	mov	r1, r3
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	f04f 0400 	mov.w	r4, #0
 800339a:	0154      	lsls	r4, r2, #5
 800339c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033a0:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	461a      	mov	r2, r3
 80033ae:	2100      	movs	r1, #0
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f015 ff78 	bl	80192a6 <memset>
    for (int i = 0; i < n; i++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	e09f      	b.n	80034fc <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 80033bc:	2300      	movs	r3, #0
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	e093      	b.n	80034ea <cholesky+0x192>
            float s = 0;
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
 80033cc:	e022      	b.n	8003414 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 80033ce:	462a      	mov	r2, r5
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	fb03 f302 	mul.w	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	441a      	add	r2, r3
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	ed93 7a00 	vldr	s14, [r3]
 80033e6:	462a      	mov	r2, r5
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	fb03 f302 	mul.w	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	441a      	add	r2, r3
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003402:	ed97 7a08 	vldr	s14, [r7, #32]
 8003406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340a:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	3301      	adds	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
 8003414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	429a      	cmp	r2, r3
 800341a:	dbd8      	blt.n	80033ce <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	429a      	cmp	r2, r3
 8003422:	d116      	bne.n	8003452 <cholesky+0xfa>
 8003424:	4632      	mov	r2, r6
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	fb03 f302 	mul.w	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	441a      	add	r2, r3
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	ed93 7a00 	vldr	s14, [r3]
 800343c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003444:	eeb0 0a67 	vmov.f32	s0, s15
 8003448:	f016 ff00 	bl	801a24c <sqrtf>
 800344c:	ee10 1a10 	vmov	r1, s0
 8003450:	e03d      	b.n	80034ce <cholesky+0x176>
 8003452:	462a      	mov	r2, r5
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	fb03 f302 	mul.w	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	441a      	add	r2, r3
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd f88d 	bl	8000588 <__aeabi_f2d>
 800346e:	4603      	mov	r3, r0
 8003470:	460c      	mov	r4, r1
 8003472:	461a      	mov	r2, r3
 8003474:	4623      	mov	r3, r4
 8003476:	f04f 0000 	mov.w	r0, #0
 800347a:	4925      	ldr	r1, [pc, #148]	; (8003510 <cholesky+0x1b8>)
 800347c:	f7fd fa06 	bl	800088c <__aeabi_ddiv>
 8003480:	4603      	mov	r3, r0
 8003482:	460c      	mov	r4, r1
 8003484:	4698      	mov	r8, r3
 8003486:	46a1      	mov	r9, r4
 8003488:	4632      	mov	r2, r6
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	fb03 f302 	mul.w	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	441a      	add	r2, r3
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	ed93 7a00 	vldr	s14, [r3]
 80034a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80034a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034a8:	ee17 0a90 	vmov	r0, s15
 80034ac:	f7fd f86c 	bl	8000588 <__aeabi_f2d>
 80034b0:	4603      	mov	r3, r0
 80034b2:	460c      	mov	r4, r1
 80034b4:	461a      	mov	r2, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	4640      	mov	r0, r8
 80034ba:	4649      	mov	r1, r9
 80034bc:	f7fd f8bc 	bl	8000638 <__aeabi_dmul>
 80034c0:	4603      	mov	r3, r0
 80034c2:	460c      	mov	r4, r1
 80034c4:	4618      	mov	r0, r3
 80034c6:	4621      	mov	r1, r4
 80034c8:	f7fd fb86 	bl	8000bd8 <__aeabi_d2f>
 80034cc:	4601      	mov	r1, r0
 80034ce:	462a      	mov	r2, r5
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	fb03 f302 	mul.w	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	441a      	add	r2, r3
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	3301      	adds	r3, #1
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	3301      	adds	r3, #1
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	f6ff af66 	blt.w	80033c2 <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	3301      	adds	r3, #1
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	429a      	cmp	r2, r3
 8003502:	f6ff af5b 	blt.w	80033bc <cholesky+0x64>
        }
}
 8003506:	bf00      	nop
 8003508:	372c      	adds	r7, #44	; 0x2c
 800350a:	46bd      	mov	sp, r7
 800350c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003510:	3ff00000 	.word	0x3ff00000

08003514 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8003514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003518:	b090      	sub	sp, #64	; 0x40
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	ed87 0a00 	vstr	s0, [r7]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1e5a      	subs	r2, r3, #1
 800352a:	63ba      	str	r2, [r7, #56]	; 0x38
 800352c:	4619      	mov	r1, r3
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	f04f 0400 	mov.w	r4, #0
 800353a:	0154      	lsls	r4, r2, #5
 800353c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003540:	014b      	lsls	r3, r1, #5
 8003542:	68fd      	ldr	r5, [r7, #12]
 8003544:	1e6b      	subs	r3, r5, #1
 8003546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003548:	462b      	mov	r3, r5
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	f04f 0400 	mov.w	r4, #0
 8003558:	0154      	lsls	r4, r2, #5
 800355a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800355e:	014b      	lsls	r3, r1, #5
 8003560:	466b      	mov	r3, sp
 8003562:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	68fe      	ldr	r6, [r7, #12]
 8003568:	1e43      	subs	r3, r0, #1
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
 800356c:	4603      	mov	r3, r0
 800356e:	4619      	mov	r1, r3
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	f04f 0400 	mov.w	r4, #0
 800357c:	0154      	lsls	r4, r2, #5
 800357e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003582:	014b      	lsls	r3, r1, #5
 8003584:	4603      	mov	r3, r0
 8003586:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800358a:	1e73      	subs	r3, r6, #1
 800358c:	623b      	str	r3, [r7, #32]
 800358e:	4603      	mov	r3, r0
 8003590:	4619      	mov	r1, r3
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	4633      	mov	r3, r6
 8003598:	f04f 0400 	mov.w	r4, #0
 800359c:	fb03 fe02 	mul.w	lr, r3, r2
 80035a0:	fb01 fc04 	mul.w	ip, r1, r4
 80035a4:	44f4      	add	ip, lr
 80035a6:	fba1 3403 	umull	r3, r4, r1, r3
 80035aa:	eb0c 0204 	add.w	r2, ip, r4
 80035ae:	4614      	mov	r4, r2
 80035b0:	f04f 0100 	mov.w	r1, #0
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	0162      	lsls	r2, r4, #5
 80035ba:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80035be:	0159      	lsls	r1, r3, #5
 80035c0:	4603      	mov	r3, r0
 80035c2:	4619      	mov	r1, r3
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	4633      	mov	r3, r6
 80035ca:	f04f 0400 	mov.w	r4, #0
 80035ce:	fb03 fe02 	mul.w	lr, r3, r2
 80035d2:	fb01 fc04 	mul.w	ip, r1, r4
 80035d6:	44f4      	add	ip, lr
 80035d8:	fba1 3403 	umull	r3, r4, r1, r3
 80035dc:	eb0c 0204 	add.w	r2, ip, r4
 80035e0:	4614      	mov	r4, r2
 80035e2:	f04f 0100 	mov.w	r1, #0
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	0162      	lsls	r2, r4, #5
 80035ec:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80035f0:	0159      	lsls	r1, r3, #5
 80035f2:	4603      	mov	r3, r0
 80035f4:	4632      	mov	r2, r6
 80035f6:	fb02 f303 	mul.w	r3, r2, r3
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	3303      	adds	r3, #3
 80035fe:	3307      	adds	r3, #7
 8003600:	08db      	lsrs	r3, r3, #3
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	ebad 0d03 	sub.w	sp, sp, r3
 8003608:	466b      	mov	r3, sp
 800360a:	3303      	adds	r3, #3
 800360c:	089b      	lsrs	r3, r3, #2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8003612:	69f8      	ldr	r0, [r7, #28]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	fb02 f303 	mul.w	r3, r2, r3
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	461a      	mov	r2, r3
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	f015 fe35 	bl	8019290 <memcpy>
    for (int i = 0; i < n; i++) {
 8003626:	2300      	movs	r3, #0
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
 800362a:	e022      	b.n	8003672 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 800362c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003630:	69fa      	ldr	r2, [r7, #28]
 8003632:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003634:	fb01 f103 	mul.w	r1, r1, r3
 8003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363a:	440b      	add	r3, r1
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	ed93 7a00 	vldr	s14, [r3]
 8003644:	edd7 6a00 	vldr	s13, [r7]
 8003648:	edd7 7a00 	vldr	s15, [r7]
 800364c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003650:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800365c:	fb01 f103 	mul.w	r1, r1, r3
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	440b      	add	r3, r1
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	3301      	adds	r3, #1
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
 8003672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	429a      	cmp	r2, r3
 8003678:	dbd8      	blt.n	800362c <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	68fe      	ldr	r6, [r7, #12]
 800367e:	466b      	mov	r3, sp
 8003680:	469a      	mov	sl, r3
 8003682:	1e43      	subs	r3, r0, #1
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	4603      	mov	r3, r0
 8003688:	4619      	mov	r1, r3
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	f04f 0400 	mov.w	r4, #0
 8003696:	0154      	lsls	r4, r2, #5
 8003698:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800369c:	014b      	lsls	r3, r1, #5
 800369e:	4603      	mov	r3, r0
 80036a0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80036a4:	1e73      	subs	r3, r6, #1
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	4603      	mov	r3, r0
 80036aa:	4619      	mov	r1, r3
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	4633      	mov	r3, r6
 80036b2:	f04f 0400 	mov.w	r4, #0
 80036b6:	fb03 fe02 	mul.w	lr, r3, r2
 80036ba:	fb01 fc04 	mul.w	ip, r1, r4
 80036be:	44f4      	add	ip, lr
 80036c0:	fba1 3403 	umull	r3, r4, r1, r3
 80036c4:	eb0c 0204 	add.w	r2, ip, r4
 80036c8:	4614      	mov	r4, r2
 80036ca:	f04f 0100 	mov.w	r1, #0
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	0162      	lsls	r2, r4, #5
 80036d4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80036d8:	0159      	lsls	r1, r3, #5
 80036da:	4603      	mov	r3, r0
 80036dc:	4619      	mov	r1, r3
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	4633      	mov	r3, r6
 80036e4:	f04f 0400 	mov.w	r4, #0
 80036e8:	fb03 fe02 	mul.w	lr, r3, r2
 80036ec:	fb01 fc04 	mul.w	ip, r1, r4
 80036f0:	44f4      	add	ip, lr
 80036f2:	fba1 3403 	umull	r3, r4, r1, r3
 80036f6:	eb0c 0204 	add.w	r2, ip, r4
 80036fa:	4614      	mov	r4, r2
 80036fc:	f04f 0100 	mov.w	r1, #0
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	0162      	lsls	r2, r4, #5
 8003706:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800370a:	0159      	lsls	r1, r3, #5
 800370c:	4603      	mov	r3, r0
 800370e:	4632      	mov	r2, r6
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	3303      	adds	r3, #3
 8003718:	3307      	adds	r3, #7
 800371a:	08db      	lsrs	r3, r3, #3
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	ebad 0d03 	sub.w	sp, sp, r3
 8003722:	466b      	mov	r3, sp
 8003724:	3303      	adds	r3, #3
 8003726:	089b      	lsrs	r3, r3, #2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4619      	mov	r1, r3
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f7ff fe10 	bl	8003358 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4619      	mov	r1, r3
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff fd78 	bl	8003232 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	461a      	mov	r2, r3
 800374e:	2100      	movs	r1, #0
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f015 fda8 	bl	80192a6 <memset>
    for(int i = 0; i < n; i++){
 8003756:	2300      	movs	r3, #0
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375a:	e04e      	b.n	80037fa <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 800375c:	2300      	movs	r3, #0
 800375e:	633b      	str	r3, [r7, #48]	; 0x30
 8003760:	e044      	b.n	80037ec <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 8003762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	4293      	cmp	r3, r2
 8003768:	bfb8      	it	lt
 800376a:	4613      	movlt	r3, r2
 800376c:	637b      	str	r3, [r7, #52]	; 0x34
 800376e:	e036      	b.n	80037de <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8003770:	462a      	mov	r2, r5
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	fb03 f302 	mul.w	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	441a      	add	r2, r3
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	ed93 7a00 	vldr	s14, [r3]
 8003788:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003790:	fb01 f103 	mul.w	r1, r1, r3
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	440b      	add	r3, r1
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	edd3 6a00 	vldr	s13, [r3]
 80037a0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80037a8:	fb01 f103 	mul.w	r1, r1, r3
 80037ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ae:	440b      	add	r3, r1
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	edd3 7a00 	vldr	s15, [r3]
 80037b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037bc:	462a      	mov	r2, r5
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	fb03 f302 	mul.w	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	441a      	add	r2, r3
 80037ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 80037d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037da:	3301      	adds	r3, #1
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
 80037de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	dbc4      	blt.n	8003770 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	3301      	adds	r3, #1
 80037ea:	633b      	str	r3, [r7, #48]	; 0x30
 80037ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	dbb6      	blt.n	8003762 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 80037f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f6:	3301      	adds	r3, #1
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	429a      	cmp	r2, r3
 8003800:	dbac      	blt.n	800375c <cholesky_inverse+0x248>
 8003802:	46d5      	mov	sp, sl
 8003804:	46cd      	mov	sp, r9
            }
        }
    }
}
 8003806:	bf00      	nop
 8003808:	3740      	adds	r7, #64	; 0x40
 800380a:	46bd      	mov	sp, r7
 800380c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003810 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8003810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003812:	b0b3      	sub	sp, #204	; 0xcc
 8003814:	af06      	add	r7, sp, #24
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	460b      	mov	r3, r1
 800381c:	72fb      	strb	r3, [r7, #11]
 800381e:	4613      	mov	r3, r2
 8003820:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 8003822:	f107 0310 	add.w	r3, r7, #16
 8003826:	2296      	movs	r2, #150	; 0x96
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f015 fd3b 	bl	80192a6 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8003830:	7afb      	ldrb	r3, [r7, #11]
 8003832:	7aba      	ldrb	r2, [r7, #10]
 8003834:	f107 0010 	add.w	r0, r7, #16
 8003838:	9202      	str	r2, [sp, #8]
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	2301      	movs	r3, #1
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a41      	ldr	r2, [pc, #260]	; (8003948 <logSensor+0x138>)
 8003844:	2196      	movs	r1, #150	; 0x96
 8003846:	f015 fdef 	bl	8019428 <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 800384a:	7abb      	ldrb	r3, [r7, #10]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d002      	beq.n	8003856 <logSensor+0x46>
 8003850:	2b02      	cmp	r3, #2
 8003852:	d01d      	beq.n	8003890 <logSensor+0x80>
 8003854:	e055      	b.n	8003902 <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 800385c:	f107 0310 	add.w	r3, r7, #16
 8003860:	4618      	mov	r0, r3
 8003862:	f7fc fcd5 	bl	8000210 <strlen>
 8003866:	4602      	mov	r2, r0
 8003868:	f107 0310 	add.w	r3, r7, #16
 800386c:	1898      	adds	r0, r3, r2
 800386e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800387e:	6892      	ldr	r2, [r2, #8]
 8003880:	9201      	str	r2, [sp, #4]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	460b      	mov	r3, r1
 8003886:	4a31      	ldr	r2, [pc, #196]	; (800394c <logSensor+0x13c>)
 8003888:	2196      	movs	r1, #150	; 0x96
 800388a:	f015 fdcd 	bl	8019428 <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 800388e:	e04e      	b.n	800392e <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 8003896:	f107 0310 	add.w	r3, r7, #16
 800389a:	4618      	mov	r0, r3
 800389c:	f7fc fcb8 	bl	8000210 <strlen>
 80038a0:	4602      	mov	r2, r0
 80038a2:	f107 0310 	add.w	r3, r7, #16
 80038a6:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 80038a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 80038b0:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 80038b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 80038ba:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 80038bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 80038c4:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 80038c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038ca:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 80038ce:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 80038d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 80038d8:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 80038da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 80038e2:	461e      	mov	r6, r3
 80038e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	9305      	str	r3, [sp, #20]
 80038ec:	9604      	str	r6, [sp, #16]
 80038ee:	9503      	str	r5, [sp, #12]
 80038f0:	9402      	str	r4, [sp, #8]
 80038f2:	9101      	str	r1, [sp, #4]
 80038f4:	9200      	str	r2, [sp, #0]
 80038f6:	4663      	mov	r3, ip
 80038f8:	4a15      	ldr	r2, [pc, #84]	; (8003950 <logSensor+0x140>)
 80038fa:	2196      	movs	r1, #150	; 0x96
 80038fc:	f015 fd94 	bl	8019428 <sniprintf>
	}
		break;
 8003900:	e015      	b.n	800392e <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 8003902:	f107 0310 	add.w	r3, r7, #16
 8003906:	4618      	mov	r0, r3
 8003908:	f7fc fc82 	bl	8000210 <strlen>
 800390c:	4602      	mov	r2, r0
 800390e:	f107 0310 	add.w	r3, r7, #16
 8003912:	4413      	add	r3, r2
 8003914:	4a0f      	ldr	r2, [pc, #60]	; (8003954 <logSensor+0x144>)
 8003916:	461d      	mov	r5, r3
 8003918:	4614      	mov	r4, r2
 800391a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800391c:	6028      	str	r0, [r5, #0]
 800391e:	6069      	str	r1, [r5, #4]
 8003920:	60aa      	str	r2, [r5, #8]
 8003922:	60eb      	str	r3, [r5, #12]
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	6128      	str	r0, [r5, #16]
 8003928:	7923      	ldrb	r3, [r4, #4]
 800392a:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 800392c:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <logSensor+0x148>)
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	f107 0110 	add.w	r1, r7, #16
 8003936:	2300      	movs	r3, #0
 8003938:	2200      	movs	r2, #0
 800393a:	f011 fc29 	bl	8015190 <osMessageQueuePut>
 800393e:	4603      	mov	r3, r0
}
 8003940:	4618      	mov	r0, r3
 8003942:	37b4      	adds	r7, #180	; 0xb4
 8003944:	46bd      	mov	sp, r7
 8003946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003948:	0801bc44 	.word	0x0801bc44
 800394c:	0801bc54 	.word	0x0801bc54
 8003950:	0801bc64 	.word	0x0801bc64
 8003954:	0801bc84 	.word	0x0801bc84
 8003958:	20015e50 	.word	0x20015e50

0800395c <logEstimatorVar>:
			flight_phase);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 800395c:	b084      	sub	sp, #16
 800395e:	b580      	push	{r7, lr}
 8003960:	b0ac      	sub	sp, #176	; 0xb0
 8003962:	af04      	add	r7, sp, #16
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800396a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 800396e:	f107 0308 	add.w	r3, r7, #8
 8003972:	2296      	movs	r2, #150	; 0x96
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f015 fc95 	bl	80192a6 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld;%ld\n", ts, ESTIMATOR_VAR,
 800397c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003980:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003984:	f107 0008 	add.w	r0, r7, #8
 8003988:	9202      	str	r2, [sp, #8]
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	2303      	movs	r3, #3
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <logEstimatorVar+0x60>)
 8003994:	2196      	movs	r1, #150	; 0x96
 8003996:	f015 fd47 	bl	8019428 <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <logEstimatorVar+0x64>)
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	f107 0108 	add.w	r1, r7, #8
 80039a2:	2300      	movs	r3, #0
 80039a4:	2200      	movs	r2, #0
 80039a6:	f011 fbf3 	bl	8015190 <osMessageQueuePut>
 80039aa:	4603      	mov	r3, r0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	37a0      	adds	r7, #160	; 0xa0
 80039b0:	46bd      	mov	sp, r7
 80039b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039b6:	b004      	add	sp, #16
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	0801bca8 	.word	0x0801bca8
 80039c0:	20015e50 	.word	0x20015e50

080039c4 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b0ae      	sub	sp, #184	; 0xb8
 80039c8:	af04      	add	r7, sp, #16
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
	log_entry_t log_entry = { 0 };
 80039d2:	f107 0310 	add.w	r3, r7, #16
 80039d6:	2296      	movs	r2, #150	; 0x96
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f015 fc63 	bl	80192a6 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld;%ld;%ld\n", ts, CONTROLLER_OUTPUT,
 80039e0:	f107 0010 	add.w	r0, r7, #16
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	9303      	str	r3, [sp, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	9302      	str	r3, [sp, #8]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	2304      	movs	r3, #4
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a08      	ldr	r2, [pc, #32]	; (8003a18 <logControllerOutput+0x54>)
 80039f8:	2196      	movs	r1, #150	; 0x96
 80039fa:	f015 fd15 	bl	8019428 <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80039fe:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <logControllerOutput+0x58>)
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	f107 0110 	add.w	r1, r7, #16
 8003a06:	2300      	movs	r3, #0
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f011 fbc1 	bl	8015190 <osMessageQueuePut>
 8003a0e:	4603      	mov	r3, r0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	37a8      	adds	r7, #168	; 0xa8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	0801bcb8 	.word	0x0801bcb8
 8003a1c:	20015e50 	.word	0x20015e50

08003a20 <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b0ae      	sub	sp, #184	; 0xb8
 8003a24:	af04      	add	r7, sp, #16
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
	log_entry_t log_entry = { 0 };
 8003a2c:	f107 0310 	add.w	r3, r7, #16
 8003a30:	2296      	movs	r2, #150	; 0x96
 8003a32:	2100      	movs	r1, #0
 8003a34:	4618      	mov	r0, r3
 8003a36:	f015 fc36 	bl	80192a6 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld;%ld\n", ts, MOTOR_POSITION,
 8003a3a:	f107 0010 	add.w	r0, r7, #16
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	9302      	str	r3, [sp, #8]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	2305      	movs	r3, #5
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <logMotor+0x50>)
 8003a4e:	2196      	movs	r1, #150	; 0x96
 8003a50:	f015 fcea 	bl	8019428 <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003a54:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <logMotor+0x54>)
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	f107 0110 	add.w	r1, r7, #16
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f011 fb96 	bl	8015190 <osMessageQueuePut>
 8003a64:	4603      	mov	r3, r0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	37a8      	adds	r7, #168	; 0xa8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	0801bca8 	.word	0x0801bca8
 8003a74:	20015e50 	.word	0x20015e50

08003a78 <UsbPrint>:
	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
}

/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8003a78:	b40f      	push	{r0, r1, r2, r3}
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8003a80:	2301      	movs	r3, #1
 8003a82:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <UsbPrint+0x60>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f011 f88a 	bl	8014ba4 <osMutexAcquire>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d118      	bne.n	8003ac8 <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 8003a96:	f107 0314 	add.w	r3, r7, #20
 8003a9a:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	21c8      	movs	r1, #200	; 0xc8
 8003aa2:	480e      	ldr	r0, [pc, #56]	; (8003adc <UsbPrint+0x64>)
 8003aa4:	f015 fd20 	bl	80194e8 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8003aa8:	480c      	ldr	r0, [pc, #48]	; (8003adc <UsbPrint+0x64>)
 8003aaa:	f7fc fbb1 	bl	8000210 <strlen>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4809      	ldr	r0, [pc, #36]	; (8003adc <UsbPrint+0x64>)
 8003ab6:	f014 ff07 	bl	80188c8 <CDC_Transmit_FS>
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 8003abe:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <UsbPrint+0x60>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f011 f8cc 	bl	8014c60 <osMutexRelease>
	}
#endif
	return ret;
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ad4:	b004      	add	sp, #16
 8003ad6:	4770      	bx	lr
 8003ad8:	2000961c 	.word	0x2000961c
 8003adc:	20008994 	.word	0x20008994

08003ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ae0:	b590      	push	{r4, r7, lr}
 8003ae2:	b0a1      	sub	sp, #132	; 0x84
 8003ae4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ae6:	f002 fc68 	bl	80063ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003aea:	f000 f94d 	bl	8003d88 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	(DBGMCU)->APB1FZ = 0x7E01BFF;
 8003aee:	4b75      	ldr	r3, [pc, #468]	; (8003cc4 <main+0x1e4>)
 8003af0:	4a75      	ldr	r2, [pc, #468]	; (8003cc8 <main+0x1e8>)
 8003af2:	609a      	str	r2, [r3, #8]
	(DBGMCU)->APB2FZ = 0x70003;
 8003af4:	4b73      	ldr	r3, [pc, #460]	; (8003cc4 <main+0x1e4>)
 8003af6:	4a75      	ldr	r2, [pc, #468]	; (8003ccc <main+0x1ec>)
 8003af8:	60da      	str	r2, [r3, #12]
	init_env(&global_env);
 8003afa:	4875      	ldr	r0, [pc, #468]	; (8003cd0 <main+0x1f0>)
 8003afc:	f7fe f874 	bl	8001be8 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 8003b00:	4874      	ldr	r0, [pc, #464]	; (8003cd4 <main+0x1f4>)
 8003b02:	f7fe fb2f 	bl	8002164 <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b06:	f000 fc7d 	bl	8004404 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b0a:	f000 fc29 	bl	8004360 <MX_DMA_Init>
  MX_SPI3_Init();
 8003b0e:	f000 faf7 	bl	8004100 <MX_SPI3_Init>
  MX_SPI1_Init();
 8003b12:	f000 fa85 	bl	8004020 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8003b16:	f000 fa63 	bl	8003fe0 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8003b1a:	f000 fab9 	bl	8004090 <MX_SPI2_Init>
  MX_FATFS_Init();
 8003b1e:	f00b ffc7 	bl	800fab0 <MX_FATFS_Init>
  MX_UART7_Init();
 8003b22:	f000 fb55 	bl	80041d0 <MX_UART7_Init>
  MX_USART1_UART_Init();
 8003b26:	f000 fb8b 	bl	8004240 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003b2a:	f000 fbb9 	bl	80042a0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003b2e:	f000 fbe7 	bl	8004300 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8003b32:	f000 f9c3 	bl	8003ebc <MX_ADC1_Init>
  MX_UART4_Init();
 8003b36:	f000 fb1b 	bl	8004170 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 8003b3a:	f014 fe07 	bl	801874c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003b3e:	f010 fdc5 	bl	80146cc <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	/* Sensor Board 1 Mutex */
	const osMutexAttr_t sb1_mutex_attr = {
 8003b42:	4b65      	ldr	r3, [pc, #404]	; (8003cd8 <main+0x1f8>)
 8003b44:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8003b48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb1_mutex = osMutexNew(&sb1_mutex_attr);
 8003b4e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b52:	4618      	mov	r0, r3
 8003b54:	f010 ff8c 	bl	8014a70 <osMutexNew>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	4b60      	ldr	r3, [pc, #384]	; (8003cdc <main+0x1fc>)
 8003b5c:	601a      	str	r2, [r3, #0]

	/* Sensor Board 2 Mutex */
	const osMutexAttr_t sb2_mutex_attr = {
 8003b5e:	4b60      	ldr	r3, [pc, #384]	; (8003ce0 <main+0x200>)
 8003b60:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb2_mutex = osMutexNew(&sb2_mutex_attr);
 8003b6a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f010 ff7e 	bl	8014a70 <osMutexNew>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b5b      	ldr	r3, [pc, #364]	; (8003ce4 <main+0x204>)
 8003b78:	601a      	str	r2, [r3, #0]

	/* Sensor Board 3 Mutex */
	const osMutexAttr_t sb3_mutex_attr = {
 8003b7a:	4b5b      	ldr	r3, [pc, #364]	; (8003ce8 <main+0x208>)
 8003b7c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8003b80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb3_mutex = osMutexNew(&sb3_mutex_attr);
 8003b86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f010 ff70 	bl	8014a70 <osMutexNew>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b56      	ldr	r3, [pc, #344]	; (8003cec <main+0x20c>)
 8003b94:	601a      	str	r2, [r3, #0]

	/* State Estimation Output Mutex */
	const osMutexAttr_t state_est_mutex_attr = {
 8003b96:	4b56      	ldr	r3, [pc, #344]	; (8003cf0 <main+0x210>)
 8003b98:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	state_est_mutex = osMutexNew(&state_est_mutex_attr);
 8003ba2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f010 ff62 	bl	8014a70 <osMutexNew>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <main+0x214>)
 8003bb0:	601a      	str	r2, [r3, #0]

	/* Controller Output Mutex */
	const osMutexAttr_t controller_mutex_attr = {
 8003bb2:	4b51      	ldr	r3, [pc, #324]	; (8003cf8 <main+0x218>)
 8003bb4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003bb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	controller_mutex = osMutexNew(&controller_mutex_attr);
 8003bbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f010 ff54 	bl	8014a70 <osMutexNew>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b4c      	ldr	r3, [pc, #304]	; (8003cfc <main+0x21c>)
 8003bcc:	601a      	str	r2, [r3, #0]

	/* FSM Output Mutex */
	const osMutexAttr_t fsm_mutex_attr = {
 8003bce:	4b4c      	ldr	r3, [pc, #304]	; (8003d00 <main+0x220>)
 8003bd0:	f107 0420 	add.w	r4, r7, #32
 8003bd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	fsm_mutex = osMutexNew(&fsm_mutex_attr);
 8003bda:	f107 0320 	add.w	r3, r7, #32
 8003bde:	4618      	mov	r0, r3
 8003be0:	f010 ff46 	bl	8014a70 <osMutexNew>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <main+0x224>)
 8003be8:	601a      	str	r2, [r3, #0]

	/* Environment Mutex */
	const osMutexAttr_t environment_mutex_attr = {
 8003bea:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <main+0x228>)
 8003bec:	f107 0410 	add.w	r4, r7, #16
 8003bf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bf2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	environment_mutex = osMutexNew(&environment_mutex_attr);
 8003bf6:	f107 0310 	add.w	r3, r7, #16
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f010 ff38 	bl	8014a70 <osMutexNew>
 8003c00:	4602      	mov	r2, r0
 8003c02:	4b42      	ldr	r3, [pc, #264]	; (8003d0c <main+0x22c>)
 8003c04:	601a      	str	r2, [r3, #0]



#ifdef DEBUG
	const osMutexAttr_t print_mutex_attr = {
 8003c06:	4b42      	ldr	r3, [pc, #264]	; (8003d10 <main+0x230>)
 8003c08:	463c      	mov	r4, r7
 8003c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					  // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	print_mutex = osMutexNew(&print_mutex_attr);
 8003c10:	463b      	mov	r3, r7
 8003c12:	4618      	mov	r0, r3
 8003c14:	f010 ff2c 	bl	8014a70 <osMutexNew>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <main+0x234>)
 8003c1c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2196      	movs	r1, #150	; 0x96
 8003c22:	2080      	movs	r0, #128	; 0x80
 8003c24:	f011 fa2e 	bl	8015084 <osMessageQueueNew>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <main+0x238>)
 8003c2c:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003c2e:	4a3b      	ldr	r2, [pc, #236]	; (8003d1c <main+0x23c>)
 8003c30:	2100      	movs	r1, #0
 8003c32:	483b      	ldr	r0, [pc, #236]	; (8003d20 <main+0x240>)
 8003c34:	f010 fe08 	bl	8014848 <osThreadNew>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b3a      	ldr	r3, [pc, #232]	; (8003d24 <main+0x244>)
 8003c3c:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8003c3e:	4a3a      	ldr	r2, [pc, #232]	; (8003d28 <main+0x248>)
 8003c40:	2100      	movs	r1, #0
 8003c42:	483a      	ldr	r0, [pc, #232]	; (8003d2c <main+0x24c>)
 8003c44:	f010 fe00 	bl	8014848 <osThreadNew>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <main+0x250>)
 8003c4c:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8003c4e:	4a39      	ldr	r2, [pc, #228]	; (8003d34 <main+0x254>)
 8003c50:	2100      	movs	r1, #0
 8003c52:	4839      	ldr	r0, [pc, #228]	; (8003d38 <main+0x258>)
 8003c54:	f010 fdf8 	bl	8014848 <osThreadNew>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b38      	ldr	r3, [pc, #224]	; (8003d3c <main+0x25c>)
 8003c5c:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8003c5e:	4a38      	ldr	r2, [pc, #224]	; (8003d40 <main+0x260>)
 8003c60:	2100      	movs	r1, #0
 8003c62:	4838      	ldr	r0, [pc, #224]	; (8003d44 <main+0x264>)
 8003c64:	f010 fdf0 	bl	8014848 <osThreadNew>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b37      	ldr	r3, [pc, #220]	; (8003d48 <main+0x268>)
 8003c6c:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 8003c6e:	4a37      	ldr	r2, [pc, #220]	; (8003d4c <main+0x26c>)
 8003c70:	2100      	movs	r1, #0
 8003c72:	4837      	ldr	r0, [pc, #220]	; (8003d50 <main+0x270>)
 8003c74:	f010 fde8 	bl	8014848 <osThreadNew>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <main+0x274>)
 8003c7c:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 8003c7e:	4a36      	ldr	r2, [pc, #216]	; (8003d58 <main+0x278>)
 8003c80:	2100      	movs	r1, #0
 8003c82:	4836      	ldr	r0, [pc, #216]	; (8003d5c <main+0x27c>)
 8003c84:	f010 fde0 	bl	8014848 <osThreadNew>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b35      	ldr	r3, [pc, #212]	; (8003d60 <main+0x280>)
 8003c8c:	601a      	str	r2, [r3, #0]

  /* creation of tas_fsm */
  tas_fsmHandle = osThreadNew(vTaskFSM, NULL, &tas_fsm_attributes);
 8003c8e:	4a35      	ldr	r2, [pc, #212]	; (8003d64 <main+0x284>)
 8003c90:	2100      	movs	r1, #0
 8003c92:	4835      	ldr	r0, [pc, #212]	; (8003d68 <main+0x288>)
 8003c94:	f010 fdd8 	bl	8014848 <osThreadNew>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b34      	ldr	r3, [pc, #208]	; (8003d6c <main+0x28c>)
 8003c9c:	601a      	str	r2, [r3, #0]

  /* creation of task_gps */
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 8003c9e:	4a34      	ldr	r2, [pc, #208]	; (8003d70 <main+0x290>)
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4834      	ldr	r0, [pc, #208]	; (8003d74 <main+0x294>)
 8003ca4:	f010 fdd0 	bl	8014848 <osThreadNew>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b33      	ldr	r3, [pc, #204]	; (8003d78 <main+0x298>)
 8003cac:	601a      	str	r2, [r3, #0]

  /* creation of task_battery */
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 8003cae:	4a33      	ldr	r2, [pc, #204]	; (8003d7c <main+0x29c>)
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4833      	ldr	r0, [pc, #204]	; (8003d80 <main+0x2a0>)
 8003cb4:	f010 fdc8 	bl	8014848 <osThreadNew>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b32      	ldr	r3, [pc, #200]	; (8003d84 <main+0x2a4>)
 8003cbc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003cbe:	f010 fd5b 	bl	8014778 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8003cc2:	e7fe      	b.n	8003cc2 <main+0x1e2>
 8003cc4:	e0042000 	.word	0xe0042000
 8003cc8:	07e01bff 	.word	0x07e01bff
 8003ccc:	00070003 	.word	0x00070003
 8003cd0:	20000334 	.word	0x20000334
 8003cd4:	20000344 	.word	0x20000344
 8003cd8:	0801bd64 	.word	0x0801bd64
 8003cdc:	20008a5c 	.word	0x20008a5c
 8003ce0:	0801bd80 	.word	0x0801bd80
 8003ce4:	20009620 	.word	0x20009620
 8003ce8:	0801bd9c 	.word	0x0801bd9c
 8003cec:	20008a60 	.word	0x20008a60
 8003cf0:	0801bdbc 	.word	0x0801bdbc
 8003cf4:	2000fc50 	.word	0x2000fc50
 8003cf8:	0801bde0 	.word	0x0801bde0
 8003cfc:	2000da00 	.word	0x2000da00
 8003d00:	0801bdfc 	.word	0x0801bdfc
 8003d04:	2000968c 	.word	0x2000968c
 8003d08:	0801be20 	.word	0x0801be20
 8003d0c:	2000b910 	.word	0x2000b910
 8003d10:	0801be3c 	.word	0x0801be3c
 8003d14:	2000961c 	.word	0x2000961c
 8003d18:	20015e50 	.word	0x20015e50
 8003d1c:	0801c25c 	.word	0x0801c25c
 8003d20:	08004505 	.word	0x08004505
 8003d24:	20009628 	.word	0x20009628
 8003d28:	0801c280 	.word	0x0801c280
 8003d2c:	08005e59 	.word	0x08005e59
 8003d30:	2000da50 	.word	0x2000da50
 8003d34:	0801c2a4 	.word	0x0801c2a4
 8003d38:	08005451 	.word	0x08005451
 8003d3c:	20019ff0 	.word	0x20019ff0
 8003d40:	0801c2c8 	.word	0x0801c2c8
 8003d44:	08005da9 	.word	0x08005da9
 8003d48:	2000b998 	.word	0x2000b998
 8003d4c:	0801c2ec 	.word	0x0801c2ec
 8003d50:	08005a25 	.word	0x08005a25
 8003d54:	200098b0 	.word	0x200098b0
 8003d58:	0801c310 	.word	0x0801c310
 8003d5c:	080058f5 	.word	0x080058f5
 8003d60:	2000da4c 	.word	0x2000da4c
 8003d64:	0801c334 	.word	0x0801c334
 8003d68:	08005645 	.word	0x08005645
 8003d6c:	2000dab4 	.word	0x2000dab4
 8003d70:	0801c358 	.word	0x0801c358
 8003d74:	080057b1 	.word	0x080057b1
 8003d78:	20009624 	.word	0x20009624
 8003d7c:	0801c37c 	.word	0x0801c37c
 8003d80:	08005111 	.word	0x08005111
 8003d84:	20019f8c 	.word	0x20019f8c

08003d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b0b4      	sub	sp, #208	; 0xd0
 8003d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d8e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d92:	2230      	movs	r2, #48	; 0x30
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f015 fa85 	bl	80192a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d9c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dac:	f107 0308 	add.w	r3, r7, #8
 8003db0:	2284      	movs	r2, #132	; 0x84
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f015 fa76 	bl	80192a6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dba:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <SystemClock_Config+0x128>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a3c      	ldr	r2, [pc, #240]	; (8003eb0 <SystemClock_Config+0x128>)
 8003dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc6:	4b3a      	ldr	r3, [pc, #232]	; (8003eb0 <SystemClock_Config+0x128>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dce:	607b      	str	r3, [r7, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dd2:	4b38      	ldr	r3, [pc, #224]	; (8003eb4 <SystemClock_Config+0x12c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003dda:	4a36      	ldr	r2, [pc, #216]	; (8003eb4 <SystemClock_Config+0x12c>)
 8003ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <SystemClock_Config+0x12c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003df8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003e0a:	2304      	movs	r3, #4
 8003e0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003e10:	23a8      	movs	r3, #168	; 0xa8
 8003e12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e16:	2302      	movs	r3, #2
 8003e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003e1c:	2307      	movs	r3, #7
 8003e1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f005 f820 	bl	8008e6c <HAL_RCC_OscConfig>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003e32:	f000 fb83 	bl	800453c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e36:	230f      	movs	r3, #15
 8003e38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e58:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e5c:	2105      	movs	r1, #5
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f005 faa8 	bl	80093b4 <HAL_RCC_ClockConfig>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8003e6a:	f000 fb67 	bl	800453c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <SystemClock_Config+0x130>)
 8003e70:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003e72:	2300      	movs	r3, #0
 8003e74:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e76:	2300      	movs	r3, #0
 8003e78:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003e82:	2300      	movs	r3, #0
 8003e84:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e92:	f107 0308 	add.w	r3, r7, #8
 8003e96:	4618      	mov	r0, r3
 8003e98:	f005 fcb6 	bl	8009808 <HAL_RCCEx_PeriphCLKConfig>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8003ea2:	f000 fb4b 	bl	800453c <Error_Handler>
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	37d0      	adds	r7, #208	; 0xd0
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	00a013c0 	.word	0x00a013c0

08003ebc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003ec2:	463b      	mov	r3, r7
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	605a      	str	r2, [r3, #4]
 8003eca:	609a      	str	r2, [r3, #8]
 8003ecc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8003ece:	4b40      	ldr	r3, [pc, #256]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003ed0:	4a40      	ldr	r2, [pc, #256]	; (8003fd4 <MX_ADC1_Init+0x118>)
 8003ed2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003ed4:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003ed6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003eda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003edc:	4b3c      	ldr	r3, [pc, #240]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003ee2:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003ee8:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003eee:	4b38      	ldr	r3, [pc, #224]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ef6:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003efc:	4b34      	ldr	r3, [pc, #208]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003efe:	4a36      	ldr	r2, [pc, #216]	; (8003fd8 <MX_ADC1_Init+0x11c>)
 8003f00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f02:	4b33      	ldr	r3, [pc, #204]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8003f08:	4b31      	ldr	r3, [pc, #196]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003f0a:	2205      	movs	r2, #5
 8003f0c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003f0e:	4b30      	ldr	r3, [pc, #192]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f16:	4b2e      	ldr	r3, [pc, #184]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003f1c:	482c      	ldr	r0, [pc, #176]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003f1e:	f002 fa9b 	bl	8006458 <HAL_ADC_Init>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003f28:	f000 fb08 	bl	800453c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003f30:	2301      	movs	r3, #1
 8003f32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003f34:	2307      	movs	r3, #7
 8003f36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f38:	463b      	mov	r3, r7
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4824      	ldr	r0, [pc, #144]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003f3e:	f002 fc25 	bl	800678c <HAL_ADC_ConfigChannel>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003f48:	f000 faf8 	bl	800453c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003f4c:	230a      	movs	r3, #10
 8003f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003f50:	2302      	movs	r3, #2
 8003f52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8003f54:	2305      	movs	r3, #5
 8003f56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f58:	463b      	mov	r3, r7
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	481c      	ldr	r0, [pc, #112]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003f5e:	f002 fc15 	bl	800678c <HAL_ADC_ConfigChannel>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003f68:	f000 fae8 	bl	800453c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003f6c:	230b      	movs	r3, #11
 8003f6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003f70:	2303      	movs	r3, #3
 8003f72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f74:	463b      	mov	r3, r7
 8003f76:	4619      	mov	r1, r3
 8003f78:	4815      	ldr	r0, [pc, #84]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003f7a:	f002 fc07 	bl	800678c <HAL_ADC_ConfigChannel>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8003f84:	f000 fada 	bl	800453c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003f88:	230f      	movs	r3, #15
 8003f8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003f90:	2307      	movs	r3, #7
 8003f92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f94:	463b      	mov	r3, r7
 8003f96:	4619      	mov	r1, r3
 8003f98:	480d      	ldr	r0, [pc, #52]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003f9a:	f002 fbf7 	bl	800678c <HAL_ADC_ConfigChannel>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8003fa4:	f000 faca 	bl	800453c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <MX_ADC1_Init+0x120>)
 8003faa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8003fac:	2305      	movs	r3, #5
 8003fae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003fb4:	463b      	mov	r3, r7
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4805      	ldr	r0, [pc, #20]	; (8003fd0 <MX_ADC1_Init+0x114>)
 8003fba:	f002 fbe7 	bl	800678c <HAL_ADC_ConfigChannel>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8003fc4:	f000 faba 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003fc8:	bf00      	nop
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	2000da04 	.word	0x2000da04
 8003fd4:	40012000 	.word	0x40012000
 8003fd8:	0f000001 	.word	0x0f000001
 8003fdc:	10000012 	.word	0x10000012

08003fe0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <MX_SDMMC1_SD_Init+0x38>)
 8003fe6:	4a0d      	ldr	r2, [pc, #52]	; (800401c <MX_SDMMC1_SD_Init+0x3c>)
 8003fe8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <MX_SDMMC1_SD_Init+0x38>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <MX_SDMMC1_SD_Init+0x38>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <MX_SDMMC1_SD_Init+0x38>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <MX_SDMMC1_SD_Init+0x38>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <MX_SDMMC1_SD_Init+0x38>)
 8004004:	2200      	movs	r2, #0
 8004006:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <MX_SDMMC1_SD_Init+0x38>)
 800400a:	2200      	movs	r2, #0
 800400c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800400e:	bf00      	nop
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	2000b914 	.word	0x2000b914
 800401c:	40012c00 	.word	0x40012c00

08004020 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004024:	4b18      	ldr	r3, [pc, #96]	; (8004088 <MX_SPI1_Init+0x68>)
 8004026:	4a19      	ldr	r2, [pc, #100]	; (800408c <MX_SPI1_Init+0x6c>)
 8004028:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800402a:	4b17      	ldr	r3, [pc, #92]	; (8004088 <MX_SPI1_Init+0x68>)
 800402c:	2200      	movs	r2, #0
 800402e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004030:	4b15      	ldr	r3, [pc, #84]	; (8004088 <MX_SPI1_Init+0x68>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004036:	4b14      	ldr	r3, [pc, #80]	; (8004088 <MX_SPI1_Init+0x68>)
 8004038:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800403c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800403e:	4b12      	ldr	r3, [pc, #72]	; (8004088 <MX_SPI1_Init+0x68>)
 8004040:	2200      	movs	r2, #0
 8004042:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <MX_SPI1_Init+0x68>)
 8004046:	2200      	movs	r2, #0
 8004048:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800404a:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <MX_SPI1_Init+0x68>)
 800404c:	2200      	movs	r2, #0
 800404e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004050:	4b0d      	ldr	r3, [pc, #52]	; (8004088 <MX_SPI1_Init+0x68>)
 8004052:	2200      	movs	r2, #0
 8004054:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004056:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <MX_SPI1_Init+0x68>)
 8004058:	2200      	movs	r2, #0
 800405a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <MX_SPI1_Init+0x68>)
 800405e:	2200      	movs	r2, #0
 8004060:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004062:	4b09      	ldr	r3, [pc, #36]	; (8004088 <MX_SPI1_Init+0x68>)
 8004064:	2207      	movs	r2, #7
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004068:	4b07      	ldr	r3, [pc, #28]	; (8004088 <MX_SPI1_Init+0x68>)
 800406a:	2200      	movs	r2, #0
 800406c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <MX_SPI1_Init+0x68>)
 8004070:	2200      	movs	r2, #0
 8004072:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004074:	4804      	ldr	r0, [pc, #16]	; (8004088 <MX_SPI1_Init+0x68>)
 8004076:	f007 fa73 	bl	800b560 <HAL_SPI_Init>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8004080:	f000 fa5c 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20015dec 	.word	0x20015dec
 800408c:	40013000 	.word	0x40013000

08004090 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004094:	4b18      	ldr	r3, [pc, #96]	; (80040f8 <MX_SPI2_Init+0x68>)
 8004096:	4a19      	ldr	r2, [pc, #100]	; (80040fc <MX_SPI2_Init+0x6c>)
 8004098:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800409a:	4b17      	ldr	r3, [pc, #92]	; (80040f8 <MX_SPI2_Init+0x68>)
 800409c:	2200      	movs	r2, #0
 800409e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040a0:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <MX_SPI2_Init+0x68>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80040a6:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <MX_SPI2_Init+0x68>)
 80040a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80040ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <MX_SPI2_Init+0x68>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040b4:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <MX_SPI2_Init+0x68>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <MX_SPI2_Init+0x68>)
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040c0:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <MX_SPI2_Init+0x68>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040c6:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <MX_SPI2_Init+0x68>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <MX_SPI2_Init+0x68>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <MX_SPI2_Init+0x68>)
 80040d4:	2207      	movs	r2, #7
 80040d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80040d8:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <MX_SPI2_Init+0x68>)
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80040de:	4b06      	ldr	r3, [pc, #24]	; (80040f8 <MX_SPI2_Init+0x68>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040e4:	4804      	ldr	r0, [pc, #16]	; (80040f8 <MX_SPI2_Init+0x68>)
 80040e6:	f007 fa3b 	bl	800b560 <HAL_SPI_Init>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80040f0:	f000 fa24 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040f4:	bf00      	nop
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20009690 	.word	0x20009690
 80040fc:	40003800 	.word	0x40003800

08004100 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004104:	4b18      	ldr	r3, [pc, #96]	; (8004168 <MX_SPI3_Init+0x68>)
 8004106:	4a19      	ldr	r2, [pc, #100]	; (800416c <MX_SPI3_Init+0x6c>)
 8004108:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800410a:	4b17      	ldr	r3, [pc, #92]	; (8004168 <MX_SPI3_Init+0x68>)
 800410c:	2200      	movs	r2, #0
 800410e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004110:	4b15      	ldr	r3, [pc, #84]	; (8004168 <MX_SPI3_Init+0x68>)
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004116:	4b14      	ldr	r3, [pc, #80]	; (8004168 <MX_SPI3_Init+0x68>)
 8004118:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800411c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800411e:	4b12      	ldr	r3, [pc, #72]	; (8004168 <MX_SPI3_Init+0x68>)
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004124:	4b10      	ldr	r3, [pc, #64]	; (8004168 <MX_SPI3_Init+0x68>)
 8004126:	2200      	movs	r2, #0
 8004128:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 800412a:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <MX_SPI3_Init+0x68>)
 800412c:	2200      	movs	r2, #0
 800412e:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004130:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <MX_SPI3_Init+0x68>)
 8004132:	2200      	movs	r2, #0
 8004134:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004136:	4b0c      	ldr	r3, [pc, #48]	; (8004168 <MX_SPI3_Init+0x68>)
 8004138:	2200      	movs	r2, #0
 800413a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <MX_SPI3_Init+0x68>)
 800413e:	2200      	movs	r2, #0
 8004140:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <MX_SPI3_Init+0x68>)
 8004144:	2207      	movs	r2, #7
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004148:	4b07      	ldr	r3, [pc, #28]	; (8004168 <MX_SPI3_Init+0x68>)
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <MX_SPI3_Init+0x68>)
 8004150:	2200      	movs	r2, #0
 8004152:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004154:	4804      	ldr	r0, [pc, #16]	; (8004168 <MX_SPI3_Init+0x68>)
 8004156:	f007 fa03 	bl	800b560 <HAL_SPI_Init>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8004160:	f000 f9ec 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004164:	bf00      	nop
 8004166:	bd80      	pop	{r7, pc}
 8004168:	2000d99c 	.word	0x2000d99c
 800416c:	40003c00 	.word	0x40003c00

08004170 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004174:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <MX_UART4_Init+0x58>)
 8004176:	4a15      	ldr	r2, [pc, #84]	; (80041cc <MX_UART4_Init+0x5c>)
 8004178:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800417a:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <MX_UART4_Init+0x58>)
 800417c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004180:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004182:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <MX_UART4_Init+0x58>)
 8004184:	2200      	movs	r2, #0
 8004186:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <MX_UART4_Init+0x58>)
 800418a:	2200      	movs	r2, #0
 800418c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800418e:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <MX_UART4_Init+0x58>)
 8004190:	2200      	movs	r2, #0
 8004192:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <MX_UART4_Init+0x58>)
 8004196:	220c      	movs	r2, #12
 8004198:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800419a:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <MX_UART4_Init+0x58>)
 800419c:	2200      	movs	r2, #0
 800419e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <MX_UART4_Init+0x58>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041a6:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <MX_UART4_Init+0x58>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041ac:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <MX_UART4_Init+0x58>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80041b2:	4805      	ldr	r0, [pc, #20]	; (80041c8 <MX_UART4_Init+0x58>)
 80041b4:	f008 fa8c 	bl	800c6d0 <HAL_UART_Init>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80041be:	f000 f9bd 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20015d6c 	.word	0x20015d6c
 80041cc:	40004c00 	.word	0x40004c00

080041d0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80041d4:	4b18      	ldr	r3, [pc, #96]	; (8004238 <MX_UART7_Init+0x68>)
 80041d6:	4a19      	ldr	r2, [pc, #100]	; (800423c <MX_UART7_Init+0x6c>)
 80041d8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80041da:	4b17      	ldr	r3, [pc, #92]	; (8004238 <MX_UART7_Init+0x68>)
 80041dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041e0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <MX_UART7_Init+0x68>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80041e8:	4b13      	ldr	r3, [pc, #76]	; (8004238 <MX_UART7_Init+0x68>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <MX_UART7_Init+0x68>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80041f4:	4b10      	ldr	r3, [pc, #64]	; (8004238 <MX_UART7_Init+0x68>)
 80041f6:	220c      	movs	r2, #12
 80041f8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041fa:	4b0f      	ldr	r3, [pc, #60]	; (8004238 <MX_UART7_Init+0x68>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004200:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <MX_UART7_Init+0x68>)
 8004202:	2200      	movs	r2, #0
 8004204:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004206:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <MX_UART7_Init+0x68>)
 8004208:	2200      	movs	r2, #0
 800420a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <MX_UART7_Init+0x68>)
 800420e:	2230      	movs	r2, #48	; 0x30
 8004210:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004212:	4b09      	ldr	r3, [pc, #36]	; (8004238 <MX_UART7_Init+0x68>)
 8004214:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
  huart7.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800421a:	4b07      	ldr	r3, [pc, #28]	; (8004238 <MX_UART7_Init+0x68>)
 800421c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004220:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004222:	4805      	ldr	r0, [pc, #20]	; (8004238 <MX_UART7_Init+0x68>)
 8004224:	f008 fa54 	bl	800c6d0 <HAL_UART_Init>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <MX_UART7_Init+0x62>
  {
    Error_Handler();
 800422e:	f000 f985 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004232:	bf00      	nop
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	200096f4 	.word	0x200096f4
 800423c:	40007800 	.word	0x40007800

08004240 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004244:	4b14      	ldr	r3, [pc, #80]	; (8004298 <MX_USART1_UART_Init+0x58>)
 8004246:	4a15      	ldr	r2, [pc, #84]	; (800429c <MX_USART1_UART_Init+0x5c>)
 8004248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800424a:	4b13      	ldr	r3, [pc, #76]	; (8004298 <MX_USART1_UART_Init+0x58>)
 800424c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004252:	4b11      	ldr	r3, [pc, #68]	; (8004298 <MX_USART1_UART_Init+0x58>)
 8004254:	2200      	movs	r2, #0
 8004256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004258:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <MX_USART1_UART_Init+0x58>)
 800425a:	2200      	movs	r2, #0
 800425c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800425e:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <MX_USART1_UART_Init+0x58>)
 8004260:	2200      	movs	r2, #0
 8004262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8004264:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <MX_USART1_UART_Init+0x58>)
 8004266:	2204      	movs	r2, #4
 8004268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <MX_USART1_UART_Init+0x58>)
 800426c:	2200      	movs	r2, #0
 800426e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004270:	4b09      	ldr	r3, [pc, #36]	; (8004298 <MX_USART1_UART_Init+0x58>)
 8004272:	2200      	movs	r2, #0
 8004274:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <MX_USART1_UART_Init+0x58>)
 8004278:	2200      	movs	r2, #0
 800427a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <MX_USART1_UART_Init+0x58>)
 800427e:	2200      	movs	r2, #0
 8004280:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004282:	4805      	ldr	r0, [pc, #20]	; (8004298 <MX_USART1_UART_Init+0x58>)
 8004284:	f008 fa24 	bl	800c6d0 <HAL_UART_Init>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800428e:	f000 f955 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	2000db14 	.word	0x2000db14
 800429c:	40011000 	.word	0x40011000

080042a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042a4:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <MX_USART2_UART_Init+0x58>)
 80042a6:	4a15      	ldr	r2, [pc, #84]	; (80042fc <MX_USART2_UART_Init+0x5c>)
 80042a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <MX_USART2_UART_Init+0x58>)
 80042ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80042b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <MX_USART2_UART_Init+0x58>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <MX_USART2_UART_Init+0x58>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042be:	4b0e      	ldr	r3, [pc, #56]	; (80042f8 <MX_USART2_UART_Init+0x58>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <MX_USART2_UART_Init+0x58>)
 80042c6:	2204      	movs	r2, #4
 80042c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ca:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <MX_USART2_UART_Init+0x58>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042d0:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <MX_USART2_UART_Init+0x58>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042d6:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <MX_USART2_UART_Init+0x58>)
 80042d8:	2200      	movs	r2, #0
 80042da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <MX_USART2_UART_Init+0x58>)
 80042de:	2200      	movs	r2, #0
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042e2:	4805      	ldr	r0, [pc, #20]	; (80042f8 <MX_USART2_UART_Init+0x58>)
 80042e4:	f008 f9f4 	bl	800c6d0 <HAL_UART_Init>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80042ee:	f000 f925 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20017eb0 	.word	0x20017eb0
 80042fc:	40004400 	.word	0x40004400

08004300 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <MX_USART3_UART_Init+0x58>)
 8004306:	4a15      	ldr	r2, [pc, #84]	; (800435c <MX_USART3_UART_Init+0x5c>)
 8004308:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <MX_USART3_UART_Init+0x58>)
 800430c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004310:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <MX_USART3_UART_Init+0x58>)
 8004314:	2200      	movs	r2, #0
 8004316:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <MX_USART3_UART_Init+0x58>)
 800431a:	2200      	movs	r2, #0
 800431c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800431e:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <MX_USART3_UART_Init+0x58>)
 8004320:	2200      	movs	r2, #0
 8004322:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <MX_USART3_UART_Init+0x58>)
 8004326:	2204      	movs	r2, #4
 8004328:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <MX_USART3_UART_Init+0x58>)
 800432c:	2200      	movs	r2, #0
 800432e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004330:	4b09      	ldr	r3, [pc, #36]	; (8004358 <MX_USART3_UART_Init+0x58>)
 8004332:	2200      	movs	r2, #0
 8004334:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <MX_USART3_UART_Init+0x58>)
 8004338:	2200      	movs	r2, #0
 800433a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <MX_USART3_UART_Init+0x58>)
 800433e:	2200      	movs	r2, #0
 8004340:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004342:	4805      	ldr	r0, [pc, #20]	; (8004358 <MX_USART3_UART_Init+0x58>)
 8004344:	f008 f9c4 	bl	800c6d0 <HAL_UART_Init>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800434e:	f000 f8f5 	bl	800453c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	200097d4 	.word	0x200097d4
 800435c:	40004800 	.word	0x40004800

08004360 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004366:	4b26      	ldr	r3, [pc, #152]	; (8004400 <MX_DMA_Init+0xa0>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	4a25      	ldr	r2, [pc, #148]	; (8004400 <MX_DMA_Init+0xa0>)
 800436c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004370:	6313      	str	r3, [r2, #48]	; 0x30
 8004372:	4b23      	ldr	r3, [pc, #140]	; (8004400 <MX_DMA_Init+0xa0>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800437e:	4b20      	ldr	r3, [pc, #128]	; (8004400 <MX_DMA_Init+0xa0>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004382:	4a1f      	ldr	r2, [pc, #124]	; (8004400 <MX_DMA_Init+0xa0>)
 8004384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004388:	6313      	str	r3, [r2, #48]	; 0x30
 800438a:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <MX_DMA_Init+0xa0>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004392:	603b      	str	r3, [r7, #0]
 8004394:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8004396:	2200      	movs	r2, #0
 8004398:	2105      	movs	r1, #5
 800439a:	200c      	movs	r0, #12
 800439c:	f002 fd74 	bl	8006e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80043a0:	200c      	movs	r0, #12
 80043a2:	f002 fd8d 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80043a6:	2200      	movs	r2, #0
 80043a8:	2105      	movs	r1, #5
 80043aa:	2010      	movs	r0, #16
 80043ac:	f002 fd6c 	bl	8006e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80043b0:	2010      	movs	r0, #16
 80043b2:	f002 fd85 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80043b6:	2200      	movs	r2, #0
 80043b8:	2105      	movs	r1, #5
 80043ba:	2038      	movs	r0, #56	; 0x38
 80043bc:	f002 fd64 	bl	8006e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80043c0:	2038      	movs	r0, #56	; 0x38
 80043c2:	f002 fd7d 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2105      	movs	r1, #5
 80043ca:	203a      	movs	r0, #58	; 0x3a
 80043cc:	f002 fd5c 	bl	8006e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80043d0:	203a      	movs	r0, #58	; 0x3a
 80043d2:	f002 fd75 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80043d6:	2200      	movs	r2, #0
 80043d8:	2105      	movs	r1, #5
 80043da:	203b      	movs	r0, #59	; 0x3b
 80043dc:	f002 fd54 	bl	8006e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80043e0:	203b      	movs	r0, #59	; 0x3b
 80043e2:	f002 fd6d 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80043e6:	2200      	movs	r2, #0
 80043e8:	2105      	movs	r1, #5
 80043ea:	2045      	movs	r0, #69	; 0x45
 80043ec:	f002 fd4c 	bl	8006e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80043f0:	2045      	movs	r0, #69	; 0x45
 80043f2:	f002 fd65 	bl	8006ec0 <HAL_NVIC_EnableIRQ>

}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800

08004404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08c      	sub	sp, #48	; 0x30
 8004408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800440a:	f107 031c 	add.w	r3, r7, #28
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	605a      	str	r2, [r3, #4]
 8004414:	609a      	str	r2, [r3, #8]
 8004416:	60da      	str	r2, [r3, #12]
 8004418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800441a:	4b37      	ldr	r3, [pc, #220]	; (80044f8 <MX_GPIO_Init+0xf4>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	4a36      	ldr	r2, [pc, #216]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004420:	f043 0304 	orr.w	r3, r3, #4
 8004424:	6313      	str	r3, [r2, #48]	; 0x30
 8004426:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f003 0304 	and.w	r3, r3, #4
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004432:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	4a30      	ldr	r2, [pc, #192]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800443c:	6313      	str	r3, [r2, #48]	; 0x30
 800443e:	4b2e      	ldr	r3, [pc, #184]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800444a:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <MX_GPIO_Init+0xf4>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	4a2a      	ldr	r2, [pc, #168]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	6313      	str	r3, [r2, #48]	; 0x30
 8004456:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004462:	4b25      	ldr	r3, [pc, #148]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	4a24      	ldr	r2, [pc, #144]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004468:	f043 0302 	orr.w	r3, r3, #2
 800446c:	6313      	str	r3, [r2, #48]	; 0x30
 800446e:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800447a:	4b1f      	ldr	r3, [pc, #124]	; (80044f8 <MX_GPIO_Init+0xf4>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	4a1e      	ldr	r2, [pc, #120]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004480:	f043 0310 	orr.w	r3, r3, #16
 8004484:	6313      	str	r3, [r2, #48]	; 0x30
 8004486:	4b1c      	ldr	r3, [pc, #112]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004492:	4b19      	ldr	r3, [pc, #100]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <MX_GPIO_Init+0xf4>)
 8004498:	f043 0308 	orr.w	r3, r3, #8
 800449c:	6313      	str	r3, [r2, #48]	; 0x30
 800449e:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <MX_GPIO_Init+0xf4>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	607b      	str	r3, [r7, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80044aa:	2200      	movs	r2, #0
 80044ac:	f641 0103 	movw	r1, #6147	; 0x1803
 80044b0:	4812      	ldr	r0, [pc, #72]	; (80044fc <MX_GPIO_Init+0xf8>)
 80044b2:	f003 fae9 	bl	8007a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80044b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044bc:	2300      	movs	r3, #0
 80044be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044c4:	f107 031c 	add.w	r3, r7, #28
 80044c8:	4619      	mov	r1, r3
 80044ca:	480d      	ldr	r0, [pc, #52]	; (8004500 <MX_GPIO_Init+0xfc>)
 80044cc:	f003 f91a 	bl	8007704 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 80044d0:	f641 0303 	movw	r3, #6147	; 0x1803
 80044d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044d6:	2301      	movs	r3, #1
 80044d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044de:	2300      	movs	r3, #0
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044e2:	f107 031c 	add.w	r3, r7, #28
 80044e6:	4619      	mov	r1, r3
 80044e8:	4804      	ldr	r0, [pc, #16]	; (80044fc <MX_GPIO_Init+0xf8>)
 80044ea:	f003 f90b 	bl	8007704 <HAL_GPIO_Init>

}
 80044ee:	bf00      	nop
 80044f0:	3730      	adds	r7, #48	; 0x30
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40023800 	.word	0x40023800
 80044fc:	40020c00 	.word	0x40020c00
 8004500:	40020800 	.word	0x40020800

08004504 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800450c:	f014 f91e 	bl	801874c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8004510:	2001      	movs	r0, #1
 8004512:	f010 fa3f 	bl	8014994 <osDelay>
 8004516:	e7fb      	b.n	8004510 <StartDefaultTask+0xc>

08004518 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a04      	ldr	r2, [pc, #16]	; (8004538 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800452a:	f001 ff53 	bl	80063d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40010000 	.word	0x40010000

0800453c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004552:	4b11      	ldr	r3, [pc, #68]	; (8004598 <HAL_MspInit+0x4c>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	4a10      	ldr	r2, [pc, #64]	; (8004598 <HAL_MspInit+0x4c>)
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455c:	6413      	str	r3, [r2, #64]	; 0x40
 800455e:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <HAL_MspInit+0x4c>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	607b      	str	r3, [r7, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_MspInit+0x4c>)
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <HAL_MspInit+0x4c>)
 8004570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004574:	6453      	str	r3, [r2, #68]	; 0x44
 8004576:	4b08      	ldr	r3, [pc, #32]	; (8004598 <HAL_MspInit+0x4c>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004582:	2200      	movs	r2, #0
 8004584:	210f      	movs	r1, #15
 8004586:	f06f 0001 	mvn.w	r0, #1
 800458a:	f002 fc7d 	bl	8006e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800

0800459c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045a4:	f107 0314 	add.w	r3, r7, #20
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	605a      	str	r2, [r3, #4]
 80045ae:	609a      	str	r2, [r3, #8]
 80045b0:	60da      	str	r2, [r3, #12]
 80045b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a39      	ldr	r2, [pc, #228]	; (80046a0 <HAL_ADC_MspInit+0x104>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d16b      	bne.n	8004696 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045be:	4b39      	ldr	r3, [pc, #228]	; (80046a4 <HAL_ADC_MspInit+0x108>)
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	4a38      	ldr	r2, [pc, #224]	; (80046a4 <HAL_ADC_MspInit+0x108>)
 80045c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c8:	6453      	str	r3, [r2, #68]	; 0x44
 80045ca:	4b36      	ldr	r3, [pc, #216]	; (80046a4 <HAL_ADC_MspInit+0x108>)
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045d6:	4b33      	ldr	r3, [pc, #204]	; (80046a4 <HAL_ADC_MspInit+0x108>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	4a32      	ldr	r2, [pc, #200]	; (80046a4 <HAL_ADC_MspInit+0x108>)
 80045dc:	f043 0304 	orr.w	r3, r3, #4
 80045e0:	6313      	str	r3, [r2, #48]	; 0x30
 80045e2:	4b30      	ldr	r3, [pc, #192]	; (80046a4 <HAL_ADC_MspInit+0x108>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ee:	4b2d      	ldr	r3, [pc, #180]	; (80046a4 <HAL_ADC_MspInit+0x108>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	4a2c      	ldr	r2, [pc, #176]	; (80046a4 <HAL_ADC_MspInit+0x108>)
 80045f4:	f043 0302 	orr.w	r3, r3, #2
 80045f8:	6313      	str	r3, [r2, #48]	; 0x30
 80045fa:	4b2a      	ldr	r3, [pc, #168]	; (80046a4 <HAL_ADC_MspInit+0x108>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = VSENS3V3_Pin|VSENSBAT_Pin|CURRBAT1_Pin;
 8004606:	2323      	movs	r3, #35	; 0x23
 8004608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800460a:	2303      	movs	r3, #3
 800460c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004612:	f107 0314 	add.w	r3, r7, #20
 8004616:	4619      	mov	r1, r3
 8004618:	4823      	ldr	r0, [pc, #140]	; (80046a8 <HAL_ADC_MspInit+0x10c>)
 800461a:	f003 f873 	bl	8007704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURRBAT2_Pin;
 800461e:	2301      	movs	r3, #1
 8004620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004622:	2303      	movs	r3, #3
 8004624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 800462a:	f107 0314 	add.w	r3, r7, #20
 800462e:	4619      	mov	r1, r3
 8004630:	481e      	ldr	r0, [pc, #120]	; (80046ac <HAL_ADC_MspInit+0x110>)
 8004632:	f003 f867 	bl	8007704 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004636:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <HAL_ADC_MspInit+0x114>)
 8004638:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <HAL_ADC_MspInit+0x118>)
 800463a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800463c:	4b1c      	ldr	r3, [pc, #112]	; (80046b0 <HAL_ADC_MspInit+0x114>)
 800463e:	2200      	movs	r2, #0
 8004640:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004642:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <HAL_ADC_MspInit+0x114>)
 8004644:	2200      	movs	r2, #0
 8004646:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004648:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <HAL_ADC_MspInit+0x114>)
 800464a:	2200      	movs	r2, #0
 800464c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800464e:	4b18      	ldr	r3, [pc, #96]	; (80046b0 <HAL_ADC_MspInit+0x114>)
 8004650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004654:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004656:	4b16      	ldr	r3, [pc, #88]	; (80046b0 <HAL_ADC_MspInit+0x114>)
 8004658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800465c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800465e:	4b14      	ldr	r3, [pc, #80]	; (80046b0 <HAL_ADC_MspInit+0x114>)
 8004660:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004664:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004666:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <HAL_ADC_MspInit+0x114>)
 8004668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800466c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800466e:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <HAL_ADC_MspInit+0x114>)
 8004670:	2200      	movs	r2, #0
 8004672:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004674:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <HAL_ADC_MspInit+0x114>)
 8004676:	2200      	movs	r2, #0
 8004678:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800467a:	480d      	ldr	r0, [pc, #52]	; (80046b0 <HAL_ADC_MspInit+0x114>)
 800467c:	f002 fc2e 	bl	8006edc <HAL_DMA_Init>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8004686:	f7ff ff59 	bl	800453c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <HAL_ADC_MspInit+0x114>)
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
 8004690:	4a07      	ldr	r2, [pc, #28]	; (80046b0 <HAL_ADC_MspInit+0x114>)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004696:	bf00      	nop
 8004698:	3728      	adds	r7, #40	; 0x28
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40012000 	.word	0x40012000
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40020800 	.word	0x40020800
 80046ac:	40020400 	.word	0x40020400
 80046b0:	2000dbf0 	.word	0x2000dbf0
 80046b4:	40026410 	.word	0x40026410

080046b8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	; 0x28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046c0:	f107 0314 	add.w	r3, r7, #20
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	609a      	str	r2, [r3, #8]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a65      	ldr	r2, [pc, #404]	; (800486c <HAL_SD_MspInit+0x1b4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	f040 80c3 	bne.w	8004862 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80046dc:	4b64      	ldr	r3, [pc, #400]	; (8004870 <HAL_SD_MspInit+0x1b8>)
 80046de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e0:	4a63      	ldr	r2, [pc, #396]	; (8004870 <HAL_SD_MspInit+0x1b8>)
 80046e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046e6:	6453      	str	r3, [r2, #68]	; 0x44
 80046e8:	4b61      	ldr	r3, [pc, #388]	; (8004870 <HAL_SD_MspInit+0x1b8>)
 80046ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046f4:	4b5e      	ldr	r3, [pc, #376]	; (8004870 <HAL_SD_MspInit+0x1b8>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	4a5d      	ldr	r2, [pc, #372]	; (8004870 <HAL_SD_MspInit+0x1b8>)
 80046fa:	f043 0304 	orr.w	r3, r3, #4
 80046fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004700:	4b5b      	ldr	r3, [pc, #364]	; (8004870 <HAL_SD_MspInit+0x1b8>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	60fb      	str	r3, [r7, #12]
 800470a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800470c:	4b58      	ldr	r3, [pc, #352]	; (8004870 <HAL_SD_MspInit+0x1b8>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	4a57      	ldr	r2, [pc, #348]	; (8004870 <HAL_SD_MspInit+0x1b8>)
 8004712:	f043 0308 	orr.w	r3, r3, #8
 8004716:	6313      	str	r3, [r2, #48]	; 0x30
 8004718:	4b55      	ldr	r3, [pc, #340]	; (8004870 <HAL_SD_MspInit+0x1b8>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004724:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004728:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472a:	2302      	movs	r3, #2
 800472c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004732:	2303      	movs	r3, #3
 8004734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004736:	230c      	movs	r3, #12
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800473a:	f107 0314 	add.w	r3, r7, #20
 800473e:	4619      	mov	r1, r3
 8004740:	484c      	ldr	r0, [pc, #304]	; (8004874 <HAL_SD_MspInit+0x1bc>)
 8004742:	f002 ffdf 	bl	8007704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004746:	2304      	movs	r3, #4
 8004748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474a:	2302      	movs	r3, #2
 800474c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004752:	2303      	movs	r3, #3
 8004754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004756:	230c      	movs	r3, #12
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800475a:	f107 0314 	add.w	r3, r7, #20
 800475e:	4619      	mov	r1, r3
 8004760:	4845      	ldr	r0, [pc, #276]	; (8004878 <HAL_SD_MspInit+0x1c0>)
 8004762:	f002 ffcf 	bl	8007704 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8004766:	4b45      	ldr	r3, [pc, #276]	; (800487c <HAL_SD_MspInit+0x1c4>)
 8004768:	4a45      	ldr	r2, [pc, #276]	; (8004880 <HAL_SD_MspInit+0x1c8>)
 800476a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800476c:	4b43      	ldr	r3, [pc, #268]	; (800487c <HAL_SD_MspInit+0x1c4>)
 800476e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004772:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004774:	4b41      	ldr	r3, [pc, #260]	; (800487c <HAL_SD_MspInit+0x1c4>)
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800477a:	4b40      	ldr	r3, [pc, #256]	; (800487c <HAL_SD_MspInit+0x1c4>)
 800477c:	2200      	movs	r2, #0
 800477e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004780:	4b3e      	ldr	r3, [pc, #248]	; (800487c <HAL_SD_MspInit+0x1c4>)
 8004782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004786:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004788:	4b3c      	ldr	r3, [pc, #240]	; (800487c <HAL_SD_MspInit+0x1c4>)
 800478a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800478e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004790:	4b3a      	ldr	r3, [pc, #232]	; (800487c <HAL_SD_MspInit+0x1c4>)
 8004792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004796:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8004798:	4b38      	ldr	r3, [pc, #224]	; (800487c <HAL_SD_MspInit+0x1c4>)
 800479a:	2220      	movs	r2, #32
 800479c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800479e:	4b37      	ldr	r3, [pc, #220]	; (800487c <HAL_SD_MspInit+0x1c4>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80047a4:	4b35      	ldr	r3, [pc, #212]	; (800487c <HAL_SD_MspInit+0x1c4>)
 80047a6:	2204      	movs	r2, #4
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80047aa:	4b34      	ldr	r3, [pc, #208]	; (800487c <HAL_SD_MspInit+0x1c4>)
 80047ac:	2203      	movs	r2, #3
 80047ae:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80047b0:	4b32      	ldr	r3, [pc, #200]	; (800487c <HAL_SD_MspInit+0x1c4>)
 80047b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80047b8:	4b30      	ldr	r3, [pc, #192]	; (800487c <HAL_SD_MspInit+0x1c4>)
 80047ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80047be:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80047c0:	482e      	ldr	r0, [pc, #184]	; (800487c <HAL_SD_MspInit+0x1c4>)
 80047c2:	f002 fb8b 	bl	8006edc <HAL_DMA_Init>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80047cc:	f7ff feb6 	bl	800453c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a2a      	ldr	r2, [pc, #168]	; (800487c <HAL_SD_MspInit+0x1c4>)
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40
 80047d6:	4a29      	ldr	r2, [pc, #164]	; (800487c <HAL_SD_MspInit+0x1c4>)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80047dc:	4b29      	ldr	r3, [pc, #164]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 80047de:	4a2a      	ldr	r2, [pc, #168]	; (8004888 <HAL_SD_MspInit+0x1d0>)
 80047e0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80047e2:	4b28      	ldr	r3, [pc, #160]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 80047e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047e8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047ea:	4b26      	ldr	r3, [pc, #152]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 80047ec:	2240      	movs	r2, #64	; 0x40
 80047ee:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047f0:	4b24      	ldr	r3, [pc, #144]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047f6:	4b23      	ldr	r3, [pc, #140]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 80047f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047fc:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80047fe:	4b21      	ldr	r3, [pc, #132]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 8004800:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004804:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004806:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 8004808:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800480c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800480e:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 8004810:	2220      	movs	r2, #32
 8004812:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004814:	4b1b      	ldr	r3, [pc, #108]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 8004816:	2200      	movs	r2, #0
 8004818:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800481a:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 800481c:	2204      	movs	r2, #4
 800481e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004820:	4b18      	ldr	r3, [pc, #96]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 8004822:	2203      	movs	r2, #3
 8004824:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004826:	4b17      	ldr	r3, [pc, #92]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 8004828:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800482c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800482e:	4b15      	ldr	r3, [pc, #84]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 8004830:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004834:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8004836:	4813      	ldr	r0, [pc, #76]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 8004838:	f002 fb50 	bl	8006edc <HAL_DMA_Init>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8004842:	f7ff fe7b 	bl	800453c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a0e      	ldr	r2, [pc, #56]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 800484a:	63da      	str	r2, [r3, #60]	; 0x3c
 800484c:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <HAL_SD_MspInit+0x1cc>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8004852:	2200      	movs	r2, #0
 8004854:	2105      	movs	r1, #5
 8004856:	2031      	movs	r0, #49	; 0x31
 8004858:	f002 fb16 	bl	8006e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800485c:	2031      	movs	r0, #49	; 0x31
 800485e:	f002 fb2f 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8004862:	bf00      	nop
 8004864:	3728      	adds	r7, #40	; 0x28
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40012c00 	.word	0x40012c00
 8004870:	40023800 	.word	0x40023800
 8004874:	40020800 	.word	0x40020800
 8004878:	40020c00 	.word	0x40020c00
 800487c:	20011d0c 	.word	0x20011d0c
 8004880:	40026458 	.word	0x40026458
 8004884:	20019f90 	.word	0x20019f90
 8004888:	400264a0 	.word	0x400264a0

0800488c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08e      	sub	sp, #56	; 0x38
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	609a      	str	r2, [r3, #8]
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a68      	ldr	r2, [pc, #416]	; (8004a4c <HAL_SPI_MspInit+0x1c0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d131      	bne.n	8004912 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80048ae:	4b68      	ldr	r3, [pc, #416]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	4a67      	ldr	r2, [pc, #412]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 80048b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048b8:	6453      	str	r3, [r2, #68]	; 0x44
 80048ba:	4b65      	ldr	r3, [pc, #404]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048c2:	623b      	str	r3, [r7, #32]
 80048c4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c6:	4b62      	ldr	r3, [pc, #392]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	4a61      	ldr	r2, [pc, #388]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	6313      	str	r3, [r2, #48]	; 0x30
 80048d2:	4b5f      	ldr	r3, [pc, #380]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 80048de:	f248 03e0 	movw	r3, #32992	; 0x80e0
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e4:	2302      	movs	r3, #2
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e8:	2300      	movs	r3, #0
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ec:	2303      	movs	r3, #3
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80048f0:	2305      	movs	r3, #5
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048f8:	4619      	mov	r1, r3
 80048fa:	4856      	ldr	r0, [pc, #344]	; (8004a54 <HAL_SPI_MspInit+0x1c8>)
 80048fc:	f002 ff02 	bl	8007704 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004900:	2200      	movs	r2, #0
 8004902:	2105      	movs	r1, #5
 8004904:	2023      	movs	r0, #35	; 0x23
 8004906:	f002 fabf 	bl	8006e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800490a:	2023      	movs	r0, #35	; 0x23
 800490c:	f002 fad8 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004910:	e097      	b.n	8004a42 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI2)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a50      	ldr	r2, [pc, #320]	; (8004a58 <HAL_SPI_MspInit+0x1cc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d131      	bne.n	8004980 <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800491c:	4b4c      	ldr	r3, [pc, #304]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	4a4b      	ldr	r2, [pc, #300]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 8004922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004926:	6413      	str	r3, [r2, #64]	; 0x40
 8004928:	4b49      	ldr	r3, [pc, #292]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004934:	4b46      	ldr	r3, [pc, #280]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	4a45      	ldr	r2, [pc, #276]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 800493a:	f043 0302 	orr.w	r3, r3, #2
 800493e:	6313      	str	r3, [r2, #48]	; 0x30
 8004940:	4b43      	ldr	r3, [pc, #268]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800494c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004952:	2302      	movs	r3, #2
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004956:	2300      	movs	r3, #0
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800495a:	2303      	movs	r3, #3
 800495c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800495e:	2305      	movs	r3, #5
 8004960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004966:	4619      	mov	r1, r3
 8004968:	483c      	ldr	r0, [pc, #240]	; (8004a5c <HAL_SPI_MspInit+0x1d0>)
 800496a:	f002 fecb 	bl	8007704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800496e:	2200      	movs	r2, #0
 8004970:	2105      	movs	r1, #5
 8004972:	2024      	movs	r0, #36	; 0x24
 8004974:	f002 fa88 	bl	8006e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004978:	2024      	movs	r0, #36	; 0x24
 800497a:	f002 faa1 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
}
 800497e:	e060      	b.n	8004a42 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI3)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a36      	ldr	r2, [pc, #216]	; (8004a60 <HAL_SPI_MspInit+0x1d4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d15b      	bne.n	8004a42 <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800498a:	4b31      	ldr	r3, [pc, #196]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	4a30      	ldr	r2, [pc, #192]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 8004990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004994:	6413      	str	r3, [r2, #64]	; 0x40
 8004996:	4b2e      	ldr	r3, [pc, #184]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049a2:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 80049a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a6:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	6313      	str	r3, [r2, #48]	; 0x30
 80049ae:	4b28      	ldr	r3, [pc, #160]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ba:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	4a24      	ldr	r2, [pc, #144]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 80049c0:	f043 0302 	orr.w	r3, r3, #2
 80049c4:	6313      	str	r3, [r2, #48]	; 0x30
 80049c6:	4b22      	ldr	r3, [pc, #136]	; (8004a50 <HAL_SPI_MspInit+0x1c4>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80049d2:	2310      	movs	r3, #16
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d6:	2302      	movs	r3, #2
 80049d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049da:	2300      	movs	r3, #0
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049de:	2303      	movs	r3, #3
 80049e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80049e2:	2306      	movs	r3, #6
 80049e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ea:	4619      	mov	r1, r3
 80049ec:	4819      	ldr	r0, [pc, #100]	; (8004a54 <HAL_SPI_MspInit+0x1c8>)
 80049ee:	f002 fe89 	bl	8007704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80049f2:	2304      	movs	r3, #4
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f6:	2302      	movs	r3, #2
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049fe:	2303      	movs	r3, #3
 8004a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004a02:	2307      	movs	r3, #7
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4813      	ldr	r0, [pc, #76]	; (8004a5c <HAL_SPI_MspInit+0x1d0>)
 8004a0e:	f002 fe79 	bl	8007704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004a12:	2318      	movs	r3, #24
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a16:	2302      	movs	r3, #2
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004a22:	2306      	movs	r3, #6
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	480b      	ldr	r0, [pc, #44]	; (8004a5c <HAL_SPI_MspInit+0x1d0>)
 8004a2e:	f002 fe69 	bl	8007704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8004a32:	2200      	movs	r2, #0
 8004a34:	2105      	movs	r1, #5
 8004a36:	2033      	movs	r0, #51	; 0x33
 8004a38:	f002 fa26 	bl	8006e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004a3c:	2033      	movs	r0, #51	; 0x33
 8004a3e:	f002 fa3f 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
}
 8004a42:	bf00      	nop
 8004a44:	3738      	adds	r7, #56	; 0x38
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40013000 	.word	0x40013000
 8004a50:	40023800 	.word	0x40023800
 8004a54:	40020000 	.word	0x40020000
 8004a58:	40003800 	.word	0x40003800
 8004a5c:	40020400 	.word	0x40020400
 8004a60:	40003c00 	.word	0x40003c00

08004a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b092      	sub	sp, #72	; 0x48
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	605a      	str	r2, [r3, #4]
 8004a76:	609a      	str	r2, [r3, #8]
 8004a78:	60da      	str	r2, [r3, #12]
 8004a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a8f      	ldr	r2, [pc, #572]	; (8004cc0 <HAL_UART_MspInit+0x25c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d128      	bne.n	8004ad8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004a86:	4b8f      	ldr	r3, [pc, #572]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	4a8e      	ldr	r2, [pc, #568]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004a8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a90:	6413      	str	r3, [r2, #64]	; 0x40
 8004a92:	4b8c      	ldr	r3, [pc, #560]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a9e:	4b89      	ldr	r3, [pc, #548]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa2:	4a88      	ldr	r2, [pc, #544]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aaa:	4b86      	ldr	r3, [pc, #536]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aba:	2302      	movs	r3, #2
 8004abc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ace:	4619      	mov	r1, r3
 8004ad0:	487d      	ldr	r0, [pc, #500]	; (8004cc8 <HAL_UART_MspInit+0x264>)
 8004ad2:	f002 fe17 	bl	8007704 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004ad6:	e167      	b.n	8004da8 <HAL_UART_MspInit+0x344>
  else if(huart->Instance==UART7)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a7b      	ldr	r2, [pc, #492]	; (8004ccc <HAL_UART_MspInit+0x268>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d131      	bne.n	8004b46 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004ae2:	4b78      	ldr	r3, [pc, #480]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	4a77      	ldr	r2, [pc, #476]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004ae8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aec:	6413      	str	r3, [r2, #64]	; 0x40
 8004aee:	4b75      	ldr	r3, [pc, #468]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004afa:	4b72      	ldr	r3, [pc, #456]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	4a71      	ldr	r2, [pc, #452]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004b00:	f043 0310 	orr.w	r3, r3, #16
 8004b04:	6313      	str	r3, [r2, #48]	; 0x30
 8004b06:	4b6f      	ldr	r3, [pc, #444]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004b12:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b18:	2302      	movs	r3, #2
 8004b1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b20:	2303      	movs	r3, #3
 8004b22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004b24:	2308      	movs	r3, #8
 8004b26:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4868      	ldr	r0, [pc, #416]	; (8004cd0 <HAL_UART_MspInit+0x26c>)
 8004b30:	f002 fde8 	bl	8007704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8004b34:	2200      	movs	r2, #0
 8004b36:	2105      	movs	r1, #5
 8004b38:	2052      	movs	r0, #82	; 0x52
 8004b3a:	f002 f9a5 	bl	8006e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004b3e:	2052      	movs	r0, #82	; 0x52
 8004b40:	f002 f9be 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
}
 8004b44:	e130      	b.n	8004da8 <HAL_UART_MspInit+0x344>
  else if(huart->Instance==USART1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a62      	ldr	r2, [pc, #392]	; (8004cd4 <HAL_UART_MspInit+0x270>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d159      	bne.n	8004c04 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b50:	4b5c      	ldr	r3, [pc, #368]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b54:	4a5b      	ldr	r2, [pc, #364]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004b56:	f043 0310 	orr.w	r3, r3, #16
 8004b5a:	6453      	str	r3, [r2, #68]	; 0x44
 8004b5c:	4b59      	ldr	r3, [pc, #356]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	623b      	str	r3, [r7, #32]
 8004b66:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b68:	4b56      	ldr	r3, [pc, #344]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6c:	4a55      	ldr	r2, [pc, #340]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	6313      	str	r3, [r2, #48]	; 0x30
 8004b74:	4b53      	ldr	r3, [pc, #332]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004b80:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b86:	2302      	movs	r3, #2
 8004b88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b92:	2307      	movs	r3, #7
 8004b94:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	484a      	ldr	r0, [pc, #296]	; (8004cc8 <HAL_UART_MspInit+0x264>)
 8004b9e:	f002 fdb1 	bl	8007704 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004ba2:	4b4d      	ldr	r3, [pc, #308]	; (8004cd8 <HAL_UART_MspInit+0x274>)
 8004ba4:	4a4d      	ldr	r2, [pc, #308]	; (8004cdc <HAL_UART_MspInit+0x278>)
 8004ba6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004ba8:	4b4b      	ldr	r3, [pc, #300]	; (8004cd8 <HAL_UART_MspInit+0x274>)
 8004baa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bb0:	4b49      	ldr	r3, [pc, #292]	; (8004cd8 <HAL_UART_MspInit+0x274>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bb6:	4b48      	ldr	r3, [pc, #288]	; (8004cd8 <HAL_UART_MspInit+0x274>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bbc:	4b46      	ldr	r3, [pc, #280]	; (8004cd8 <HAL_UART_MspInit+0x274>)
 8004bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bc2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bc4:	4b44      	ldr	r3, [pc, #272]	; (8004cd8 <HAL_UART_MspInit+0x274>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bca:	4b43      	ldr	r3, [pc, #268]	; (8004cd8 <HAL_UART_MspInit+0x274>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004bd0:	4b41      	ldr	r3, [pc, #260]	; (8004cd8 <HAL_UART_MspInit+0x274>)
 8004bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bd6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004bd8:	4b3f      	ldr	r3, [pc, #252]	; (8004cd8 <HAL_UART_MspInit+0x274>)
 8004bda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004bde:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004be0:	4b3d      	ldr	r3, [pc, #244]	; (8004cd8 <HAL_UART_MspInit+0x274>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004be6:	483c      	ldr	r0, [pc, #240]	; (8004cd8 <HAL_UART_MspInit+0x274>)
 8004be8:	f002 f978 	bl	8006edc <HAL_DMA_Init>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_UART_MspInit+0x192>
      Error_Handler();
 8004bf2:	f7ff fca3 	bl	800453c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a37      	ldr	r2, [pc, #220]	; (8004cd8 <HAL_UART_MspInit+0x274>)
 8004bfa:	66da      	str	r2, [r3, #108]	; 0x6c
 8004bfc:	4a36      	ldr	r2, [pc, #216]	; (8004cd8 <HAL_UART_MspInit+0x274>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004c02:	e0d1      	b.n	8004da8 <HAL_UART_MspInit+0x344>
  else if(huart->Instance==USART2)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a35      	ldr	r2, [pc, #212]	; (8004ce0 <HAL_UART_MspInit+0x27c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d16e      	bne.n	8004cec <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c0e:	4b2d      	ldr	r3, [pc, #180]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	4a2c      	ldr	r2, [pc, #176]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c18:	6413      	str	r3, [r2, #64]	; 0x40
 8004c1a:	4b2a      	ldr	r3, [pc, #168]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	61bb      	str	r3, [r7, #24]
 8004c24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c26:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	4a26      	ldr	r2, [pc, #152]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004c2c:	f043 0301 	orr.w	r3, r3, #1
 8004c30:	6313      	str	r3, [r2, #48]	; 0x30
 8004c32:	4b24      	ldr	r3, [pc, #144]	; (8004cc4 <HAL_UART_MspInit+0x260>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004c3e:	230c      	movs	r3, #12
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c42:	2302      	movs	r3, #2
 8004c44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004c4e:	2307      	movs	r3, #7
 8004c50:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004c56:	4619      	mov	r1, r3
 8004c58:	481b      	ldr	r0, [pc, #108]	; (8004cc8 <HAL_UART_MspInit+0x264>)
 8004c5a:	f002 fd53 	bl	8007704 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004c5e:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <HAL_UART_MspInit+0x280>)
 8004c60:	4a21      	ldr	r2, [pc, #132]	; (8004ce8 <HAL_UART_MspInit+0x284>)
 8004c62:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004c64:	4b1f      	ldr	r3, [pc, #124]	; (8004ce4 <HAL_UART_MspInit+0x280>)
 8004c66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <HAL_UART_MspInit+0x280>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c72:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <HAL_UART_MspInit+0x280>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c78:	4b1a      	ldr	r3, [pc, #104]	; (8004ce4 <HAL_UART_MspInit+0x280>)
 8004c7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c7e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c80:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <HAL_UART_MspInit+0x280>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c86:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <HAL_UART_MspInit+0x280>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004c8c:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <HAL_UART_MspInit+0x280>)
 8004c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c92:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004c94:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <HAL_UART_MspInit+0x280>)
 8004c96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c9a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c9c:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <HAL_UART_MspInit+0x280>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004ca2:	4810      	ldr	r0, [pc, #64]	; (8004ce4 <HAL_UART_MspInit+0x280>)
 8004ca4:	f002 f91a 	bl	8006edc <HAL_DMA_Init>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8004cae:	f7ff fc45 	bl	800453c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a0b      	ldr	r2, [pc, #44]	; (8004ce4 <HAL_UART_MspInit+0x280>)
 8004cb6:	66da      	str	r2, [r3, #108]	; 0x6c
 8004cb8:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <HAL_UART_MspInit+0x280>)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004cbe:	e073      	b.n	8004da8 <HAL_UART_MspInit+0x344>
 8004cc0:	40004c00 	.word	0x40004c00
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	40020000 	.word	0x40020000
 8004ccc:	40007800 	.word	0x40007800
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	40011000 	.word	0x40011000
 8004cd8:	2000da54 	.word	0x2000da54
 8004cdc:	40026440 	.word	0x40026440
 8004ce0:	40004400 	.word	0x40004400
 8004ce4:	2000962c 	.word	0x2000962c
 8004ce8:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2f      	ldr	r2, [pc, #188]	; (8004db0 <HAL_UART_MspInit+0x34c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d158      	bne.n	8004da8 <HAL_UART_MspInit+0x344>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004cf6:	4b2f      	ldr	r3, [pc, #188]	; (8004db4 <HAL_UART_MspInit+0x350>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	4a2e      	ldr	r2, [pc, #184]	; (8004db4 <HAL_UART_MspInit+0x350>)
 8004cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d00:	6413      	str	r3, [r2, #64]	; 0x40
 8004d02:	4b2c      	ldr	r3, [pc, #176]	; (8004db4 <HAL_UART_MspInit+0x350>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d0e:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <HAL_UART_MspInit+0x350>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	4a28      	ldr	r2, [pc, #160]	; (8004db4 <HAL_UART_MspInit+0x350>)
 8004d14:	f043 0308 	orr.w	r3, r3, #8
 8004d18:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1a:	4b26      	ldr	r3, [pc, #152]	; (8004db4 <HAL_UART_MspInit+0x350>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004d26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d2a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d34:	2303      	movs	r3, #3
 8004d36:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d38:	2307      	movs	r3, #7
 8004d3a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d40:	4619      	mov	r1, r3
 8004d42:	481d      	ldr	r0, [pc, #116]	; (8004db8 <HAL_UART_MspInit+0x354>)
 8004d44:	f002 fcde 	bl	8007704 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004d48:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <HAL_UART_MspInit+0x358>)
 8004d4a:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <HAL_UART_MspInit+0x35c>)
 8004d4c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004d4e:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <HAL_UART_MspInit+0x358>)
 8004d50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d54:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d56:	4b19      	ldr	r3, [pc, #100]	; (8004dbc <HAL_UART_MspInit+0x358>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d5c:	4b17      	ldr	r3, [pc, #92]	; (8004dbc <HAL_UART_MspInit+0x358>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d62:	4b16      	ldr	r3, [pc, #88]	; (8004dbc <HAL_UART_MspInit+0x358>)
 8004d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d68:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d6a:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <HAL_UART_MspInit+0x358>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d70:	4b12      	ldr	r3, [pc, #72]	; (8004dbc <HAL_UART_MspInit+0x358>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004d76:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <HAL_UART_MspInit+0x358>)
 8004d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d7c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <HAL_UART_MspInit+0x358>)
 8004d80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d84:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <HAL_UART_MspInit+0x358>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004d8c:	480b      	ldr	r0, [pc, #44]	; (8004dbc <HAL_UART_MspInit+0x358>)
 8004d8e:	f002 f8a5 	bl	8006edc <HAL_DMA_Init>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_UART_MspInit+0x338>
      Error_Handler();
 8004d98:	f7ff fbd0 	bl	800453c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a07      	ldr	r2, [pc, #28]	; (8004dbc <HAL_UART_MspInit+0x358>)
 8004da0:	66da      	str	r2, [r3, #108]	; 0x6c
 8004da2:	4a06      	ldr	r2, [pc, #24]	; (8004dbc <HAL_UART_MspInit+0x358>)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004da8:	bf00      	nop
 8004daa:	3748      	adds	r7, #72	; 0x48
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40004800 	.word	0x40004800
 8004db4:	40023800 	.word	0x40023800
 8004db8:	40020c00 	.word	0x40020c00
 8004dbc:	20009774 	.word	0x20009774
 8004dc0:	40026028 	.word	0x40026028

08004dc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08c      	sub	sp, #48	; 0x30
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	2019      	movs	r0, #25
 8004dda:	f002 f855 	bl	8006e88 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8004dde:	2019      	movs	r0, #25
 8004de0:	f002 f86e 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004de4:	4b1f      	ldr	r3, [pc, #124]	; (8004e64 <HAL_InitTick+0xa0>)
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de8:	4a1e      	ldr	r2, [pc, #120]	; (8004e64 <HAL_InitTick+0xa0>)
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	6453      	str	r3, [r2, #68]	; 0x44
 8004df0:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <HAL_InitTick+0xa0>)
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004dfc:	f107 0210 	add.w	r2, r7, #16
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	4611      	mov	r1, r2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f004 fccc 	bl	80097a4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004e0c:	f004 fcb6 	bl	800977c <HAL_RCC_GetPCLK2Freq>
 8004e10:	4603      	mov	r3, r0
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e18:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <HAL_InitTick+0xa4>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	0c9b      	lsrs	r3, r3, #18
 8004e20:	3b01      	subs	r3, #1
 8004e22:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004e24:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <HAL_InitTick+0xa8>)
 8004e26:	4a12      	ldr	r2, [pc, #72]	; (8004e70 <HAL_InitTick+0xac>)
 8004e28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <HAL_InitTick+0xa8>)
 8004e2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004e32:	4a0e      	ldr	r2, [pc, #56]	; (8004e6c <HAL_InitTick+0xa8>)
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004e38:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <HAL_InitTick+0xa8>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_InitTick+0xa8>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004e44:	4809      	ldr	r0, [pc, #36]	; (8004e6c <HAL_InitTick+0xa8>)
 8004e46:	f007 f9de 	bl	800c206 <HAL_TIM_Base_Init>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004e50:	4806      	ldr	r0, [pc, #24]	; (8004e6c <HAL_InitTick+0xa8>)
 8004e52:	f007 fa0d 	bl	800c270 <HAL_TIM_Base_Start_IT>
 8004e56:	4603      	mov	r3, r0
 8004e58:	e000      	b.n	8004e5c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3730      	adds	r7, #48	; 0x30
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40023800 	.word	0x40023800
 8004e68:	431bde83 	.word	0x431bde83
 8004e6c:	20019ff4 	.word	0x20019ff4
 8004e70:	40010000 	.word	0x40010000

08004e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e82:	b480      	push	{r7}
 8004e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e86:	e7fe      	b.n	8004e86 <HardFault_Handler+0x4>

08004e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e8c:	e7fe      	b.n	8004e8c <MemManage_Handler+0x4>

08004e8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e92:	e7fe      	b.n	8004e92 <BusFault_Handler+0x4>

08004e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e98:	e7fe      	b.n	8004e98 <UsageFault_Handler+0x4>

08004e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e9e:	bf00      	nop
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004eac:	4802      	ldr	r0, [pc, #8]	; (8004eb8 <DMA1_Stream1_IRQHandler+0x10>)
 8004eae:	f002 f9b5 	bl	800721c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004eb2:	bf00      	nop
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20009774 	.word	0x20009774

08004ebc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004ec0:	4802      	ldr	r0, [pc, #8]	; (8004ecc <DMA1_Stream5_IRQHandler+0x10>)
 8004ec2:	f002 f9ab 	bl	800721c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004ec6:	bf00      	nop
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	2000962c 	.word	0x2000962c

08004ed0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ed4:	4802      	ldr	r0, [pc, #8]	; (8004ee0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004ed6:	f007 f9f5 	bl	800c2c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004eda:	bf00      	nop
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20019ff4 	.word	0x20019ff4

08004ee4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004ee8:	4802      	ldr	r0, [pc, #8]	; (8004ef4 <SPI1_IRQHandler+0x10>)
 8004eea:	f006 fd23 	bl	800b934 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004eee:	bf00      	nop
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	20015dec 	.word	0x20015dec

08004ef8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004efc:	4802      	ldr	r0, [pc, #8]	; (8004f08 <SPI2_IRQHandler+0x10>)
 8004efe:	f006 fd19 	bl	800b934 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004f02:	bf00      	nop
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20009690 	.word	0x20009690

08004f0c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004f10:	4802      	ldr	r0, [pc, #8]	; (8004f1c <SDMMC1_IRQHandler+0x10>)
 8004f12:	f005 faa1 	bl	800a458 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004f16:	bf00      	nop
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	2000b914 	.word	0x2000b914

08004f20 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004f24:	4802      	ldr	r0, [pc, #8]	; (8004f30 <SPI3_IRQHandler+0x10>)
 8004f26:	f006 fd05 	bl	800b934 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004f2a:	bf00      	nop
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	2000d99c 	.word	0x2000d99c

08004f34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004f38:	4802      	ldr	r0, [pc, #8]	; (8004f44 <DMA2_Stream0_IRQHandler+0x10>)
 8004f3a:	f002 f96f 	bl	800721c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004f3e:	bf00      	nop
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	2000dbf0 	.word	0x2000dbf0

08004f48 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004f4c:	4802      	ldr	r0, [pc, #8]	; (8004f58 <DMA2_Stream2_IRQHandler+0x10>)
 8004f4e:	f002 f965 	bl	800721c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004f52:	bf00      	nop
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	2000da54 	.word	0x2000da54

08004f5c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8004f60:	4802      	ldr	r0, [pc, #8]	; (8004f6c <DMA2_Stream3_IRQHandler+0x10>)
 8004f62:	f002 f95b 	bl	800721c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004f66:	bf00      	nop
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20011d0c 	.word	0x20011d0c

08004f70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004f74:	4802      	ldr	r0, [pc, #8]	; (8004f80 <OTG_FS_IRQHandler+0x10>)
 8004f76:	f002 ff00 	bl	8007d7a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004f7a:	bf00      	nop
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	2001be1c 	.word	0x2001be1c

08004f84 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8004f88:	4802      	ldr	r0, [pc, #8]	; (8004f94 <DMA2_Stream6_IRQHandler+0x10>)
 8004f8a:	f002 f947 	bl	800721c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20019f90 	.word	0x20019f90

08004f98 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004f9c:	4802      	ldr	r0, [pc, #8]	; (8004fa8 <UART7_IRQHandler+0x10>)
 8004f9e:	f007 fecd 	bl	800cd3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	200096f4 	.word	0x200096f4

08004fac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004fb4:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <_sbrk+0x50>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <_sbrk+0x16>
		heap_end = &end;
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <_sbrk+0x50>)
 8004fbe:	4a10      	ldr	r2, [pc, #64]	; (8005000 <_sbrk+0x54>)
 8004fc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <_sbrk+0x50>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <_sbrk+0x50>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4413      	add	r3, r2
 8004fd0:	466a      	mov	r2, sp
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d907      	bls.n	8004fe6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004fd6:	f014 f921 	bl	801921c <__errno>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	230c      	movs	r3, #12
 8004fde:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe4:	e006      	b.n	8004ff4 <_sbrk+0x48>
	}

	heap_end += incr;
 8004fe6:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <_sbrk+0x50>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	4a03      	ldr	r2, [pc, #12]	; (8004ffc <_sbrk+0x50>)
 8004ff0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20000350 	.word	0x20000350
 8005000:	2001c228 	.word	0x2001c228

08005004 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <SystemInit+0x5c>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	4a14      	ldr	r2, [pc, #80]	; (8005060 <SystemInit+0x5c>)
 8005010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005018:	4b12      	ldr	r3, [pc, #72]	; (8005064 <SystemInit+0x60>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a11      	ldr	r2, [pc, #68]	; (8005064 <SystemInit+0x60>)
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005024:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <SystemInit+0x60>)
 8005026:	2200      	movs	r2, #0
 8005028:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800502a:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <SystemInit+0x60>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	490d      	ldr	r1, [pc, #52]	; (8005064 <SystemInit+0x60>)
 8005030:	4b0d      	ldr	r3, [pc, #52]	; (8005068 <SystemInit+0x64>)
 8005032:	4013      	ands	r3, r2
 8005034:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005036:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <SystemInit+0x60>)
 8005038:	4a0c      	ldr	r2, [pc, #48]	; (800506c <SystemInit+0x68>)
 800503a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800503c:	4b09      	ldr	r3, [pc, #36]	; (8005064 <SystemInit+0x60>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a08      	ldr	r2, [pc, #32]	; (8005064 <SystemInit+0x60>)
 8005042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005046:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005048:	4b06      	ldr	r3, [pc, #24]	; (8005064 <SystemInit+0x60>)
 800504a:	2200      	movs	r2, #0
 800504c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800504e:	4b04      	ldr	r3, [pc, #16]	; (8005060 <SystemInit+0x5c>)
 8005050:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005054:	609a      	str	r2, [r3, #8]
#endif
}
 8005056:	bf00      	nop
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	e000ed00 	.word	0xe000ed00
 8005064:	40023800 	.word	0x40023800
 8005068:	fef6ffff 	.word	0xfef6ffff
 800506c:	24003010 	.word	0x24003010

08005070 <get_temp>:


#define V25 1.43
#define AVG_SLOPE .0043

float get_temp (uint16_t adc_value){
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	80fb      	strh	r3, [r7, #6]
	float VSENSE;
	VSENSE = 2.5/4096 * adc_value;
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	4618      	mov	r0, r3
 800507e:	f7fb fa71 	bl	8000564 <__aeabi_i2d>
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	4b20      	ldr	r3, [pc, #128]	; (8005108 <get_temp+0x98>)
 8005088:	f7fb fad6 	bl	8000638 <__aeabi_dmul>
 800508c:	4603      	mov	r3, r0
 800508e:	460c      	mov	r4, r1
 8005090:	4618      	mov	r0, r3
 8005092:	4621      	mov	r1, r4
 8005094:	f7fb fda0 	bl	8000bd8 <__aeabi_d2f>
 8005098:	4603      	mov	r3, r0
 800509a:	60fb      	str	r3, [r7, #12]
	return ((V25 - VSENSE) / AVG_SLOPE + 25);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7fb fa73 	bl	8000588 <__aeabi_f2d>
 80050a2:	4603      	mov	r3, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	461a      	mov	r2, r3
 80050a8:	4623      	mov	r3, r4
 80050aa:	a113      	add	r1, pc, #76	; (adr r1, 80050f8 <get_temp+0x88>)
 80050ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050b0:	f7fb f90a 	bl	80002c8 <__aeabi_dsub>
 80050b4:	4603      	mov	r3, r0
 80050b6:	460c      	mov	r4, r1
 80050b8:	4618      	mov	r0, r3
 80050ba:	4621      	mov	r1, r4
 80050bc:	a310      	add	r3, pc, #64	; (adr r3, 8005100 <get_temp+0x90>)
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	f7fb fbe3 	bl	800088c <__aeabi_ddiv>
 80050c6:	4603      	mov	r3, r0
 80050c8:	460c      	mov	r4, r1
 80050ca:	4618      	mov	r0, r3
 80050cc:	4621      	mov	r1, r4
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	4b0e      	ldr	r3, [pc, #56]	; (800510c <get_temp+0x9c>)
 80050d4:	f7fb f8fa 	bl	80002cc <__adddf3>
 80050d8:	4603      	mov	r3, r0
 80050da:	460c      	mov	r4, r1
 80050dc:	4618      	mov	r0, r3
 80050de:	4621      	mov	r1, r4
 80050e0:	f7fb fd7a 	bl	8000bd8 <__aeabi_d2f>
 80050e4:	4603      	mov	r3, r0
 80050e6:	ee07 3a90 	vmov	s15, r3
}
 80050ea:	eeb0 0a67 	vmov.f32	s0, s15
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd90      	pop	{r4, r7, pc}
 80050f4:	f3af 8000 	nop.w
 80050f8:	ae147ae1 	.word	0xae147ae1
 80050fc:	3ff6e147 	.word	0x3ff6e147
 8005100:	75f6fd22 	.word	0x75f6fd22
 8005104:	3f719ce0 	.word	0x3f719ce0
 8005108:	3f440000 	.word	0x3f440000
 800510c:	40390000 	.word	0x40390000

08005110 <vTaskBattery>:


void vTaskBattery(void *argument) {
 8005110:	b5b0      	push	{r4, r5, r7, lr}
 8005112:	b09e      	sub	sp, #120	; 0x78
 8005114:	af02      	add	r7, sp, #8
 8005116:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	double mah;
	double curr = 0;
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	f04f 0400 	mov.w	r4, #0
 8005120:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	double supp = 0;
 8005124:	f04f 0300 	mov.w	r3, #0
 8005128:	f04f 0400 	mov.w	r4, #0
 800512c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	double bat = 0;
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	f04f 0400 	mov.w	r4, #0
 8005138:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
	uint16_t battery;
	uint16_t current;
	uint16_t consumption;
	uint16_t power;

	int counter = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	647b      	str	r3, [r7, #68]	; 0x44

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005140:	f00f fb50 	bl	80147e4 <osKernelGetTickCount>
 8005144:	66f8      	str	r0, [r7, #108]	; 0x6c
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 8005146:	f00f fb75 	bl	8014834 <osKernelGetTickFreq>
 800514a:	4602      	mov	r2, r0
 800514c:	4bb6      	ldr	r3, [pc, #728]	; (8005428 <vTaskBattery+0x318>)
 800514e:	fba3 2302 	umull	r2, r3, r3, r2
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	643b      	str	r3, [r7, #64]	; 0x40

	//ADC init
	uint32_t adc_value[5];

	HAL_ADC_Stop_DMA(&hadc1);
 8005156:	48b5      	ldr	r0, [pc, #724]	; (800542c <vTaskBattery+0x31c>)
 8005158:	f001 fab0 	bl	80066bc <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 800515c:	f107 0308 	add.w	r3, r7, #8
 8005160:	2205      	movs	r2, #5
 8005162:	4619      	mov	r1, r3
 8005164:	48b1      	ldr	r0, [pc, #708]	; (800542c <vTaskBattery+0x31c>)
 8005166:	f001 f9bb 	bl	80064e0 <HAL_ADC_Start_DMA>

	osDelay(500);
 800516a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800516e:	f00f fc11 	bl	8014994 <osDelay>



	for (;;) {
		tick_count += tick_update;
 8005172:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005176:	4413      	add	r3, r2
 8005178:	66fb      	str	r3, [r7, #108]	; 0x6c

		double current2 = ((double)adc_value[0] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR2
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	4618      	mov	r0, r3
 800517e:	f7fb f9e1 	bl	8000544 <__aeabi_ui2d>
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	4baa      	ldr	r3, [pc, #680]	; (8005430 <vTaskBattery+0x320>)
 8005188:	f7fb fa56 	bl	8000638 <__aeabi_dmul>
 800518c:	4603      	mov	r3, r0
 800518e:	460c      	mov	r4, r1
 8005190:	4618      	mov	r0, r3
 8005192:	4621      	mov	r1, r4
 8005194:	a39e      	add	r3, pc, #632	; (adr r3, 8005410 <vTaskBattery+0x300>)
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	f7fb f895 	bl	80002c8 <__aeabi_dsub>
 800519e:	4603      	mov	r3, r0
 80051a0:	460c      	mov	r4, r1
 80051a2:	4618      	mov	r0, r3
 80051a4:	4621      	mov	r1, r4
 80051a6:	a39c      	add	r3, pc, #624	; (adr r3, 8005418 <vTaskBattery+0x308>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f7fb fb6e 	bl	800088c <__aeabi_ddiv>
 80051b0:	4603      	mov	r3, r0
 80051b2:	460c      	mov	r4, r1
 80051b4:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fb f9c2 	bl	8000544 <__aeabi_ui2d>
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	4b9a      	ldr	r3, [pc, #616]	; (8005430 <vTaskBattery+0x320>)
 80051c6:	f7fb fa37 	bl	8000638 <__aeabi_dmul>
 80051ca:	4603      	mov	r3, r0
 80051cc:	460c      	mov	r4, r1
 80051ce:	4618      	mov	r0, r3
 80051d0:	4621      	mov	r1, r4
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	f7fb f879 	bl	80002cc <__adddf3>
 80051da:	4603      	mov	r3, r0
 80051dc:	460c      	mov	r4, r1
 80051de:	4618      	mov	r0, r3
 80051e0:	4621      	mov	r1, r4
 80051e2:	f7fb fcf9 	bl	8000bd8 <__aeabi_d2f>
 80051e6:	4603      	mov	r3, r0
 80051e8:	637b      	str	r3, [r7, #52]	; 0x34
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fb f9a9 	bl	8000544 <__aeabi_ui2d>
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	4b8e      	ldr	r3, [pc, #568]	; (8005430 <vTaskBattery+0x320>)
 80051f8:	f7fb fa1e 	bl	8000638 <__aeabi_dmul>
 80051fc:	4603      	mov	r3, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	4618      	mov	r0, r3
 8005202:	4621      	mov	r1, r4
 8005204:	a386      	add	r3, pc, #536	; (adr r3, 8005420 <vTaskBattery+0x310>)
 8005206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520a:	f7fb fa15 	bl	8000638 <__aeabi_dmul>
 800520e:	4603      	mov	r3, r0
 8005210:	460c      	mov	r4, r1
 8005212:	4618      	mov	r0, r3
 8005214:	4621      	mov	r1, r4
 8005216:	f7fb fcdf 	bl	8000bd8 <__aeabi_d2f>
 800521a:	4603      	mov	r3, r0
 800521c:	633b      	str	r3, [r7, #48]	; 0x30
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4618      	mov	r0, r3
 8005222:	f7fb f98f 	bl	8000544 <__aeabi_ui2d>
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	4b81      	ldr	r3, [pc, #516]	; (8005430 <vTaskBattery+0x320>)
 800522c:	f7fb fa04 	bl	8000638 <__aeabi_dmul>
 8005230:	4603      	mov	r3, r0
 8005232:	460c      	mov	r4, r1
 8005234:	4618      	mov	r0, r3
 8005236:	4621      	mov	r1, r4
 8005238:	a375      	add	r3, pc, #468	; (adr r3, 8005410 <vTaskBattery+0x300>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f7fb f843 	bl	80002c8 <__aeabi_dsub>
 8005242:	4603      	mov	r3, r0
 8005244:	460c      	mov	r4, r1
 8005246:	4618      	mov	r0, r3
 8005248:	4621      	mov	r1, r4
 800524a:	a373      	add	r3, pc, #460	; (adr r3, 8005418 <vTaskBattery+0x308>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fb fb1c 	bl	800088c <__aeabi_ddiv>
 8005254:	4603      	mov	r3, r0
 8005256:	460c      	mov	r4, r1
 8005258:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		get_temp(adc_value[4]); // temp
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	b29b      	uxth	r3, r3
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff ff05 	bl	8005070 <get_temp>

		// Filter adc values
		if (counter < 50) {
 8005266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005268:	2b31      	cmp	r3, #49	; 0x31
 800526a:	dc33      	bgt.n	80052d4 <vTaskBattery+0x1c4>
			counter++;
 800526c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800526e:	3301      	adds	r3, #1
 8005270:	647b      	str	r3, [r7, #68]	; 0x44
			curr += current1 + current2;
 8005272:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005276:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800527a:	f7fb f827 	bl	80002cc <__adddf3>
 800527e:	4603      	mov	r3, r0
 8005280:	460c      	mov	r4, r1
 8005282:	461a      	mov	r2, r3
 8005284:	4623      	mov	r3, r4
 8005286:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800528a:	f7fb f81f 	bl	80002cc <__adddf3>
 800528e:	4603      	mov	r3, r0
 8005290:	460c      	mov	r4, r1
 8005292:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			supp += supply_voltage;
 8005296:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005298:	f7fb f976 	bl	8000588 <__aeabi_f2d>
 800529c:	4603      	mov	r3, r0
 800529e:	460c      	mov	r4, r1
 80052a0:	461a      	mov	r2, r3
 80052a2:	4623      	mov	r3, r4
 80052a4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80052a8:	f7fb f810 	bl	80002cc <__adddf3>
 80052ac:	4603      	mov	r3, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			bat += battery_voltage;
 80052b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052b6:	f7fb f967 	bl	8000588 <__aeabi_f2d>
 80052ba:	4603      	mov	r3, r0
 80052bc:	460c      	mov	r4, r1
 80052be:	461a      	mov	r2, r3
 80052c0:	4623      	mov	r3, r4
 80052c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80052c6:	f7fb f801 	bl	80002cc <__adddf3>
 80052ca:	4603      	mov	r3, r0
 80052cc:	460c      	mov	r4, r1
 80052ce:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80052d2:	e096      	b.n	8005402 <vTaskBattery+0x2f2>
		} else {
			counter = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	647b      	str	r3, [r7, #68]	; 0x44
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	4b55      	ldr	r3, [pc, #340]	; (8005434 <vTaskBattery+0x324>)
 80052de:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80052e2:	f7fb fad3 	bl	800088c <__aeabi_ddiv>
 80052e6:	4603      	mov	r3, r0
 80052e8:	460c      	mov	r4, r1
 80052ea:	461a      	mov	r2, r3
 80052ec:	4623      	mov	r3, r4
 80052ee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052f2:	f7fa ffeb 	bl	80002cc <__adddf3>
 80052f6:	4603      	mov	r3, r0
 80052f8:	460c      	mov	r4, r1
 80052fa:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			consumption = (uint16_t)mah;
 80052fe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005302:	f7fb fc49 	bl	8000b98 <__aeabi_d2uiz>
 8005306:	4603      	mov	r3, r0
 8005308:	84fb      	strh	r3, [r7, #38]	; 0x26
			current = (uint16_t)(curr*1000)/50;
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	4b4a      	ldr	r3, [pc, #296]	; (8005438 <vTaskBattery+0x328>)
 8005310:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005314:	f7fb f990 	bl	8000638 <__aeabi_dmul>
 8005318:	4603      	mov	r3, r0
 800531a:	460c      	mov	r4, r1
 800531c:	4618      	mov	r0, r3
 800531e:	4621      	mov	r1, r4
 8005320:	f7fb fc3a 	bl	8000b98 <__aeabi_d2uiz>
 8005324:	4603      	mov	r3, r0
 8005326:	b29b      	uxth	r3, r3
 8005328:	4a44      	ldr	r2, [pc, #272]	; (800543c <vTaskBattery+0x32c>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	091b      	lsrs	r3, r3, #4
 8005330:	84bb      	strh	r3, [r7, #36]	; 0x24
			power = (curr*1000)/50 * (battery_voltage/50);
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	4b40      	ldr	r3, [pc, #256]	; (8005438 <vTaskBattery+0x328>)
 8005338:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800533c:	f7fb f97c 	bl	8000638 <__aeabi_dmul>
 8005340:	4603      	mov	r3, r0
 8005342:	460c      	mov	r4, r1
 8005344:	4618      	mov	r0, r3
 8005346:	4621      	mov	r1, r4
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	4b3c      	ldr	r3, [pc, #240]	; (8005440 <vTaskBattery+0x330>)
 800534e:	f7fb fa9d 	bl	800088c <__aeabi_ddiv>
 8005352:	4603      	mov	r3, r0
 8005354:	460c      	mov	r4, r1
 8005356:	4625      	mov	r5, r4
 8005358:	461c      	mov	r4, r3
 800535a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800535e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005444 <vTaskBattery+0x334>
 8005362:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005366:	ee16 0a90 	vmov	r0, s13
 800536a:	f7fb f90d 	bl	8000588 <__aeabi_f2d>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4620      	mov	r0, r4
 8005374:	4629      	mov	r1, r5
 8005376:	f7fb f95f 	bl	8000638 <__aeabi_dmul>
 800537a:	4603      	mov	r3, r0
 800537c:	460c      	mov	r4, r1
 800537e:	4618      	mov	r0, r3
 8005380:	4621      	mov	r1, r4
 8005382:	f7fb fc09 	bl	8000b98 <__aeabi_d2uiz>
 8005386:	4603      	mov	r3, r0
 8005388:	847b      	strh	r3, [r7, #34]	; 0x22
			supply = (uint16_t)(supp * 20);
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	4b2e      	ldr	r3, [pc, #184]	; (8005448 <vTaskBattery+0x338>)
 8005390:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005394:	f7fb f950 	bl	8000638 <__aeabi_dmul>
 8005398:	4603      	mov	r3, r0
 800539a:	460c      	mov	r4, r1
 800539c:	4618      	mov	r0, r3
 800539e:	4621      	mov	r1, r4
 80053a0:	f7fb fbfa 	bl	8000b98 <__aeabi_d2uiz>
 80053a4:	4603      	mov	r3, r0
 80053a6:	843b      	strh	r3, [r7, #32]
			battery = (uint16_t)(bat * 20);
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	4b26      	ldr	r3, [pc, #152]	; (8005448 <vTaskBattery+0x338>)
 80053ae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80053b2:	f7fb f941 	bl	8000638 <__aeabi_dmul>
 80053b6:	4603      	mov	r3, r0
 80053b8:	460c      	mov	r4, r1
 80053ba:	4618      	mov	r0, r3
 80053bc:	4621      	mov	r1, r4
 80053be:	f7fb fbeb 	bl	8000b98 <__aeabi_d2uiz>
 80053c2:	4603      	mov	r3, r0
 80053c4:	83fb      	strh	r3, [r7, #30]
			curr = 0;
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	f04f 0400 	mov.w	r4, #0
 80053ce:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			bat = 0;
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	f04f 0400 	mov.w	r4, #0
 80053da:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			supp = 0;
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	f04f 0400 	mov.w	r4, #0
 80053e6:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 80053ea:	8c39      	ldrh	r1, [r7, #32]
 80053ec:	8bf8      	ldrh	r0, [r7, #30]
 80053ee:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 80053f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80053f4:	9201      	str	r2, [sp, #4]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	4623      	mov	r3, r4
 80053fa:	4602      	mov	r2, r0
 80053fc:	4813      	ldr	r0, [pc, #76]	; (800544c <vTaskBattery+0x33c>)
 80053fe:	f7fe fb3b 	bl	8003a78 <UsbPrint>





		osDelayUntil(tick_count);
 8005402:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005404:	f00f faf4 	bl	80149f0 <osDelayUntil>
	for (;;) {
 8005408:	e6b3      	b.n	8005172 <vTaskBattery+0x62>
 800540a:	bf00      	nop
 800540c:	f3af 8000 	nop.w
 8005410:	be0ded28 	.word	0xbe0ded28
 8005414:	3fd69930 	.word	0x3fd69930
 8005418:	4189374c 	.word	0x4189374c
 800541c:	3fd0e560 	.word	0x3fd0e560
 8005420:	cccccccd 	.word	0xcccccccd
 8005424:	4014cccc 	.word	0x4014cccc
 8005428:	10624dd3 	.word	0x10624dd3
 800542c:	2000da04 	.word	0x2000da04
 8005430:	3f440000 	.word	0x3f440000
 8005434:	409c2000 	.word	0x409c2000
 8005438:	408f4000 	.word	0x408f4000
 800543c:	51eb851f 	.word	0x51eb851f
 8005440:	40490000 	.word	0x40490000
 8005444:	42480000 	.word	0x42480000
 8005448:	40340000 	.word	0x40340000
 800544c:	0801be4c 	.word	0x0801be4c

08005450 <vTaskController>:
#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */


void vTaskController(void *argument) {
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8005456:	af00      	add	r7, sp, #0
 8005458:	1d3b      	adds	r3, r7, #4
 800545a:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_placeholder;
    flight_phase_detection_t flight_phase_detection_placeholder = { 0 };
 800545c:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	609a      	str	r2, [r3, #8]
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 8005468:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	605a      	str	r2, [r3, #4]
 8005472:	609a      	str	r2, [r3, #8]

    /* Initialize the control_data struct */
    control_data_t control_data = { 0 };
 8005474:	f107 0308 	add.w	r3, r7, #8
 8005478:	4618      	mov	r0, r3
 800547a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800547e:	461a      	mov	r2, r3
 8005480:	2100      	movs	r1, #0
 8005482:	f013 ff10 	bl	80192a6 <memset>
    control_data_init(&control_data);
 8005486:	f107 0308 	add.w	r3, r7, #8
 800548a:	4618      	mov	r0, r3
 800548c:	f7fc fb50 	bl	8001b30 <control_data_init>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005490:	f00f f9a8 	bl	80147e4 <osKernelGetTickCount>
 8005494:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8005498:	f00f f9cc 	bl	8014834 <osKernelGetTickFreq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b60      	ldr	r3, [pc, #384]	; (8005620 <vTaskController+0x1d0>)
 80054a0:	fba3 2302 	umull	r2, r3, r3, r2
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80054aa:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 80054ae:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80054b2:	4413      	add	r3, r2
 80054b4:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484

		/* Update Sensor Fusion Variables */
		if (osMutexGetOwner(state_est_mutex) == NULL) {
 80054b8:	4b5a      	ldr	r3, [pc, #360]	; (8005624 <vTaskController+0x1d4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f00f fc1f 	bl	8014d00 <osMutexGetOwner>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d12b      	bne.n	8005520 <vTaskController+0xd0>
			state_placeholder.position_world[2] = state_est_data_global.position_world[2];
 80054c8:	4b57      	ldr	r3, [pc, #348]	; (8005628 <vTaskController+0x1d8>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
			state_placeholder.velocity_world[2] = state_est_data_global.velocity_world[2];
 80054d0:	4b55      	ldr	r3, [pc, #340]	; (8005628 <vTaskController+0x1d8>)
 80054d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d4:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
			if (osMutexGetOwner(state_est_mutex) == NULL) {
 80054d8:	4b52      	ldr	r3, [pc, #328]	; (8005624 <vTaskController+0x1d4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f00f fc0f 	bl	8014d00 <osMutexGetOwner>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d11b      	bne.n	8005520 <vTaskController+0xd0>
				control_data.sf_ref_altitude_AGL = ((float)state_placeholder.position_world[2]) / 1000;
 80054e8:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80054ec:	ee07 3a90 	vmov	s15, r3
 80054f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054f4:	eddf 6a4d 	vldr	s13, [pc, #308]	; 800562c <vTaskController+0x1dc>
 80054f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054fc:	f107 0308 	add.w	r3, r7, #8
 8005500:	edc3 7a03 	vstr	s15, [r3, #12]
				control_data.sf_velocity = ((float)state_placeholder.velocity_world[2]) / 1000;
 8005504:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8005508:	ee07 3a90 	vmov	s15, r3
 800550c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005510:	eddf 6a46 	vldr	s13, [pc, #280]	; 800562c <vTaskController+0x1dc>
 8005514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005518:	f107 0308 	add.w	r3, r7, #8
 800551c:	edc3 7a04 	vstr	s15, [r3, #16]
			}
		}

		/* update flight Phase */
		if (osMutexGetOwner(fsm_mutex) == NULL) {
 8005520:	4b43      	ldr	r3, [pc, #268]	; (8005630 <vTaskController+0x1e0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f00f fbeb 	bl	8014d00 <osMutexGetOwner>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d122      	bne.n	8005576 <vTaskController+0x126>
			flight_phase_detection_placeholder.flight_phase = global_flight_phase_detection.flight_phase;
 8005530:	4b40      	ldr	r3, [pc, #256]	; (8005634 <vTaskController+0x1e4>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	f887 3438 	strb.w	r3, [r7, #1080]	; 0x438
			flight_phase_detection_placeholder.mach_regime = global_flight_phase_detection.mach_regime;
 8005538:	4b3e      	ldr	r3, [pc, #248]	; (8005634 <vTaskController+0x1e4>)
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	f887 3439 	strb.w	r3, [r7, #1081]	; 0x439
			flight_phase_detection_placeholder.mach_number = global_flight_phase_detection.mach_number;
 8005540:	4b3c      	ldr	r3, [pc, #240]	; (8005634 <vTaskController+0x1e4>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8005548:	6013      	str	r3, [r2, #0]
			if (osMutexGetOwner(fsm_mutex) == NULL) {
 800554a:	4b39      	ldr	r3, [pc, #228]	; (8005630 <vTaskController+0x1e0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f00f fbd6 	bl	8014d00 <osMutexGetOwner>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10d      	bne.n	8005576 <vTaskController+0x126>
				current_flight_phase_detection.flight_phase = flight_phase_detection_placeholder.flight_phase;
 800555a:	f897 3438 	ldrb.w	r3, [r7, #1080]	; 0x438
 800555e:	f887 342c 	strb.w	r3, [r7, #1068]	; 0x42c
				current_flight_phase_detection.mach_regime = flight_phase_detection_placeholder.mach_regime;
 8005562:	f897 3439 	ldrb.w	r3, [r7, #1081]	; 0x439
 8005566:	f887 342d 	strb.w	r3, [r7, #1069]	; 0x42d
				current_flight_phase_detection.mach_number = flight_phase_detection_placeholder.mach_number;
 800556a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8005574:	6013      	str	r3, [r2, #0]
		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
        if(LQR_ACTIVE) {
            compute_control_input(&control_data, &current_flight_phase_detection);
        }
        else {
            compute_test_control_input(&control_data);
 8005576:	f107 0308 	add.w	r3, r7, #8
 800557a:	4618      	mov	r0, r3
 800557c:	f7fc fb0a 	bl	8001b94 <compute_test_control_input>
        }
		/* Write Control Input into Global Variable */
		if (osMutexAcquire(controller_mutex, 10) == osOK) {
 8005580:	4b2d      	ldr	r3, [pc, #180]	; (8005638 <vTaskController+0x1e8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	210a      	movs	r1, #10
 8005586:	4618      	mov	r0, r3
 8005588:	f00f fb0c 	bl	8014ba4 <osMutexAcquire>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d112      	bne.n	80055b8 <vTaskController+0x168>
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 8005592:	f107 0308 	add.w	r3, r7, #8
 8005596:	edd3 7a00 	vldr	s15, [r3]
 800559a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800562c <vTaskController+0x1dc>
 800559e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055a6:	ee17 2a90 	vmov	r2, s15
 80055aa:	4b24      	ldr	r3, [pc, #144]	; (800563c <vTaskController+0x1ec>)
 80055ac:	601a      	str	r2, [r3, #0]
			osMutexRelease(controller_mutex);
 80055ae:	4b22      	ldr	r3, [pc, #136]	; (8005638 <vTaskController+0x1e8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f00f fb54 	bl	8014c60 <osMutexRelease>
		}

		/* Log to SD Card */

		logControllerOutput(osKernelGetTickCount(), (int32_t)(control_data.control_input * 1000), (int32_t)((float)control_data.reference_error)/1000, (int32_t)((float)control_data.integrated_error)/1000);
 80055b8:	f00f f914 	bl	80147e4 <osKernelGetTickCount>
 80055bc:	4604      	mov	r4, r0
 80055be:	f107 0308 	add.w	r3, r7, #8
 80055c2:	edd3 7a00 	vldr	s15, [r3]
 80055c6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800562c <vTaskController+0x1dc>
 80055ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80055d2:	f107 0308 	add.w	r3, r7, #8
 80055d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80055da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055de:	ee17 1a90 	vmov	r1, s15
 80055e2:	4b17      	ldr	r3, [pc, #92]	; (8005640 <vTaskController+0x1f0>)
 80055e4:	fb83 2301 	smull	r2, r3, r3, r1
 80055e8:	119a      	asrs	r2, r3, #6
 80055ea:	17cb      	asrs	r3, r1, #31
 80055ec:	1ad0      	subs	r0, r2, r3
 80055ee:	f107 0308 	add.w	r3, r7, #8
 80055f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80055f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055fa:	ee17 1a90 	vmov	r1, s15
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <vTaskController+0x1f0>)
 8005600:	fb83 2301 	smull	r2, r3, r3, r1
 8005604:	119a      	asrs	r2, r3, #6
 8005606:	17cb      	asrs	r3, r1, #31
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	4602      	mov	r2, r0
 800560c:	ee17 1a10 	vmov	r1, s14
 8005610:	4620      	mov	r0, r4
 8005612:	f7fe f9d7 	bl	80039c4 <logControllerOutput>


		/* Sleep */
		osDelayUntil(tick_count);
 8005616:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 800561a:	f00f f9e9 	bl	80149f0 <osDelayUntil>
		tick_count += tick_update;
 800561e:	e744      	b.n	80054aa <vTaskController+0x5a>
 8005620:	51eb851f 	.word	0x51eb851f
 8005624:	2000fc50 	.word	0x2000fc50
 8005628:	200002f4 	.word	0x200002f4
 800562c:	447a0000 	.word	0x447a0000
 8005630:	2000968c 	.word	0x2000968c
 8005634:	20000344 	.word	0x20000344
 8005638:	2000da00 	.word	0x2000da00
 800563c:	20000330 	.word	0x20000330
 8005640:	10624dd3 	.word	0x10624dd3

08005644 <vTaskFSM>:
 */

#include "tasks/task_fsm.h"


void vTaskFSM(void *argument) {
 8005644:	b5b0      	push	{r4, r5, r7, lr}
 8005646:	b0ae      	sub	sp, #184	; 0xb8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 800564c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	605a      	str	r2, [r3, #4]
 8005656:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8005658:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800565c:	4618      	mov	r0, r3
 800565e:	f7fc fd81 	bl	8002164 <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 8005662:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005666:	223c      	movs	r2, #60	; 0x3c
 8005668:	2100      	movs	r1, #0
 800566a:	4618      	mov	r0, r3
 800566c:	f013 fe1b 	bl	80192a6 <memset>
	state_est_data_t state_est_data_fsm_dummy = { 0 };
 8005670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005674:	223c      	movs	r2, #60	; 0x3c
 8005676:	2100      	movs	r1, #0
 8005678:	4618      	mov	r0, r3
 800567a:	f013 fe14 	bl	80192a6 <memset>

	/* environment data */
	env_t environment;
	env_t dummy_env;
	init_env(&dummy_env);
 800567e:	f107 030c 	add.w	r3, r7, #12
 8005682:	4618      	mov	r0, r3
 8005684:	f7fc fab0 	bl	8001be8 <init_env>
	init_env(&environment);
 8005688:	f107 031c 	add.w	r3, r7, #28
 800568c:	4618      	mov	r0, r3
 800568e:	f7fc faab 	bl	8001be8 <init_env>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005692:	f00f f8a7 	bl	80147e4 <osKernelGetTickCount>
 8005696:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 800569a:	f00f f8cb 	bl	8014834 <osKernelGetTickFreq>
 800569e:	4602      	mov	r2, r0
 80056a0:	4b3c      	ldr	r3, [pc, #240]	; (8005794 <vTaskFSM+0x150>)
 80056a2:	fba3 2302 	umull	r2, r3, r3, r2
 80056a6:	091b      	lsrs	r3, r3, #4
 80056a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80056ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056b4:	4413      	add	r3, r2
 80056b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* update state estimation data */
		if(osMutexGetOwner(state_est_mutex) == NULL){
 80056ba:	4b37      	ldr	r3, [pc, #220]	; (8005798 <vTaskFSM+0x154>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f00f fb1e 	bl	8014d00 <osMutexGetOwner>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d123      	bne.n	8005712 <vTaskFSM+0xce>
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			state_est_data_fsm_dummy = state_est_data_global;
 80056ca:	4b34      	ldr	r3, [pc, #208]	; (800579c <vTaskFSM+0x158>)
 80056cc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80056d0:	461d      	mov	r5, r3
 80056d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80056e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 80056e6:	4b2c      	ldr	r3, [pc, #176]	; (8005798 <vTaskFSM+0x154>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f00f fb08 	bl	8014d00 <osMutexGetOwner>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10d      	bne.n	8005712 <vTaskFSM+0xce>
				state_est_data_fsm = state_est_data_fsm_dummy;
 80056f6:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80056fa:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 80056fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800570a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800570e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			}
		}
		/* Update Environment */
		if(osMutexGetOwner(environment_mutex) == NULL){
 8005712:	4b23      	ldr	r3, [pc, #140]	; (80057a0 <vTaskFSM+0x15c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f00f faf2 	bl	8014d00 <osMutexGetOwner>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d114      	bne.n	800574c <vTaskFSM+0x108>
			dummy_env = global_env;
 8005722:	4b20      	ldr	r3, [pc, #128]	; (80057a4 <vTaskFSM+0x160>)
 8005724:	f107 040c 	add.w	r4, r7, #12
 8005728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800572a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			if(osMutexGetOwner(state_est_mutex) == NULL){
 800572e:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <vTaskFSM+0x154>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f00f fae4 	bl	8014d00 <osMutexGetOwner>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <vTaskFSM+0x108>
				environment = dummy_env;
 800573e:	f107 041c 	add.w	r4, r7, #28
 8005742:	f107 030c 	add.w	r3, r7, #12
 8005746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}
		}

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 800574c:	f107 021c 	add.w	r2, r7, #28
 8005750:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8005754:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005758:	4618      	mov	r0, r3
 800575a:	f7fc fc01 	bl	8001f60 <detect_flight_phase>

		/* TODO Write NEW State in GLobal Variable */
		if(osMutexAcquire(fsm_mutex, 10) == osOK){
 800575e:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <vTaskFSM+0x164>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	210a      	movs	r1, #10
 8005764:	4618      	mov	r0, r3
 8005766:	f00f fa1d 	bl	8014ba4 <osMutexAcquire>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10c      	bne.n	800578a <vTaskFSM+0x146>
			global_flight_phase_detection = flight_phase_detection;
 8005770:	4b0e      	ldr	r3, [pc, #56]	; (80057ac <vTaskFSM+0x168>)
 8005772:	461c      	mov	r4, r3
 8005774:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005778:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800577c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			osMutexRelease(fsm_mutex);
 8005780:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <vTaskFSM+0x164>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4618      	mov	r0, r3
 8005786:	f00f fa6b 	bl	8014c60 <osMutexRelease>
		}

		/* Sleep */
		osDelayUntil(tick_count);
 800578a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800578e:	f00f f92f 	bl	80149f0 <osDelayUntil>
		tick_count += tick_update;
 8005792:	e78b      	b.n	80056ac <vTaskFSM+0x68>
 8005794:	cccccccd 	.word	0xcccccccd
 8005798:	2000fc50 	.word	0x2000fc50
 800579c:	200002f4 	.word	0x200002f4
 80057a0:	2000b910 	.word	0x2000b910
 80057a4:	20000334 	.word	0x20000334
 80057a8:	2000968c 	.word	0x2000968c
 80057ac:	20000344 	.word	0x20000344

080057b0 <vTaskGps>:

UBLOX GPS1 = {0,&huart1};
UBLOX GPS2 = {1,&huart2};
UBLOX GPS3 = {2,&huart3};

void vTaskGps(void *argument) {
 80057b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057b2:	b08d      	sub	sp, #52	; 0x34
 80057b4:	af06      	add	r7, sp, #24
 80057b6:	60f8      	str	r0, [r7, #12]

	/* Initialise Variables */


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80057b8:	f00f f814 	bl	80147e4 <osKernelGetTickCount>
 80057bc:	6178      	str	r0, [r7, #20]
	tick_update = osKernelGetTickFreq() / GPS_SAMPLE_RATE;
 80057be:	f00f f839 	bl	8014834 <osKernelGetTickFreq>
 80057c2:	4603      	mov	r3, r0
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	613b      	str	r3, [r7, #16]
	osDelay(500);
 80057c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057cc:	f00f f8e2 	bl	8014994 <osDelay>

	gps_dma_init(&GPS1);
 80057d0:	4842      	ldr	r0, [pc, #264]	; (80058dc <vTaskGps+0x12c>)
 80057d2:	f7fc f8cb 	bl	800196c <gps_dma_init>
	gps_dma_init(&GPS2);
 80057d6:	4842      	ldr	r0, [pc, #264]	; (80058e0 <vTaskGps+0x130>)
 80057d8:	f7fc f8c8 	bl	800196c <gps_dma_init>
	gps_dma_init(&GPS3);
 80057dc:	4841      	ldr	r0, [pc, #260]	; (80058e4 <vTaskGps+0x134>)
 80057de:	f7fc f8c5 	bl	800196c <gps_dma_init>

	for (;;) {
		tick_count += tick_update;
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	4413      	add	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]

		gps_read_sensor(&GPS1);
 80057ea:	483c      	ldr	r0, [pc, #240]	; (80058dc <vTaskGps+0x12c>)
 80057ec:	f7fc f8e2 	bl	80019b4 <gps_read_sensor>
		gps_read_sensor(&GPS2);
 80057f0:	483b      	ldr	r0, [pc, #236]	; (80058e0 <vTaskGps+0x130>)
 80057f2:	f7fc f8df 	bl	80019b4 <gps_read_sensor>
		gps_read_sensor(&GPS3);
 80057f6:	483b      	ldr	r0, [pc, #236]	; (80058e4 <vTaskGps+0x134>)
 80057f8:	f7fc f8dc 	bl	80019b4 <gps_read_sensor>


		UsbPrint("[GPS1] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
 80057fc:	4b37      	ldr	r3, [pc, #220]	; (80058dc <vTaskGps+0x12c>)
 80057fe:	6898      	ldr	r0, [r3, #8]
 8005800:	4b36      	ldr	r3, [pc, #216]	; (80058dc <vTaskGps+0x12c>)
 8005802:	68dc      	ldr	r4, [r3, #12]
 8005804:	4b35      	ldr	r3, [pc, #212]	; (80058dc <vTaskGps+0x12c>)
 8005806:	691d      	ldr	r5, [r3, #16]
								GPS1.data.hour, GPS1.data.minute, GPS1.data.second, GPS1.data.lat_deg,
 8005808:	4b34      	ldr	r3, [pc, #208]	; (80058dc <vTaskGps+0x12c>)
 800580a:	7d1b      	ldrb	r3, [r3, #20]
		UsbPrint("[GPS1] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
 800580c:	461e      	mov	r6, r3
 800580e:	4b33      	ldr	r3, [pc, #204]	; (80058dc <vTaskGps+0x12c>)
 8005810:	699b      	ldr	r3, [r3, #24]
								GPS1.data.lat_decimal, GPS1.data.lon_deg, GPS1.data.lon_decimal, GPS1.data.satellite, GPS1.data.altitude);
 8005812:	4a32      	ldr	r2, [pc, #200]	; (80058dc <vTaskGps+0x12c>)
 8005814:	7f12      	ldrb	r2, [r2, #28]
		UsbPrint("[GPS1] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
 8005816:	60ba      	str	r2, [r7, #8]
 8005818:	4a30      	ldr	r2, [pc, #192]	; (80058dc <vTaskGps+0x12c>)
 800581a:	6a12      	ldr	r2, [r2, #32]
								GPS1.data.lat_decimal, GPS1.data.lon_deg, GPS1.data.lon_decimal, GPS1.data.satellite, GPS1.data.altitude);
 800581c:	492f      	ldr	r1, [pc, #188]	; (80058dc <vTaskGps+0x12c>)
 800581e:	f891 1025 	ldrb.w	r1, [r1, #37]	; 0x25
		UsbPrint("[GPS1] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
 8005822:	6079      	str	r1, [r7, #4]
								GPS1.data.lat_decimal, GPS1.data.lon_deg, GPS1.data.lon_decimal, GPS1.data.satellite, GPS1.data.altitude);
 8005824:	492d      	ldr	r1, [pc, #180]	; (80058dc <vTaskGps+0x12c>)
 8005826:	8d09      	ldrh	r1, [r1, #40]	; 0x28
		UsbPrint("[GPS1] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
 8005828:	9105      	str	r1, [sp, #20]
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	9104      	str	r1, [sp, #16]
 800582e:	9203      	str	r2, [sp, #12]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	9202      	str	r2, [sp, #8]
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	9600      	str	r6, [sp, #0]
 8005838:	462b      	mov	r3, r5
 800583a:	4622      	mov	r2, r4
 800583c:	4601      	mov	r1, r0
 800583e:	482a      	ldr	r0, [pc, #168]	; (80058e8 <vTaskGps+0x138>)
 8005840:	f7fe f91a 	bl	8003a78 <UsbPrint>

		UsbPrint("[GPS2] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d Alt: %d\n",
 8005844:	4b26      	ldr	r3, [pc, #152]	; (80058e0 <vTaskGps+0x130>)
 8005846:	6898      	ldr	r0, [r3, #8]
 8005848:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <vTaskGps+0x130>)
 800584a:	68dc      	ldr	r4, [r3, #12]
 800584c:	4b24      	ldr	r3, [pc, #144]	; (80058e0 <vTaskGps+0x130>)
 800584e:	691d      	ldr	r5, [r3, #16]
								GPS2.data.hour, GPS2.data.minute, GPS2.data.second, GPS2.data.lat_deg,
 8005850:	4b23      	ldr	r3, [pc, #140]	; (80058e0 <vTaskGps+0x130>)
 8005852:	7d1b      	ldrb	r3, [r3, #20]
		UsbPrint("[GPS2] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d Alt: %d\n",
 8005854:	461e      	mov	r6, r3
 8005856:	4b22      	ldr	r3, [pc, #136]	; (80058e0 <vTaskGps+0x130>)
 8005858:	699b      	ldr	r3, [r3, #24]
								GPS2.data.lat_decimal, GPS2.data.lon_deg, GPS2.data.lon_decimal, GPS2.data.satellite, GPS2.data.altitude);
 800585a:	4a21      	ldr	r2, [pc, #132]	; (80058e0 <vTaskGps+0x130>)
 800585c:	7f12      	ldrb	r2, [r2, #28]
		UsbPrint("[GPS2] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d Alt: %d\n",
 800585e:	60ba      	str	r2, [r7, #8]
 8005860:	4a1f      	ldr	r2, [pc, #124]	; (80058e0 <vTaskGps+0x130>)
 8005862:	6a12      	ldr	r2, [r2, #32]
								GPS2.data.lat_decimal, GPS2.data.lon_deg, GPS2.data.lon_decimal, GPS2.data.satellite, GPS2.data.altitude);
 8005864:	491e      	ldr	r1, [pc, #120]	; (80058e0 <vTaskGps+0x130>)
 8005866:	f891 1025 	ldrb.w	r1, [r1, #37]	; 0x25
		UsbPrint("[GPS2] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d Alt: %d\n",
 800586a:	6079      	str	r1, [r7, #4]
								GPS2.data.lat_decimal, GPS2.data.lon_deg, GPS2.data.lon_decimal, GPS2.data.satellite, GPS2.data.altitude);
 800586c:	491c      	ldr	r1, [pc, #112]	; (80058e0 <vTaskGps+0x130>)
 800586e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
		UsbPrint("[GPS2] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d Alt: %d\n",
 8005870:	9105      	str	r1, [sp, #20]
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	9104      	str	r1, [sp, #16]
 8005876:	9203      	str	r2, [sp, #12]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	9202      	str	r2, [sp, #8]
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	9600      	str	r6, [sp, #0]
 8005880:	462b      	mov	r3, r5
 8005882:	4622      	mov	r2, r4
 8005884:	4601      	mov	r1, r0
 8005886:	4819      	ldr	r0, [pc, #100]	; (80058ec <vTaskGps+0x13c>)
 8005888:	f7fe f8f6 	bl	8003a78 <UsbPrint>

		UsbPrint("[GPS3] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
 800588c:	4b15      	ldr	r3, [pc, #84]	; (80058e4 <vTaskGps+0x134>)
 800588e:	6898      	ldr	r0, [r3, #8]
 8005890:	4b14      	ldr	r3, [pc, #80]	; (80058e4 <vTaskGps+0x134>)
 8005892:	68dc      	ldr	r4, [r3, #12]
 8005894:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <vTaskGps+0x134>)
 8005896:	691d      	ldr	r5, [r3, #16]
								GPS3.data.hour, GPS3.data.minute, GPS3.data.second, GPS3.data.lat_deg,
 8005898:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <vTaskGps+0x134>)
 800589a:	7d1b      	ldrb	r3, [r3, #20]
		UsbPrint("[GPS3] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
 800589c:	461e      	mov	r6, r3
 800589e:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <vTaskGps+0x134>)
 80058a0:	699b      	ldr	r3, [r3, #24]
								GPS3.data.lat_decimal, GPS3.data.lon_deg, GPS3.data.lon_decimal, GPS3.data.satellite, GPS3.data.altitude);
 80058a2:	4a10      	ldr	r2, [pc, #64]	; (80058e4 <vTaskGps+0x134>)
 80058a4:	7f12      	ldrb	r2, [r2, #28]
		UsbPrint("[GPS3] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
 80058a6:	60ba      	str	r2, [r7, #8]
 80058a8:	4a0e      	ldr	r2, [pc, #56]	; (80058e4 <vTaskGps+0x134>)
 80058aa:	6a12      	ldr	r2, [r2, #32]
								GPS3.data.lat_decimal, GPS3.data.lon_deg, GPS3.data.lon_decimal, GPS3.data.satellite, GPS3.data.altitude);
 80058ac:	490d      	ldr	r1, [pc, #52]	; (80058e4 <vTaskGps+0x134>)
 80058ae:	f891 1025 	ldrb.w	r1, [r1, #37]	; 0x25
		UsbPrint("[GPS3] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
 80058b2:	6079      	str	r1, [r7, #4]
								GPS3.data.lat_decimal, GPS3.data.lon_deg, GPS3.data.lon_decimal, GPS3.data.satellite, GPS3.data.altitude);
 80058b4:	490b      	ldr	r1, [pc, #44]	; (80058e4 <vTaskGps+0x134>)
 80058b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
		UsbPrint("[GPS3] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
 80058b8:	9105      	str	r1, [sp, #20]
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	9104      	str	r1, [sp, #16]
 80058be:	9203      	str	r2, [sp, #12]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	9202      	str	r2, [sp, #8]
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	9600      	str	r6, [sp, #0]
 80058c8:	462b      	mov	r3, r5
 80058ca:	4622      	mov	r2, r4
 80058cc:	4601      	mov	r1, r0
 80058ce:	4808      	ldr	r0, [pc, #32]	; (80058f0 <vTaskGps+0x140>)
 80058d0:	f7fe f8d2 	bl	8003a78 <UsbPrint>




		osDelayUntil(tick_count);
 80058d4:	6978      	ldr	r0, [r7, #20]
 80058d6:	f00f f88b 	bl	80149f0 <osDelayUntil>
		tick_count += tick_update;
 80058da:	e782      	b.n	80057e2 <vTaskGps+0x32>
 80058dc:	20000004 	.word	0x20000004
 80058e0:	20000030 	.word	0x20000030
 80058e4:	2000005c 	.word	0x2000005c
 80058e8:	0801be9c 	.word	0x0801be9c
 80058ec:	0801bee0 	.word	0x0801bee0
 80058f0:	0801bf20 	.word	0x0801bf20

080058f4 <vTaskMotorCont>:
 */

#include "tasks/task_motor_control.h"


void vTaskMotorCont(void *argument) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08e      	sub	sp, #56	; 0x38
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osStatus_t motor_status = osOK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	62bb      	str	r3, [r7, #40]	; 0x28


	/* Initialisation */
	//int8_t position_mode = 0x08;
	/* Profile Position Mode */
	int8_t position_mode = 0x01;
 8005900:	2301      	movs	r3, #1
 8005902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int32_t PPM_velocity = 4000;
 8005906:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800590a:	623b      	str	r3, [r7, #32]
	int32_t PPM_acceleration = 100000;
 800590c:	4b40      	ldr	r3, [pc, #256]	; (8005a10 <vTaskMotorCont+0x11c>)
 800590e:	61fb      	str	r3, [r7, #28]
	int32_t PPM_deceleration = 100000;
 8005910:	4b3f      	ldr	r3, [pc, #252]	; (8005a10 <vTaskMotorCont+0x11c>)
 8005912:	61bb      	str	r3, [r7, #24]


	/* Controller Variables */
	int32_t controller_actuation = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t controller_actuation_dummy = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]

	/* Debugging Variables */
	int8_t counter = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	74fb      	strb	r3, [r7, #19]
	int32_t desired_position = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t measured_position = 0;
 8005924:	2300      	movs	r3, #0
 8005926:	60bb      	str	r3, [r7, #8]

	while(EnableMotor() != osOK){
 8005928:	e003      	b.n	8005932 <vTaskMotorCont+0x3e>
		osDelay(1000);
 800592a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800592e:	f00f f831 	bl	8014994 <osDelay>
	while(EnableMotor() != osOK){
 8005932:	f7fb fb75 	bl	8001020 <EnableMotor>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f6      	bne.n	800592a <vTaskMotorCont+0x36>
	};

	while(SetPositionMode(position_mode) != osOK){
 800593c:	e003      	b.n	8005946 <vTaskMotorCont+0x52>
		osDelay(1000);
 800593e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005942:	f00f f827 	bl	8014994 <osDelay>
	while(SetPositionMode(position_mode) != osOK){
 8005946:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800594a:	4618      	mov	r0, r3
 800594c:	f7fb fbc1 	bl	80010d2 <SetPositionMode>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f3      	bne.n	800593e <vTaskMotorCont+0x4a>
	};

	if (position_mode == 0x01) {
 8005956:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800595a:	2b01      	cmp	r3, #1
 800595c:	d105      	bne.n	800596a <vTaskMotorCont+0x76>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	69f9      	ldr	r1, [r7, #28]
 8005962:	6a38      	ldr	r0, [r7, #32]
 8005964:	f7fb fc35 	bl	80011d2 <ConfigurePPM>
 8005968:	62b8      	str	r0, [r7, #40]	; 0x28
	}


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800596a:	f00e ff3b 	bl	80147e4 <osKernelGetTickCount>
 800596e:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8005970:	f00e ff60 	bl	8014834 <osKernelGetTickFreq>
 8005974:	60f8      	str	r0, [r7, #12]

	for (;;) {
		tick_count += tick_update;
 8005976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4413      	add	r3, r2
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
		motor_status = GetPosition(&measured_position);
 800597e:	f107 0308 	add.w	r3, r7, #8
 8005982:	4618      	mov	r0, r3
 8005984:	f7fb fc9c 	bl	80012c0 <GetPosition>
 8005988:	62b8      	str	r0, [r7, #40]	; 0x28


		if (osMutexGetOwner(controller_mutex) == NULL) {
 800598a:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <vTaskMotorCont+0x120>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f00f f9b6 	bl	8014d00 <osMutexGetOwner>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10c      	bne.n	80059b4 <vTaskMotorCont+0xc0>
			controller_actuation_dummy = controller_output_global;
 800599a:	4b1f      	ldr	r3, [pc, #124]	; (8005a18 <vTaskMotorCont+0x124>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	617b      	str	r3, [r7, #20]
			if (osMutexGetOwner(controller_mutex) == NULL) {
 80059a0:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <vTaskMotorCont+0x120>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f00f f9ab 	bl	8014d00 <osMutexGetOwner>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <vTaskMotorCont+0xc0>
				controller_actuation = controller_actuation_dummy;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	633b      	str	r3, [r7, #48]	; 0x30
			}
		}
		desired_position = (int32_t)(((float)controller_actuation)/1000*(-140));
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	ee07 3a90 	vmov	s15, r3
 80059ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059be:	eddf 6a17 	vldr	s13, [pc, #92]	; 8005a1c <vTaskMotorCont+0x128>
 80059c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059c6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005a20 <vTaskMotorCont+0x12c>
 80059ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059d2:	ee17 3a90 	vmov	r3, s15
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(desired_position > -10){
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	f113 0f09 	cmn.w	r3, #9
 80059de:	db02      	blt.n	80059e6 <vTaskMotorCont+0xf2>
			desired_position = -10;
 80059e0:	f06f 0309 	mvn.w	r3, #9
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		if(desired_position < -135){
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	f113 0f87 	cmn.w	r3, #135	; 0x87
 80059ec:	da02      	bge.n	80059f4 <vTaskMotorCont+0x100>
			desired_position = -135;
 80059ee:	f06f 0386 	mvn.w	r3, #134	; 0x86
 80059f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		MoveToPositionPPM(desired_position);
 80059f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059f6:	f7fb fb91 	bl	800111c <MoveToPositionPPM>
//			desired_position = -5;
//			motor_status = MoveToPositionPPM(desired_position);
//			counter = 0;
//		}

		logMotor(osKernelGetTickCount(), desired_position, measured_position);
 80059fa:	f00e fef3 	bl	80147e4 <osKernelGetTickCount>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	461a      	mov	r2, r3
 8005a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a04:	f7fe f80c 	bl	8003a20 <logMotor>


		osDelayUntil(tick_count);
 8005a08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a0a:	f00e fff1 	bl	80149f0 <osDelayUntil>
		tick_count += tick_update;
 8005a0e:	e7b2      	b.n	8005976 <vTaskMotorCont+0x82>
 8005a10:	000186a0 	.word	0x000186a0
 8005a14:	2000da00 	.word	0x2000da00
 8005a18:	20000330 	.word	0x20000330
 8005a1c:	447a0000 	.word	0x447a0000
 8005a20:	c30c0000 	.word	0xc30c0000

08005a24 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8005a24:	b5b0      	push	{r4, r5, r7, lr}
 8005a26:	b0cc      	sub	sp, #304	; 0x130
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005a34:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8005a40:	48c0      	ldr	r0, [pc, #768]	; (8005d44 <vTaskSdCard+0x320>)
 8005a42:	f7fe f819 	bl	8003a78 <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 8005a46:	48c0      	ldr	r0, [pc, #768]	; (8005d48 <vTaskSdCard+0x324>)
 8005a48:	f7fe f816 	bl	8003a78 <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	49bf      	ldr	r1, [pc, #764]	; (8005d4c <vTaskSdCard+0x328>)
 8005a50:	48bf      	ldr	r0, [pc, #764]	; (8005d50 <vTaskSdCard+0x32c>)
 8005a52:	f00d fdbb 	bl	80135cc <f_mount>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8005a5c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <vTaskSdCard+0x4c>
			//UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8005a64:	4bbb      	ldr	r3, [pc, #748]	; (8005d54 <vTaskSdCard+0x330>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 8005a6a:	2064      	movs	r0, #100	; 0x64
 8005a6c:	f00e ff92 	bl	8014994 <osDelay>
		}
	} while (res != FR_OK);
 8005a70:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1e9      	bne.n	8005a4c <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 8005a78:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f040 80a9 	bne.w	8005bd4 <vTaskSdCard+0x1b0>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 8005a82:	48b5      	ldr	r0, [pc, #724]	; (8005d58 <vTaskSdCard+0x334>)
 8005a84:	f7fd fff8 	bl	8003a78 <UsbPrint>

		unsigned int file_number = 1;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8005a8e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005a92:	f107 0008 	add.w	r0, r7, #8
 8005a96:	4bb1      	ldr	r3, [pc, #708]	; (8005d5c <vTaskSdCard+0x338>)
 8005a98:	4aac      	ldr	r2, [pc, #688]	; (8005d4c <vTaskSdCard+0x328>)
 8005a9a:	f00e fd4f 	bl	801453c <f_findfirst>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8005aa4:	e02b      	b.n	8005afe <vTaskSdCard+0xda>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8005aa6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005aaa:	3b30      	subs	r3, #48	; 0x30
 8005aac:	2264      	movs	r2, #100	; 0x64
 8005aae:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8005ab2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005ab6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	18ca      	adds	r2, r1, r3
 8005ac4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005ac8:	3b30      	subs	r3, #48	; 0x30
 8005aca:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8005acc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (current_file_number + 1 > file_number) {
 8005ad0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d204      	bcs.n	8005ae8 <vTaskSdCard+0xc4>
				file_number = current_file_number + 1;
 8005ade:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8005ae8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005aec:	f107 0308 	add.w	r3, r7, #8
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f00e fcfa 	bl	80144ec <f_findnext>
 8005af8:	4603      	mov	r3, r0
 8005afa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8005afe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <vTaskSdCard+0xea>
 8005b06:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1cb      	bne.n	8005aa6 <vTaskSdCard+0x82>
		}
		if (res != FR_OK) {
 8005b0e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d006      	beq.n	8005b24 <vTaskSdCard+0x100>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 8005b16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4890      	ldr	r0, [pc, #576]	; (8005d60 <vTaskSdCard+0x33c>)
 8005b1e:	f7fd ffab 	bl	8003a78 <UsbPrint>
					res);
			goto resetSDCard;
 8005b22:	e790      	b.n	8005a46 <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8005b24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b28:	4a8e      	ldr	r2, [pc, #568]	; (8005d64 <vTaskSdCard+0x340>)
 8005b2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8005b30:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005b34:	4b8c      	ldr	r3, [pc, #560]	; (8005d68 <vTaskSdCard+0x344>)
 8005b36:	fba3 2301 	umull	r2, r3, r3, r1
 8005b3a:	08da      	lsrs	r2, r3, #3
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	1aca      	subs	r2, r1, r3
 8005b46:	b2d3      	uxtb	r3, r2
 8005b48:	3330      	adds	r3, #48	; 0x30
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8005b50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b54:	4a84      	ldr	r2, [pc, #528]	; (8005d68 <vTaskSdCard+0x344>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	08d9      	lsrs	r1, r3, #3
 8005b5c:	4b82      	ldr	r3, [pc, #520]	; (8005d68 <vTaskSdCard+0x344>)
 8005b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8005b62:	08da      	lsrs	r2, r3, #3
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	1aca      	subs	r2, r1, r3
 8005b6e:	b2d3      	uxtb	r3, r2
 8005b70:	3330      	adds	r3, #48	; 0x30
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8005b78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b7c:	4a7b      	ldr	r2, [pc, #492]	; (8005d6c <vTaskSdCard+0x348>)
 8005b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b82:	0959      	lsrs	r1, r3, #5
 8005b84:	4b78      	ldr	r3, [pc, #480]	; (8005d68 <vTaskSdCard+0x344>)
 8005b86:	fba3 2301 	umull	r2, r3, r3, r1
 8005b8a:	08da      	lsrs	r2, r3, #3
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	1aca      	subs	r2, r1, r3
 8005b96:	b2d3      	uxtb	r3, r2
 8005b98:	3330      	adds	r3, #48	; 0x30
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8005ba0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4872      	ldr	r0, [pc, #456]	; (8005d70 <vTaskSdCard+0x34c>)
 8005ba8:	f7fd ff66 	bl	8003a78 <UsbPrint>

		res = f_closedir(&dj);
 8005bac:	f107 0308 	add.w	r3, r7, #8
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f00e fc2d 	bl	8014410 <f_closedir>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8005bbc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <vTaskSdCard+0x1b0>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8005bc4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005bc8:	4619      	mov	r1, r3
 8005bca:	486a      	ldr	r0, [pc, #424]	; (8005d74 <vTaskSdCard+0x350>)
 8005bcc:	f7fd ff54 	bl	8003a78 <UsbPrint>
			goto resetSDCard;
 8005bd0:	bf00      	nop
 8005bd2:	e738      	b.n	8005a46 <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 8005bd4:	4868      	ldr	r0, [pc, #416]	; (8005d78 <vTaskSdCard+0x354>)
 8005bd6:	f7fd ff4f 	bl	8003a78 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8005bda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bde:	2212      	movs	r2, #18
 8005be0:	4619      	mov	r1, r3
 8005be2:	4866      	ldr	r0, [pc, #408]	; (8005d7c <vTaskSdCard+0x358>)
 8005be4:	f00d fd56 	bl	8013694 <f_open>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 8005bee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d006      	beq.n	8005c04 <vTaskSdCard+0x1e0>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8005bf6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4860      	ldr	r0, [pc, #384]	; (8005d80 <vTaskSdCard+0x35c>)
 8005bfe:	f7fd ff3b 	bl	8003a78 <UsbPrint>
		goto resetSDCard;
 8005c02:	e720      	b.n	8005a46 <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8005c04:	485f      	ldr	r0, [pc, #380]	; (8005d84 <vTaskSdCard+0x360>)
 8005c06:	f7fd ff37 	bl	8003a78 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8005c0a:	4b5c      	ldr	r3, [pc, #368]	; (8005d7c <vTaskSdCard+0x358>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	485a      	ldr	r0, [pc, #360]	; (8005d7c <vTaskSdCard+0x358>)
 8005c12:	f00e f931 	bl	8013e78 <f_lseek>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 8005c1c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d006      	beq.n	8005c32 <vTaskSdCard+0x20e>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8005c24:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4857      	ldr	r0, [pc, #348]	; (8005d88 <vTaskSdCard+0x364>)
 8005c2c:	f7fd ff24 	bl	8003a78 <UsbPrint>
		goto resetSDCard;
 8005c30:	e709      	b.n	8005a46 <vTaskSdCard+0x22>
	}

	volatile int32_t msgCounter = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8005c38:	4b54      	ldr	r3, [pc, #336]	; (8005d8c <vTaskSdCard+0x368>)
 8005c3a:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8005c3e:	461d      	mov	r5, r3
 8005c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c44:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005c48:	c407      	stmia	r4!, {r0, r1, r2}
 8005c4a:	8023      	strh	r3, [r4, #0]
 8005c4c:	3402      	adds	r4, #2
 8005c4e:	0c1b      	lsrs	r3, r3, #16
 8005c50:	7023      	strb	r3, [r4, #0]
 8005c52:	2300      	movs	r3, #0
 8005c54:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8005c5e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fa fad4 	bl	8000210 <strlen>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8005c6e:	4b48      	ldr	r3, [pc, #288]	; (8005d90 <vTaskSdCard+0x36c>)
 8005c70:	4842      	ldr	r0, [pc, #264]	; (8005d7c <vTaskSdCard+0x358>)
 8005c72:	f00d fed4 	bl	8013a1e <f_write>
 8005c76:	4603      	mov	r3, r0
 8005c78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 8005c7c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d006      	beq.n	8005c92 <vTaskSdCard+0x26e>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8005c84:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4842      	ldr	r0, [pc, #264]	; (8005d94 <vTaskSdCard+0x370>)
 8005c8c:	f7fd fef4 	bl	8003a78 <UsbPrint>
		goto resetSDCard;
 8005c90:	e6d9      	b.n	8005a46 <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 8005c92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005c96:	2296      	movs	r2, #150	; 0x96
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f013 fb03 	bl	80192a6 <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8005ca0:	4b3d      	ldr	r3, [pc, #244]	; (8005d98 <vTaskSdCard+0x374>)
 8005ca2:	6818      	ldr	r0, [r3, #0]
 8005ca4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8005ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cac:	2200      	movs	r2, #0
 8005cae:	f00f fae3 	bl	8015278 <osMessageQueueGet>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f3      	bne.n	8005ca0 <vTaskSdCard+0x27c>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 8005cb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fa faa7 	bl	8000210 <strlen>
 8005cc2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
			if (num_bytes > 0) {
 8005cc6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d015      	beq.n	8005cfa <vTaskSdCard+0x2d6>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8005cce:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8005cd2:	4b2f      	ldr	r3, [pc, #188]	; (8005d90 <vTaskSdCard+0x36c>)
 8005cd4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005cd8:	4828      	ldr	r0, [pc, #160]	; (8005d7c <vTaskSdCard+0x358>)
 8005cda:	f00d fea0 	bl	8013a1e <f_write>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8005ce4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d006      	beq.n	8005cfa <vTaskSdCard+0x2d6>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8005cec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	4828      	ldr	r0, [pc, #160]	; (8005d94 <vTaskSdCard+0x370>)
 8005cf4:	f7fd fec0 	bl	8003a78 <UsbPrint>
							res);
					goto resetSDCard;
 8005cf8:	e6a5      	b.n	8005a46 <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 8005cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfe:	3301      	adds	r3, #1
 8005d00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8005d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d08:	2b7f      	cmp	r3, #127	; 0x7f
 8005d0a:	ddc9      	ble.n	8005ca0 <vTaskSdCard+0x27c>
				msgCounter = 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 8005d12:	4822      	ldr	r0, [pc, #136]	; (8005d9c <vTaskSdCard+0x378>)
 8005d14:	f7fd feb0 	bl	8003a78 <UsbPrint>
				HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8005d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005d1c:	4820      	ldr	r0, [pc, #128]	; (8005da0 <vTaskSdCard+0x37c>)
 8005d1e:	f001 fecc 	bl	8007aba <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 8005d22:	4816      	ldr	r0, [pc, #88]	; (8005d7c <vTaskSdCard+0x358>)
 8005d24:	f00e f81f 	bl	8013d66 <f_sync>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 8005d2e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0b4      	beq.n	8005ca0 <vTaskSdCard+0x27c>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8005d36:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4819      	ldr	r0, [pc, #100]	; (8005da4 <vTaskSdCard+0x380>)
 8005d3e:	f7fd fe9b 	bl	8003a78 <UsbPrint>
					goto resetSDCard;
 8005d42:	e680      	b.n	8005a46 <vTaskSdCard+0x22>
 8005d44:	0801bf64 	.word	0x0801bf64
 8005d48:	0801bf8c 	.word	0x0801bf8c
 8005d4c:	0801bfb0 	.word	0x0801bfb0
 8005d50:	2001a264 	.word	0x2001a264
 8005d54:	200003a4 	.word	0x200003a4
 8005d58:	0801bfb4 	.word	0x0801bfb4
 8005d5c:	0801bfd8 	.word	0x0801bfd8
 8005d60:	0801bfe4 	.word	0x0801bfe4
 8005d64:	0801c01c 	.word	0x0801c01c
 8005d68:	cccccccd 	.word	0xcccccccd
 8005d6c:	51eb851f 	.word	0x51eb851f
 8005d70:	0801c028 	.word	0x0801c028
 8005d74:	0801c04c 	.word	0x0801c04c
 8005d78:	0801c07c 	.word	0x0801c07c
 8005d7c:	2001a034 	.word	0x2001a034
 8005d80:	0801c0a0 	.word	0x0801c0a0
 8005d84:	0801c0cc 	.word	0x0801c0cc
 8005d88:	0801c0f4 	.word	0x0801c0f4
 8005d8c:	0801c198 	.word	0x0801c198
 8005d90:	2001a498 	.word	0x2001a498
 8005d94:	0801c124 	.word	0x0801c124
 8005d98:	20015e50 	.word	0x20015e50
 8005d9c:	0801c150 	.word	0x0801c150
 8005da0:	40020c00 	.word	0x40020c00
 8005da4:	0801c170 	.word	0x0801c170

08005da8 <vTaskSensRead>:
sb_data_t sb2_data = { 0 };
sb_data_t sb3_data = { 0 };

int32_t pressure = 101325;

void vTaskSensRead(void *argument) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005db0:	f00e fd18 	bl	80147e4 <osKernelGetTickCount>
 8005db4:	6178      	str	r0, [r7, #20]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8005db6:	f00e fd3d 	bl	8014834 <osKernelGetTickFreq>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <vTaskSensRead+0x64>)
 8005dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005dc2:	095b      	lsrs	r3, r3, #5
 8005dc4:	613b      	str	r3, [r7, #16]
	uint8_t checksum = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8005dca:	2220      	movs	r2, #32
 8005dcc:	4910      	ldr	r1, [pc, #64]	; (8005e10 <vTaskSensRead+0x68>)
 8005dce:	4811      	ldr	r0, [pc, #68]	; (8005e14 <vTaskSensRead+0x6c>)
 8005dd0:	f005 fc58 	bl	800b684 <HAL_SPI_Receive_IT>

	for (;;) {
		tick_count += tick_update;
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	4413      	add	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]


		if(READ_USB){
			ReadDataUSB();
 8005ddc:	f000 f834 	bl	8005e48 <ReadDataUSB>
		else{
			ReadDataSB();
		}


		logSensor(tick_count, 3, BARO, &sb3_baro);
 8005de0:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <vTaskSensRead+0x70>)
 8005de2:	2201      	movs	r2, #1
 8005de4:	2103      	movs	r1, #3
 8005de6:	6978      	ldr	r0, [r7, #20]
 8005de8:	f7fd fd12 	bl	8003810 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_imu);
 8005dec:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <vTaskSensRead+0x74>)
 8005dee:	2202      	movs	r2, #2
 8005df0:	2103      	movs	r1, #3
 8005df2:	6978      	ldr	r0, [r7, #20]
 8005df4:	f7fd fd0c 	bl	8003810 <logSensor>

		pressure = pressure + 100;
 8005df8:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <vTaskSensRead+0x78>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3364      	adds	r3, #100	; 0x64
 8005dfe:	4a08      	ldr	r2, [pc, #32]	; (8005e20 <vTaskSensRead+0x78>)
 8005e00:	6013      	str	r3, [r2, #0]
		osDelayUntil(tick_count);
 8005e02:	6978      	ldr	r0, [r7, #20]
 8005e04:	f00e fdf4 	bl	80149f0 <osDelayUntil>
		tick_count += tick_update;
 8005e08:	e7e4      	b.n	8005dd4 <vTaskSensRead+0x2c>
 8005e0a:	bf00      	nop
 8005e0c:	51eb851f 	.word	0x51eb851f
 8005e10:	20000354 	.word	0x20000354
 8005e14:	2000d99c 	.word	0x2000d99c
 8005e18:	200002d8 	.word	0x200002d8
 8005e1c:	200002e4 	.word	0x200002e4
 8005e20:	20000088 	.word	0x20000088

08005e24 <HAL_SPI_RxCpltCallback>:
	}
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	4904      	ldr	r1, [pc, #16]	; (8005e40 <HAL_SPI_RxCpltCallback+0x1c>)
 8005e30:	4804      	ldr	r0, [pc, #16]	; (8005e44 <HAL_SPI_RxCpltCallback+0x20>)
 8005e32:	f005 fc27 	bl	800b684 <HAL_SPI_Receive_IT>

}
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000354 	.word	0x20000354
 8005e44:	2000d99c 	.word	0x2000d99c

08005e48 <ReadDataUSB>:

		osMutexRelease(sb1_mutex);
	}
}

void ReadDataUSB(){
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0

}
 8005e4c:	bf00      	nop
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <vTaskStateEst>:
 */

#include "tasks/task_state_est.h"


void vTaskStateEst(void *argument) {
 8005e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e5a:	f2ad 5dcc 	subw	sp, sp, #1484	; 0x5cc
 8005e5e:	af0c      	add	r7, sp, #48	; 0x30
 8005e60:	1d3b      	adds	r3, r7, #4
 8005e62:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env_t env;
	init_env(&env);
 8005e64:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fb febd 	bl	8001be8 <init_env>

	state_est_meas_t state_est_meas = { 0 };
 8005e6e:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8005e72:	2278      	movs	r2, #120	; 0x78
 8005e74:	2100      	movs	r1, #0
 8005e76:	4618      	mov	r0, r3
 8005e78:	f013 fa15 	bl	80192a6 <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8005e7c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005e80:	4618      	mov	r0, r3
 8005e82:	2378      	movs	r3, #120	; 0x78
 8005e84:	461a      	mov	r2, r3
 8005e86:	2100      	movs	r1, #0
 8005e88:	f013 fa0d 	bl	80192a6 <memset>
	uint32_t Placeholder_timestamps[2] = { 0 };
 8005e8c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8005e90:	461a      	mov	r2, r3
 8005e92:	2300      	movs	r3, #0
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	6053      	str	r3, [r2, #4]
	float Placeholder_measurement[3] = { 0 };
 8005e98:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	6053      	str	r3, [r2, #4]
 8005ea4:	6093      	str	r3, [r2, #8]

	kf_state_t kf_state;
	reset_kf_state(&kf_state);
 8005ea6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fc f972 	bl	8002194 <reset_kf_state>

	extrapolation_rolling_memory_t extrapolation_rolling_memory = {0};
 8005eb0:	f107 0320 	add.w	r3, r7, #32
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	23b0      	movs	r3, #176	; 0xb0
 8005eb8:	461a      	mov	r2, r3
 8005eba:	2100      	movs	r1, #0
 8005ebc:	f013 f9f3 	bl	80192a6 <memset>
	extrapolation_rolling_memory.memory_length = 0;
 8005ec0:	f107 0320 	add.w	r3, r7, #32
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]

	flight_phase_detection_t dummy_flight_phase_detection = { 0 };
 8005ec8:	f107 0314 	add.w	r3, r7, #20
 8005ecc:	461a      	mov	r2, r3
 8005ece:	2300      	movs	r3, #0
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	6053      	str	r3, [r2, #4]
 8005ed4:	6093      	str	r3, [r2, #8]
	flight_phase_detection_t flight_phase_detection = { 0 };
 8005ed6:	f107 0308 	add.w	r3, r7, #8
 8005eda:	461a      	mov	r2, r3
 8005edc:	2300      	movs	r3, #0
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	6053      	str	r3, [r2, #4]
 8005ee2:	6093      	str	r3, [r2, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8005ee4:	f107 0308 	add.w	r3, r7, #8
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fc f93b 	bl	8002164 <reset_flight_phase_detection>
	reset_flight_phase_detection(&dummy_flight_phase_detection);
 8005eee:	f107 0314 	add.w	r3, r7, #20
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fc f936 	bl	8002164 <reset_flight_phase_detection>

	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8005ef8:	f107 0320 	add.w	r3, r7, #32
 8005efc:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8005f00:	f107 0108 	add.w	r1, r7, #8
 8005f04:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8005f08:	f7fc fd3a 	bl	8002980 <select_noise_models>



	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005f0c:	f00e fc6a 	bl	80147e4 <osKernelGetTickCount>
 8005f10:	f8c7 0594 	str.w	r0, [r7, #1428]	; 0x594
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8005f14:	f00e fc8e 	bl	8014834 <osKernelGetTickFreq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4bbd      	ldr	r3, [pc, #756]	; (8006210 <vTaskStateEst+0x3b8>)
 8005f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f20:	095b      	lsrs	r3, r3, #5
 8005f22:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
	osDelay(500);
 8005f26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f2a:	f00e fd33 	bl	8014994 <osDelay>
	for (;;) {
		tick_count += tick_update;
 8005f2e:	f8d7 2594 	ldr.w	r2, [r7, #1428]	; 0x594
 8005f32:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8005f36:	4413      	add	r3, r2
 8005f38:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594

		/* Acquire the Sensor data */
		/* Sensor Board 1 */
		if (osMutexGetOwner(sb1_mutex) == NULL) {
 8005f3c:	4bb5      	ldr	r3, [pc, #724]	; (8006214 <vTaskStateEst+0x3bc>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f00e fedd 	bl	8014d00 <osMutexGetOwner>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d164      	bne.n	8006016 <vTaskStateEst+0x1be>
			Placeholder_measurement[0] = (float) (sb1_baro.pressure);
 8005f4c:	4bb2      	ldr	r3, [pc, #712]	; (8006218 <vTaskStateEst+0x3c0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	ee07 3a90 	vmov	s15, r3
 8005f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f58:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8005f5c:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb1_baro.ts;
 8005f60:	4bad      	ldr	r3, [pc, #692]	; (8006218 <vTaskStateEst+0x3c0>)
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8005f68:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float) (sb1_imu.acc_z + 100)) / 1024;
 8005f6a:	4bac      	ldr	r3, [pc, #688]	; (800621c <vTaskStateEst+0x3c4>)
 8005f6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005f70:	3364      	adds	r3, #100	; 0x64
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f7a:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8006220 <vTaskStateEst+0x3c8>
 8005f7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f82:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8005f86:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb1_imu.ts;
 8005f8a:	4ba4      	ldr	r3, [pc, #656]	; (800621c <vTaskStateEst+0x3c4>)
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8005f92:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float) (sb1_baro.temperature)) / 100;
 8005f94:	4ba0      	ldr	r3, [pc, #640]	; (8006218 <vTaskStateEst+0x3c0>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	ee07 3a90 	vmov	s15, r3
 8005f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fa0:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8006224 <vTaskStateEst+0x3cc>
 8005fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fa8:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8005fac:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb1_mutex) == NULL) {
 8005fb0:	4b98      	ldr	r3, [pc, #608]	; (8006214 <vTaskStateEst+0x3bc>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f00e fea3 	bl	8014d00 <osMutexGetOwner>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d12a      	bne.n	8006016 <vTaskStateEst+0x1be>
				state_est_meas.baro_data[0].pressure = Placeholder_measurement[0];
 8005fc0:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 8005fca:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[0].temperature = Placeholder_measurement[2];
 8005fcc:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8005fd6:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[0].ts = Placeholder_timestamps[0];
 8005fd8:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510

				state_est_meas.imu_data[0].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8005fe2:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fa facd 	bl	8000588 <__aeabi_f2d>
 8005fee:	a386      	add	r3, pc, #536	; (adr r3, 8006208 <vTaskStateEst+0x3b0>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f7fa fb20 	bl	8000638 <__aeabi_dmul>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	4621      	mov	r1, r4
 8006000:	f7fa fdea 	bl	8000bd8 <__aeabi_d2f>
 8006004:	4603      	mov	r3, r0
 8006006:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800600a:	6013      	str	r3, [r2, #0]
				state_est_meas.imu_data[0].ts = Placeholder_timestamps[1];
 800600c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
			}
		}

		/* Sensor Board 2 */
		if (osMutexGetOwner(sb2_mutex) == NULL) {
 8006016:	4b84      	ldr	r3, [pc, #528]	; (8006228 <vTaskStateEst+0x3d0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f00e fe70 	bl	8014d00 <osMutexGetOwner>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d164      	bne.n	80060f0 <vTaskStateEst+0x298>
			Placeholder_measurement[0] = (float) (sb2_baro.pressure);
 8006026:	4b81      	ldr	r3, [pc, #516]	; (800622c <vTaskStateEst+0x3d4>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006032:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8006036:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb2_baro.ts;
 800603a:	4b7c      	ldr	r3, [pc, #496]	; (800622c <vTaskStateEst+0x3d4>)
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8006042:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float) (sb2_imu.acc_z + 100)) / 1024;
 8006044:	4b7a      	ldr	r3, [pc, #488]	; (8006230 <vTaskStateEst+0x3d8>)
 8006046:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800604a:	3364      	adds	r3, #100	; 0x64
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006054:	eddf 6a72 	vldr	s13, [pc, #456]	; 8006220 <vTaskStateEst+0x3c8>
 8006058:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800605c:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8006060:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb2_imu.ts;
 8006064:	4b72      	ldr	r3, [pc, #456]	; (8006230 <vTaskStateEst+0x3d8>)
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800606c:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float) (sb2_baro.temperature)) / 100;
 800606e:	4b6f      	ldr	r3, [pc, #444]	; (800622c <vTaskStateEst+0x3d4>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800607a:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8006224 <vTaskStateEst+0x3cc>
 800607e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006082:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8006086:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb2_mutex) == NULL) {
 800608a:	4b67      	ldr	r3, [pc, #412]	; (8006228 <vTaskStateEst+0x3d0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f00e fe36 	bl	8014d00 <osMutexGetOwner>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d12a      	bne.n	80060f0 <vTaskStateEst+0x298>
				state_est_meas.baro_data[1].pressure = Placeholder_measurement[0];
 800609a:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f207 5214 	addw	r2, r7, #1300	; 0x514
 80060a4:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[1].temperature = Placeholder_measurement[2];
 80060a6:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 80060b0:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[1].ts = Placeholder_timestamps[0];
 80060b2:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

				state_est_meas.imu_data[1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 80060bc:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fa fa60 	bl	8000588 <__aeabi_f2d>
 80060c8:	a34f      	add	r3, pc, #316	; (adr r3, 8006208 <vTaskStateEst+0x3b0>)
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f7fa fab3 	bl	8000638 <__aeabi_dmul>
 80060d2:	4603      	mov	r3, r0
 80060d4:	460c      	mov	r4, r1
 80060d6:	4618      	mov	r0, r3
 80060d8:	4621      	mov	r1, r4
 80060da:	f7fa fd7d 	bl	8000bd8 <__aeabi_d2f>
 80060de:	4603      	mov	r3, r0
 80060e0:	f207 5254 	addw	r2, r7, #1364	; 0x554
 80060e4:	6013      	str	r3, [r2, #0]
				state_est_meas.imu_data[1].ts = Placeholder_timestamps[1];
 80060e6:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			}
		}

		/* Sensor Board 3 */
		if (osMutexGetOwner(sb3_mutex) == NULL) {
 80060f0:	4b50      	ldr	r3, [pc, #320]	; (8006234 <vTaskStateEst+0x3dc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f00e fe03 	bl	8014d00 <osMutexGetOwner>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d164      	bne.n	80061ca <vTaskStateEst+0x372>
			Placeholder_measurement[0] = (float)(sb3_baro.pressure);
 8006100:	4b4d      	ldr	r3, [pc, #308]	; (8006238 <vTaskStateEst+0x3e0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	ee07 3a90 	vmov	s15, r3
 8006108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800610c:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8006110:	edc3 7a00 	vstr	s15, [r3]
			Placeholder_timestamps[0] = sb3_baro.ts;
 8006114:	4b48      	ldr	r3, [pc, #288]	; (8006238 <vTaskStateEst+0x3e0>)
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800611c:	601a      	str	r2, [r3, #0]
			Placeholder_measurement[1] = ((float)(sb3_imu.acc_z + 100)) / 1024;
 800611e:	4b47      	ldr	r3, [pc, #284]	; (800623c <vTaskStateEst+0x3e4>)
 8006120:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006124:	3364      	adds	r3, #100	; 0x64
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800612e:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006220 <vTaskStateEst+0x3c8>
 8006132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006136:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 800613a:	edc3 7a01 	vstr	s15, [r3, #4]
			Placeholder_timestamps[1] = sb3_imu.ts;
 800613e:	4b3f      	ldr	r3, [pc, #252]	; (800623c <vTaskStateEst+0x3e4>)
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8006146:	605a      	str	r2, [r3, #4]
			Placeholder_measurement[2] = ((float)(sb3_baro.temperature)) / 100;
 8006148:	4b3b      	ldr	r3, [pc, #236]	; (8006238 <vTaskStateEst+0x3e0>)
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	ee07 3a90 	vmov	s15, r3
 8006150:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006154:	eddf 6a33 	vldr	s13, [pc, #204]	; 8006224 <vTaskStateEst+0x3cc>
 8006158:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800615c:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8006160:	edc3 7a02 	vstr	s15, [r3, #8]

			if (osMutexGetOwner(sb3_mutex) == NULL) {
 8006164:	4b33      	ldr	r3, [pc, #204]	; (8006234 <vTaskStateEst+0x3dc>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f00e fdc9 	bl	8014d00 <osMutexGetOwner>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d12a      	bne.n	80061ca <vTaskStateEst+0x372>
				state_est_meas.baro_data[2].pressure = Placeholder_measurement[0];
 8006174:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 800617e:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[2].temperature = Placeholder_measurement[2];
 8006180:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f207 5224 	addw	r2, r7, #1316	; 0x524
 800618a:	6013      	str	r3, [r2, #0]
				state_est_meas.baro_data[2].ts = Placeholder_timestamps[0];
 800618c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528

				state_est_meas.imu_data[2].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8006196:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	4618      	mov	r0, r3
 800619e:	f7fa f9f3 	bl	8000588 <__aeabi_f2d>
 80061a2:	a319      	add	r3, pc, #100	; (adr r3, 8006208 <vTaskStateEst+0x3b0>)
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f7fa fa46 	bl	8000638 <__aeabi_dmul>
 80061ac:	4603      	mov	r3, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	4618      	mov	r0, r3
 80061b2:	4621      	mov	r1, r4
 80061b4:	f7fa fd10 	bl	8000bd8 <__aeabi_d2f>
 80061b8:	4603      	mov	r3, r0
 80061ba:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 80061be:	6013      	str	r3, [r2, #0]
				state_est_meas.imu_data[2].ts = Placeholder_timestamps[1];
 80061c0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
			}
		}

		/* get new Phase Detection*/
		if(osMutexGetOwner(fsm_mutex) == NULL){
 80061ca:	4b1d      	ldr	r3, [pc, #116]	; (8006240 <vTaskStateEst+0x3e8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f00e fd96 	bl	8014d00 <osMutexGetOwner>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d136      	bne.n	8006248 <vTaskStateEst+0x3f0>
			dummy_flight_phase_detection = global_flight_phase_detection;
 80061da:	f107 0314 	add.w	r3, r7, #20
 80061de:	4a19      	ldr	r2, [pc, #100]	; (8006244 <vTaskStateEst+0x3ec>)
 80061e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80061e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			if(osMutexGetOwner(fsm_mutex) == NULL){
 80061e6:	4b16      	ldr	r3, [pc, #88]	; (8006240 <vTaskStateEst+0x3e8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f00e fd88 	bl	8014d00 <osMutexGetOwner>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d128      	bne.n	8006248 <vTaskStateEst+0x3f0>
				flight_phase_detection = dummy_flight_phase_detection;
 80061f6:	f107 0308 	add.w	r3, r7, #8
 80061fa:	f107 0214 	add.w	r2, r7, #20
 80061fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8006200:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006204:	e020      	b.n	8006248 <vTaskStateEst+0x3f0>
 8006206:	bf00      	nop
 8006208:	51eb851f 	.word	0x51eb851f
 800620c:	40239eb8 	.word	0x40239eb8
 8006210:	51eb851f 	.word	0x51eb851f
 8006214:	20008a5c 	.word	0x20008a5c
 8006218:	200002a0 	.word	0x200002a0
 800621c:	200002ac 	.word	0x200002ac
 8006220:	44800000 	.word	0x44800000
 8006224:	42c80000 	.word	0x42c80000
 8006228:	20009620 	.word	0x20009620
 800622c:	200002bc 	.word	0x200002bc
 8006230:	200002c8 	.word	0x200002c8
 8006234:	20008a60 	.word	0x20008a60
 8006238:	200002d8 	.word	0x200002d8
 800623c:	200002e4 	.word	0x200002e4
 8006240:	2000968c 	.word	0x2000968c
 8006244:	20000344 	.word	0x20000344
			}
		}

		/* process measurements */
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 8006248:	f507 6092 	add.w	r0, r7, #1168	; 0x490
 800624c:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 8006250:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8006254:	f107 0320 	add.w	r3, r7, #32
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	4603      	mov	r3, r0
 8006262:	f8d7 0594 	ldr.w	r0, [r7, #1428]	; 0x594
 8006266:	f7fc fa17 	bl	8002698 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 800626a:	f107 0320 	add.w	r3, r7, #32
 800626e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8006272:	f107 0108 	add.w	r1, r7, #8
 8006276:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800627a:	f7fc fb81 	bl	8002980 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		kf_prediction(&kf_state);
 800627e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006282:	4618      	mov	r0, r3
 8006284:	f7fc f81c 	bl	80022c0 <kf_prediction>

		/* update Step */
		if (kf_state.num_z_active > 0) {
 8006288:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800628c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006290:	2b00      	cmp	r3, #0
 8006292:	dd0a      	ble.n	80062aa <vTaskStateEst+0x452>
			select_kf_observation_matrices(&kf_state);
 8006294:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006298:	4618      	mov	r0, r3
 800629a:	f7fc f882 	bl	80023a2 <select_kf_observation_matrices>
			kf_update(&kf_state);
 800629e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fc f8ba 	bl	800241c <kf_update>
 80062a8:	e00a      	b.n	80062c0 <vTaskStateEst+0x468>
		}
		else
		{
			memcpy(kf_state.x_est, kf_state.x_priori, sizeof(kf_state.x_priori));
 80062aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80062ae:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 80062b2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80062b6:	f502 729a 	add.w	r2, r2, #308	; 0x134
 80062ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80062bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 80062c0:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80062c4:	4618      	mov	r0, r3
 80062c6:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 80062ca:	2278      	movs	r2, #120	; 0x78
 80062cc:	4619      	mov	r1, r3
 80062ce:	f012 ffdf 	bl	8019290 <memcpy>


		/* KALMAN UPDATE FINISHED */
		/* OUTPUT IS x_est */
		if(osMutexAcquire(state_est_mutex, 10) == osOK){
 80062d2:	4b21      	ldr	r3, [pc, #132]	; (8006358 <vTaskStateEst+0x500>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	210a      	movs	r1, #10
 80062d8:	4618      	mov	r0, r3
 80062da:	f00e fc63 	bl	8014ba4 <osMutexAcquire>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <vTaskStateEst+0x4a2>
			/* Write into global variable */
			/* TODO: Check correct indexing */
			/* the value is multiplied by 1000 for conversion to int datatype for easy transport
			 * careful in other tasks!
			 */
			update_state_est_data(&state_est_data_global, &kf_state);
 80062e4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80062e8:	4619      	mov	r1, r3
 80062ea:	481c      	ldr	r0, [pc, #112]	; (800635c <vTaskStateEst+0x504>)
 80062ec:	f7fc f984 	bl	80025f8 <update_state_est_data>
			osMutexRelease(state_est_mutex);
 80062f0:	4b19      	ldr	r3, [pc, #100]	; (8006358 <vTaskStateEst+0x500>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f00e fcb3 	bl	8014c60 <osMutexRelease>
		}

		/* Update env for FSM */
		if(osMutexAcquire(environment_mutex, 10) == osOK){
 80062fa:	4b19      	ldr	r3, [pc, #100]	; (8006360 <vTaskStateEst+0x508>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	210a      	movs	r1, #10
 8006300:	4618      	mov	r0, r3
 8006302:	f00e fc4f 	bl	8014ba4 <osMutexAcquire>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10b      	bne.n	8006324 <vTaskStateEst+0x4cc>
			global_env = env;
 800630c:	4b15      	ldr	r3, [pc, #84]	; (8006364 <vTaskStateEst+0x50c>)
 800630e:	461c      	mov	r4, r3
 8006310:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8006314:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006316:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexRelease(environment_mutex);
 800631a:	4b11      	ldr	r3, [pc, #68]	; (8006360 <vTaskStateEst+0x508>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f00e fc9e 	bl	8014c60 <osMutexRelease>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 8006324:	f00e fa5e 	bl	80147e4 <osKernelGetTickCount>
 8006328:	4684      	mov	ip, r0
 800632a:	4e0c      	ldr	r6, [pc, #48]	; (800635c <vTaskStateEst+0x504>)
 800632c:	466d      	mov	r5, sp
 800632e:	f106 040c 	add.w	r4, r6, #12
 8006332:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006334:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800633a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800633e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006342:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8006346:	4660      	mov	r0, ip
 8006348:	f7fd fb08 	bl	800395c <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 800634c:	f8d7 0594 	ldr.w	r0, [r7, #1428]	; 0x594
 8006350:	f00e fb4e 	bl	80149f0 <osDelayUntil>
		tick_count += tick_update;
 8006354:	e5eb      	b.n	8005f2e <vTaskStateEst+0xd6>
 8006356:	bf00      	nop
 8006358:	2000fc50 	.word	0x2000fc50
 800635c:	200002f4 	.word	0x200002f4
 8006360:	2000b910 	.word	0x2000b910
 8006364:	20000334 	.word	0x20000334

08006368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006368:	f8df d034 	ldr.w	sp, [pc, #52]	; 80063a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800636c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800636e:	e003      	b.n	8006378 <LoopCopyDataInit>

08006370 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006372:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006374:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006376:	3104      	adds	r1, #4

08006378 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006378:	480b      	ldr	r0, [pc, #44]	; (80063a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800637a:	4b0c      	ldr	r3, [pc, #48]	; (80063ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800637c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800637e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006380:	d3f6      	bcc.n	8006370 <CopyDataInit>
  ldr  r2, =_sbss
 8006382:	4a0b      	ldr	r2, [pc, #44]	; (80063b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006384:	e002      	b.n	800638c <LoopFillZerobss>

08006386 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006386:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006388:	f842 3b04 	str.w	r3, [r2], #4

0800638c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800638c:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800638e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006390:	d3f9      	bcc.n	8006386 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006392:	f7fe fe37 	bl	8005004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006396:	f012 ff47 	bl	8019228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800639a:	f7fd fba1 	bl	8003ae0 <main>
  bx  lr    
 800639e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80063a0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80063a4:	0801c510 	.word	0x0801c510
  ldr  r0, =_sdata
 80063a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80063ac:	20000284 	.word	0x20000284
  ldr  r2, =_sbss
 80063b0:	20000284 	.word	0x20000284
  ldr  r3, = _ebss
 80063b4:	2001c224 	.word	0x2001c224

080063b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063b8:	e7fe      	b.n	80063b8 <ADC_IRQHandler>

080063ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063be:	2003      	movs	r0, #3
 80063c0:	f000 fd57 	bl	8006e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063c4:	2000      	movs	r0, #0
 80063c6:	f7fe fcfd 	bl	8004dc4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80063ca:	f7fe f8bf 	bl	800454c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80063d8:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <HAL_IncTick+0x20>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <HAL_IncTick+0x24>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4413      	add	r3, r2
 80063e4:	4a04      	ldr	r2, [pc, #16]	; (80063f8 <HAL_IncTick+0x24>)
 80063e6:	6013      	str	r3, [r2, #0]
}
 80063e8:	bf00      	nop
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000090 	.word	0x20000090
 80063f8:	2001a49c 	.word	0x2001a49c

080063fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
  return uwTick;
 8006400:	4b03      	ldr	r3, [pc, #12]	; (8006410 <HAL_GetTick+0x14>)
 8006402:	681b      	ldr	r3, [r3, #0]
}
 8006404:	4618      	mov	r0, r3
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	2001a49c 	.word	0x2001a49c

08006414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800641c:	f7ff ffee 	bl	80063fc <HAL_GetTick>
 8006420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642c:	d005      	beq.n	800643a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800642e:	4b09      	ldr	r3, [pc, #36]	; (8006454 <HAL_Delay+0x40>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800643a:	bf00      	nop
 800643c:	f7ff ffde 	bl	80063fc <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	429a      	cmp	r2, r3
 800644a:	d8f7      	bhi.n	800643c <HAL_Delay+0x28>
  {
  }
}
 800644c:	bf00      	nop
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	20000090 	.word	0x20000090

08006458 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e031      	b.n	80064d2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fe f890 	bl	800459c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	f003 0310 	and.w	r3, r3, #16
 8006492:	2b00      	cmp	r3, #0
 8006494:	d116      	bne.n	80064c4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800649a:	4b10      	ldr	r3, [pc, #64]	; (80064dc <HAL_ADC_Init+0x84>)
 800649c:	4013      	ands	r3, r2
 800649e:	f043 0202 	orr.w	r2, r3, #2
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 faba 	bl	8006a20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f023 0303 	bic.w	r3, r3, #3
 80064ba:	f043 0201 	orr.w	r2, r3, #1
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	641a      	str	r2, [r3, #64]	; 0x40
 80064c2:	e001      	b.n	80064c8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	ffffeefd 	.word	0xffffeefd

080064e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d101      	bne.n	80064fe <HAL_ADC_Start_DMA+0x1e>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e0c7      	b.n	800668e <HAL_ADC_Start_DMA+0x1ae>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d018      	beq.n	8006546 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8006524:	4b5c      	ldr	r3, [pc, #368]	; (8006698 <HAL_ADC_Start_DMA+0x1b8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a5c      	ldr	r2, [pc, #368]	; (800669c <HAL_ADC_Start_DMA+0x1bc>)
 800652a:	fba2 2303 	umull	r2, r3, r2, r3
 800652e:	0c9a      	lsrs	r2, r3, #18
 8006530:	4613      	mov	r3, r2
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	4413      	add	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8006538:	e002      	b.n	8006540 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	3b01      	subs	r3, #1
 800653e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f9      	bne.n	800653a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b01      	cmp	r3, #1
 8006552:	f040 809b 	bne.w	800668c <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800655a:	4b51      	ldr	r3, [pc, #324]	; (80066a0 <HAL_ADC_Start_DMA+0x1c0>)
 800655c:	4013      	ands	r3, r2
 800655e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006570:	2b00      	cmp	r3, #0
 8006572:	d007      	beq.n	8006584 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800657c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800658c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006590:	d106      	bne.n	80065a0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006596:	f023 0206 	bic.w	r2, r3, #6
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	645a      	str	r2, [r3, #68]	; 0x44
 800659e:	e002      	b.n	80065a6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	4a3c      	ldr	r2, [pc, #240]	; (80066a4 <HAL_ADC_Start_DMA+0x1c4>)
 80065b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	4a3b      	ldr	r2, [pc, #236]	; (80066a8 <HAL_ADC_Start_DMA+0x1c8>)
 80065bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	4a3a      	ldr	r2, [pc, #232]	; (80066ac <HAL_ADC_Start_DMA+0x1cc>)
 80065c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80065ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80065de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	334c      	adds	r3, #76	; 0x4c
 80065fa:	4619      	mov	r1, r3
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f000 fd1a 	bl	8007038 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006604:	4b2a      	ldr	r3, [pc, #168]	; (80066b0 <HAL_ADC_Start_DMA+0x1d0>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f003 031f 	and.w	r3, r3, #31
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10f      	bne.n	8006630 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d136      	bne.n	800668c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800662c:	609a      	str	r2, [r3, #8]
 800662e:	e02d      	b.n	800668c <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a1f      	ldr	r2, [pc, #124]	; (80066b4 <HAL_ADC_Start_DMA+0x1d4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d10e      	bne.n	8006658 <HAL_ADC_Start_DMA+0x178>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d107      	bne.n	8006658 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006656:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8006658:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <HAL_ADC_Start_DMA+0x1d0>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b00      	cmp	r3, #0
 8006662:	d113      	bne.n	800668c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a13      	ldr	r2, [pc, #76]	; (80066b8 <HAL_ADC_Start_DMA+0x1d8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d10e      	bne.n	800668c <HAL_ADC_Start_DMA+0x1ac>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d107      	bne.n	800668c <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800668a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	20000000 	.word	0x20000000
 800669c:	431bde83 	.word	0x431bde83
 80066a0:	fffff8fe 	.word	0xfffff8fe
 80066a4:	08006c15 	.word	0x08006c15
 80066a8:	08006ccf 	.word	0x08006ccf
 80066ac:	08006ceb 	.word	0x08006ceb
 80066b0:	40012300 	.word	0x40012300
 80066b4:	40012000 	.word	0x40012000
 80066b8:	40012200 	.word	0x40012200

080066bc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_ADC_Stop_DMA+0x1a>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e036      	b.n	8006744 <HAL_ADC_Stop_DMA+0x88>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0201 	bic.w	r2, r2, #1
 80066ec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d11e      	bne.n	800673a <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	689a      	ldr	r2, [r3, #8]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800670a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fcf1 	bl	80070f8 <HAL_DMA_Abort>
 8006716:	4603      	mov	r3, r0
 8006718:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006728:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800672e:	4b07      	ldr	r3, [pc, #28]	; (800674c <HAL_ADC_Stop_DMA+0x90>)
 8006730:	4013      	ands	r3, r2
 8006732:	f043 0201 	orr.w	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	ffffeefe 	.word	0xffffeefe

08006750 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_ADC_ConfigChannel+0x1c>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e12a      	b.n	80069fe <HAL_ADC_ConfigChannel+0x272>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b09      	cmp	r3, #9
 80067b6:	d93a      	bls.n	800682e <HAL_ADC_ConfigChannel+0xa2>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067c0:	d035      	beq.n	800682e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68d9      	ldr	r1, [r3, #12]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	4613      	mov	r3, r2
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	4413      	add	r3, r2
 80067d6:	3b1e      	subs	r3, #30
 80067d8:	2207      	movs	r2, #7
 80067da:	fa02 f303 	lsl.w	r3, r2, r3
 80067de:	43da      	mvns	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	400a      	ands	r2, r1
 80067e6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a87      	ldr	r2, [pc, #540]	; (8006a0c <HAL_ADC_ConfigChannel+0x280>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d10a      	bne.n	8006808 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68d9      	ldr	r1, [r3, #12]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	061a      	lsls	r2, r3, #24
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006806:	e035      	b.n	8006874 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68d9      	ldr	r1, [r3, #12]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	b29b      	uxth	r3, r3
 8006818:	4618      	mov	r0, r3
 800681a:	4603      	mov	r3, r0
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	4403      	add	r3, r0
 8006820:	3b1e      	subs	r3, #30
 8006822:	409a      	lsls	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800682c:	e022      	b.n	8006874 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6919      	ldr	r1, [r3, #16]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	461a      	mov	r2, r3
 800683c:	4613      	mov	r3, r2
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	4413      	add	r3, r2
 8006842:	2207      	movs	r2, #7
 8006844:	fa02 f303 	lsl.w	r3, r2, r3
 8006848:	43da      	mvns	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	400a      	ands	r2, r1
 8006850:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6919      	ldr	r1, [r3, #16]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	b29b      	uxth	r3, r3
 8006862:	4618      	mov	r0, r3
 8006864:	4603      	mov	r3, r0
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	4403      	add	r3, r0
 800686a:	409a      	lsls	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b06      	cmp	r3, #6
 800687a:	d824      	bhi.n	80068c6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685a      	ldr	r2, [r3, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	3b05      	subs	r3, #5
 800688e:	221f      	movs	r2, #31
 8006890:	fa02 f303 	lsl.w	r3, r2, r3
 8006894:	43da      	mvns	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	400a      	ands	r2, r1
 800689c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	4618      	mov	r0, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	4613      	mov	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4413      	add	r3, r2
 80068b6:	3b05      	subs	r3, #5
 80068b8:	fa00 f203 	lsl.w	r2, r0, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	635a      	str	r2, [r3, #52]	; 0x34
 80068c4:	e04c      	b.n	8006960 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b0c      	cmp	r3, #12
 80068cc:	d824      	bhi.n	8006918 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	4613      	mov	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	3b23      	subs	r3, #35	; 0x23
 80068e0:	221f      	movs	r2, #31
 80068e2:	fa02 f303 	lsl.w	r3, r2, r3
 80068e6:	43da      	mvns	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	400a      	ands	r2, r1
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	4618      	mov	r0, r3
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	3b23      	subs	r3, #35	; 0x23
 800690a:	fa00 f203 	lsl.w	r2, r0, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	631a      	str	r2, [r3, #48]	; 0x30
 8006916:	e023      	b.n	8006960 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	3b41      	subs	r3, #65	; 0x41
 800692a:	221f      	movs	r2, #31
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
 8006930:	43da      	mvns	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	400a      	ands	r2, r1
 8006938:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	4618      	mov	r0, r3
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	4613      	mov	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	3b41      	subs	r3, #65	; 0x41
 8006954:	fa00 f203 	lsl.w	r2, r0, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a2a      	ldr	r2, [pc, #168]	; (8006a10 <HAL_ADC_ConfigChannel+0x284>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d10a      	bne.n	8006980 <HAL_ADC_ConfigChannel+0x1f4>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006972:	d105      	bne.n	8006980 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006974:	4b27      	ldr	r3, [pc, #156]	; (8006a14 <HAL_ADC_ConfigChannel+0x288>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4a26      	ldr	r2, [pc, #152]	; (8006a14 <HAL_ADC_ConfigChannel+0x288>)
 800697a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800697e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a22      	ldr	r2, [pc, #136]	; (8006a10 <HAL_ADC_ConfigChannel+0x284>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d109      	bne.n	800699e <HAL_ADC_ConfigChannel+0x212>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b12      	cmp	r3, #18
 8006990:	d105      	bne.n	800699e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006992:	4b20      	ldr	r3, [pc, #128]	; (8006a14 <HAL_ADC_ConfigChannel+0x288>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <HAL_ADC_ConfigChannel+0x288>)
 8006998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800699c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1b      	ldr	r2, [pc, #108]	; (8006a10 <HAL_ADC_ConfigChannel+0x284>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d125      	bne.n	80069f4 <HAL_ADC_ConfigChannel+0x268>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a17      	ldr	r2, [pc, #92]	; (8006a0c <HAL_ADC_ConfigChannel+0x280>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d003      	beq.n	80069ba <HAL_ADC_ConfigChannel+0x22e>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b11      	cmp	r3, #17
 80069b8:	d11c      	bne.n	80069f4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80069ba:	4b16      	ldr	r3, [pc, #88]	; (8006a14 <HAL_ADC_ConfigChannel+0x288>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	4a15      	ldr	r2, [pc, #84]	; (8006a14 <HAL_ADC_ConfigChannel+0x288>)
 80069c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069c4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a10      	ldr	r2, [pc, #64]	; (8006a0c <HAL_ADC_ConfigChannel+0x280>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d111      	bne.n	80069f4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80069d0:	4b11      	ldr	r3, [pc, #68]	; (8006a18 <HAL_ADC_ConfigChannel+0x28c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a11      	ldr	r2, [pc, #68]	; (8006a1c <HAL_ADC_ConfigChannel+0x290>)
 80069d6:	fba2 2303 	umull	r2, r3, r2, r3
 80069da:	0c9a      	lsrs	r2, r3, #18
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80069e6:	e002      	b.n	80069ee <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1f9      	bne.n	80069e8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	10000012 	.word	0x10000012
 8006a10:	40012000 	.word	0x40012000
 8006a14:	40012300 	.word	0x40012300
 8006a18:	20000000 	.word	0x20000000
 8006a1c:	431bde83 	.word	0x431bde83

08006a20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006a28:	4b78      	ldr	r3, [pc, #480]	; (8006c0c <ADC_Init+0x1ec>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4a77      	ldr	r2, [pc, #476]	; (8006c0c <ADC_Init+0x1ec>)
 8006a2e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006a32:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006a34:	4b75      	ldr	r3, [pc, #468]	; (8006c0c <ADC_Init+0x1ec>)
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	4973      	ldr	r1, [pc, #460]	; (8006c0c <ADC_Init+0x1ec>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6859      	ldr	r1, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	021a      	lsls	r2, r3, #8
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006a74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6859      	ldr	r1, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6899      	ldr	r1, [r3, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aae:	4a58      	ldr	r2, [pc, #352]	; (8006c10 <ADC_Init+0x1f0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d022      	beq.n	8006afa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ac2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6899      	ldr	r1, [r3, #8]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6899      	ldr	r1, [r3, #8]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	609a      	str	r2, [r3, #8]
 8006af8:	e00f      	b.n	8006b1a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689a      	ldr	r2, [r3, #8]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0202 	bic.w	r2, r2, #2
 8006b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6899      	ldr	r1, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	005a      	lsls	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01b      	beq.n	8006b80 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006b66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6859      	ldr	r1, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b72:	3b01      	subs	r3, #1
 8006b74:	035a      	lsls	r2, r3, #13
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
 8006b7e:	e007      	b.n	8006b90 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	3b01      	subs	r3, #1
 8006bac:	051a      	lsls	r2, r3, #20
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6899      	ldr	r1, [r3, #8]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bd2:	025a      	lsls	r2, r3, #9
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6899      	ldr	r1, [r3, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	029a      	lsls	r2, r3, #10
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	609a      	str	r2, [r3, #8]
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	40012300 	.word	0x40012300
 8006c10:	0f000001 	.word	0x0f000001

08006c14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d13c      	bne.n	8006ca8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d12b      	bne.n	8006ca0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d127      	bne.n	8006ca0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d006      	beq.n	8006c6c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d119      	bne.n	8006ca0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0220 	bic.w	r2, r2, #32
 8006c7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d105      	bne.n	8006ca0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	f043 0201 	orr.w	r2, r3, #1
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f7ff fd55 	bl	8006750 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006ca6:	e00e      	b.n	8006cc6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d003      	beq.n	8006cbc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7ff fd5f 	bl	8006778 <HAL_ADC_ErrorCallback>
}
 8006cba:	e004      	b.n	8006cc6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	4798      	blx	r3
}
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cda:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7ff fd41 	bl	8006764 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ce2:	bf00      	nop
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2240      	movs	r2, #64	; 0x40
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d02:	f043 0204 	orr.w	r2, r3, #4
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff fd34 	bl	8006778 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d10:	bf00      	nop
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d28:	4b0b      	ldr	r3, [pc, #44]	; (8006d58 <__NVIC_SetPriorityGrouping+0x40>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d34:	4013      	ands	r3, r2
 8006d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <__NVIC_SetPriorityGrouping+0x44>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d46:	4a04      	ldr	r2, [pc, #16]	; (8006d58 <__NVIC_SetPriorityGrouping+0x40>)
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	60d3      	str	r3, [r2, #12]
}
 8006d4c:	bf00      	nop
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	e000ed00 	.word	0xe000ed00
 8006d5c:	05fa0000 	.word	0x05fa0000

08006d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d64:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <__NVIC_GetPriorityGrouping+0x18>)
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	0a1b      	lsrs	r3, r3, #8
 8006d6a:	f003 0307 	and.w	r3, r3, #7
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	e000ed00 	.word	0xe000ed00

08006d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	db0b      	blt.n	8006da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	f003 021f 	and.w	r2, r3, #31
 8006d94:	4907      	ldr	r1, [pc, #28]	; (8006db4 <__NVIC_EnableIRQ+0x38>)
 8006d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8006da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	e000e100 	.word	0xe000e100

08006db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	6039      	str	r1, [r7, #0]
 8006dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	db0a      	blt.n	8006de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	490c      	ldr	r1, [pc, #48]	; (8006e04 <__NVIC_SetPriority+0x4c>)
 8006dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dd6:	0112      	lsls	r2, r2, #4
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	440b      	add	r3, r1
 8006ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006de0:	e00a      	b.n	8006df8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	4908      	ldr	r1, [pc, #32]	; (8006e08 <__NVIC_SetPriority+0x50>)
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	3b04      	subs	r3, #4
 8006df0:	0112      	lsls	r2, r2, #4
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	440b      	add	r3, r1
 8006df6:	761a      	strb	r2, [r3, #24]
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	e000e100 	.word	0xe000e100
 8006e08:	e000ed00 	.word	0xe000ed00

08006e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b089      	sub	sp, #36	; 0x24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f1c3 0307 	rsb	r3, r3, #7
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	bf28      	it	cs
 8006e2a:	2304      	movcs	r3, #4
 8006e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	3304      	adds	r3, #4
 8006e32:	2b06      	cmp	r3, #6
 8006e34:	d902      	bls.n	8006e3c <NVIC_EncodePriority+0x30>
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	3b03      	subs	r3, #3
 8006e3a:	e000      	b.n	8006e3e <NVIC_EncodePriority+0x32>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e40:	f04f 32ff 	mov.w	r2, #4294967295
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	43da      	mvns	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	401a      	ands	r2, r3
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e54:	f04f 31ff 	mov.w	r1, #4294967295
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5e:	43d9      	mvns	r1, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e64:	4313      	orrs	r3, r2
         );
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3724      	adds	r7, #36	; 0x24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff ff4c 	bl	8006d18 <__NVIC_SetPriorityGrouping>
}
 8006e80:	bf00      	nop
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e9a:	f7ff ff61 	bl	8006d60 <__NVIC_GetPriorityGrouping>
 8006e9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	6978      	ldr	r0, [r7, #20]
 8006ea6:	f7ff ffb1 	bl	8006e0c <NVIC_EncodePriority>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff ff80 	bl	8006db8 <__NVIC_SetPriority>
}
 8006eb8:	bf00      	nop
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7ff ff54 	bl	8006d7c <__NVIC_EnableIRQ>
}
 8006ed4:	bf00      	nop
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006ee8:	f7ff fa88 	bl	80063fc <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e099      	b.n	800702c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0201 	bic.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f18:	e00f      	b.n	8006f3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f1a:	f7ff fa6f 	bl	80063fc <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b05      	cmp	r3, #5
 8006f26:	d908      	bls.n	8006f3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2203      	movs	r2, #3
 8006f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e078      	b.n	800702c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e8      	bne.n	8006f1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4b38      	ldr	r3, [pc, #224]	; (8007034 <HAL_DMA_Init+0x158>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d107      	bne.n	8006fa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f023 0307 	bic.w	r3, r3, #7
 8006fba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d117      	bne.n	8006ffe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00e      	beq.n	8006ffe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fb15 	bl	8007610 <DMA_CheckFifoParam>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d008      	beq.n	8006ffe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2240      	movs	r2, #64	; 0x40
 8006ff0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e016      	b.n	800702c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 facc 	bl	80075a4 <DMA_CalcBaseAndBitshift>
 800700c:	4603      	mov	r3, r0
 800700e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007014:	223f      	movs	r2, #63	; 0x3f
 8007016:	409a      	lsls	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	f010803f 	.word	0xf010803f

08007038 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <HAL_DMA_Start_IT+0x26>
 800705a:	2302      	movs	r3, #2
 800705c:	e048      	b.n	80070f0 <HAL_DMA_Start_IT+0xb8>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b01      	cmp	r3, #1
 8007070:	d137      	bne.n	80070e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2202      	movs	r2, #2
 8007076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 fa5e 	bl	8007548 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007090:	223f      	movs	r2, #63	; 0x3f
 8007092:	409a      	lsls	r2, r3
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f042 0216 	orr.w	r2, r2, #22
 80070a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695a      	ldr	r2, [r3, #20]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070b6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0208 	orr.w	r2, r2, #8
 80070ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	e005      	b.n	80070ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80070ea:	2302      	movs	r3, #2
 80070ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80070ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007104:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007106:	f7ff f979 	bl	80063fc <HAL_GetTick>
 800710a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007112:	b2db      	uxtb	r3, r3
 8007114:	2b02      	cmp	r3, #2
 8007116:	d008      	beq.n	800712a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2280      	movs	r2, #128	; 0x80
 800711c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e052      	b.n	80071d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0216 	bic.w	r2, r2, #22
 8007138:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	695a      	ldr	r2, [r3, #20]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007148:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	2b00      	cmp	r3, #0
 8007150:	d103      	bne.n	800715a <HAL_DMA_Abort+0x62>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007156:	2b00      	cmp	r3, #0
 8007158:	d007      	beq.n	800716a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0208 	bic.w	r2, r2, #8
 8007168:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0201 	bic.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800717a:	e013      	b.n	80071a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800717c:	f7ff f93e 	bl	80063fc <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b05      	cmp	r3, #5
 8007188:	d90c      	bls.n	80071a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2220      	movs	r2, #32
 800718e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2203      	movs	r2, #3
 800719c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e015      	b.n	80071d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e4      	bne.n	800717c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b6:	223f      	movs	r2, #63	; 0x3f
 80071b8:	409a      	lsls	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d004      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2280      	movs	r2, #128	; 0x80
 80071f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e00c      	b.n	8007210 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2205      	movs	r2, #5
 80071fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0201 	bic.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007228:	4b92      	ldr	r3, [pc, #584]	; (8007474 <HAL_DMA_IRQHandler+0x258>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a92      	ldr	r2, [pc, #584]	; (8007478 <HAL_DMA_IRQHandler+0x25c>)
 800722e:	fba2 2303 	umull	r2, r3, r2, r3
 8007232:	0a9b      	lsrs	r3, r3, #10
 8007234:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007246:	2208      	movs	r2, #8
 8007248:	409a      	lsls	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4013      	ands	r3, r2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d01a      	beq.n	8007288 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d013      	beq.n	8007288 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0204 	bic.w	r2, r2, #4
 800726e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007274:	2208      	movs	r2, #8
 8007276:	409a      	lsls	r2, r3
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007280:	f043 0201 	orr.w	r2, r3, #1
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728c:	2201      	movs	r2, #1
 800728e:	409a      	lsls	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4013      	ands	r3, r2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d012      	beq.n	80072be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00b      	beq.n	80072be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072aa:	2201      	movs	r2, #1
 80072ac:	409a      	lsls	r2, r3
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b6:	f043 0202 	orr.w	r2, r3, #2
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c2:	2204      	movs	r2, #4
 80072c4:	409a      	lsls	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4013      	ands	r3, r2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d012      	beq.n	80072f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e0:	2204      	movs	r2, #4
 80072e2:	409a      	lsls	r2, r3
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ec:	f043 0204 	orr.w	r2, r3, #4
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072f8:	2210      	movs	r2, #16
 80072fa:	409a      	lsls	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4013      	ands	r3, r2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d043      	beq.n	800738c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d03c      	beq.n	800738c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007316:	2210      	movs	r2, #16
 8007318:	409a      	lsls	r2, r3
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d018      	beq.n	800735e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d108      	bne.n	800734c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d024      	beq.n	800738c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	4798      	blx	r3
 800734a:	e01f      	b.n	800738c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007350:	2b00      	cmp	r3, #0
 8007352:	d01b      	beq.n	800738c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	4798      	blx	r3
 800735c:	e016      	b.n	800738c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007368:	2b00      	cmp	r3, #0
 800736a:	d107      	bne.n	800737c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0208 	bic.w	r2, r2, #8
 800737a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007390:	2220      	movs	r2, #32
 8007392:	409a      	lsls	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4013      	ands	r3, r2
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 808e 	beq.w	80074ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0310 	and.w	r3, r3, #16
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 8086 	beq.w	80074ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b2:	2220      	movs	r2, #32
 80073b4:	409a      	lsls	r2, r3
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b05      	cmp	r3, #5
 80073c4:	d136      	bne.n	8007434 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0216 	bic.w	r2, r2, #22
 80073d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	695a      	ldr	r2, [r3, #20]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d103      	bne.n	80073f6 <HAL_DMA_IRQHandler+0x1da>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0208 	bic.w	r2, r2, #8
 8007404:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740a:	223f      	movs	r2, #63	; 0x3f
 800740c:	409a      	lsls	r2, r3
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007426:	2b00      	cmp	r3, #0
 8007428:	d07d      	beq.n	8007526 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
        }
        return;
 8007432:	e078      	b.n	8007526 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d01c      	beq.n	800747c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d108      	bne.n	8007462 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007454:	2b00      	cmp	r3, #0
 8007456:	d030      	beq.n	80074ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4798      	blx	r3
 8007460:	e02b      	b.n	80074ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007466:	2b00      	cmp	r3, #0
 8007468:	d027      	beq.n	80074ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
 8007472:	e022      	b.n	80074ba <HAL_DMA_IRQHandler+0x29e>
 8007474:	20000000 	.word	0x20000000
 8007478:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10f      	bne.n	80074aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0210 	bic.w	r2, r2, #16
 8007498:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d032      	beq.n	8007528 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d022      	beq.n	8007514 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2205      	movs	r2, #5
 80074d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0201 	bic.w	r2, r2, #1
 80074e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	3301      	adds	r3, #1
 80074ea:	60bb      	str	r3, [r7, #8]
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d307      	bcc.n	8007502 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1f2      	bne.n	80074e6 <HAL_DMA_IRQHandler+0x2ca>
 8007500:	e000      	b.n	8007504 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007502:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	4798      	blx	r3
 8007524:	e000      	b.n	8007528 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007526:	bf00      	nop
    }
  }
}
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop

08007530 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007564:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	2b40      	cmp	r3, #64	; 0x40
 8007574:	d108      	bne.n	8007588 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007586:	e007      	b.n	8007598 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	60da      	str	r2, [r3, #12]
}
 8007598:	bf00      	nop
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	3b10      	subs	r3, #16
 80075b4:	4a13      	ldr	r2, [pc, #76]	; (8007604 <DMA_CalcBaseAndBitshift+0x60>)
 80075b6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ba:	091b      	lsrs	r3, r3, #4
 80075bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075be:	4a12      	ldr	r2, [pc, #72]	; (8007608 <DMA_CalcBaseAndBitshift+0x64>)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d908      	bls.n	80075e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	4b0c      	ldr	r3, [pc, #48]	; (800760c <DMA_CalcBaseAndBitshift+0x68>)
 80075da:	4013      	ands	r3, r2
 80075dc:	1d1a      	adds	r2, r3, #4
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	659a      	str	r2, [r3, #88]	; 0x58
 80075e2:	e006      	b.n	80075f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	4b08      	ldr	r3, [pc, #32]	; (800760c <DMA_CalcBaseAndBitshift+0x68>)
 80075ec:	4013      	ands	r3, r2
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	aaaaaaab 	.word	0xaaaaaaab
 8007608:	0801c3b8 	.word	0x0801c3b8
 800760c:	fffffc00 	.word	0xfffffc00

08007610 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007620:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d11f      	bne.n	800766a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b03      	cmp	r3, #3
 800762e:	d855      	bhi.n	80076dc <DMA_CheckFifoParam+0xcc>
 8007630:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <DMA_CheckFifoParam+0x28>)
 8007632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007636:	bf00      	nop
 8007638:	08007649 	.word	0x08007649
 800763c:	0800765b 	.word	0x0800765b
 8007640:	08007649 	.word	0x08007649
 8007644:	080076dd 	.word	0x080076dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d045      	beq.n	80076e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007658:	e042      	b.n	80076e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007662:	d13f      	bne.n	80076e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007668:	e03c      	b.n	80076e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007672:	d121      	bne.n	80076b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b03      	cmp	r3, #3
 8007678:	d836      	bhi.n	80076e8 <DMA_CheckFifoParam+0xd8>
 800767a:	a201      	add	r2, pc, #4	; (adr r2, 8007680 <DMA_CheckFifoParam+0x70>)
 800767c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007680:	08007691 	.word	0x08007691
 8007684:	08007697 	.word	0x08007697
 8007688:	08007691 	.word	0x08007691
 800768c:	080076a9 	.word	0x080076a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]
      break;
 8007694:	e02f      	b.n	80076f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d024      	beq.n	80076ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076a6:	e021      	b.n	80076ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076b0:	d11e      	bne.n	80076f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80076b6:	e01b      	b.n	80076f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d902      	bls.n	80076c4 <DMA_CheckFifoParam+0xb4>
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d003      	beq.n	80076ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80076c2:	e018      	b.n	80076f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	73fb      	strb	r3, [r7, #15]
      break;
 80076c8:	e015      	b.n	80076f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00e      	beq.n	80076f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	73fb      	strb	r3, [r7, #15]
      break;
 80076da:	e00b      	b.n	80076f4 <DMA_CheckFifoParam+0xe4>
      break;
 80076dc:	bf00      	nop
 80076de:	e00a      	b.n	80076f6 <DMA_CheckFifoParam+0xe6>
      break;
 80076e0:	bf00      	nop
 80076e2:	e008      	b.n	80076f6 <DMA_CheckFifoParam+0xe6>
      break;
 80076e4:	bf00      	nop
 80076e6:	e006      	b.n	80076f6 <DMA_CheckFifoParam+0xe6>
      break;
 80076e8:	bf00      	nop
 80076ea:	e004      	b.n	80076f6 <DMA_CheckFifoParam+0xe6>
      break;
 80076ec:	bf00      	nop
 80076ee:	e002      	b.n	80076f6 <DMA_CheckFifoParam+0xe6>
      break;   
 80076f0:	bf00      	nop
 80076f2:	e000      	b.n	80076f6 <DMA_CheckFifoParam+0xe6>
      break;
 80076f4:	bf00      	nop
    }
  } 
  
  return status; 
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007704:	b480      	push	{r7}
 8007706:	b089      	sub	sp, #36	; 0x24
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800771a:	2300      	movs	r3, #0
 800771c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800771e:	2300      	movs	r3, #0
 8007720:	61fb      	str	r3, [r7, #28]
 8007722:	e175      	b.n	8007a10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007724:	2201      	movs	r2, #1
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	4013      	ands	r3, r2
 8007736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	429a      	cmp	r2, r3
 800773e:	f040 8164 	bne.w	8007a0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d00b      	beq.n	8007762 <HAL_GPIO_Init+0x5e>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d007      	beq.n	8007762 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007756:	2b11      	cmp	r3, #17
 8007758:	d003      	beq.n	8007762 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b12      	cmp	r3, #18
 8007760:	d130      	bne.n	80077c4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	2203      	movs	r2, #3
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	43db      	mvns	r3, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	4013      	ands	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	fa02 f303 	lsl.w	r3, r2, r3
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	4313      	orrs	r3, r2
 800778a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007798:	2201      	movs	r2, #1
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	43db      	mvns	r3, r3
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	4013      	ands	r3, r2
 80077a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	091b      	lsrs	r3, r3, #4
 80077ae:	f003 0201 	and.w	r2, r3, #1
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	fa02 f303 	lsl.w	r3, r2, r3
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	2203      	movs	r2, #3
 80077d0:	fa02 f303 	lsl.w	r3, r2, r3
 80077d4:	43db      	mvns	r3, r3
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	4013      	ands	r3, r2
 80077da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	fa02 f303 	lsl.w	r3, r2, r3
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d003      	beq.n	8007804 <HAL_GPIO_Init+0x100>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b12      	cmp	r3, #18
 8007802:	d123      	bne.n	800784c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	08da      	lsrs	r2, r3, #3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3208      	adds	r2, #8
 800780c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	220f      	movs	r2, #15
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	43db      	mvns	r3, r3
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	4013      	ands	r3, r2
 8007826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	fa02 f303 	lsl.w	r3, r2, r3
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4313      	orrs	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	08da      	lsrs	r2, r3, #3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3208      	adds	r2, #8
 8007846:	69b9      	ldr	r1, [r7, #24]
 8007848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	2203      	movs	r2, #3
 8007858:	fa02 f303 	lsl.w	r3, r2, r3
 800785c:	43db      	mvns	r3, r3
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	4013      	ands	r3, r2
 8007862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f003 0203 	and.w	r2, r3, #3
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	4313      	orrs	r3, r2
 8007878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 80be 	beq.w	8007a0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800788e:	4b65      	ldr	r3, [pc, #404]	; (8007a24 <HAL_GPIO_Init+0x320>)
 8007890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007892:	4a64      	ldr	r2, [pc, #400]	; (8007a24 <HAL_GPIO_Init+0x320>)
 8007894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007898:	6453      	str	r3, [r2, #68]	; 0x44
 800789a:	4b62      	ldr	r3, [pc, #392]	; (8007a24 <HAL_GPIO_Init+0x320>)
 800789c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80078a6:	4a60      	ldr	r2, [pc, #384]	; (8007a28 <HAL_GPIO_Init+0x324>)
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	089b      	lsrs	r3, r3, #2
 80078ac:	3302      	adds	r3, #2
 80078ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	220f      	movs	r2, #15
 80078be:	fa02 f303 	lsl.w	r3, r2, r3
 80078c2:	43db      	mvns	r3, r3
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	4013      	ands	r3, r2
 80078c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a57      	ldr	r2, [pc, #348]	; (8007a2c <HAL_GPIO_Init+0x328>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d037      	beq.n	8007942 <HAL_GPIO_Init+0x23e>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a56      	ldr	r2, [pc, #344]	; (8007a30 <HAL_GPIO_Init+0x32c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d031      	beq.n	800793e <HAL_GPIO_Init+0x23a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a55      	ldr	r2, [pc, #340]	; (8007a34 <HAL_GPIO_Init+0x330>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d02b      	beq.n	800793a <HAL_GPIO_Init+0x236>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a54      	ldr	r2, [pc, #336]	; (8007a38 <HAL_GPIO_Init+0x334>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d025      	beq.n	8007936 <HAL_GPIO_Init+0x232>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a53      	ldr	r2, [pc, #332]	; (8007a3c <HAL_GPIO_Init+0x338>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d01f      	beq.n	8007932 <HAL_GPIO_Init+0x22e>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a52      	ldr	r2, [pc, #328]	; (8007a40 <HAL_GPIO_Init+0x33c>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d019      	beq.n	800792e <HAL_GPIO_Init+0x22a>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a51      	ldr	r2, [pc, #324]	; (8007a44 <HAL_GPIO_Init+0x340>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d013      	beq.n	800792a <HAL_GPIO_Init+0x226>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a50      	ldr	r2, [pc, #320]	; (8007a48 <HAL_GPIO_Init+0x344>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00d      	beq.n	8007926 <HAL_GPIO_Init+0x222>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a4f      	ldr	r2, [pc, #316]	; (8007a4c <HAL_GPIO_Init+0x348>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d007      	beq.n	8007922 <HAL_GPIO_Init+0x21e>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a4e      	ldr	r2, [pc, #312]	; (8007a50 <HAL_GPIO_Init+0x34c>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d101      	bne.n	800791e <HAL_GPIO_Init+0x21a>
 800791a:	2309      	movs	r3, #9
 800791c:	e012      	b.n	8007944 <HAL_GPIO_Init+0x240>
 800791e:	230a      	movs	r3, #10
 8007920:	e010      	b.n	8007944 <HAL_GPIO_Init+0x240>
 8007922:	2308      	movs	r3, #8
 8007924:	e00e      	b.n	8007944 <HAL_GPIO_Init+0x240>
 8007926:	2307      	movs	r3, #7
 8007928:	e00c      	b.n	8007944 <HAL_GPIO_Init+0x240>
 800792a:	2306      	movs	r3, #6
 800792c:	e00a      	b.n	8007944 <HAL_GPIO_Init+0x240>
 800792e:	2305      	movs	r3, #5
 8007930:	e008      	b.n	8007944 <HAL_GPIO_Init+0x240>
 8007932:	2304      	movs	r3, #4
 8007934:	e006      	b.n	8007944 <HAL_GPIO_Init+0x240>
 8007936:	2303      	movs	r3, #3
 8007938:	e004      	b.n	8007944 <HAL_GPIO_Init+0x240>
 800793a:	2302      	movs	r3, #2
 800793c:	e002      	b.n	8007944 <HAL_GPIO_Init+0x240>
 800793e:	2301      	movs	r3, #1
 8007940:	e000      	b.n	8007944 <HAL_GPIO_Init+0x240>
 8007942:	2300      	movs	r3, #0
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	f002 0203 	and.w	r2, r2, #3
 800794a:	0092      	lsls	r2, r2, #2
 800794c:	4093      	lsls	r3, r2
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	4313      	orrs	r3, r2
 8007952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007954:	4934      	ldr	r1, [pc, #208]	; (8007a28 <HAL_GPIO_Init+0x324>)
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	089b      	lsrs	r3, r3, #2
 800795a:	3302      	adds	r3, #2
 800795c:	69ba      	ldr	r2, [r7, #24]
 800795e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007962:	4b3c      	ldr	r3, [pc, #240]	; (8007a54 <HAL_GPIO_Init+0x350>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	43db      	mvns	r3, r3
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	4013      	ands	r3, r2
 8007970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	4313      	orrs	r3, r2
 8007984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007986:	4a33      	ldr	r2, [pc, #204]	; (8007a54 <HAL_GPIO_Init+0x350>)
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800798c:	4b31      	ldr	r3, [pc, #196]	; (8007a54 <HAL_GPIO_Init+0x350>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	43db      	mvns	r3, r3
 8007996:	69ba      	ldr	r2, [r7, #24]
 8007998:	4013      	ands	r3, r2
 800799a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d003      	beq.n	80079b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80079b0:	4a28      	ldr	r2, [pc, #160]	; (8007a54 <HAL_GPIO_Init+0x350>)
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079b6:	4b27      	ldr	r3, [pc, #156]	; (8007a54 <HAL_GPIO_Init+0x350>)
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	43db      	mvns	r3, r3
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	4013      	ands	r3, r2
 80079c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80079da:	4a1e      	ldr	r2, [pc, #120]	; (8007a54 <HAL_GPIO_Init+0x350>)
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079e0:	4b1c      	ldr	r3, [pc, #112]	; (8007a54 <HAL_GPIO_Init+0x350>)
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	43db      	mvns	r3, r3
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	4013      	ands	r3, r2
 80079ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a04:	4a13      	ldr	r2, [pc, #76]	; (8007a54 <HAL_GPIO_Init+0x350>)
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	61fb      	str	r3, [r7, #28]
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	2b0f      	cmp	r3, #15
 8007a14:	f67f ae86 	bls.w	8007724 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007a18:	bf00      	nop
 8007a1a:	3724      	adds	r7, #36	; 0x24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	40023800 	.word	0x40023800
 8007a28:	40013800 	.word	0x40013800
 8007a2c:	40020000 	.word	0x40020000
 8007a30:	40020400 	.word	0x40020400
 8007a34:	40020800 	.word	0x40020800
 8007a38:	40020c00 	.word	0x40020c00
 8007a3c:	40021000 	.word	0x40021000
 8007a40:	40021400 	.word	0x40021400
 8007a44:	40021800 	.word	0x40021800
 8007a48:	40021c00 	.word	0x40021c00
 8007a4c:	40022000 	.word	0x40022000
 8007a50:	40022400 	.word	0x40022400
 8007a54:	40013c00 	.word	0x40013c00

08007a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691a      	ldr	r2, [r3, #16]
 8007a68:	887b      	ldrh	r3, [r7, #2]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d002      	beq.n	8007a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a70:	2301      	movs	r3, #1
 8007a72:	73fb      	strb	r3, [r7, #15]
 8007a74:	e001      	b.n	8007a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a76:	2300      	movs	r3, #0
 8007a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	807b      	strh	r3, [r7, #2]
 8007a94:	4613      	mov	r3, r2
 8007a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a98:	787b      	ldrb	r3, [r7, #1]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a9e:	887a      	ldrh	r2, [r7, #2]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007aa4:	e003      	b.n	8007aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007aa6:	887b      	ldrh	r3, [r7, #2]
 8007aa8:	041a      	lsls	r2, r3, #16
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	619a      	str	r2, [r3, #24]
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	695a      	ldr	r2, [r3, #20]
 8007aca:	887b      	ldrh	r3, [r7, #2]
 8007acc:	4013      	ands	r3, r2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d004      	beq.n	8007adc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ad2:	887b      	ldrh	r3, [r7, #2]
 8007ad4:	041a      	lsls	r2, r3, #16
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8007ada:	e002      	b.n	8007ae2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007adc:	887a      	ldrh	r2, [r7, #2]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	619a      	str	r2, [r3, #24]
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007af0:	b08f      	sub	sp, #60	; 0x3c
 8007af2:	af0a      	add	r7, sp, #40	; 0x28
 8007af4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e116      	b.n	8007d2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f011 f82c 	bl	8018b78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2203      	movs	r2, #3
 8007b24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d102      	bne.n	8007b3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f006 fd9f 	bl	800e682 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	603b      	str	r3, [r7, #0]
 8007b4a:	687e      	ldr	r6, [r7, #4]
 8007b4c:	466d      	mov	r5, sp
 8007b4e:	f106 0410 	add.w	r4, r6, #16
 8007b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b62:	1d33      	adds	r3, r6, #4
 8007b64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b66:	6838      	ldr	r0, [r7, #0]
 8007b68:	f006 fc80 	bl	800e46c <USB_CoreInit>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d005      	beq.n	8007b7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e0d7      	b.n	8007d2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2100      	movs	r1, #0
 8007b84:	4618      	mov	r0, r3
 8007b86:	f006 fd8d 	bl	800e6a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
 8007b8e:	e04a      	b.n	8007c26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007b90:	7bfa      	ldrb	r2, [r7, #15]
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	4613      	mov	r3, r2
 8007b96:	00db      	lsls	r3, r3, #3
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	333d      	adds	r3, #61	; 0x3d
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007ba4:	7bfa      	ldrb	r2, [r7, #15]
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	4613      	mov	r3, r2
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	440b      	add	r3, r1
 8007bb2:	333c      	adds	r3, #60	; 0x3c
 8007bb4:	7bfa      	ldrb	r2, [r7, #15]
 8007bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007bb8:	7bfa      	ldrb	r2, [r7, #15]
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	b298      	uxth	r0, r3
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	00db      	lsls	r3, r3, #3
 8007bc4:	1a9b      	subs	r3, r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	440b      	add	r3, r1
 8007bca:	3342      	adds	r3, #66	; 0x42
 8007bcc:	4602      	mov	r2, r0
 8007bce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007bd0:	7bfa      	ldrb	r2, [r7, #15]
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	1a9b      	subs	r3, r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	333f      	adds	r3, #63	; 0x3f
 8007be0:	2200      	movs	r2, #0
 8007be2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007be4:	7bfa      	ldrb	r2, [r7, #15]
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	4613      	mov	r3, r2
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	1a9b      	subs	r3, r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	3344      	adds	r3, #68	; 0x44
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007bf8:	7bfa      	ldrb	r2, [r7, #15]
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	1a9b      	subs	r3, r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	3348      	adds	r3, #72	; 0x48
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007c0c:	7bfa      	ldrb	r2, [r7, #15]
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	3350      	adds	r3, #80	; 0x50
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	3301      	adds	r3, #1
 8007c24:	73fb      	strb	r3, [r7, #15]
 8007c26:	7bfa      	ldrb	r2, [r7, #15]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d3af      	bcc.n	8007b90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c30:	2300      	movs	r3, #0
 8007c32:	73fb      	strb	r3, [r7, #15]
 8007c34:	e044      	b.n	8007cc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007c36:	7bfa      	ldrb	r2, [r7, #15]
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	1a9b      	subs	r3, r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	440b      	add	r3, r1
 8007c44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007c48:	2200      	movs	r2, #0
 8007c4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007c4c:	7bfa      	ldrb	r2, [r7, #15]
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	4613      	mov	r3, r2
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007c5e:	7bfa      	ldrb	r2, [r7, #15]
 8007c60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007c62:	7bfa      	ldrb	r2, [r7, #15]
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	4613      	mov	r3, r2
 8007c68:	00db      	lsls	r3, r3, #3
 8007c6a:	1a9b      	subs	r3, r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	440b      	add	r3, r1
 8007c70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007c78:	7bfa      	ldrb	r2, [r7, #15]
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	1a9b      	subs	r3, r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007c8e:	7bfa      	ldrb	r2, [r7, #15]
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	4613      	mov	r3, r2
 8007c94:	00db      	lsls	r3, r3, #3
 8007c96:	1a9b      	subs	r3, r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007ca4:	7bfa      	ldrb	r2, [r7, #15]
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	1a9b      	subs	r3, r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	440b      	add	r3, r1
 8007cb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	73fb      	strb	r3, [r7, #15]
 8007cc0:	7bfa      	ldrb	r2, [r7, #15]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d3b5      	bcc.n	8007c36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	687e      	ldr	r6, [r7, #4]
 8007cd2:	466d      	mov	r5, sp
 8007cd4:	f106 0410 	add.w	r4, r6, #16
 8007cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ce0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007ce4:	e885 0003 	stmia.w	r5, {r0, r1}
 8007ce8:	1d33      	adds	r3, r6, #4
 8007cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cec:	6838      	ldr	r0, [r7, #0]
 8007cee:	f006 fd03 	bl	800e6f8 <USB_DevInit>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e014      	b.n	8007d2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d102      	bne.n	8007d22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 f881 	bl	8008e24 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f007 fd52 	bl	800f7d0 <USB_DevDisconnect>

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d101      	bne.n	8007d4c <HAL_PCD_Start+0x16>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	e012      	b.n	8007d72 <HAL_PCD_Start+0x3c>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f007 fd21 	bl	800f7a0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f006 fc7c 	bl	800e660 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007d7a:	b590      	push	{r4, r7, lr}
 8007d7c:	b08d      	sub	sp, #52	; 0x34
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f007 fdc8 	bl	800f926 <USB_GetMode>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f040 83ca 	bne.w	8008532 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f007 fd2c 	bl	800f800 <USB_ReadInterrupts>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 83c0 	beq.w	8008530 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f007 fd23 	bl	800f800 <USB_ReadInterrupts>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	f003 0302 	and.w	r3, r3, #2
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d107      	bne.n	8007dd4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	695a      	ldr	r2, [r3, #20]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f002 0202 	and.w	r2, r2, #2
 8007dd2:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f007 fd11 	bl	800f800 <USB_ReadInterrupts>
 8007dde:	4603      	mov	r3, r0
 8007de0:	f003 0310 	and.w	r3, r3, #16
 8007de4:	2b10      	cmp	r3, #16
 8007de6:	d161      	bne.n	8007eac <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f022 0210 	bic.w	r2, r2, #16
 8007df6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	f003 020f 	and.w	r2, r3, #15
 8007e04:	4613      	mov	r3, r2
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	1a9b      	subs	r3, r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	4413      	add	r3, r2
 8007e14:	3304      	adds	r3, #4
 8007e16:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	0c5b      	lsrs	r3, r3, #17
 8007e1c:	f003 030f 	and.w	r3, r3, #15
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d124      	bne.n	8007e6e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d035      	beq.n	8007e9c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	091b      	lsrs	r3, r3, #4
 8007e38:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	461a      	mov	r2, r3
 8007e42:	6a38      	ldr	r0, [r7, #32]
 8007e44:	f007 fb89 	bl	800f55a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	091b      	lsrs	r3, r3, #4
 8007e50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e54:	441a      	add	r2, r3
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	091b      	lsrs	r3, r3, #4
 8007e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e66:	441a      	add	r2, r3
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	619a      	str	r2, [r3, #24]
 8007e6c:	e016      	b.n	8007e9c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	0c5b      	lsrs	r3, r3, #17
 8007e72:	f003 030f 	and.w	r3, r3, #15
 8007e76:	2b06      	cmp	r3, #6
 8007e78:	d110      	bne.n	8007e9c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e80:	2208      	movs	r2, #8
 8007e82:	4619      	mov	r1, r3
 8007e84:	6a38      	ldr	r0, [r7, #32]
 8007e86:	f007 fb68 	bl	800f55a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	091b      	lsrs	r3, r3, #4
 8007e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e96:	441a      	add	r2, r3
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699a      	ldr	r2, [r3, #24]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0210 	orr.w	r2, r2, #16
 8007eaa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f007 fca5 	bl	800f800 <USB_ReadInterrupts>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ebc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ec0:	d16e      	bne.n	8007fa0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f007 fcab 	bl	800f826 <USB_ReadDevAllOutEpInterrupt>
 8007ed0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007ed2:	e062      	b.n	8007f9a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d057      	beq.n	8007f8e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee4:	b2d2      	uxtb	r2, r2
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f007 fcd0 	bl	800f88e <USB_ReadDevOutEPInterrupt>
 8007eee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00c      	beq.n	8007f14 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f06:	461a      	mov	r2, r3
 8007f08:	2301      	movs	r3, #1
 8007f0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fdde 	bl	8008ad0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f003 0308 	and.w	r3, r3, #8
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	2308      	movs	r3, #8
 8007f2e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fed8 	bl	8008ce8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f003 0310 	and.w	r3, r3, #16
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d008      	beq.n	8007f54 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4e:	461a      	mov	r2, r3
 8007f50:	2310      	movs	r3, #16
 8007f52:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f003 0320 	and.w	r3, r3, #32
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d008      	beq.n	8007f70 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	015a      	lsls	r2, r3, #5
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	4413      	add	r3, r2
 8007f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d009      	beq.n	8007f8e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f86:	461a      	mov	r2, r3
 8007f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f8c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	3301      	adds	r3, #1
 8007f92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f96:	085b      	lsrs	r3, r3, #1
 8007f98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d199      	bne.n	8007ed4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f007 fc2b 	bl	800f800 <USB_ReadInterrupts>
 8007faa:	4603      	mov	r3, r0
 8007fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007fb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fb4:	f040 80c0 	bne.w	8008138 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f007 fc4c 	bl	800f85a <USB_ReadDevAllInEpInterrupt>
 8007fc2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007fc8:	e0b2      	b.n	8008130 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 80a7 	beq.w	8008124 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fdc:	b2d2      	uxtb	r2, r2
 8007fde:	4611      	mov	r1, r2
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f007 fc72 	bl	800f8ca <USB_ReadDevInEPInterrupt>
 8007fe6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d057      	beq.n	80080a2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	43db      	mvns	r3, r3
 800800c:	69f9      	ldr	r1, [r7, #28]
 800800e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008012:	4013      	ands	r3, r2
 8008014:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008022:	461a      	mov	r2, r3
 8008024:	2301      	movs	r3, #1
 8008026:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d132      	bne.n	8008096 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008030:	6879      	ldr	r1, [r7, #4]
 8008032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008034:	4613      	mov	r3, r2
 8008036:	00db      	lsls	r3, r3, #3
 8008038:	1a9b      	subs	r3, r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	3348      	adds	r3, #72	; 0x48
 8008040:	6819      	ldr	r1, [r3, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008046:	4613      	mov	r3, r2
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	1a9b      	subs	r3, r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4403      	add	r3, r0
 8008050:	3344      	adds	r3, #68	; 0x44
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4419      	add	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805a:	4613      	mov	r3, r2
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	1a9b      	subs	r3, r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	4403      	add	r3, r0
 8008064:	3348      	adds	r3, #72	; 0x48
 8008066:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	2b00      	cmp	r3, #0
 800806c:	d113      	bne.n	8008096 <HAL_PCD_IRQHandler+0x31c>
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008072:	4613      	mov	r3, r2
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	3350      	adds	r3, #80	; 0x50
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d108      	bne.n	8008096 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6818      	ldr	r0, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800808e:	461a      	mov	r2, r3
 8008090:	2101      	movs	r1, #1
 8008092:	f007 fc7b 	bl	800f98c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	b2db      	uxtb	r3, r3
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f010 fdee 	bl	8018c7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f003 0308 	and.w	r3, r3, #8
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d008      	beq.n	80080be <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b8:	461a      	mov	r2, r3
 80080ba:	2308      	movs	r3, #8
 80080bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f003 0310 	and.w	r3, r3, #16
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d008      	beq.n	80080da <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	015a      	lsls	r2, r3, #5
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d4:	461a      	mov	r2, r3
 80080d6:	2310      	movs	r3, #16
 80080d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d008      	beq.n	80080f6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f0:	461a      	mov	r2, r3
 80080f2:	2340      	movs	r3, #64	; 0x40
 80080f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d008      	beq.n	8008112 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800810c:	461a      	mov	r2, r3
 800810e:	2302      	movs	r3, #2
 8008110:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008118:	2b00      	cmp	r3, #0
 800811a:	d003      	beq.n	8008124 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800811c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fc48 	bl	80089b4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	3301      	adds	r3, #1
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812c:	085b      	lsrs	r3, r3, #1
 800812e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	2b00      	cmp	r3, #0
 8008134:	f47f af49 	bne.w	8007fca <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4618      	mov	r0, r3
 800813e:	f007 fb5f 	bl	800f800 <USB_ReadInterrupts>
 8008142:	4603      	mov	r3, r0
 8008144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800814c:	d122      	bne.n	8008194 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	69fa      	ldr	r2, [r7, #28]
 8008158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800815c:	f023 0301 	bic.w	r3, r3, #1
 8008160:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008168:	2b01      	cmp	r3, #1
 800816a:	d108      	bne.n	800817e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008174:	2100      	movs	r1, #0
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f010 ffd0 	bl	801911c <HAL_PCDEx_LPM_Callback>
 800817c:	e002      	b.n	8008184 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f010 fdf4 	bl	8018d6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	695a      	ldr	r2, [r3, #20]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008192:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4618      	mov	r0, r3
 800819a:	f007 fb31 	bl	800f800 <USB_ReadInterrupts>
 800819e:	4603      	mov	r3, r0
 80081a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081a8:	d112      	bne.n	80081d0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d102      	bne.n	80081c0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f010 fdb0 	bl	8018d20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	695a      	ldr	r2, [r3, #20]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80081ce:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f007 fb13 	bl	800f800 <USB_ReadInterrupts>
 80081da:	4603      	mov	r3, r0
 80081dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081e4:	d121      	bne.n	800822a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	695a      	ldr	r2, [r3, #20]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80081f4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d111      	bne.n	8008224 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800820e:	089b      	lsrs	r3, r3, #2
 8008210:	f003 020f 	and.w	r2, r3, #15
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800821a:	2101      	movs	r1, #1
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f010 ff7d 	bl	801911c <HAL_PCDEx_LPM_Callback>
 8008222:	e002      	b.n	800822a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f010 fd7b 	bl	8018d20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4618      	mov	r0, r3
 8008230:	f007 fae6 	bl	800f800 <USB_ReadInterrupts>
 8008234:	4603      	mov	r3, r0
 8008236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800823a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800823e:	f040 80c7 	bne.w	80083d0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008250:	f023 0301 	bic.w	r3, r3, #1
 8008254:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2110      	movs	r1, #16
 800825c:	4618      	mov	r0, r3
 800825e:	f006 fbb9 	bl	800e9d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008262:	2300      	movs	r3, #0
 8008264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008266:	e056      	b.n	8008316 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008274:	461a      	mov	r2, r3
 8008276:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800827a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800827c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827e:	015a      	lsls	r2, r3, #5
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	4413      	add	r3, r2
 8008284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800828c:	0151      	lsls	r1, r2, #5
 800828e:	69fa      	ldr	r2, [r7, #28]
 8008290:	440a      	add	r2, r1
 8008292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008296:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800829a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ac:	0151      	lsls	r1, r2, #5
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	440a      	add	r2, r1
 80082b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c8:	461a      	mov	r2, r3
 80082ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082ce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80082d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082e0:	0151      	lsls	r1, r2, #5
 80082e2:	69fa      	ldr	r2, [r7, #28]
 80082e4:	440a      	add	r2, r1
 80082e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008300:	0151      	lsls	r1, r2, #5
 8008302:	69fa      	ldr	r2, [r7, #28]
 8008304:	440a      	add	r2, r1
 8008306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800830a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800830e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008312:	3301      	adds	r3, #1
 8008314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800831c:	429a      	cmp	r2, r3
 800831e:	d3a3      	bcc.n	8008268 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	69fa      	ldr	r2, [r7, #28]
 800832a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800832e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008332:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008338:	2b00      	cmp	r3, #0
 800833a:	d016      	beq.n	800836a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800834c:	f043 030b 	orr.w	r3, r3, #11
 8008350:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800835a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835c:	69fa      	ldr	r2, [r7, #28]
 800835e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008362:	f043 030b 	orr.w	r3, r3, #11
 8008366:	6453      	str	r3, [r2, #68]	; 0x44
 8008368:	e015      	b.n	8008396 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008370:	695a      	ldr	r2, [r3, #20]
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008378:	4619      	mov	r1, r3
 800837a:	f242 032b 	movw	r3, #8235	; 0x202b
 800837e:	4313      	orrs	r3, r2
 8008380:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	69fa      	ldr	r2, [r7, #28]
 800838c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008390:	f043 030b 	orr.w	r3, r3, #11
 8008394:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	69fa      	ldr	r2, [r7, #28]
 80083a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80083a8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80083ba:	461a      	mov	r2, r3
 80083bc:	f007 fae6 	bl	800f98c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	695a      	ldr	r2, [r3, #20]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80083ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f007 fa13 	bl	800f800 <USB_ReadInterrupts>
 80083da:	4603      	mov	r3, r0
 80083dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083e4:	d124      	bne.n	8008430 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f007 faaa 	bl	800f944 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f006 fb4e 	bl	800ea96 <USB_GetDevSpeed>
 80083fa:	4603      	mov	r3, r0
 80083fc:	461a      	mov	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681c      	ldr	r4, [r3, #0]
 8008406:	f001 f999 	bl	800973c <HAL_RCC_GetHCLKFreq>
 800840a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008410:	b2db      	uxtb	r3, r3
 8008412:	461a      	mov	r2, r3
 8008414:	4620      	mov	r0, r4
 8008416:	f006 f881 	bl	800e51c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f010 fc57 	bl	8018cce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695a      	ldr	r2, [r3, #20]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800842e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4618      	mov	r0, r3
 8008436:	f007 f9e3 	bl	800f800 <USB_ReadInterrupts>
 800843a:	4603      	mov	r3, r0
 800843c:	f003 0308 	and.w	r3, r3, #8
 8008440:	2b08      	cmp	r3, #8
 8008442:	d10a      	bne.n	800845a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f010 fc34 	bl	8018cb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	695a      	ldr	r2, [r3, #20]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f002 0208 	and.w	r2, r2, #8
 8008458:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4618      	mov	r0, r3
 8008460:	f007 f9ce 	bl	800f800 <USB_ReadInterrupts>
 8008464:	4603      	mov	r3, r0
 8008466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800846a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800846e:	d10f      	bne.n	8008490 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008470:	2300      	movs	r3, #0
 8008472:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	b2db      	uxtb	r3, r3
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f010 fc96 	bl	8018dac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695a      	ldr	r2, [r3, #20]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800848e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4618      	mov	r0, r3
 8008496:	f007 f9b3 	bl	800f800 <USB_ReadInterrupts>
 800849a:	4603      	mov	r3, r0
 800849c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80084a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084a4:	d10f      	bne.n	80084c6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80084aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f010 fc69 	bl	8018d88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695a      	ldr	r2, [r3, #20]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80084c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f007 f998 	bl	800f800 <USB_ReadInterrupts>
 80084d0:	4603      	mov	r3, r0
 80084d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084da:	d10a      	bne.n	80084f2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f010 fc77 	bl	8018dd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	695a      	ldr	r2, [r3, #20]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80084f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f007 f982 	bl	800f800 <USB_ReadInterrupts>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f003 0304 	and.w	r3, r3, #4
 8008502:	2b04      	cmp	r3, #4
 8008504:	d115      	bne.n	8008532 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f010 fc67 	bl	8018dec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6859      	ldr	r1, [r3, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	430a      	orrs	r2, r1
 800852c:	605a      	str	r2, [r3, #4]
 800852e:	e000      	b.n	8008532 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008530:	bf00      	nop
    }
  }
}
 8008532:	3734      	adds	r7, #52	; 0x34
 8008534:	46bd      	mov	sp, r7
 8008536:	bd90      	pop	{r4, r7, pc}

08008538 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800854a:	2b01      	cmp	r3, #1
 800854c:	d101      	bne.n	8008552 <HAL_PCD_SetAddress+0x1a>
 800854e:	2302      	movs	r3, #2
 8008550:	e013      	b.n	800857a <HAL_PCD_SetAddress+0x42>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	78fa      	ldrb	r2, [r7, #3]
 800855e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	78fa      	ldrb	r2, [r7, #3]
 8008568:	4611      	mov	r1, r2
 800856a:	4618      	mov	r0, r3
 800856c:	f007 f8f2 	bl	800f754 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b084      	sub	sp, #16
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	4608      	mov	r0, r1
 800858c:	4611      	mov	r1, r2
 800858e:	461a      	mov	r2, r3
 8008590:	4603      	mov	r3, r0
 8008592:	70fb      	strb	r3, [r7, #3]
 8008594:	460b      	mov	r3, r1
 8008596:	803b      	strh	r3, [r7, #0]
 8008598:	4613      	mov	r3, r2
 800859a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80085a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	da0f      	bge.n	80085c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	f003 020f 	and.w	r2, r3, #15
 80085ae:	4613      	mov	r3, r2
 80085b0:	00db      	lsls	r3, r3, #3
 80085b2:	1a9b      	subs	r3, r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	3338      	adds	r3, #56	; 0x38
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	4413      	add	r3, r2
 80085bc:	3304      	adds	r3, #4
 80085be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2201      	movs	r2, #1
 80085c4:	705a      	strb	r2, [r3, #1]
 80085c6:	e00f      	b.n	80085e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80085c8:	78fb      	ldrb	r3, [r7, #3]
 80085ca:	f003 020f 	and.w	r2, r3, #15
 80085ce:	4613      	mov	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	4413      	add	r3, r2
 80085de:	3304      	adds	r3, #4
 80085e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	b2da      	uxtb	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80085f4:	883a      	ldrh	r2, [r7, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	78ba      	ldrb	r2, [r7, #2]
 80085fe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	785b      	ldrb	r3, [r3, #1]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d004      	beq.n	8008612 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	b29a      	uxth	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008612:	78bb      	ldrb	r3, [r7, #2]
 8008614:	2b02      	cmp	r3, #2
 8008616:	d102      	bne.n	800861e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2200      	movs	r2, #0
 800861c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008624:	2b01      	cmp	r3, #1
 8008626:	d101      	bne.n	800862c <HAL_PCD_EP_Open+0xaa>
 8008628:	2302      	movs	r3, #2
 800862a:	e00e      	b.n	800864a <HAL_PCD_EP_Open+0xc8>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68f9      	ldr	r1, [r7, #12]
 800863a:	4618      	mov	r0, r3
 800863c:	f006 fa50 	bl	800eae0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008648:	7afb      	ldrb	r3, [r7, #11]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	460b      	mov	r3, r1
 800865c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800865e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008662:	2b00      	cmp	r3, #0
 8008664:	da0f      	bge.n	8008686 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008666:	78fb      	ldrb	r3, [r7, #3]
 8008668:	f003 020f 	and.w	r2, r3, #15
 800866c:	4613      	mov	r3, r2
 800866e:	00db      	lsls	r3, r3, #3
 8008670:	1a9b      	subs	r3, r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	3338      	adds	r3, #56	; 0x38
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	4413      	add	r3, r2
 800867a:	3304      	adds	r3, #4
 800867c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2201      	movs	r2, #1
 8008682:	705a      	strb	r2, [r3, #1]
 8008684:	e00f      	b.n	80086a6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008686:	78fb      	ldrb	r3, [r7, #3]
 8008688:	f003 020f 	and.w	r2, r3, #15
 800868c:	4613      	mov	r3, r2
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	1a9b      	subs	r3, r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	4413      	add	r3, r2
 800869c:	3304      	adds	r3, #4
 800869e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80086a6:	78fb      	ldrb	r3, [r7, #3]
 80086a8:	f003 030f 	and.w	r3, r3, #15
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d101      	bne.n	80086c0 <HAL_PCD_EP_Close+0x6e>
 80086bc:	2302      	movs	r3, #2
 80086be:	e00e      	b.n	80086de <HAL_PCD_EP_Close+0x8c>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68f9      	ldr	r1, [r7, #12]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f006 fa8e 	bl	800ebf0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b086      	sub	sp, #24
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	60f8      	str	r0, [r7, #12]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	603b      	str	r3, [r7, #0]
 80086f2:	460b      	mov	r3, r1
 80086f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086f6:	7afb      	ldrb	r3, [r7, #11]
 80086f8:	f003 020f 	and.w	r2, r3, #15
 80086fc:	4613      	mov	r3, r2
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	1a9b      	subs	r3, r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4413      	add	r3, r2
 800870c:	3304      	adds	r3, #4
 800870e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2200      	movs	r2, #0
 8008720:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2200      	movs	r2, #0
 8008726:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	f003 030f 	and.w	r3, r3, #15
 800872e:	b2da      	uxtb	r2, r3
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	2b01      	cmp	r3, #1
 800873a:	d102      	bne.n	8008742 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008742:	7afb      	ldrb	r3, [r7, #11]
 8008744:	f003 030f 	and.w	r3, r3, #15
 8008748:	2b00      	cmp	r3, #0
 800874a:	d109      	bne.n	8008760 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6818      	ldr	r0, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	b2db      	uxtb	r3, r3
 8008756:	461a      	mov	r2, r3
 8008758:	6979      	ldr	r1, [r7, #20]
 800875a:	f006 fd71 	bl	800f240 <USB_EP0StartXfer>
 800875e:	e008      	b.n	8008772 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6818      	ldr	r0, [r3, #0]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	b2db      	uxtb	r3, r3
 800876a:	461a      	mov	r2, r3
 800876c:	6979      	ldr	r1, [r7, #20]
 800876e:	f006 fb1b 	bl	800eda8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	f003 020f 	and.w	r2, r3, #15
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	4613      	mov	r3, r2
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	1a9b      	subs	r3, r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	440b      	add	r3, r1
 800879a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800879e:	681b      	ldr	r3, [r3, #0]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	607a      	str	r2, [r7, #4]
 80087b6:	603b      	str	r3, [r7, #0]
 80087b8:	460b      	mov	r3, r1
 80087ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087bc:	7afb      	ldrb	r3, [r7, #11]
 80087be:	f003 020f 	and.w	r2, r3, #15
 80087c2:	4613      	mov	r3, r2
 80087c4:	00db      	lsls	r3, r3, #3
 80087c6:	1a9b      	subs	r3, r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	3338      	adds	r3, #56	; 0x38
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	4413      	add	r3, r2
 80087d0:	3304      	adds	r3, #4
 80087d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2200      	movs	r2, #0
 80087e4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2201      	movs	r2, #1
 80087ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087ec:	7afb      	ldrb	r3, [r7, #11]
 80087ee:	f003 030f 	and.w	r3, r3, #15
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d102      	bne.n	8008806 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008806:	7afb      	ldrb	r3, [r7, #11]
 8008808:	f003 030f 	and.w	r3, r3, #15
 800880c:	2b00      	cmp	r3, #0
 800880e:	d109      	bne.n	8008824 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	b2db      	uxtb	r3, r3
 800881a:	461a      	mov	r2, r3
 800881c:	6979      	ldr	r1, [r7, #20]
 800881e:	f006 fd0f 	bl	800f240 <USB_EP0StartXfer>
 8008822:	e008      	b.n	8008836 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6818      	ldr	r0, [r3, #0]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	b2db      	uxtb	r3, r3
 800882e:	461a      	mov	r2, r3
 8008830:	6979      	ldr	r1, [r7, #20]
 8008832:	f006 fab9 	bl	800eda8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800884c:	78fb      	ldrb	r3, [r7, #3]
 800884e:	f003 020f 	and.w	r2, r3, #15
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	429a      	cmp	r2, r3
 8008858:	d901      	bls.n	800885e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e050      	b.n	8008900 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800885e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008862:	2b00      	cmp	r3, #0
 8008864:	da0f      	bge.n	8008886 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008866:	78fb      	ldrb	r3, [r7, #3]
 8008868:	f003 020f 	and.w	r2, r3, #15
 800886c:	4613      	mov	r3, r2
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	1a9b      	subs	r3, r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	3338      	adds	r3, #56	; 0x38
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	4413      	add	r3, r2
 800887a:	3304      	adds	r3, #4
 800887c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2201      	movs	r2, #1
 8008882:	705a      	strb	r2, [r3, #1]
 8008884:	e00d      	b.n	80088a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	4613      	mov	r3, r2
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	1a9b      	subs	r3, r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	4413      	add	r3, r2
 8008898:	3304      	adds	r3, #4
 800889a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088a8:	78fb      	ldrb	r3, [r7, #3]
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	b2da      	uxtb	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_PCD_EP_SetStall+0x82>
 80088be:	2302      	movs	r3, #2
 80088c0:	e01e      	b.n	8008900 <HAL_PCD_EP_SetStall+0xc0>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68f9      	ldr	r1, [r7, #12]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f006 fe6b 	bl	800f5ac <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80088d6:	78fb      	ldrb	r3, [r7, #3]
 80088d8:	f003 030f 	and.w	r3, r3, #15
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10a      	bne.n	80088f6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6818      	ldr	r0, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	b2d9      	uxtb	r1, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80088f0:	461a      	mov	r2, r3
 80088f2:	f007 f84b 	bl	800f98c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	f003 020f 	and.w	r2, r3, #15
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	429a      	cmp	r2, r3
 8008920:	d901      	bls.n	8008926 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e042      	b.n	80089ac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008926:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800892a:	2b00      	cmp	r3, #0
 800892c:	da0f      	bge.n	800894e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800892e:	78fb      	ldrb	r3, [r7, #3]
 8008930:	f003 020f 	and.w	r2, r3, #15
 8008934:	4613      	mov	r3, r2
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	1a9b      	subs	r3, r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	3338      	adds	r3, #56	; 0x38
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	4413      	add	r3, r2
 8008942:	3304      	adds	r3, #4
 8008944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	705a      	strb	r2, [r3, #1]
 800894c:	e00f      	b.n	800896e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800894e:	78fb      	ldrb	r3, [r7, #3]
 8008950:	f003 020f 	and.w	r2, r3, #15
 8008954:	4613      	mov	r3, r2
 8008956:	00db      	lsls	r3, r3, #3
 8008958:	1a9b      	subs	r3, r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	4413      	add	r3, r2
 8008964:	3304      	adds	r3, #4
 8008966:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008974:	78fb      	ldrb	r3, [r7, #3]
 8008976:	f003 030f 	and.w	r3, r3, #15
 800897a:	b2da      	uxtb	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008986:	2b01      	cmp	r3, #1
 8008988:	d101      	bne.n	800898e <HAL_PCD_EP_ClrStall+0x86>
 800898a:	2302      	movs	r3, #2
 800898c:	e00e      	b.n	80089ac <HAL_PCD_EP_ClrStall+0xa4>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68f9      	ldr	r1, [r7, #12]
 800899c:	4618      	mov	r0, r3
 800899e:	f006 fe73 	bl	800f688 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08a      	sub	sp, #40	; 0x28
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	4613      	mov	r3, r2
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	1a9b      	subs	r3, r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	3338      	adds	r3, #56	; 0x38
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	4413      	add	r3, r2
 80089d8:	3304      	adds	r3, #4
 80089da:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	699a      	ldr	r2, [r3, #24]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d901      	bls.n	80089ec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e06c      	b.n	8008ac6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	695a      	ldr	r2, [r3, #20]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	69fa      	ldr	r2, [r7, #28]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d902      	bls.n	8008a08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	3303      	adds	r3, #3
 8008a0c:	089b      	lsrs	r3, r3, #2
 8008a0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a10:	e02b      	b.n	8008a6a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	695a      	ldr	r2, [r3, #20]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	69fa      	ldr	r2, [r7, #28]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d902      	bls.n	8008a2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	3303      	adds	r3, #3
 8008a32:	089b      	lsrs	r3, r3, #2
 8008a34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	68d9      	ldr	r1, [r3, #12]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	6978      	ldr	r0, [r7, #20]
 8008a4e:	f006 fd4f 	bl	800f4f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	68da      	ldr	r2, [r3, #12]
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	441a      	add	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	699a      	ldr	r2, [r3, #24]
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	441a      	add	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d809      	bhi.n	8008a94 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	699a      	ldr	r2, [r3, #24]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d203      	bcs.n	8008a94 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1be      	bne.n	8008a12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	695a      	ldr	r2, [r3, #20]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d811      	bhi.n	8008ac4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	f003 030f 	and.w	r3, r3, #15
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008aac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	43db      	mvns	r3, r3
 8008aba:	6939      	ldr	r1, [r7, #16]
 8008abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3720      	adds	r7, #32
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
	...

08008ad0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	333c      	adds	r3, #60	; 0x3c
 8008ae8:	3304      	adds	r3, #4
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	f040 80a0 	bne.w	8008c48 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f003 0308 	and.w	r3, r3, #8
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d015      	beq.n	8008b3e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4a72      	ldr	r2, [pc, #456]	; (8008ce0 <PCD_EP_OutXfrComplete_int+0x210>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	f240 80dd 	bls.w	8008cd6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f000 80d7 	beq.w	8008cd6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b34:	461a      	mov	r2, r3
 8008b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b3a:	6093      	str	r3, [r2, #8]
 8008b3c:	e0cb      	b.n	8008cd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f003 0320 	and.w	r3, r3, #32
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d009      	beq.n	8008b5c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b54:	461a      	mov	r2, r3
 8008b56:	2320      	movs	r3, #32
 8008b58:	6093      	str	r3, [r2, #8]
 8008b5a:	e0bc      	b.n	8008cd6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f040 80b7 	bne.w	8008cd6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4a5d      	ldr	r2, [pc, #372]	; (8008ce0 <PCD_EP_OutXfrComplete_int+0x210>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d90f      	bls.n	8008b90 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b86:	461a      	mov	r2, r3
 8008b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b8c:	6093      	str	r3, [r2, #8]
 8008b8e:	e0a2      	b.n	8008cd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008b90:	6879      	ldr	r1, [r7, #4]
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	4613      	mov	r3, r2
 8008b96:	00db      	lsls	r3, r3, #3
 8008b98:	1a9b      	subs	r3, r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	440b      	add	r3, r1
 8008b9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008ba2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	0159      	lsls	r1, r3, #5
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	440b      	add	r3, r1
 8008bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008bb6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	00db      	lsls	r3, r3, #3
 8008bc0:	1a9b      	subs	r3, r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4403      	add	r3, r0
 8008bc6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008bca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008bcc:	6879      	ldr	r1, [r7, #4]
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	00db      	lsls	r3, r3, #3
 8008bd4:	1a9b      	subs	r3, r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	440b      	add	r3, r1
 8008bda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008bde:	6819      	ldr	r1, [r3, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	4613      	mov	r3, r2
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	1a9b      	subs	r3, r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4403      	add	r3, r0
 8008bee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4419      	add	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	00db      	lsls	r3, r3, #3
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4403      	add	r3, r0
 8008c04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c08:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d114      	bne.n	8008c3a <PCD_EP_OutXfrComplete_int+0x16a>
 8008c10:	6879      	ldr	r1, [r7, #4]
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	4613      	mov	r3, r2
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	1a9b      	subs	r3, r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	440b      	add	r3, r1
 8008c1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d108      	bne.n	8008c3a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008c32:	461a      	mov	r2, r3
 8008c34:	2101      	movs	r1, #1
 8008c36:	f006 fea9 	bl	800f98c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f010 f801 	bl	8018c48 <HAL_PCD_DataOutStageCallback>
 8008c46:	e046      	b.n	8008cd6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4a26      	ldr	r2, [pc, #152]	; (8008ce4 <PCD_EP_OutXfrComplete_int+0x214>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d124      	bne.n	8008c9a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00a      	beq.n	8008c70 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c66:	461a      	mov	r2, r3
 8008c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c6c:	6093      	str	r3, [r2, #8]
 8008c6e:	e032      	b.n	8008cd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f003 0320 	and.w	r3, r3, #32
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d008      	beq.n	8008c8c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c86:	461a      	mov	r2, r3
 8008c88:	2320      	movs	r3, #32
 8008c8a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f00f ffd8 	bl	8018c48 <HAL_PCD_DataOutStageCallback>
 8008c98:	e01d      	b.n	8008cd6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d114      	bne.n	8008cca <PCD_EP_OutXfrComplete_int+0x1fa>
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	1a9b      	subs	r3, r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d108      	bne.n	8008cca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6818      	ldr	r0, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	f006 fe61 	bl	800f98c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	4619      	mov	r1, r3
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f00f ffb9 	bl	8018c48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	4f54300a 	.word	0x4f54300a
 8008ce4:	4f54310a 	.word	0x4f54310a

08008ce8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	333c      	adds	r3, #60	; 0x3c
 8008d00:	3304      	adds	r3, #4
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	015a      	lsls	r2, r3, #5
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4a15      	ldr	r2, [pc, #84]	; (8008d70 <PCD_EP_OutSetupPacket_int+0x88>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d90e      	bls.n	8008d3c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d009      	beq.n	8008d3c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d34:	461a      	mov	r2, r3
 8008d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f00f ff71 	bl	8018c24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	4a0a      	ldr	r2, [pc, #40]	; (8008d70 <PCD_EP_OutSetupPacket_int+0x88>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d90c      	bls.n	8008d64 <PCD_EP_OutSetupPacket_int+0x7c>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d108      	bne.n	8008d64 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6818      	ldr	r0, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	2101      	movs	r1, #1
 8008d60:	f006 fe14 	bl	800f98c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	4f54300a 	.word	0x4f54300a

08008d74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70fb      	strb	r3, [r7, #3]
 8008d80:	4613      	mov	r3, r2
 8008d82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d107      	bne.n	8008da2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008d92:	883b      	ldrh	r3, [r7, #0]
 8008d94:	0419      	lsls	r1, r3, #16
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68ba      	ldr	r2, [r7, #8]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8008da0:	e028      	b.n	8008df4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da8:	0c1b      	lsrs	r3, r3, #16
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	4413      	add	r3, r2
 8008dae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008db0:	2300      	movs	r3, #0
 8008db2:	73fb      	strb	r3, [r7, #15]
 8008db4:	e00d      	b.n	8008dd2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
 8008dbc:	3340      	adds	r3, #64	; 0x40
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	0c1b      	lsrs	r3, r3, #16
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	4413      	add	r3, r2
 8008dca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	73fb      	strb	r3, [r7, #15]
 8008dd2:	7bfa      	ldrb	r2, [r7, #15]
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d3ec      	bcc.n	8008db6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008ddc:	883b      	ldrh	r3, [r7, #0]
 8008dde:	0418      	lsls	r0, r3, #16
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6819      	ldr	r1, [r3, #0]
 8008de4:	78fb      	ldrb	r3, [r7, #3]
 8008de6:	3b01      	subs	r3, #1
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	4302      	orrs	r2, r0
 8008dec:	3340      	adds	r3, #64	; 0x40
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	440b      	add	r3, r1
 8008df2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	887a      	ldrh	r2, [r7, #2]
 8008e14:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e52:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <HAL_PCDEx_ActivateLPM+0x44>)
 8008e54:	4313      	orrs	r3, r2
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	10000003 	.word	0x10000003

08008e6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b086      	sub	sp, #24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008e74:	2300      	movs	r3, #0
 8008e76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e291      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	f000 8087 	beq.w	8008f9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008e90:	4b96      	ldr	r3, [pc, #600]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f003 030c 	and.w	r3, r3, #12
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	d00c      	beq.n	8008eb6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e9c:	4b93      	ldr	r3, [pc, #588]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f003 030c 	and.w	r3, r3, #12
 8008ea4:	2b08      	cmp	r3, #8
 8008ea6:	d112      	bne.n	8008ece <HAL_RCC_OscConfig+0x62>
 8008ea8:	4b90      	ldr	r3, [pc, #576]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008eb4:	d10b      	bne.n	8008ece <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008eb6:	4b8d      	ldr	r3, [pc, #564]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d06c      	beq.n	8008f9c <HAL_RCC_OscConfig+0x130>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d168      	bne.n	8008f9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e26b      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed6:	d106      	bne.n	8008ee6 <HAL_RCC_OscConfig+0x7a>
 8008ed8:	4b84      	ldr	r3, [pc, #528]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a83      	ldr	r2, [pc, #524]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ee2:	6013      	str	r3, [r2, #0]
 8008ee4:	e02e      	b.n	8008f44 <HAL_RCC_OscConfig+0xd8>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10c      	bne.n	8008f08 <HAL_RCC_OscConfig+0x9c>
 8008eee:	4b7f      	ldr	r3, [pc, #508]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a7e      	ldr	r2, [pc, #504]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	4b7c      	ldr	r3, [pc, #496]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a7b      	ldr	r2, [pc, #492]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	e01d      	b.n	8008f44 <HAL_RCC_OscConfig+0xd8>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f10:	d10c      	bne.n	8008f2c <HAL_RCC_OscConfig+0xc0>
 8008f12:	4b76      	ldr	r3, [pc, #472]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a75      	ldr	r2, [pc, #468]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	4b73      	ldr	r3, [pc, #460]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a72      	ldr	r2, [pc, #456]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	e00b      	b.n	8008f44 <HAL_RCC_OscConfig+0xd8>
 8008f2c:	4b6f      	ldr	r3, [pc, #444]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a6e      	ldr	r2, [pc, #440]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	4b6c      	ldr	r3, [pc, #432]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a6b      	ldr	r2, [pc, #428]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d013      	beq.n	8008f74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f4c:	f7fd fa56 	bl	80063fc <HAL_GetTick>
 8008f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f52:	e008      	b.n	8008f66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f54:	f7fd fa52 	bl	80063fc <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	2b64      	cmp	r3, #100	; 0x64
 8008f60:	d901      	bls.n	8008f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e21f      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f66:	4b61      	ldr	r3, [pc, #388]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0f0      	beq.n	8008f54 <HAL_RCC_OscConfig+0xe8>
 8008f72:	e014      	b.n	8008f9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f74:	f7fd fa42 	bl	80063fc <HAL_GetTick>
 8008f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f7a:	e008      	b.n	8008f8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f7c:	f7fd fa3e 	bl	80063fc <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	2b64      	cmp	r3, #100	; 0x64
 8008f88:	d901      	bls.n	8008f8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e20b      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f8e:	4b57      	ldr	r3, [pc, #348]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1f0      	bne.n	8008f7c <HAL_RCC_OscConfig+0x110>
 8008f9a:	e000      	b.n	8008f9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d069      	beq.n	800907e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008faa:	4b50      	ldr	r3, [pc, #320]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	f003 030c 	and.w	r3, r3, #12
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00b      	beq.n	8008fce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008fb6:	4b4d      	ldr	r3, [pc, #308]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f003 030c 	and.w	r3, r3, #12
 8008fbe:	2b08      	cmp	r3, #8
 8008fc0:	d11c      	bne.n	8008ffc <HAL_RCC_OscConfig+0x190>
 8008fc2:	4b4a      	ldr	r3, [pc, #296]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d116      	bne.n	8008ffc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fce:	4b47      	ldr	r3, [pc, #284]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d005      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x17a>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d001      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e1df      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fe6:	4b41      	ldr	r3, [pc, #260]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	493d      	ldr	r1, [pc, #244]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ffa:	e040      	b.n	800907e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d023      	beq.n	800904c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009004:	4b39      	ldr	r3, [pc, #228]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a38      	ldr	r2, [pc, #224]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 800900a:	f043 0301 	orr.w	r3, r3, #1
 800900e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009010:	f7fd f9f4 	bl	80063fc <HAL_GetTick>
 8009014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009016:	e008      	b.n	800902a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009018:	f7fd f9f0 	bl	80063fc <HAL_GetTick>
 800901c:	4602      	mov	r2, r0
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	2b02      	cmp	r3, #2
 8009024:	d901      	bls.n	800902a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e1bd      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800902a:	4b30      	ldr	r3, [pc, #192]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 0302 	and.w	r3, r3, #2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0f0      	beq.n	8009018 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009036:	4b2d      	ldr	r3, [pc, #180]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	4929      	ldr	r1, [pc, #164]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8009046:	4313      	orrs	r3, r2
 8009048:	600b      	str	r3, [r1, #0]
 800904a:	e018      	b.n	800907e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800904c:	4b27      	ldr	r3, [pc, #156]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a26      	ldr	r2, [pc, #152]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8009052:	f023 0301 	bic.w	r3, r3, #1
 8009056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009058:	f7fd f9d0 	bl	80063fc <HAL_GetTick>
 800905c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800905e:	e008      	b.n	8009072 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009060:	f7fd f9cc 	bl	80063fc <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	2b02      	cmp	r3, #2
 800906c:	d901      	bls.n	8009072 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e199      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009072:	4b1e      	ldr	r3, [pc, #120]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1f0      	bne.n	8009060 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 0308 	and.w	r3, r3, #8
 8009086:	2b00      	cmp	r3, #0
 8009088:	d038      	beq.n	80090fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d019      	beq.n	80090c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009092:	4b16      	ldr	r3, [pc, #88]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8009094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009096:	4a15      	ldr	r2, [pc, #84]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 8009098:	f043 0301 	orr.w	r3, r3, #1
 800909c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800909e:	f7fd f9ad 	bl	80063fc <HAL_GetTick>
 80090a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090a4:	e008      	b.n	80090b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090a6:	f7fd f9a9 	bl	80063fc <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d901      	bls.n	80090b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e176      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090b8:	4b0c      	ldr	r3, [pc, #48]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 80090ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090bc:	f003 0302 	and.w	r3, r3, #2
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d0f0      	beq.n	80090a6 <HAL_RCC_OscConfig+0x23a>
 80090c4:	e01a      	b.n	80090fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 80090c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ca:	4a08      	ldr	r2, [pc, #32]	; (80090ec <HAL_RCC_OscConfig+0x280>)
 80090cc:	f023 0301 	bic.w	r3, r3, #1
 80090d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090d2:	f7fd f993 	bl	80063fc <HAL_GetTick>
 80090d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090d8:	e00a      	b.n	80090f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090da:	f7fd f98f 	bl	80063fc <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d903      	bls.n	80090f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e15c      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
 80090ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090f0:	4b91      	ldr	r3, [pc, #580]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80090f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1ee      	bne.n	80090da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0304 	and.w	r3, r3, #4
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 80a4 	beq.w	8009252 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800910a:	4b8b      	ldr	r3, [pc, #556]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 800910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10d      	bne.n	8009132 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009116:	4b88      	ldr	r3, [pc, #544]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 8009118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911a:	4a87      	ldr	r2, [pc, #540]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 800911c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009120:	6413      	str	r3, [r2, #64]	; 0x40
 8009122:	4b85      	ldr	r3, [pc, #532]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 8009124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800912a:	60bb      	str	r3, [r7, #8]
 800912c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800912e:	2301      	movs	r3, #1
 8009130:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009132:	4b82      	ldr	r3, [pc, #520]	; (800933c <HAL_RCC_OscConfig+0x4d0>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913a:	2b00      	cmp	r3, #0
 800913c:	d118      	bne.n	8009170 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800913e:	4b7f      	ldr	r3, [pc, #508]	; (800933c <HAL_RCC_OscConfig+0x4d0>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a7e      	ldr	r2, [pc, #504]	; (800933c <HAL_RCC_OscConfig+0x4d0>)
 8009144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800914a:	f7fd f957 	bl	80063fc <HAL_GetTick>
 800914e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009150:	e008      	b.n	8009164 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009152:	f7fd f953 	bl	80063fc <HAL_GetTick>
 8009156:	4602      	mov	r2, r0
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	1ad3      	subs	r3, r2, r3
 800915c:	2b64      	cmp	r3, #100	; 0x64
 800915e:	d901      	bls.n	8009164 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	e120      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009164:	4b75      	ldr	r3, [pc, #468]	; (800933c <HAL_RCC_OscConfig+0x4d0>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800916c:	2b00      	cmp	r3, #0
 800916e:	d0f0      	beq.n	8009152 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d106      	bne.n	8009186 <HAL_RCC_OscConfig+0x31a>
 8009178:	4b6f      	ldr	r3, [pc, #444]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 800917a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917c:	4a6e      	ldr	r2, [pc, #440]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 800917e:	f043 0301 	orr.w	r3, r3, #1
 8009182:	6713      	str	r3, [r2, #112]	; 0x70
 8009184:	e02d      	b.n	80091e2 <HAL_RCC_OscConfig+0x376>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10c      	bne.n	80091a8 <HAL_RCC_OscConfig+0x33c>
 800918e:	4b6a      	ldr	r3, [pc, #424]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 8009190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009192:	4a69      	ldr	r2, [pc, #420]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 8009194:	f023 0301 	bic.w	r3, r3, #1
 8009198:	6713      	str	r3, [r2, #112]	; 0x70
 800919a:	4b67      	ldr	r3, [pc, #412]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 800919c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800919e:	4a66      	ldr	r2, [pc, #408]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80091a0:	f023 0304 	bic.w	r3, r3, #4
 80091a4:	6713      	str	r3, [r2, #112]	; 0x70
 80091a6:	e01c      	b.n	80091e2 <HAL_RCC_OscConfig+0x376>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	2b05      	cmp	r3, #5
 80091ae:	d10c      	bne.n	80091ca <HAL_RCC_OscConfig+0x35e>
 80091b0:	4b61      	ldr	r3, [pc, #388]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80091b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b4:	4a60      	ldr	r2, [pc, #384]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80091b6:	f043 0304 	orr.w	r3, r3, #4
 80091ba:	6713      	str	r3, [r2, #112]	; 0x70
 80091bc:	4b5e      	ldr	r3, [pc, #376]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80091be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c0:	4a5d      	ldr	r2, [pc, #372]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80091c2:	f043 0301 	orr.w	r3, r3, #1
 80091c6:	6713      	str	r3, [r2, #112]	; 0x70
 80091c8:	e00b      	b.n	80091e2 <HAL_RCC_OscConfig+0x376>
 80091ca:	4b5b      	ldr	r3, [pc, #364]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80091cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ce:	4a5a      	ldr	r2, [pc, #360]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80091d0:	f023 0301 	bic.w	r3, r3, #1
 80091d4:	6713      	str	r3, [r2, #112]	; 0x70
 80091d6:	4b58      	ldr	r3, [pc, #352]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80091d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091da:	4a57      	ldr	r2, [pc, #348]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80091dc:	f023 0304 	bic.w	r3, r3, #4
 80091e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d015      	beq.n	8009216 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ea:	f7fd f907 	bl	80063fc <HAL_GetTick>
 80091ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091f0:	e00a      	b.n	8009208 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091f2:	f7fd f903 	bl	80063fc <HAL_GetTick>
 80091f6:	4602      	mov	r2, r0
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009200:	4293      	cmp	r3, r2
 8009202:	d901      	bls.n	8009208 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e0ce      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009208:	4b4b      	ldr	r3, [pc, #300]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 800920a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d0ee      	beq.n	80091f2 <HAL_RCC_OscConfig+0x386>
 8009214:	e014      	b.n	8009240 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009216:	f7fd f8f1 	bl	80063fc <HAL_GetTick>
 800921a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800921c:	e00a      	b.n	8009234 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800921e:	f7fd f8ed 	bl	80063fc <HAL_GetTick>
 8009222:	4602      	mov	r2, r0
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	f241 3288 	movw	r2, #5000	; 0x1388
 800922c:	4293      	cmp	r3, r2
 800922e:	d901      	bls.n	8009234 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e0b8      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009234:	4b40      	ldr	r3, [pc, #256]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 8009236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009238:	f003 0302 	and.w	r3, r3, #2
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1ee      	bne.n	800921e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009240:	7dfb      	ldrb	r3, [r7, #23]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d105      	bne.n	8009252 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009246:	4b3c      	ldr	r3, [pc, #240]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	4a3b      	ldr	r2, [pc, #236]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 800924c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009250:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	2b00      	cmp	r3, #0
 8009258:	f000 80a4 	beq.w	80093a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800925c:	4b36      	ldr	r3, [pc, #216]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f003 030c 	and.w	r3, r3, #12
 8009264:	2b08      	cmp	r3, #8
 8009266:	d06b      	beq.n	8009340 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	2b02      	cmp	r3, #2
 800926e:	d149      	bne.n	8009304 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009270:	4b31      	ldr	r3, [pc, #196]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a30      	ldr	r2, [pc, #192]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 8009276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800927a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800927c:	f7fd f8be 	bl	80063fc <HAL_GetTick>
 8009280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009282:	e008      	b.n	8009296 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009284:	f7fd f8ba 	bl	80063fc <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b02      	cmp	r3, #2
 8009290:	d901      	bls.n	8009296 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e087      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009296:	4b28      	ldr	r3, [pc, #160]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1f0      	bne.n	8009284 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	69da      	ldr	r2, [r3, #28]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	431a      	orrs	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	019b      	lsls	r3, r3, #6
 80092b2:	431a      	orrs	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b8:	085b      	lsrs	r3, r3, #1
 80092ba:	3b01      	subs	r3, #1
 80092bc:	041b      	lsls	r3, r3, #16
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c4:	061b      	lsls	r3, r3, #24
 80092c6:	4313      	orrs	r3, r2
 80092c8:	4a1b      	ldr	r2, [pc, #108]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80092ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80092ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092d0:	4b19      	ldr	r3, [pc, #100]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a18      	ldr	r2, [pc, #96]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80092d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092dc:	f7fd f88e 	bl	80063fc <HAL_GetTick>
 80092e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092e2:	e008      	b.n	80092f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092e4:	f7fd f88a 	bl	80063fc <HAL_GetTick>
 80092e8:	4602      	mov	r2, r0
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d901      	bls.n	80092f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e057      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092f6:	4b10      	ldr	r3, [pc, #64]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d0f0      	beq.n	80092e4 <HAL_RCC_OscConfig+0x478>
 8009302:	e04f      	b.n	80093a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009304:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a0b      	ldr	r2, [pc, #44]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 800930a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800930e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009310:	f7fd f874 	bl	80063fc <HAL_GetTick>
 8009314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009316:	e008      	b.n	800932a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009318:	f7fd f870 	bl	80063fc <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	2b02      	cmp	r3, #2
 8009324:	d901      	bls.n	800932a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e03d      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800932a:	4b03      	ldr	r3, [pc, #12]	; (8009338 <HAL_RCC_OscConfig+0x4cc>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1f0      	bne.n	8009318 <HAL_RCC_OscConfig+0x4ac>
 8009336:	e035      	b.n	80093a4 <HAL_RCC_OscConfig+0x538>
 8009338:	40023800 	.word	0x40023800
 800933c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009340:	4b1b      	ldr	r3, [pc, #108]	; (80093b0 <HAL_RCC_OscConfig+0x544>)
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d028      	beq.n	80093a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009358:	429a      	cmp	r2, r3
 800935a:	d121      	bne.n	80093a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009366:	429a      	cmp	r2, r3
 8009368:	d11a      	bne.n	80093a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009370:	4013      	ands	r3, r2
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009376:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009378:	4293      	cmp	r3, r2
 800937a:	d111      	bne.n	80093a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009386:	085b      	lsrs	r3, r3, #1
 8009388:	3b01      	subs	r3, #1
 800938a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800938c:	429a      	cmp	r2, r3
 800938e:	d107      	bne.n	80093a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800939c:	429a      	cmp	r2, r3
 800939e:	d001      	beq.n	80093a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e000      	b.n	80093a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	40023800 	.word	0x40023800

080093b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d101      	bne.n	80093cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e0d0      	b.n	800956e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093cc:	4b6a      	ldr	r3, [pc, #424]	; (8009578 <HAL_RCC_ClockConfig+0x1c4>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 030f 	and.w	r3, r3, #15
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d910      	bls.n	80093fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093da:	4b67      	ldr	r3, [pc, #412]	; (8009578 <HAL_RCC_ClockConfig+0x1c4>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f023 020f 	bic.w	r2, r3, #15
 80093e2:	4965      	ldr	r1, [pc, #404]	; (8009578 <HAL_RCC_ClockConfig+0x1c4>)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093ea:	4b63      	ldr	r3, [pc, #396]	; (8009578 <HAL_RCC_ClockConfig+0x1c4>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 030f 	and.w	r3, r3, #15
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d001      	beq.n	80093fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e0b8      	b.n	800956e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 0302 	and.w	r3, r3, #2
 8009404:	2b00      	cmp	r3, #0
 8009406:	d020      	beq.n	800944a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b00      	cmp	r3, #0
 8009412:	d005      	beq.n	8009420 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009414:	4b59      	ldr	r3, [pc, #356]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	4a58      	ldr	r2, [pc, #352]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 800941a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800941e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 0308 	and.w	r3, r3, #8
 8009428:	2b00      	cmp	r3, #0
 800942a:	d005      	beq.n	8009438 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800942c:	4b53      	ldr	r3, [pc, #332]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	4a52      	ldr	r2, [pc, #328]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 8009432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009436:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009438:	4b50      	ldr	r3, [pc, #320]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	494d      	ldr	r1, [pc, #308]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 8009446:	4313      	orrs	r3, r2
 8009448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0301 	and.w	r3, r3, #1
 8009452:	2b00      	cmp	r3, #0
 8009454:	d040      	beq.n	80094d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d107      	bne.n	800946e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800945e:	4b47      	ldr	r3, [pc, #284]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d115      	bne.n	8009496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e07f      	b.n	800956e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	2b02      	cmp	r3, #2
 8009474:	d107      	bne.n	8009486 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009476:	4b41      	ldr	r3, [pc, #260]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d109      	bne.n	8009496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e073      	b.n	800956e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009486:	4b3d      	ldr	r3, [pc, #244]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e06b      	b.n	800956e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009496:	4b39      	ldr	r3, [pc, #228]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f023 0203 	bic.w	r2, r3, #3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	4936      	ldr	r1, [pc, #216]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 80094a4:	4313      	orrs	r3, r2
 80094a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094a8:	f7fc ffa8 	bl	80063fc <HAL_GetTick>
 80094ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094ae:	e00a      	b.n	80094c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094b0:	f7fc ffa4 	bl	80063fc <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80094be:	4293      	cmp	r3, r2
 80094c0:	d901      	bls.n	80094c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e053      	b.n	800956e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094c6:	4b2d      	ldr	r3, [pc, #180]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f003 020c 	and.w	r2, r3, #12
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d1eb      	bne.n	80094b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80094d8:	4b27      	ldr	r3, [pc, #156]	; (8009578 <HAL_RCC_ClockConfig+0x1c4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 030f 	and.w	r3, r3, #15
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d210      	bcs.n	8009508 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094e6:	4b24      	ldr	r3, [pc, #144]	; (8009578 <HAL_RCC_ClockConfig+0x1c4>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f023 020f 	bic.w	r2, r3, #15
 80094ee:	4922      	ldr	r1, [pc, #136]	; (8009578 <HAL_RCC_ClockConfig+0x1c4>)
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094f6:	4b20      	ldr	r3, [pc, #128]	; (8009578 <HAL_RCC_ClockConfig+0x1c4>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 030f 	and.w	r3, r3, #15
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	d001      	beq.n	8009508 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e032      	b.n	800956e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0304 	and.w	r3, r3, #4
 8009510:	2b00      	cmp	r3, #0
 8009512:	d008      	beq.n	8009526 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009514:	4b19      	ldr	r3, [pc, #100]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	4916      	ldr	r1, [pc, #88]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 8009522:	4313      	orrs	r3, r2
 8009524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 0308 	and.w	r3, r3, #8
 800952e:	2b00      	cmp	r3, #0
 8009530:	d009      	beq.n	8009546 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009532:	4b12      	ldr	r3, [pc, #72]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	00db      	lsls	r3, r3, #3
 8009540:	490e      	ldr	r1, [pc, #56]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 8009542:	4313      	orrs	r3, r2
 8009544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009546:	f000 f821 	bl	800958c <HAL_RCC_GetSysClockFreq>
 800954a:	4601      	mov	r1, r0
 800954c:	4b0b      	ldr	r3, [pc, #44]	; (800957c <HAL_RCC_ClockConfig+0x1c8>)
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	091b      	lsrs	r3, r3, #4
 8009552:	f003 030f 	and.w	r3, r3, #15
 8009556:	4a0a      	ldr	r2, [pc, #40]	; (8009580 <HAL_RCC_ClockConfig+0x1cc>)
 8009558:	5cd3      	ldrb	r3, [r2, r3]
 800955a:	fa21 f303 	lsr.w	r3, r1, r3
 800955e:	4a09      	ldr	r2, [pc, #36]	; (8009584 <HAL_RCC_ClockConfig+0x1d0>)
 8009560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009562:	4b09      	ldr	r3, [pc, #36]	; (8009588 <HAL_RCC_ClockConfig+0x1d4>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4618      	mov	r0, r3
 8009568:	f7fb fc2c 	bl	8004dc4 <HAL_InitTick>

  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	40023c00 	.word	0x40023c00
 800957c:	40023800 	.word	0x40023800
 8009580:	0801c3a0 	.word	0x0801c3a0
 8009584:	20000000 	.word	0x20000000
 8009588:	2000008c 	.word	0x2000008c

0800958c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800958c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	607b      	str	r3, [r7, #4]
 8009596:	2300      	movs	r3, #0
 8009598:	60fb      	str	r3, [r7, #12]
 800959a:	2300      	movs	r3, #0
 800959c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095a2:	4b63      	ldr	r3, [pc, #396]	; (8009730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f003 030c 	and.w	r3, r3, #12
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	d007      	beq.n	80095be <HAL_RCC_GetSysClockFreq+0x32>
 80095ae:	2b08      	cmp	r3, #8
 80095b0:	d008      	beq.n	80095c4 <HAL_RCC_GetSysClockFreq+0x38>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f040 80b4 	bne.w	8009720 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80095b8:	4b5e      	ldr	r3, [pc, #376]	; (8009734 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80095ba:	60bb      	str	r3, [r7, #8]
      break;
 80095bc:	e0b3      	b.n	8009726 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80095be:	4b5e      	ldr	r3, [pc, #376]	; (8009738 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80095c0:	60bb      	str	r3, [r7, #8]
      break;
 80095c2:	e0b0      	b.n	8009726 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80095c4:	4b5a      	ldr	r3, [pc, #360]	; (8009730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095cc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80095ce:	4b58      	ldr	r3, [pc, #352]	; (8009730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d04a      	beq.n	8009670 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095da:	4b55      	ldr	r3, [pc, #340]	; (8009730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	099b      	lsrs	r3, r3, #6
 80095e0:	f04f 0400 	mov.w	r4, #0
 80095e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80095e8:	f04f 0200 	mov.w	r2, #0
 80095ec:	ea03 0501 	and.w	r5, r3, r1
 80095f0:	ea04 0602 	and.w	r6, r4, r2
 80095f4:	4629      	mov	r1, r5
 80095f6:	4632      	mov	r2, r6
 80095f8:	f04f 0300 	mov.w	r3, #0
 80095fc:	f04f 0400 	mov.w	r4, #0
 8009600:	0154      	lsls	r4, r2, #5
 8009602:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009606:	014b      	lsls	r3, r1, #5
 8009608:	4619      	mov	r1, r3
 800960a:	4622      	mov	r2, r4
 800960c:	1b49      	subs	r1, r1, r5
 800960e:	eb62 0206 	sbc.w	r2, r2, r6
 8009612:	f04f 0300 	mov.w	r3, #0
 8009616:	f04f 0400 	mov.w	r4, #0
 800961a:	0194      	lsls	r4, r2, #6
 800961c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009620:	018b      	lsls	r3, r1, #6
 8009622:	1a5b      	subs	r3, r3, r1
 8009624:	eb64 0402 	sbc.w	r4, r4, r2
 8009628:	f04f 0100 	mov.w	r1, #0
 800962c:	f04f 0200 	mov.w	r2, #0
 8009630:	00e2      	lsls	r2, r4, #3
 8009632:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009636:	00d9      	lsls	r1, r3, #3
 8009638:	460b      	mov	r3, r1
 800963a:	4614      	mov	r4, r2
 800963c:	195b      	adds	r3, r3, r5
 800963e:	eb44 0406 	adc.w	r4, r4, r6
 8009642:	f04f 0100 	mov.w	r1, #0
 8009646:	f04f 0200 	mov.w	r2, #0
 800964a:	0262      	lsls	r2, r4, #9
 800964c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009650:	0259      	lsls	r1, r3, #9
 8009652:	460b      	mov	r3, r1
 8009654:	4614      	mov	r4, r2
 8009656:	4618      	mov	r0, r3
 8009658:	4621      	mov	r1, r4
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f04f 0400 	mov.w	r4, #0
 8009660:	461a      	mov	r2, r3
 8009662:	4623      	mov	r3, r4
 8009664:	f7f7 fb08 	bl	8000c78 <__aeabi_uldivmod>
 8009668:	4603      	mov	r3, r0
 800966a:	460c      	mov	r4, r1
 800966c:	60fb      	str	r3, [r7, #12]
 800966e:	e049      	b.n	8009704 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009670:	4b2f      	ldr	r3, [pc, #188]	; (8009730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	099b      	lsrs	r3, r3, #6
 8009676:	f04f 0400 	mov.w	r4, #0
 800967a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800967e:	f04f 0200 	mov.w	r2, #0
 8009682:	ea03 0501 	and.w	r5, r3, r1
 8009686:	ea04 0602 	and.w	r6, r4, r2
 800968a:	4629      	mov	r1, r5
 800968c:	4632      	mov	r2, r6
 800968e:	f04f 0300 	mov.w	r3, #0
 8009692:	f04f 0400 	mov.w	r4, #0
 8009696:	0154      	lsls	r4, r2, #5
 8009698:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800969c:	014b      	lsls	r3, r1, #5
 800969e:	4619      	mov	r1, r3
 80096a0:	4622      	mov	r2, r4
 80096a2:	1b49      	subs	r1, r1, r5
 80096a4:	eb62 0206 	sbc.w	r2, r2, r6
 80096a8:	f04f 0300 	mov.w	r3, #0
 80096ac:	f04f 0400 	mov.w	r4, #0
 80096b0:	0194      	lsls	r4, r2, #6
 80096b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80096b6:	018b      	lsls	r3, r1, #6
 80096b8:	1a5b      	subs	r3, r3, r1
 80096ba:	eb64 0402 	sbc.w	r4, r4, r2
 80096be:	f04f 0100 	mov.w	r1, #0
 80096c2:	f04f 0200 	mov.w	r2, #0
 80096c6:	00e2      	lsls	r2, r4, #3
 80096c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80096cc:	00d9      	lsls	r1, r3, #3
 80096ce:	460b      	mov	r3, r1
 80096d0:	4614      	mov	r4, r2
 80096d2:	195b      	adds	r3, r3, r5
 80096d4:	eb44 0406 	adc.w	r4, r4, r6
 80096d8:	f04f 0100 	mov.w	r1, #0
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	02a2      	lsls	r2, r4, #10
 80096e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80096e6:	0299      	lsls	r1, r3, #10
 80096e8:	460b      	mov	r3, r1
 80096ea:	4614      	mov	r4, r2
 80096ec:	4618      	mov	r0, r3
 80096ee:	4621      	mov	r1, r4
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f04f 0400 	mov.w	r4, #0
 80096f6:	461a      	mov	r2, r3
 80096f8:	4623      	mov	r3, r4
 80096fa:	f7f7 fabd 	bl	8000c78 <__aeabi_uldivmod>
 80096fe:	4603      	mov	r3, r0
 8009700:	460c      	mov	r4, r1
 8009702:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009704:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	0c1b      	lsrs	r3, r3, #16
 800970a:	f003 0303 	and.w	r3, r3, #3
 800970e:	3301      	adds	r3, #1
 8009710:	005b      	lsls	r3, r3, #1
 8009712:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	fbb2 f3f3 	udiv	r3, r2, r3
 800971c:	60bb      	str	r3, [r7, #8]
      break;
 800971e:	e002      	b.n	8009726 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009720:	4b04      	ldr	r3, [pc, #16]	; (8009734 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009722:	60bb      	str	r3, [r7, #8]
      break;
 8009724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009726:	68bb      	ldr	r3, [r7, #8]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009730:	40023800 	.word	0x40023800
 8009734:	00f42400 	.word	0x00f42400
 8009738:	007a1200 	.word	0x007a1200

0800973c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800973c:	b480      	push	{r7}
 800973e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009740:	4b03      	ldr	r3, [pc, #12]	; (8009750 <HAL_RCC_GetHCLKFreq+0x14>)
 8009742:	681b      	ldr	r3, [r3, #0]
}
 8009744:	4618      	mov	r0, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20000000 	.word	0x20000000

08009754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009758:	f7ff fff0 	bl	800973c <HAL_RCC_GetHCLKFreq>
 800975c:	4601      	mov	r1, r0
 800975e:	4b05      	ldr	r3, [pc, #20]	; (8009774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	0a9b      	lsrs	r3, r3, #10
 8009764:	f003 0307 	and.w	r3, r3, #7
 8009768:	4a03      	ldr	r2, [pc, #12]	; (8009778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800976a:	5cd3      	ldrb	r3, [r2, r3]
 800976c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009770:	4618      	mov	r0, r3
 8009772:	bd80      	pop	{r7, pc}
 8009774:	40023800 	.word	0x40023800
 8009778:	0801c3b0 	.word	0x0801c3b0

0800977c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009780:	f7ff ffdc 	bl	800973c <HAL_RCC_GetHCLKFreq>
 8009784:	4601      	mov	r1, r0
 8009786:	4b05      	ldr	r3, [pc, #20]	; (800979c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	0b5b      	lsrs	r3, r3, #13
 800978c:	f003 0307 	and.w	r3, r3, #7
 8009790:	4a03      	ldr	r2, [pc, #12]	; (80097a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009792:	5cd3      	ldrb	r3, [r2, r3]
 8009794:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009798:	4618      	mov	r0, r3
 800979a:	bd80      	pop	{r7, pc}
 800979c:	40023800 	.word	0x40023800
 80097a0:	0801c3b0 	.word	0x0801c3b0

080097a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	220f      	movs	r2, #15
 80097b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80097b4:	4b12      	ldr	r3, [pc, #72]	; (8009800 <HAL_RCC_GetClockConfig+0x5c>)
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f003 0203 	and.w	r2, r3, #3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80097c0:	4b0f      	ldr	r3, [pc, #60]	; (8009800 <HAL_RCC_GetClockConfig+0x5c>)
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80097cc:	4b0c      	ldr	r3, [pc, #48]	; (8009800 <HAL_RCC_GetClockConfig+0x5c>)
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80097d8:	4b09      	ldr	r3, [pc, #36]	; (8009800 <HAL_RCC_GetClockConfig+0x5c>)
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	08db      	lsrs	r3, r3, #3
 80097de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80097e6:	4b07      	ldr	r3, [pc, #28]	; (8009804 <HAL_RCC_GetClockConfig+0x60>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 020f 	and.w	r2, r3, #15
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	601a      	str	r2, [r3, #0]
}
 80097f2:	bf00      	nop
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr
 80097fe:	bf00      	nop
 8009800:	40023800 	.word	0x40023800
 8009804:	40023c00 	.word	0x40023c00

08009808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b088      	sub	sp, #32
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800981c:	2300      	movs	r3, #0
 800981e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009820:	2300      	movs	r3, #0
 8009822:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d012      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009830:	4b69      	ldr	r3, [pc, #420]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	4a68      	ldr	r2, [pc, #416]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009836:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800983a:	6093      	str	r3, [r2, #8]
 800983c:	4b66      	ldr	r3, [pc, #408]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800983e:	689a      	ldr	r2, [r3, #8]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009844:	4964      	ldr	r1, [pc, #400]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009846:	4313      	orrs	r3, r2
 8009848:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984e:	2b00      	cmp	r3, #0
 8009850:	d101      	bne.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009852:	2301      	movs	r3, #1
 8009854:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800985e:	2b00      	cmp	r3, #0
 8009860:	d017      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009862:	4b5d      	ldr	r3, [pc, #372]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009868:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009870:	4959      	ldr	r1, [pc, #356]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009872:	4313      	orrs	r3, r2
 8009874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800987c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009880:	d101      	bne.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009882:	2301      	movs	r3, #1
 8009884:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800988e:	2301      	movs	r3, #1
 8009890:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d017      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800989e:	4b4e      	ldr	r3, [pc, #312]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ac:	494a      	ldr	r1, [pc, #296]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098bc:	d101      	bne.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80098be:	2301      	movs	r3, #1
 80098c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80098ca:	2301      	movs	r3, #1
 80098cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80098da:	2301      	movs	r3, #1
 80098dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f003 0320 	and.w	r3, r3, #32
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 808b 	beq.w	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80098ec:	4b3a      	ldr	r3, [pc, #232]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f0:	4a39      	ldr	r2, [pc, #228]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098f6:	6413      	str	r3, [r2, #64]	; 0x40
 80098f8:	4b37      	ldr	r3, [pc, #220]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009900:	60bb      	str	r3, [r7, #8]
 8009902:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009904:	4b35      	ldr	r3, [pc, #212]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a34      	ldr	r2, [pc, #208]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800990a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800990e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009910:	f7fc fd74 	bl	80063fc <HAL_GetTick>
 8009914:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009916:	e008      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009918:	f7fc fd70 	bl	80063fc <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b64      	cmp	r3, #100	; 0x64
 8009924:	d901      	bls.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e31e      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800992a:	4b2c      	ldr	r3, [pc, #176]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0f0      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009936:	4b28      	ldr	r3, [pc, #160]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800993e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d035      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	429a      	cmp	r2, r3
 8009952:	d02e      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009954:	4b20      	ldr	r3, [pc, #128]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800995c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800995e:	4b1e      	ldr	r3, [pc, #120]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009962:	4a1d      	ldr	r2, [pc, #116]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009968:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800996a:	4b1b      	ldr	r3, [pc, #108]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800996c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996e:	4a1a      	ldr	r2, [pc, #104]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009974:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009976:	4a18      	ldr	r2, [pc, #96]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800997c:	4b16      	ldr	r3, [pc, #88]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800997e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b01      	cmp	r3, #1
 8009986:	d114      	bne.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009988:	f7fc fd38 	bl	80063fc <HAL_GetTick>
 800998c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800998e:	e00a      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009990:	f7fc fd34 	bl	80063fc <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	f241 3288 	movw	r2, #5000	; 0x1388
 800999e:	4293      	cmp	r3, r2
 80099a0:	d901      	bls.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e2e0      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099a6:	4b0c      	ldr	r3, [pc, #48]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099aa:	f003 0302 	and.w	r3, r3, #2
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d0ee      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099be:	d111      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80099c0:	4b05      	ldr	r3, [pc, #20]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099c2:	689b      	ldr	r3, [r3, #8]
 80099c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80099cc:	4b04      	ldr	r3, [pc, #16]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80099ce:	400b      	ands	r3, r1
 80099d0:	4901      	ldr	r1, [pc, #4]	; (80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099d2:	4313      	orrs	r3, r2
 80099d4:	608b      	str	r3, [r1, #8]
 80099d6:	e00b      	b.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80099d8:	40023800 	.word	0x40023800
 80099dc:	40007000 	.word	0x40007000
 80099e0:	0ffffcff 	.word	0x0ffffcff
 80099e4:	4bac      	ldr	r3, [pc, #688]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	4aab      	ldr	r2, [pc, #684]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80099ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80099ee:	6093      	str	r3, [r2, #8]
 80099f0:	4ba9      	ldr	r3, [pc, #676]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80099f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099fc:	49a6      	ldr	r1, [pc, #664]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0310 	and.w	r3, r3, #16
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d010      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a0e:	4ba2      	ldr	r3, [pc, #648]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a14:	4aa0      	ldr	r2, [pc, #640]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009a1e:	4b9e      	ldr	r3, [pc, #632]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	499b      	ldr	r1, [pc, #620]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00a      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a3c:	4b96      	ldr	r3, [pc, #600]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a4a:	4993      	ldr	r1, [pc, #588]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00a      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009a5e:	4b8e      	ldr	r3, [pc, #568]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a6c:	498a      	ldr	r1, [pc, #552]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00a      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a80:	4b85      	ldr	r3, [pc, #532]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a8e:	4982      	ldr	r1, [pc, #520]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009aa2:	4b7d      	ldr	r3, [pc, #500]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aa8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ab0:	4979      	ldr	r1, [pc, #484]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00a      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009ac4:	4b74      	ldr	r3, [pc, #464]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aca:	f023 0203 	bic.w	r2, r3, #3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad2:	4971      	ldr	r1, [pc, #452]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00a      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ae6:	4b6c      	ldr	r3, [pc, #432]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aec:	f023 020c 	bic.w	r2, r3, #12
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009af4:	4968      	ldr	r1, [pc, #416]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009af6:	4313      	orrs	r3, r2
 8009af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00a      	beq.n	8009b1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009b08:	4b63      	ldr	r3, [pc, #396]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b16:	4960      	ldr	r1, [pc, #384]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009b2a:	4b5b      	ldr	r3, [pc, #364]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b38:	4957      	ldr	r1, [pc, #348]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00a      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009b4c:	4b52      	ldr	r3, [pc, #328]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b5a:	494f      	ldr	r1, [pc, #316]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00a      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009b6e:	4b4a      	ldr	r3, [pc, #296]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b7c:	4946      	ldr	r1, [pc, #280]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00a      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009b90:	4b41      	ldr	r3, [pc, #260]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b9e:	493e      	ldr	r1, [pc, #248]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009bb2:	4b39      	ldr	r3, [pc, #228]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bc0:	4935      	ldr	r1, [pc, #212]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00a      	beq.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009bd4:	4b30      	ldr	r3, [pc, #192]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009be2:	492d      	ldr	r1, [pc, #180]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d011      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009bf6:	4b28      	ldr	r3, [pc, #160]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c04:	4924      	ldr	r1, [pc, #144]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009c06:	4313      	orrs	r3, r2
 8009c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c14:	d101      	bne.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009c16:	2301      	movs	r3, #1
 8009c18:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00a      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c26:	4b1c      	ldr	r3, [pc, #112]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c34:	4918      	ldr	r1, [pc, #96]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009c36:	4313      	orrs	r3, r2
 8009c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00b      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009c48:	4b13      	ldr	r3, [pc, #76]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c58:	490f      	ldr	r1, [pc, #60]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d005      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c6e:	f040 80d8 	bne.w	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009c72:	4b09      	ldr	r3, [pc, #36]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a08      	ldr	r2, [pc, #32]	; (8009c98 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009c78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c7e:	f7fc fbbd 	bl	80063fc <HAL_GetTick>
 8009c82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c84:	e00a      	b.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009c86:	f7fc fbb9 	bl	80063fc <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	2b64      	cmp	r3, #100	; 0x64
 8009c92:	d903      	bls.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e167      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8009c98:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c9c:	4bad      	ldr	r3, [pc, #692]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1ee      	bne.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 0301 	and.w	r3, r3, #1
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d021      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d11d      	bne.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009cbc:	4ba5      	ldr	r3, [pc, #660]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cc2:	0c1b      	lsrs	r3, r3, #16
 8009cc4:	f003 0303 	and.w	r3, r3, #3
 8009cc8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009cca:	4ba2      	ldr	r3, [pc, #648]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cd0:	0e1b      	lsrs	r3, r3, #24
 8009cd2:	f003 030f 	and.w	r3, r3, #15
 8009cd6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	019a      	lsls	r2, r3, #6
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	041b      	lsls	r3, r3, #16
 8009ce2:	431a      	orrs	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	061b      	lsls	r3, r3, #24
 8009ce8:	431a      	orrs	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	071b      	lsls	r3, r3, #28
 8009cf0:	4998      	ldr	r1, [pc, #608]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d0c:	d00a      	beq.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d02e      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d22:	d129      	bne.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009d24:	4b8b      	ldr	r3, [pc, #556]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d2a:	0c1b      	lsrs	r3, r3, #16
 8009d2c:	f003 0303 	and.w	r3, r3, #3
 8009d30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009d32:	4b88      	ldr	r3, [pc, #544]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d38:	0f1b      	lsrs	r3, r3, #28
 8009d3a:	f003 0307 	and.w	r3, r3, #7
 8009d3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	019a      	lsls	r2, r3, #6
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	041b      	lsls	r3, r3, #16
 8009d4a:	431a      	orrs	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	061b      	lsls	r3, r3, #24
 8009d52:	431a      	orrs	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	071b      	lsls	r3, r3, #28
 8009d58:	497e      	ldr	r1, [pc, #504]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009d60:	4b7c      	ldr	r3, [pc, #496]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d66:	f023 021f 	bic.w	r2, r3, #31
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	4978      	ldr	r1, [pc, #480]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d01d      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009d84:	4b73      	ldr	r3, [pc, #460]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d8a:	0e1b      	lsrs	r3, r3, #24
 8009d8c:	f003 030f 	and.w	r3, r3, #15
 8009d90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009d92:	4b70      	ldr	r3, [pc, #448]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d98:	0f1b      	lsrs	r3, r3, #28
 8009d9a:	f003 0307 	and.w	r3, r3, #7
 8009d9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	019a      	lsls	r2, r3, #6
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	041b      	lsls	r3, r3, #16
 8009dac:	431a      	orrs	r2, r3
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	061b      	lsls	r3, r3, #24
 8009db2:	431a      	orrs	r2, r3
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	071b      	lsls	r3, r3, #28
 8009db8:	4966      	ldr	r1, [pc, #408]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d011      	beq.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	019a      	lsls	r2, r3, #6
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	041b      	lsls	r3, r3, #16
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	061b      	lsls	r3, r3, #24
 8009de0:	431a      	orrs	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	071b      	lsls	r3, r3, #28
 8009de8:	495a      	ldr	r1, [pc, #360]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009df0:	4b58      	ldr	r3, [pc, #352]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a57      	ldr	r2, [pc, #348]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009df6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009dfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dfc:	f7fc fafe 	bl	80063fc <HAL_GetTick>
 8009e00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e02:	e008      	b.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009e04:	f7fc fafa 	bl	80063fc <HAL_GetTick>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	2b64      	cmp	r3, #100	; 0x64
 8009e10:	d901      	bls.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e0a8      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009e16:	4b4f      	ldr	r3, [pc, #316]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0f0      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	f040 809e 	bne.w	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009e2a:	4b4a      	ldr	r3, [pc, #296]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a49      	ldr	r2, [pc, #292]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e36:	f7fc fae1 	bl	80063fc <HAL_GetTick>
 8009e3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009e3c:	e008      	b.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009e3e:	f7fc fadd 	bl	80063fc <HAL_GetTick>
 8009e42:	4602      	mov	r2, r0
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	1ad3      	subs	r3, r2, r3
 8009e48:	2b64      	cmp	r3, #100	; 0x64
 8009e4a:	d901      	bls.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e08b      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009e50:	4b40      	ldr	r3, [pc, #256]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e5c:	d0ef      	beq.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d009      	beq.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d02e      	beq.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d12a      	bne.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009e86:	4b33      	ldr	r3, [pc, #204]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8c:	0c1b      	lsrs	r3, r3, #16
 8009e8e:	f003 0303 	and.w	r3, r3, #3
 8009e92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009e94:	4b2f      	ldr	r3, [pc, #188]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e9a:	0f1b      	lsrs	r3, r3, #28
 8009e9c:	f003 0307 	and.w	r3, r3, #7
 8009ea0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	695b      	ldr	r3, [r3, #20]
 8009ea6:	019a      	lsls	r2, r3, #6
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	041b      	lsls	r3, r3, #16
 8009eac:	431a      	orrs	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	061b      	lsls	r3, r3, #24
 8009eb4:	431a      	orrs	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	071b      	lsls	r3, r3, #28
 8009eba:	4926      	ldr	r1, [pc, #152]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009ec2:	4b24      	ldr	r3, [pc, #144]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ec8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	491f      	ldr	r1, [pc, #124]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d022      	beq.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ef0:	d11d      	bne.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009ef2:	4b18      	ldr	r3, [pc, #96]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ef8:	0e1b      	lsrs	r3, r3, #24
 8009efa:	f003 030f 	and.w	r3, r3, #15
 8009efe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009f00:	4b14      	ldr	r3, [pc, #80]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f06:	0f1b      	lsrs	r3, r3, #28
 8009f08:	f003 0307 	and.w	r3, r3, #7
 8009f0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	695b      	ldr	r3, [r3, #20]
 8009f12:	019a      	lsls	r2, r3, #6
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a1b      	ldr	r3, [r3, #32]
 8009f18:	041b      	lsls	r3, r3, #16
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	061b      	lsls	r3, r3, #24
 8009f20:	431a      	orrs	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	071b      	lsls	r3, r3, #28
 8009f26:	490b      	ldr	r1, [pc, #44]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009f2e:	4b09      	ldr	r3, [pc, #36]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a08      	ldr	r2, [pc, #32]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8009f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f3a:	f7fc fa5f 	bl	80063fc <HAL_GetTick>
 8009f3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009f40:	e00a      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009f42:	f7fc fa5b 	bl	80063fc <HAL_GetTick>
 8009f46:	4602      	mov	r2, r0
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	2b64      	cmp	r3, #100	; 0x64
 8009f4e:	d903      	bls.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e009      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8009f54:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009f58:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f64:	d1ed      	bne.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3720      	adds	r7, #32
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	40023800 	.word	0x40023800

08009f74 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d101      	bne.n	8009f86 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e022      	b.n	8009fcc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d105      	bne.n	8009f9e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7fa fb8d 	bl	80046b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2203      	movs	r2, #3
 8009fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f814 	bl	8009fd4 <HAL_SD_InitCard>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e00a      	b.n	8009fcc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009fd4:	b5b0      	push	{r4, r5, r7, lr}
 8009fd6:	b08e      	sub	sp, #56	; 0x38
 8009fd8:	af04      	add	r7, sp, #16
 8009fda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009fec:	2300      	movs	r3, #0
 8009fee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009ff0:	2376      	movs	r3, #118	; 0x76
 8009ff2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681d      	ldr	r5, [r3, #0]
 8009ff8:	466c      	mov	r4, sp
 8009ffa:	f107 0314 	add.w	r3, r7, #20
 8009ffe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a002:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a006:	f107 0308 	add.w	r3, r7, #8
 800a00a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a00c:	4628      	mov	r0, r5
 800a00e:	f003 fcc5 	bl	800d99c <SDMMC_Init>
 800a012:	4603      	mov	r3, r0
 800a014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e03b      	b.n	800a09c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685a      	ldr	r2, [r3, #4]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a032:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4618      	mov	r0, r3
 800a03a:	f003 fcf9 	bl	800da30 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	685a      	ldr	r2, [r3, #4]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a04c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 ffca 	bl	800afe8 <SD_PowerON>
 800a054:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00b      	beq.n	800a074 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a068:	6a3b      	ldr	r3, [r7, #32]
 800a06a:	431a      	orrs	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e013      	b.n	800a09c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fee9 	bl	800ae4c <SD_InitCard>
 800a07a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a07c:	6a3b      	ldr	r3, [r7, #32]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00b      	beq.n	800a09a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	431a      	orrs	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3728      	adds	r7, #40	; 0x28
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bdb0      	pop	{r4, r5, r7, pc}

0800a0a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08c      	sub	sp, #48	; 0x30
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d107      	bne.n	800a0cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e0cc      	b.n	800a266 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	f040 80c5 	bne.w	800a264 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	441a      	add	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d907      	bls.n	800a0fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e0b3      	b.n	800a266 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2203      	movs	r2, #3
 800a102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2200      	movs	r2, #0
 800a10c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a11c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a122:	4a53      	ldr	r2, [pc, #332]	; (800a270 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a124:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	4a52      	ldr	r2, [pc, #328]	; (800a274 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800a12c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a132:	2200      	movs	r2, #0
 800a134:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3380      	adds	r3, #128	; 0x80
 800a140:	4619      	mov	r1, r3
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	025b      	lsls	r3, r3, #9
 800a148:	089b      	lsrs	r3, r3, #2
 800a14a:	f7fc ff75 	bl	8007038 <HAL_DMA_Start_IT>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d017      	beq.n	800a184 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a162:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a43      	ldr	r2, [pc, #268]	; (800a278 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800a16a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a170:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e070      	b.n	800a266 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f042 0208 	orr.w	r2, r2, #8
 800a192:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d002      	beq.n	800a1a2 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800a19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19e:	025b      	lsls	r3, r3, #9
 800a1a0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f003 fcd4 	bl	800db58 <SDMMC_CmdBlockLength>
 800a1b0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00f      	beq.n	800a1d8 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a2e      	ldr	r2, [pc, #184]	; (800a278 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800a1be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e046      	b.n	800a266 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1dc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	025b      	lsls	r3, r3, #9
 800a1e2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a1e4:	2390      	movs	r3, #144	; 0x90
 800a1e6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f107 0210 	add.w	r2, r7, #16
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f003 fc7e 	bl	800db00 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	2b01      	cmp	r3, #1
 800a208:	d90a      	bls.n	800a220 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2282      	movs	r2, #130	; 0x82
 800a20e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a216:	4618      	mov	r0, r3
 800a218:	f003 fce2 	bl	800dbe0 <SDMMC_CmdReadMultiBlock>
 800a21c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a21e:	e009      	b.n	800a234 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2281      	movs	r2, #129	; 0x81
 800a224:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a22c:	4618      	mov	r0, r3
 800a22e:	f003 fcb5 	bl	800db9c <SDMMC_CmdReadSingleBlock>
 800a232:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a236:	2b00      	cmp	r3, #0
 800a238:	d012      	beq.n	800a260 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a0e      	ldr	r2, [pc, #56]	; (800a278 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800a240:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a248:	431a      	orrs	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e002      	b.n	800a266 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 800a260:	2300      	movs	r3, #0
 800a262:	e000      	b.n	800a266 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 800a264:	2302      	movs	r3, #2
  }
}
 800a266:	4618      	mov	r0, r3
 800a268:	3730      	adds	r7, #48	; 0x30
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	0800ac5b 	.word	0x0800ac5b
 800a274:	0800accd 	.word	0x0800accd
 800a278:	004005ff 	.word	0x004005ff

0800a27c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b08c      	sub	sp, #48	; 0x30
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d107      	bne.n	800a2a4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a298:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e0cf      	b.n	800a444 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	f040 80c8 	bne.w	800a442 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a2b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	441a      	add	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d907      	bls.n	800a2d6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e0b6      	b.n	800a444 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2203      	movs	r2, #3
 800a2da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f042 021a 	orr.w	r2, r2, #26
 800a2f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fa:	4a54      	ldr	r2, [pc, #336]	; (800a44c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a2fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a302:	4a53      	ldr	r2, [pc, #332]	; (800a450 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a304:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a30a:	2200      	movs	r2, #0
 800a30c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a312:	2b01      	cmp	r3, #1
 800a314:	d002      	beq.n	800a31c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	025b      	lsls	r3, r3, #9
 800a31a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a324:	4618      	mov	r0, r3
 800a326:	f003 fc17 	bl	800db58 <SDMMC_CmdBlockLength>
 800a32a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00f      	beq.n	800a352 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a47      	ldr	r2, [pc, #284]	; (800a454 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800a338:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a340:	431a      	orrs	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2201      	movs	r2, #1
 800a34a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e078      	b.n	800a444 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d90a      	bls.n	800a36e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	22a0      	movs	r2, #160	; 0xa0
 800a35c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a364:	4618      	mov	r0, r3
 800a366:	f003 fc7f 	bl	800dc68 <SDMMC_CmdWriteMultiBlock>
 800a36a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a36c:	e009      	b.n	800a382 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2290      	movs	r2, #144	; 0x90
 800a372:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a37a:	4618      	mov	r0, r3
 800a37c:	f003 fc52 	bl	800dc24 <SDMMC_CmdWriteSingleBlock>
 800a380:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a384:	2b00      	cmp	r3, #0
 800a386:	d012      	beq.n	800a3ae <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a31      	ldr	r2, [pc, #196]	; (800a454 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800a38e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a396:	431a      	orrs	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e04a      	b.n	800a444 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f042 0208 	orr.w	r2, r2, #8
 800a3bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a3c2:	68b9      	ldr	r1, [r7, #8]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3380      	adds	r3, #128	; 0x80
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	025b      	lsls	r3, r3, #9
 800a3d0:	089b      	lsrs	r3, r3, #2
 800a3d2:	f7fc fe31 	bl	8007038 <HAL_DMA_Start_IT>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d01a      	beq.n	800a412 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f022 021a 	bic.w	r2, r2, #26
 800a3ea:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a18      	ldr	r2, [pc, #96]	; (800a454 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800a3f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e018      	b.n	800a444 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a412:	f04f 33ff 	mov.w	r3, #4294967295
 800a416:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	025b      	lsls	r3, r3, #9
 800a41c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a41e:	2390      	movs	r3, #144	; 0x90
 800a420:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a422:	2300      	movs	r3, #0
 800a424:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a426:	2300      	movs	r3, #0
 800a428:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a42a:	2301      	movs	r3, #1
 800a42c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f107 0210 	add.w	r2, r7, #16
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f003 fb61 	bl	800db00 <SDMMC_ConfigData>

      return HAL_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	e000      	b.n	800a444 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800a442:	2302      	movs	r3, #2
  }
}
 800a444:	4618      	mov	r0, r3
 800a446:	3730      	adds	r7, #48	; 0x30
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	0800ac31 	.word	0x0800ac31
 800a450:	0800accd 	.word	0x0800accd
 800a454:	004005ff 	.word	0x004005ff

0800a458 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a464:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a46c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d008      	beq.n	800a486 <HAL_SD_IRQHandler+0x2e>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f003 0308 	and.w	r3, r3, #8
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 ffc8 	bl	800b414 <SD_Read_IT>
 800a484:	e153      	b.n	800a72e <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a48c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a490:	2b00      	cmp	r3, #0
 800a492:	f000 808d 	beq.w	800a5b0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a49e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	4ba3      	ldr	r3, [pc, #652]	; (800a738 <HAL_SD_IRQHandler+0x2e0>)
 800a4ac:	400b      	ands	r3, r1
 800a4ae:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f022 0201 	bic.w	r2, r2, #1
 800a4be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f003 0308 	and.w	r3, r3, #8
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d039      	beq.n	800a53e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f003 0302 	and.w	r3, r3, #2
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d104      	bne.n	800a4de <HAL_SD_IRQHandler+0x86>
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f003 0320 	and.w	r3, r3, #32
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d011      	beq.n	800a502 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f003 fbe2 	bl	800dcac <SDMMC_CmdStopTransfer>
 800a4e8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d008      	beq.n	800a502 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	431a      	orrs	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f921 	bl	800a744 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f240 523a 	movw	r2, #1338	; 0x53a
 800a50a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b00      	cmp	r3, #0
 800a522:	d104      	bne.n	800a52e <HAL_SD_IRQHandler+0xd6>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d003      	beq.n	800a536 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f005 fb64 	bl	800fbfc <HAL_SD_RxCpltCallback>
 800a534:	e0fb      	b.n	800a72e <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f005 fb56 	bl	800fbe8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a53c:	e0f7      	b.n	800a72e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 80f2 	beq.w	800a72e <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f003 0320 	and.w	r3, r3, #32
 800a550:	2b00      	cmp	r3, #0
 800a552:	d011      	beq.n	800a578 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4618      	mov	r0, r3
 800a55a:	f003 fba7 	bl	800dcac <SDMMC_CmdStopTransfer>
 800a55e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d008      	beq.n	800a578 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	431a      	orrs	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f8e6 	bl	800a744 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f040 80d5 	bne.w	800a72e <HAL_SD_IRQHandler+0x2d6>
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f003 0302 	and.w	r3, r3, #2
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f040 80cf 	bne.w	800a72e <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f022 0208 	bic.w	r2, r2, #8
 800a59e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f005 fb1d 	bl	800fbe8 <HAL_SD_TxCpltCallback>
}
 800a5ae:	e0be      	b.n	800a72e <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d008      	beq.n	800a5d0 <HAL_SD_IRQHandler+0x178>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f003 0308 	and.w	r3, r3, #8
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d003      	beq.n	800a5d0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 ff74 	bl	800b4b6 <SD_Write_IT>
 800a5ce:	e0ae      	b.n	800a72e <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5d6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 80a7 	beq.w	800a72e <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e6:	f003 0302 	and.w	r3, r3, #2
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d005      	beq.n	800a5fa <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f2:	f043 0202 	orr.w	r2, r3, #2
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a600:	f003 0308 	and.w	r3, r3, #8
 800a604:	2b00      	cmp	r3, #0
 800a606:	d005      	beq.n	800a614 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60c:	f043 0208 	orr.w	r2, r3, #8
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a61a:	f003 0320 	and.w	r3, r3, #32
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d005      	beq.n	800a62e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a626:	f043 0220 	orr.w	r2, r3, #32
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a634:	f003 0310 	and.w	r3, r3, #16
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d005      	beq.n	800a648 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a640:	f043 0210 	orr.w	r2, r3, #16
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f240 523a 	movw	r2, #1338	; 0x53a
 800a650:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a660:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4618      	mov	r0, r3
 800a668:	f003 fb20 	bl	800dcac <SDMMC_CmdStopTransfer>
 800a66c:	4602      	mov	r2, r0
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a672:	431a      	orrs	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f003 0308 	and.w	r3, r3, #8
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00a      	beq.n	800a698 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 f857 	bl	800a744 <HAL_SD_ErrorCallback>
}
 800a696:	e04a      	b.n	800a72e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d045      	beq.n	800a72e <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f003 0310 	and.w	r3, r3, #16
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d104      	bne.n	800a6b6 <HAL_SD_IRQHandler+0x25e>
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f003 0320 	and.w	r3, r3, #32
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d011      	beq.n	800a6da <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ba:	4a20      	ldr	r2, [pc, #128]	; (800a73c <HAL_SD_IRQHandler+0x2e4>)
 800a6bc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fc fd88 	bl	80071d8 <HAL_DMA_Abort_IT>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d02f      	beq.n	800a72e <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f000 fb4c 	bl	800ad70 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a6d8:	e029      	b.n	800a72e <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d104      	bne.n	800a6ee <HAL_SD_IRQHandler+0x296>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f003 0302 	and.w	r3, r3, #2
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d011      	beq.n	800a712 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f2:	4a13      	ldr	r2, [pc, #76]	; (800a740 <HAL_SD_IRQHandler+0x2e8>)
 800a6f4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fc fd6c 	bl	80071d8 <HAL_DMA_Abort_IT>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d013      	beq.n	800a72e <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 fb67 	bl	800adde <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a710:	e00d      	b.n	800a72e <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f005 fa54 	bl	800fbd4 <HAL_SD_AbortCallback>
}
 800a72c:	e7ff      	b.n	800a72e <HAL_SD_IRQHandler+0x2d6>
 800a72e:	bf00      	nop
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	ffff3ec5 	.word	0xffff3ec5
 800a73c:	0800ad71 	.word	0x0800ad71
 800a740:	0800addf 	.word	0x0800addf

0800a744 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
 800a760:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a766:	0f9b      	lsrs	r3, r3, #30
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a772:	0e9b      	lsrs	r3, r3, #26
 800a774:	b2db      	uxtb	r3, r3
 800a776:	f003 030f 	and.w	r3, r3, #15
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a784:	0e1b      	lsrs	r3, r3, #24
 800a786:	b2db      	uxtb	r3, r3
 800a788:	f003 0303 	and.w	r3, r3, #3
 800a78c:	b2da      	uxtb	r2, r3
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a796:	0c1b      	lsrs	r3, r3, #16
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7a2:	0a1b      	lsrs	r3, r3, #8
 800a7a4:	b2da      	uxtb	r2, r3
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7b8:	0d1b      	lsrs	r3, r3, #20
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7c4:	0c1b      	lsrs	r3, r3, #16
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	f003 030f 	and.w	r3, r3, #15
 800a7cc:	b2da      	uxtb	r2, r3
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7d6:	0bdb      	lsrs	r3, r3, #15
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	b2da      	uxtb	r2, r3
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7e8:	0b9b      	lsrs	r3, r3, #14
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7fa:	0b5b      	lsrs	r3, r3, #13
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	f003 0301 	and.w	r3, r3, #1
 800a802:	b2da      	uxtb	r2, r3
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a80c:	0b1b      	lsrs	r3, r3, #12
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	b2da      	uxtb	r2, r3
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	2200      	movs	r2, #0
 800a81e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a824:	2b00      	cmp	r3, #0
 800a826:	d163      	bne.n	800a8f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a82c:	009a      	lsls	r2, r3, #2
 800a82e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a832:	4013      	ands	r3, r2
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a838:	0f92      	lsrs	r2, r2, #30
 800a83a:	431a      	orrs	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a844:	0edb      	lsrs	r3, r3, #27
 800a846:	b2db      	uxtb	r3, r3
 800a848:	f003 0307 	and.w	r3, r3, #7
 800a84c:	b2da      	uxtb	r2, r3
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a856:	0e1b      	lsrs	r3, r3, #24
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	f003 0307 	and.w	r3, r3, #7
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a868:	0d5b      	lsrs	r3, r3, #21
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	f003 0307 	and.w	r3, r3, #7
 800a870:	b2da      	uxtb	r2, r3
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a87a:	0c9b      	lsrs	r3, r3, #18
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	f003 0307 	and.w	r3, r3, #7
 800a882:	b2da      	uxtb	r2, r3
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a88c:	0bdb      	lsrs	r3, r3, #15
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	f003 0307 	and.w	r3, r3, #7
 800a894:	b2da      	uxtb	r2, r3
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	1c5a      	adds	r2, r3, #1
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	7e1b      	ldrb	r3, [r3, #24]
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	f003 0307 	and.w	r3, r3, #7
 800a8ae:	3302      	adds	r3, #2
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a8ba:	fb02 f203 	mul.w	r2, r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	7a1b      	ldrb	r3, [r3, #8]
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	f003 030f 	and.w	r3, r3, #15
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	409a      	lsls	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a8dc:	0a52      	lsrs	r2, r2, #9
 800a8de:	fb02 f203 	mul.w	r2, r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8ec:	661a      	str	r2, [r3, #96]	; 0x60
 800a8ee:	e031      	b.n	800a954 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d11d      	bne.n	800a934 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8fc:	041b      	lsls	r3, r3, #16
 800a8fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a906:	0c1b      	lsrs	r3, r3, #16
 800a908:	431a      	orrs	r2, r3
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	3301      	adds	r3, #1
 800a914:	029a      	lsls	r2, r3, #10
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a928:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	661a      	str	r2, [r3, #96]	; 0x60
 800a932:	e00f      	b.n	800a954 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a58      	ldr	r2, [pc, #352]	; (800aa9c <HAL_SD_GetCardCSD+0x344>)
 800a93a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a940:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e09d      	b.n	800aa90 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a958:	0b9b      	lsrs	r3, r3, #14
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	b2da      	uxtb	r2, r3
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a96a:	09db      	lsrs	r3, r3, #7
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a972:	b2da      	uxtb	r2, r3
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a982:	b2da      	uxtb	r2, r3
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a98c:	0fdb      	lsrs	r3, r3, #31
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a998:	0f5b      	lsrs	r3, r3, #29
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	f003 0303 	and.w	r3, r3, #3
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9aa:	0e9b      	lsrs	r3, r3, #26
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 0307 	and.w	r3, r3, #7
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9bc:	0d9b      	lsrs	r3, r3, #22
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	f003 030f 	and.w	r3, r3, #15
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ce:	0d5b      	lsrs	r3, r3, #21
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	f003 0301 	and.w	r3, r3, #1
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ea:	0c1b      	lsrs	r3, r3, #16
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	f003 0301 	and.w	r3, r3, #1
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fe:	0bdb      	lsrs	r3, r3, #15
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	b2da      	uxtb	r2, r3
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa12:	0b9b      	lsrs	r3, r3, #14
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	b2da      	uxtb	r2, r3
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa26:	0b5b      	lsrs	r3, r3, #13
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	f003 0301 	and.w	r3, r3, #1
 800aa2e:	b2da      	uxtb	r2, r3
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa3a:	0b1b      	lsrs	r3, r3, #12
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	f003 0301 	and.w	r3, r3, #1
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa4e:	0a9b      	lsrs	r3, r3, #10
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	f003 0303 	and.w	r3, r3, #3
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa62:	0a1b      	lsrs	r3, r3, #8
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	f003 0303 	and.w	r3, r3, #3
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa76:	085b      	lsrs	r3, r3, #1
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	370c      	adds	r7, #12
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr
 800aa9c:	004005ff 	.word	0x004005ff

0800aaa0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aaf8:	b5b0      	push	{r4, r5, r7, lr}
 800aafa:	b08e      	sub	sp, #56	; 0x38
 800aafc:	af04      	add	r7, sp, #16
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2203      	movs	r2, #3
 800ab06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d02e      	beq.n	800ab70 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab18:	d106      	bne.n	800ab28 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	639a      	str	r2, [r3, #56]	; 0x38
 800ab26:	e029      	b.n	800ab7c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab2e:	d10a      	bne.n	800ab46 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fb0f 	bl	800b154 <SD_WideBus_Enable>
 800ab36:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3e:	431a      	orrs	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	639a      	str	r2, [r3, #56]	; 0x38
 800ab44:	e01a      	b.n	800ab7c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10a      	bne.n	800ab62 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fb4c 	bl	800b1ea <SD_WideBus_Disable>
 800ab52:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	431a      	orrs	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	639a      	str	r2, [r3, #56]	; 0x38
 800ab60:	e00c      	b.n	800ab7c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	639a      	str	r2, [r3, #56]	; 0x38
 800ab6e:	e005      	b.n	800ab7c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d009      	beq.n	800ab98 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a18      	ldr	r2, [pc, #96]	; (800abec <HAL_SD_ConfigWideBusOperation+0xf4>)
 800ab8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e024      	b.n	800abe2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	699b      	ldr	r3, [r3, #24]
 800abb8:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681d      	ldr	r5, [r3, #0]
 800abbe:	466c      	mov	r4, sp
 800abc0:	f107 0318 	add.w	r3, r7, #24
 800abc4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800abc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800abcc:	f107 030c 	add.w	r3, r7, #12
 800abd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abd2:	4628      	mov	r0, r5
 800abd4:	f002 fee2 	bl	800d99c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3728      	adds	r7, #40	; 0x28
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bdb0      	pop	{r4, r5, r7, pc}
 800abea:	bf00      	nop
 800abec:	004005ff 	.word	0x004005ff

0800abf0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800abfc:	f107 030c 	add.w	r3, r7, #12
 800ac00:	4619      	mov	r1, r3
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 fa7e 	bl	800b104 <SD_SendStatus>
 800ac08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d005      	beq.n	800ac1c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	431a      	orrs	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	0a5b      	lsrs	r3, r3, #9
 800ac20:	f003 030f 	and.w	r3, r3, #15
 800ac24:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ac26:	693b      	ldr	r3, [r7, #16]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ac4e:	bf00      	nop
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac66:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac6c:	2b82      	cmp	r3, #130	; 0x82
 800ac6e:	d111      	bne.n	800ac94 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f003 f819 	bl	800dcac <SDMMC_CmdStopTransfer>
 800ac7a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d008      	beq.n	800ac94 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f7ff fd58 	bl	800a744 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f022 0208 	bic.w	r2, r2, #8
 800aca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f240 523a 	movw	r2, #1338	; 0x53a
 800acac:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2201      	movs	r2, #1
 800acb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f004 ff9d 	bl	800fbfc <HAL_SD_RxCpltCallback>
#endif
}
 800acc2:	bf00      	nop
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
	...

0800accc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7fc fc28 	bl	8007530 <HAL_DMA_GetError>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b02      	cmp	r3, #2
 800ace4:	d03e      	beq.n	800ad64 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acf4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d002      	beq.n	800ad02 <SD_DMAError+0x36>
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d12d      	bne.n	800ad5e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a19      	ldr	r2, [pc, #100]	; (800ad6c <SD_DMAError+0xa0>)
 800ad08:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ad18:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ad26:	6978      	ldr	r0, [r7, #20]
 800ad28:	f7ff ff62 	bl	800abf0 <HAL_SD_GetCardState>
 800ad2c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2b06      	cmp	r3, #6
 800ad32:	d002      	beq.n	800ad3a <SD_DMAError+0x6e>
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2b05      	cmp	r3, #5
 800ad38:	d10a      	bne.n	800ad50 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f002 ffb4 	bl	800dcac <SDMMC_CmdStopTransfer>
 800ad44:	4602      	mov	r2, r0
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4a:	431a      	orrs	r2, r3
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ad5e:	6978      	ldr	r0, [r7, #20]
 800ad60:	f7ff fcf0 	bl	800a744 <HAL_SD_ErrorCallback>
#endif
  }
}
 800ad64:	bf00      	nop
 800ad66:	3718      	adds	r7, #24
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	004005ff 	.word	0x004005ff

0800ad70 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad7c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f240 523a 	movw	r2, #1338	; 0x53a
 800ad86:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f7ff ff31 	bl	800abf0 <HAL_SD_GetCardState>
 800ad8e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2b06      	cmp	r3, #6
 800ada2:	d002      	beq.n	800adaa <SD_DMATxAbort+0x3a>
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2b05      	cmp	r3, #5
 800ada8:	d10a      	bne.n	800adc0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4618      	mov	r0, r3
 800adb0:	f002 ff7c 	bl	800dcac <SDMMC_CmdStopTransfer>
 800adb4:	4602      	mov	r2, r0
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adba:	431a      	orrs	r2, r3
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d103      	bne.n	800add0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f004 ff03 	bl	800fbd4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800adce:	e002      	b.n	800add6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800add0:	68f8      	ldr	r0, [r7, #12]
 800add2:	f7ff fcb7 	bl	800a744 <HAL_SD_ErrorCallback>
}
 800add6:	bf00      	nop
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b084      	sub	sp, #16
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adea:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f240 523a 	movw	r2, #1338	; 0x53a
 800adf4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f7ff fefa 	bl	800abf0 <HAL_SD_GetCardState>
 800adfc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2201      	movs	r2, #1
 800ae02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	2b06      	cmp	r3, #6
 800ae10:	d002      	beq.n	800ae18 <SD_DMARxAbort+0x3a>
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2b05      	cmp	r3, #5
 800ae16:	d10a      	bne.n	800ae2e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f002 ff45 	bl	800dcac <SDMMC_CmdStopTransfer>
 800ae22:	4602      	mov	r2, r0
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae28:	431a      	orrs	r2, r3
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d103      	bne.n	800ae3e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f004 fecc 	bl	800fbd4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ae3c:	e002      	b.n	800ae44 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7ff fc80 	bl	800a744 <HAL_SD_ErrorCallback>
}
 800ae44:	bf00      	nop
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ae4c:	b5b0      	push	{r4, r5, r7, lr}
 800ae4e:	b094      	sub	sp, #80	; 0x50
 800ae50:	af04      	add	r7, sp, #16
 800ae52:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ae54:	2301      	movs	r3, #1
 800ae56:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f002 fdf6 	bl	800da4e <SDMMC_GetPowerState>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d102      	bne.n	800ae6e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ae6c:	e0b7      	b.n	800afde <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae72:	2b03      	cmp	r3, #3
 800ae74:	d02f      	beq.n	800aed6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f003 f821 	bl	800dec2 <SDMMC_CmdSendCID>
 800ae80:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <SD_InitCard+0x40>
    {
      return errorstate;
 800ae88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae8a:	e0a8      	b.n	800afde <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2100      	movs	r1, #0
 800ae92:	4618      	mov	r0, r3
 800ae94:	f002 fe21 	bl	800dada <SDMMC_GetResponse>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2104      	movs	r1, #4
 800aea4:	4618      	mov	r0, r3
 800aea6:	f002 fe18 	bl	800dada <SDMMC_GetResponse>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2108      	movs	r1, #8
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f002 fe0f 	bl	800dada <SDMMC_GetResponse>
 800aebc:	4602      	mov	r2, r0
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	210c      	movs	r1, #12
 800aec8:	4618      	mov	r0, r3
 800aeca:	f002 fe06 	bl	800dada <SDMMC_GetResponse>
 800aece:	4602      	mov	r2, r0
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeda:	2b03      	cmp	r3, #3
 800aedc:	d00d      	beq.n	800aefa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f107 020e 	add.w	r2, r7, #14
 800aee6:	4611      	mov	r1, r2
 800aee8:	4618      	mov	r0, r3
 800aeea:	f003 f827 	bl	800df3c <SDMMC_CmdSetRelAdd>
 800aeee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d001      	beq.n	800aefa <SD_InitCard+0xae>
    {
      return errorstate;
 800aef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aef8:	e071      	b.n	800afde <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d036      	beq.n	800af70 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800af02:	89fb      	ldrh	r3, [r7, #14]
 800af04:	461a      	mov	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af12:	041b      	lsls	r3, r3, #16
 800af14:	4619      	mov	r1, r3
 800af16:	4610      	mov	r0, r2
 800af18:	f002 fff1 	bl	800defe <SDMMC_CmdSendCSD>
 800af1c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af20:	2b00      	cmp	r3, #0
 800af22:	d001      	beq.n	800af28 <SD_InitCard+0xdc>
    {
      return errorstate;
 800af24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af26:	e05a      	b.n	800afde <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2100      	movs	r1, #0
 800af2e:	4618      	mov	r0, r3
 800af30:	f002 fdd3 	bl	800dada <SDMMC_GetResponse>
 800af34:	4602      	mov	r2, r0
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2104      	movs	r1, #4
 800af40:	4618      	mov	r0, r3
 800af42:	f002 fdca 	bl	800dada <SDMMC_GetResponse>
 800af46:	4602      	mov	r2, r0
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2108      	movs	r1, #8
 800af52:	4618      	mov	r0, r3
 800af54:	f002 fdc1 	bl	800dada <SDMMC_GetResponse>
 800af58:	4602      	mov	r2, r0
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	210c      	movs	r1, #12
 800af64:	4618      	mov	r0, r3
 800af66:	f002 fdb8 	bl	800dada <SDMMC_GetResponse>
 800af6a:	4602      	mov	r2, r0
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2104      	movs	r1, #4
 800af76:	4618      	mov	r0, r3
 800af78:	f002 fdaf 	bl	800dada <SDMMC_GetResponse>
 800af7c:	4603      	mov	r3, r0
 800af7e:	0d1a      	lsrs	r2, r3, #20
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800af84:	f107 0310 	add.w	r3, r7, #16
 800af88:	4619      	mov	r1, r3
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7ff fbe4 	bl	800a758 <HAL_SD_GetCardCSD>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d002      	beq.n	800af9c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af9a:	e020      	b.n	800afde <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6819      	ldr	r1, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afa4:	041b      	lsls	r3, r3, #16
 800afa6:	f04f 0400 	mov.w	r4, #0
 800afaa:	461a      	mov	r2, r3
 800afac:	4623      	mov	r3, r4
 800afae:	4608      	mov	r0, r1
 800afb0:	f002 fe9e 	bl	800dcf0 <SDMMC_CmdSelDesel>
 800afb4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800afb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <SD_InitCard+0x174>
  {
    return errorstate;
 800afbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afbe:	e00e      	b.n	800afde <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681d      	ldr	r5, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	466c      	mov	r4, sp
 800afc8:	f103 0210 	add.w	r2, r3, #16
 800afcc:	ca07      	ldmia	r2, {r0, r1, r2}
 800afce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800afd2:	3304      	adds	r3, #4
 800afd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800afd6:	4628      	mov	r0, r5
 800afd8:	f002 fce0 	bl	800d99c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3740      	adds	r7, #64	; 0x40
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800afe8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b086      	sub	sp, #24
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aff0:	2300      	movs	r3, #0
 800aff2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aff4:	2300      	movs	r3, #0
 800aff6:	617b      	str	r3, [r7, #20]
 800aff8:	2300      	movs	r3, #0
 800affa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4618      	mov	r0, r3
 800b002:	f002 fe98 	bl	800dd36 <SDMMC_CmdGoIdleState>
 800b006:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d001      	beq.n	800b012 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	e072      	b.n	800b0f8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4618      	mov	r0, r3
 800b018:	f002 feab 	bl	800dd72 <SDMMC_CmdOperCond>
 800b01c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00d      	beq.n	800b040 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4618      	mov	r0, r3
 800b030:	f002 fe81 	bl	800dd36 <SDMMC_CmdGoIdleState>
 800b034:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d004      	beq.n	800b046 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	e05b      	b.n	800b0f8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d137      	bne.n	800b0be <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2100      	movs	r1, #0
 800b054:	4618      	mov	r0, r3
 800b056:	f002 feab 	bl	800ddb0 <SDMMC_CmdAppCommand>
 800b05a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d02d      	beq.n	800b0be <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b062:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b066:	e047      	b.n	800b0f8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2100      	movs	r1, #0
 800b06e:	4618      	mov	r0, r3
 800b070:	f002 fe9e 	bl	800ddb0 <SDMMC_CmdAppCommand>
 800b074:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d001      	beq.n	800b080 <SD_PowerON+0x98>
    {
      return errorstate;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	e03b      	b.n	800b0f8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	491e      	ldr	r1, [pc, #120]	; (800b100 <SD_PowerON+0x118>)
 800b086:	4618      	mov	r0, r3
 800b088:	f002 feb4 	bl	800ddf4 <SDMMC_CmdAppOperCommand>
 800b08c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b094:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b098:	e02e      	b.n	800b0f8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2100      	movs	r1, #0
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f002 fd1a 	bl	800dada <SDMMC_GetResponse>
 800b0a6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	0fdb      	lsrs	r3, r3, #31
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d101      	bne.n	800b0b4 <SD_PowerON+0xcc>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e000      	b.n	800b0b6 <SD_PowerON+0xce>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	613b      	str	r3, [r7, #16]

    count++;
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d802      	bhi.n	800b0ce <SD_PowerON+0xe6>
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d0cc      	beq.n	800b068 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d902      	bls.n	800b0de <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b0d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b0dc:	e00c      	b.n	800b0f8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d003      	beq.n	800b0f0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	645a      	str	r2, [r3, #68]	; 0x44
 800b0ee:	e002      	b.n	800b0f6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3718      	adds	r7, #24
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	c1100000 	.word	0xc1100000

0800b104 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d102      	bne.n	800b11a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b114:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b118:	e018      	b.n	800b14c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b122:	041b      	lsls	r3, r3, #16
 800b124:	4619      	mov	r1, r3
 800b126:	4610      	mov	r0, r2
 800b128:	f002 ff29 	bl	800df7e <SDMMC_CmdSendStatus>
 800b12c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d001      	beq.n	800b138 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	e009      	b.n	800b14c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2100      	movs	r1, #0
 800b13e:	4618      	mov	r0, r3
 800b140:	f002 fccb 	bl	800dada <SDMMC_GetResponse>
 800b144:	4602      	mov	r2, r0
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b15c:	2300      	movs	r3, #0
 800b15e:	60fb      	str	r3, [r7, #12]
 800b160:	2300      	movs	r3, #0
 800b162:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2100      	movs	r1, #0
 800b16a:	4618      	mov	r0, r3
 800b16c:	f002 fcb5 	bl	800dada <SDMMC_GetResponse>
 800b170:	4603      	mov	r3, r0
 800b172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b17a:	d102      	bne.n	800b182 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b17c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b180:	e02f      	b.n	800b1e2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b182:	f107 030c 	add.w	r3, r7, #12
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f879 	bl	800b280 <SD_FindSCR>
 800b18e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	e023      	b.n	800b1e2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d01c      	beq.n	800b1de <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ac:	041b      	lsls	r3, r3, #16
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	f002 fdfd 	bl	800ddb0 <SDMMC_CmdAppCommand>
 800b1b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	e00f      	b.n	800b1e2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2102      	movs	r1, #2
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f002 fe37 	bl	800de3c <SDMMC_CmdBusWidth>
 800b1ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d001      	beq.n	800b1da <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	e003      	b.n	800b1e2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	e001      	b.n	800b1e2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b1de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3718      	adds	r7, #24
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b086      	sub	sp, #24
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2100      	movs	r1, #0
 800b200:	4618      	mov	r0, r3
 800b202:	f002 fc6a 	bl	800dada <SDMMC_GetResponse>
 800b206:	4603      	mov	r3, r0
 800b208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b20c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b210:	d102      	bne.n	800b218 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b212:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b216:	e02f      	b.n	800b278 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b218:	f107 030c 	add.w	r3, r7, #12
 800b21c:	4619      	mov	r1, r3
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f82e 	bl	800b280 <SD_FindSCR>
 800b224:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d001      	beq.n	800b230 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	e023      	b.n	800b278 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d01c      	beq.n	800b274 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b242:	041b      	lsls	r3, r3, #16
 800b244:	4619      	mov	r1, r3
 800b246:	4610      	mov	r0, r2
 800b248:	f002 fdb2 	bl	800ddb0 <SDMMC_CmdAppCommand>
 800b24c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	e00f      	b.n	800b278 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2100      	movs	r1, #0
 800b25e:	4618      	mov	r0, r3
 800b260:	f002 fdec 	bl	800de3c <SDMMC_CmdBusWidth>
 800b264:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	e003      	b.n	800b278 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b270:	2300      	movs	r3, #0
 800b272:	e001      	b.n	800b278 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b274:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b280:	b590      	push	{r4, r7, lr}
 800b282:	b08f      	sub	sp, #60	; 0x3c
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b28a:	f7fb f8b7 	bl	80063fc <HAL_GetTick>
 800b28e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b294:	2300      	movs	r3, #0
 800b296:	60bb      	str	r3, [r7, #8]
 800b298:	2300      	movs	r3, #0
 800b29a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2108      	movs	r1, #8
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f002 fc56 	bl	800db58 <SDMMC_CmdBlockLength>
 800b2ac:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d001      	beq.n	800b2b8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	e0a9      	b.n	800b40c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2c0:	041b      	lsls	r3, r3, #16
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	f002 fd73 	bl	800ddb0 <SDMMC_CmdAppCommand>
 800b2ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d4:	e09a      	b.n	800b40c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2da:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b2dc:	2308      	movs	r3, #8
 800b2de:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b2e0:	2330      	movs	r3, #48	; 0x30
 800b2e2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f107 0210 	add.w	r2, r7, #16
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f002 fc00 	bl	800db00 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4618      	mov	r0, r3
 800b306:	f002 fdbb 	bl	800de80 <SDMMC_CmdSendSCR>
 800b30a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d022      	beq.n	800b358 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b314:	e07a      	b.n	800b40c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b31c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00e      	beq.n	800b342 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6819      	ldr	r1, [r3, #0]
 800b328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	f107 0208 	add.w	r2, r7, #8
 800b330:	18d4      	adds	r4, r2, r3
 800b332:	4608      	mov	r0, r1
 800b334:	f002 fb5e 	bl	800d9f4 <SDMMC_ReadFIFO>
 800b338:	4603      	mov	r3, r0
 800b33a:	6023      	str	r3, [r4, #0]
      index++;
 800b33c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b33e:	3301      	adds	r3, #1
 800b340:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b342:	f7fb f85b 	bl	80063fc <HAL_GetTick>
 800b346:	4602      	mov	r2, r0
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	1ad3      	subs	r3, r2, r3
 800b34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b350:	d102      	bne.n	800b358 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b352:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b356:	e059      	b.n	800b40c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b35e:	f240 432a 	movw	r3, #1066	; 0x42a
 800b362:	4013      	ands	r3, r2
 800b364:	2b00      	cmp	r3, #0
 800b366:	d0d6      	beq.n	800b316 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b36e:	f003 0308 	and.w	r3, r3, #8
 800b372:	2b00      	cmp	r3, #0
 800b374:	d005      	beq.n	800b382 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2208      	movs	r2, #8
 800b37c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b37e:	2308      	movs	r3, #8
 800b380:	e044      	b.n	800b40c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b388:	f003 0302 	and.w	r3, r3, #2
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d005      	beq.n	800b39c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2202      	movs	r2, #2
 800b396:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b398:	2302      	movs	r3, #2
 800b39a:	e037      	b.n	800b40c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a2:	f003 0320 	and.w	r3, r3, #32
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d005      	beq.n	800b3b6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2220      	movs	r2, #32
 800b3b0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b3b2:	2320      	movs	r3, #32
 800b3b4:	e02a      	b.n	800b40c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f240 523a 	movw	r2, #1338	; 0x53a
 800b3be:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	061a      	lsls	r2, r3, #24
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	021b      	lsls	r3, r3, #8
 800b3c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3cc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	0a1b      	lsrs	r3, r3, #8
 800b3d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b3d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	0e1b      	lsrs	r3, r3, #24
 800b3dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e0:	601a      	str	r2, [r3, #0]
    scr++;
 800b3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	061a      	lsls	r2, r3, #24
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	021b      	lsls	r3, r3, #8
 800b3f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3f4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	0a1b      	lsrs	r3, r3, #8
 800b3fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b3fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	0e1b      	lsrs	r3, r3, #24
 800b404:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b408:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	373c      	adds	r7, #60	; 0x3c
 800b410:	46bd      	mov	sp, r7
 800b412:	bd90      	pop	{r4, r7, pc}

0800b414 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b420:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b426:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d03f      	beq.n	800b4ae <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b42e:	2300      	movs	r3, #0
 800b430:	617b      	str	r3, [r7, #20]
 800b432:	e033      	b.n	800b49c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4618      	mov	r0, r3
 800b43a:	f002 fadb 	bl	800d9f4 <SDMMC_ReadFIFO>
 800b43e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	b2da      	uxtb	r2, r3
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	3301      	adds	r3, #1
 800b44c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	3b01      	subs	r3, #1
 800b452:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	0a1b      	lsrs	r3, r3, #8
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3301      	adds	r3, #1
 800b462:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	3b01      	subs	r3, #1
 800b468:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	0c1b      	lsrs	r3, r3, #16
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3301      	adds	r3, #1
 800b478:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	3b01      	subs	r3, #1
 800b47e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	0e1b      	lsrs	r3, r3, #24
 800b484:	b2da      	uxtb	r2, r3
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3301      	adds	r3, #1
 800b48e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	3b01      	subs	r3, #1
 800b494:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	3301      	adds	r3, #1
 800b49a:	617b      	str	r3, [r7, #20]
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	2b07      	cmp	r3, #7
 800b4a0:	d9c8      	bls.n	800b434 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b4ae:	bf00      	nop
 800b4b0:	3718      	adds	r7, #24
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b086      	sub	sp, #24
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a1b      	ldr	r3, [r3, #32]
 800b4c2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d043      	beq.n	800b558 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	617b      	str	r3, [r7, #20]
 800b4d4:	e037      	b.n	800b546 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	021a      	lsls	r2, r3, #8
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	041a      	lsls	r2, r3, #16
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	4313      	orrs	r3, r2
 800b50a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	3301      	adds	r3, #1
 800b510:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	3b01      	subs	r3, #1
 800b516:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	061a      	lsls	r2, r3, #24
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	4313      	orrs	r3, r2
 800b522:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	3301      	adds	r3, #1
 800b528:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	3b01      	subs	r3, #1
 800b52e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f107 0208 	add.w	r2, r7, #8
 800b538:	4611      	mov	r1, r2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f002 fa67 	bl	800da0e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	3301      	adds	r3, #1
 800b544:	617b      	str	r3, [r7, #20]
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2b07      	cmp	r3, #7
 800b54a:	d9c4      	bls.n	800b4d6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	68fa      	ldr	r2, [r7, #12]
 800b550:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	693a      	ldr	r2, [r7, #16]
 800b556:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b558:	bf00      	nop
 800b55a:	3718      	adds	r7, #24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d101      	bne.n	800b572 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	e084      	b.n	800b67c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	2b00      	cmp	r3, #0
 800b582:	d106      	bne.n	800b592 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7f9 f97d 	bl	800488c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2202      	movs	r2, #2
 800b596:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5a8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b5b2:	d902      	bls.n	800b5ba <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	60fb      	str	r3, [r7, #12]
 800b5b8:	e002      	b.n	800b5c0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b5ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b5c8:	d007      	beq.n	800b5da <HAL_SPI_Init+0x7a>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b5d2:	d002      	beq.n	800b5da <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10b      	bne.n	800b5fa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b5ea:	d903      	bls.n	800b5f4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2202      	movs	r2, #2
 800b5f0:	631a      	str	r2, [r3, #48]	; 0x30
 800b5f2:	e002      	b.n	800b5fa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	685a      	ldr	r2, [r3, #4]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	431a      	orrs	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	431a      	orrs	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	695b      	ldr	r3, [r3, #20]
 800b60e:	431a      	orrs	r2, r3
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	699b      	ldr	r3, [r3, #24]
 800b614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b618:	431a      	orrs	r2, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	69db      	ldr	r3, [r3, #28]
 800b61e:	431a      	orrs	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a1b      	ldr	r3, [r3, #32]
 800b624:	ea42 0103 	orr.w	r1, r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	430a      	orrs	r2, r1
 800b632:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	699b      	ldr	r3, [r3, #24]
 800b638:	0c1b      	lsrs	r3, r3, #16
 800b63a:	f003 0204 	and.w	r2, r3, #4
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b642:	431a      	orrs	r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b648:	431a      	orrs	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	ea42 0103 	orr.w	r1, r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	430a      	orrs	r2, r1
 800b65a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	69da      	ldr	r2, [r3, #28]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b66a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	4613      	mov	r3, r2
 800b690:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d110      	bne.n	800b6c0 <HAL_SPI_Receive_IT+0x3c>
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6a6:	d10b      	bne.n	800b6c0 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2204      	movs	r2, #4
 800b6ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800b6b0:	88fb      	ldrh	r3, [r7, #6]
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	68b9      	ldr	r1, [r7, #8]
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f000 f88c 	bl	800b7d4 <HAL_SPI_TransmitReceive_IT>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	e081      	b.n	800b7c4 <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d101      	bne.n	800b6ce <HAL_SPI_Receive_IT+0x4a>
 800b6ca:	2302      	movs	r3, #2
 800b6cc:	e07a      	b.n	800b7c4 <HAL_SPI_Receive_IT+0x140>
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d002      	beq.n	800b6e8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800b6e2:	2302      	movs	r3, #2
 800b6e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b6e6:	e068      	b.n	800b7ba <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <HAL_SPI_Receive_IT+0x70>
 800b6ee:	88fb      	ldrh	r3, [r7, #6]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d102      	bne.n	800b6fa <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b6f8:	e05f      	b.n	800b7ba <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2204      	movs	r2, #4
 800b6fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	68ba      	ldr	r2, [r7, #8]
 800b70c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	88fa      	ldrh	r2, [r7, #6]
 800b712:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	88fa      	ldrh	r2, [r7, #6]
 800b71a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2200      	movs	r2, #0
 800b728:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2200      	movs	r2, #0
 800b734:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b73e:	d90b      	bls.n	800b758 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b74e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	4a1e      	ldr	r2, [pc, #120]	; (800b7cc <HAL_SPI_Receive_IT+0x148>)
 800b754:	64da      	str	r2, [r3, #76]	; 0x4c
 800b756:	e00a      	b.n	800b76e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b766:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	4a19      	ldr	r2, [pc, #100]	; (800b7d0 <HAL_SPI_Receive_IT+0x14c>)
 800b76c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b776:	d107      	bne.n	800b788 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b786:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	685a      	ldr	r2, [r3, #4]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800b796:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a2:	2b40      	cmp	r3, #64	; 0x40
 800b7a4:	d008      	beq.n	800b7b8 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	e000      	b.n	800b7ba <HAL_SPI_Receive_IT+0x136>
  }

error :
 800b7b8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b7c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3718      	adds	r7, #24
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	0800bded 	.word	0x0800bded
 800b7d0:	0800bd9d 	.word	0x0800bd9d

0800b7d4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b087      	sub	sp, #28
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
 800b7e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d101      	bne.n	800b7f4 <HAL_SPI_TransmitReceive_IT+0x20>
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	e091      	b.n	800b918 <HAL_SPI_TransmitReceive_IT+0x144>
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b802:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b80a:	7dbb      	ldrb	r3, [r7, #22]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d00d      	beq.n	800b82c <HAL_SPI_TransmitReceive_IT+0x58>
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b816:	d106      	bne.n	800b826 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d102      	bne.n	800b826 <HAL_SPI_TransmitReceive_IT+0x52>
 800b820:	7dbb      	ldrb	r3, [r7, #22]
 800b822:	2b04      	cmp	r3, #4
 800b824:	d002      	beq.n	800b82c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800b826:	2302      	movs	r3, #2
 800b828:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b82a:	e070      	b.n	800b90e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d005      	beq.n	800b83e <HAL_SPI_TransmitReceive_IT+0x6a>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d002      	beq.n	800b83e <HAL_SPI_TransmitReceive_IT+0x6a>
 800b838:	887b      	ldrh	r3, [r7, #2]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d102      	bne.n	800b844 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b842:	e064      	b.n	800b90e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	2b04      	cmp	r3, #4
 800b84e:	d003      	beq.n	800b858 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2205      	movs	r2, #5
 800b854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	887a      	ldrh	r2, [r7, #2]
 800b868:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	887a      	ldrh	r2, [r7, #2]
 800b86e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	887a      	ldrh	r2, [r7, #2]
 800b87a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	887a      	ldrh	r2, [r7, #2]
 800b882:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b88e:	d906      	bls.n	800b89e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	4a24      	ldr	r2, [pc, #144]	; (800b924 <HAL_SPI_TransmitReceive_IT+0x150>)
 800b894:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	4a23      	ldr	r2, [pc, #140]	; (800b928 <HAL_SPI_TransmitReceive_IT+0x154>)
 800b89a:	651a      	str	r2, [r3, #80]	; 0x50
 800b89c:	e005      	b.n	800b8aa <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	4a22      	ldr	r2, [pc, #136]	; (800b92c <HAL_SPI_TransmitReceive_IT+0x158>)
 800b8a2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	4a22      	ldr	r2, [pc, #136]	; (800b930 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800b8a8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b8b2:	d802      	bhi.n	800b8ba <HAL_SPI_TransmitReceive_IT+0xe6>
 800b8b4:	887b      	ldrh	r3, [r7, #2]
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d908      	bls.n	800b8cc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	685a      	ldr	r2, [r3, #4]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b8c8:	605a      	str	r2, [r3, #4]
 800b8ca:	e007      	b.n	800b8dc <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b8da:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800b8ea:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f6:	2b40      	cmp	r3, #64	; 0x40
 800b8f8:	d008      	beq.n	800b90c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b908:	601a      	str	r2, [r3, #0]
 800b90a:	e000      	b.n	800b90e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800b90c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b916:	7dfb      	ldrb	r3, [r7, #23]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	371c      	adds	r7, #28
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	0800bcd7 	.word	0x0800bcd7
 800b928:	0800bd3d 	.word	0x0800bd3d
 800b92c:	0800bb87 	.word	0x0800bb87
 800b930:	0800bc45 	.word	0x0800bc45

0800b934 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b088      	sub	sp, #32
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	689b      	ldr	r3, [r3, #8]
 800b94a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	099b      	lsrs	r3, r3, #6
 800b950:	f003 0301 	and.w	r3, r3, #1
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10f      	bne.n	800b978 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d00a      	beq.n	800b978 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	099b      	lsrs	r3, r3, #6
 800b966:	f003 0301 	and.w	r3, r3, #1
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d004      	beq.n	800b978 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	4798      	blx	r3
    return;
 800b976:	e0d8      	b.n	800bb2a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	085b      	lsrs	r3, r3, #1
 800b97c:	f003 0301 	and.w	r3, r3, #1
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00a      	beq.n	800b99a <HAL_SPI_IRQHandler+0x66>
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	09db      	lsrs	r3, r3, #7
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d004      	beq.n	800b99a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	4798      	blx	r3
    return;
 800b998:	e0c7      	b.n	800bb2a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	095b      	lsrs	r3, r3, #5
 800b99e:	f003 0301 	and.w	r3, r3, #1
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d10c      	bne.n	800b9c0 <HAL_SPI_IRQHandler+0x8c>
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	099b      	lsrs	r3, r3, #6
 800b9aa:	f003 0301 	and.w	r3, r3, #1
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d106      	bne.n	800b9c0 <HAL_SPI_IRQHandler+0x8c>
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	0a1b      	lsrs	r3, r3, #8
 800b9b6:	f003 0301 	and.w	r3, r3, #1
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f000 80b5 	beq.w	800bb2a <HAL_SPI_IRQHandler+0x1f6>
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	095b      	lsrs	r3, r3, #5
 800b9c4:	f003 0301 	and.w	r3, r3, #1
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f000 80ae 	beq.w	800bb2a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	099b      	lsrs	r3, r3, #6
 800b9d2:	f003 0301 	and.w	r3, r3, #1
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d023      	beq.n	800ba22 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d011      	beq.n	800ba0a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9ea:	f043 0204 	orr.w	r2, r3, #4
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	617b      	str	r3, [r7, #20]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	617b      	str	r3, [r7, #20]
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	e00b      	b.n	800ba22 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	613b      	str	r3, [r7, #16]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	613b      	str	r3, [r7, #16]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	613b      	str	r3, [r7, #16]
 800ba1e:	693b      	ldr	r3, [r7, #16]
        return;
 800ba20:	e083      	b.n	800bb2a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	095b      	lsrs	r3, r3, #5
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d014      	beq.n	800ba58 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba32:	f043 0201 	orr.w	r2, r3, #1
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	60fb      	str	r3, [r7, #12]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	689b      	ldr	r3, [r3, #8]
 800ba44:	60fb      	str	r3, [r7, #12]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba54:	601a      	str	r2, [r3, #0]
 800ba56:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	0a1b      	lsrs	r3, r3, #8
 800ba5c:	f003 0301 	and.w	r3, r3, #1
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d00c      	beq.n	800ba7e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba68:	f043 0208 	orr.w	r2, r3, #8
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ba70:	2300      	movs	r3, #0
 800ba72:	60bb      	str	r3, [r7, #8]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	60bb      	str	r3, [r7, #8]
 800ba7c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d050      	beq.n	800bb28 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ba94:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	f003 0302 	and.w	r3, r3, #2
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d104      	bne.n	800bab2 <HAL_SPI_IRQHandler+0x17e>
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d034      	beq.n	800bb1c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	685a      	ldr	r2, [r3, #4]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f022 0203 	bic.w	r2, r2, #3
 800bac0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d011      	beq.n	800baee <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bace:	4a18      	ldr	r2, [pc, #96]	; (800bb30 <HAL_SPI_IRQHandler+0x1fc>)
 800bad0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fb fb7e 	bl	80071d8 <HAL_DMA_Abort_IT>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d005      	beq.n	800baee <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bae6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d016      	beq.n	800bb24 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bafa:	4a0d      	ldr	r2, [pc, #52]	; (800bb30 <HAL_SPI_IRQHandler+0x1fc>)
 800bafc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fb fb68 	bl	80071d8 <HAL_DMA_Abort_IT>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00a      	beq.n	800bb24 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800bb1a:	e003      	b.n	800bb24 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f813 	bl	800bb48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bb22:	e000      	b.n	800bb26 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bb24:	bf00      	nop
    return;
 800bb26:	bf00      	nop
 800bb28:	bf00      	nop
  }
}
 800bb2a:	3720      	adds	r7, #32
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	0800bb5d 	.word	0x0800bb5d

0800bb34 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800bb3c:	bf00      	nop
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb68:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2200      	movs	r2, #0
 800bb76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f7ff ffe5 	bl	800bb48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bb7e:	bf00      	nop
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b082      	sub	sp, #8
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d923      	bls.n	800bbe2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68da      	ldr	r2, [r3, #12]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba4:	b292      	uxth	r2, r2
 800bba6:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbac:	1c9a      	adds	r2, r3, #2
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	3b02      	subs	r3, #2
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d11f      	bne.n	800bc10 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	685a      	ldr	r2, [r3, #4]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bbde:	605a      	str	r2, [r3, #4]
 800bbe0:	e016      	b.n	800bc10 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f103 020c 	add.w	r2, r3, #12
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbee:	7812      	ldrb	r2, [r2, #0]
 800bbf0:	b2d2      	uxtb	r2, r2
 800bbf2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	3b01      	subs	r3, #1
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10f      	bne.n	800bc3c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	685a      	ldr	r2, [r3, #4]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bc2a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d102      	bne.n	800bc3c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 fa73 	bl	800c122 <SPI_CloseRxTx_ISR>
    }
  }
}
 800bc3c:	bf00      	nop
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d912      	bls.n	800bc7c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc5a:	881a      	ldrh	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc66:	1c9a      	adds	r2, r3, #2
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	3b02      	subs	r3, #2
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bc7a:	e012      	b.n	800bca2 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	330c      	adds	r3, #12
 800bc86:	7812      	ldrb	r2, [r2, #0]
 800bc88:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc8e:	1c5a      	adds	r2, r3, #1
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	3b01      	subs	r3, #1
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d110      	bne.n	800bcce <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	685a      	ldr	r2, [r3, #4]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bcba:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d102      	bne.n	800bcce <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 fa2a 	bl	800c122 <SPI_CloseRxTx_ISR>
    }
  }
}
 800bcce:	bf00      	nop
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b082      	sub	sp, #8
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68da      	ldr	r2, [r3, #12]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce8:	b292      	uxth	r2, r2
 800bcea:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf0:	1c9a      	adds	r2, r3, #2
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10f      	bne.n	800bd34 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	685a      	ldr	r2, [r3, #4]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd22:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d102      	bne.n	800bd34 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 f9f7 	bl	800c122 <SPI_CloseRxTx_ISR>
    }
  }
}
 800bd34:	bf00      	nop
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd48:	881a      	ldrh	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd54:	1c9a      	adds	r2, r3, #2
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	3b01      	subs	r3, #1
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d110      	bne.n	800bd94 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd80:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d102      	bne.n	800bd94 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f9c7 	bl	800c122 <SPI_CloseRxTx_ISR>
    }
  }
}
 800bd94:	bf00      	nop
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f103 020c 	add.w	r2, r3, #12
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb0:	7812      	ldrb	r2, [r2, #0]
 800bdb2:	b2d2      	uxtb	r2, r2
 800bdb4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdba:	1c5a      	adds	r2, r3, #1
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d102      	bne.n	800bde4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f9e1 	bl	800c1a6 <SPI_CloseRx_ISR>
  }
}
 800bde4:	bf00      	nop
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	68da      	ldr	r2, [r3, #12]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfe:	b292      	uxth	r2, r2
 800be00:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be06:	1c9a      	adds	r2, r3, #2
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be12:	b29b      	uxth	r3, r3
 800be14:	3b01      	subs	r3, #1
 800be16:	b29a      	uxth	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800be24:	b29b      	uxth	r3, r3
 800be26:	2b00      	cmp	r3, #0
 800be28:	d102      	bne.n	800be30 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f9bb 	bl	800c1a6 <SPI_CloseRx_ISR>
  }
}
 800be30:	bf00      	nop
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	603b      	str	r3, [r7, #0]
 800be44:	4613      	mov	r3, r2
 800be46:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be48:	e04c      	b.n	800bee4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be50:	d048      	beq.n	800bee4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800be52:	f7fa fad3 	bl	80063fc <HAL_GetTick>
 800be56:	4602      	mov	r2, r0
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	683a      	ldr	r2, [r7, #0]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d902      	bls.n	800be68 <SPI_WaitFlagStateUntilTimeout+0x30>
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d13d      	bne.n	800bee4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	685a      	ldr	r2, [r3, #4]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800be76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be80:	d111      	bne.n	800bea6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be8a:	d004      	beq.n	800be96 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be94:	d107      	bne.n	800bea6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bea4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beae:	d10f      	bne.n	800bed0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bece:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bee0:	2303      	movs	r3, #3
 800bee2:	e00f      	b.n	800bf04 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	689a      	ldr	r2, [r3, #8]
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	4013      	ands	r3, r2
 800beee:	68ba      	ldr	r2, [r7, #8]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	bf0c      	ite	eq
 800bef4:	2301      	moveq	r3, #1
 800bef6:	2300      	movne	r3, #0
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	461a      	mov	r2, r3
 800befc:	79fb      	ldrb	r3, [r7, #7]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d1a3      	bne.n	800be4a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800bf02:	2300      	movs	r3, #0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3710      	adds	r7, #16
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}

0800bf0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
 800bf18:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800bf1a:	e057      	b.n	800bfcc <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bf22:	d106      	bne.n	800bf32 <SPI_WaitFifoStateUntilTimeout+0x26>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d103      	bne.n	800bf32 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	330c      	adds	r3, #12
 800bf30:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf38:	d048      	beq.n	800bfcc <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bf3a:	f7fa fa5f 	bl	80063fc <HAL_GetTick>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d902      	bls.n	800bf50 <SPI_WaitFifoStateUntilTimeout+0x44>
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d13d      	bne.n	800bfcc <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	685a      	ldr	r2, [r3, #4]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bf5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf68:	d111      	bne.n	800bf8e <SPI_WaitFifoStateUntilTimeout+0x82>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf72:	d004      	beq.n	800bf7e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf7c:	d107      	bne.n	800bf8e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf96:	d10f      	bne.n	800bfb8 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bfa6:	601a      	str	r2, [r3, #0]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bfb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800bfc8:	2303      	movs	r3, #3
 800bfca:	e008      	b.n	800bfde <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	689a      	ldr	r2, [r3, #8]
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d19f      	bne.n	800bf1c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3710      	adds	r7, #16
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b086      	sub	sp, #24
 800bfea:	af02      	add	r7, sp, #8
 800bfec:	60f8      	str	r0, [r7, #12]
 800bfee:	60b9      	str	r1, [r7, #8]
 800bff0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bffa:	d111      	bne.n	800c020 <SPI_EndRxTransaction+0x3a>
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	689b      	ldr	r3, [r3, #8]
 800c000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c004:	d004      	beq.n	800c010 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c00e:	d107      	bne.n	800c020 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c01e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	2200      	movs	r2, #0
 800c028:	2180      	movs	r1, #128	; 0x80
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f7ff ff04 	bl	800be38 <SPI_WaitFlagStateUntilTimeout>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d007      	beq.n	800c046 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c03a:	f043 0220 	orr.w	r2, r3, #32
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c042:	2303      	movs	r3, #3
 800c044:	e023      	b.n	800c08e <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c04e:	d11d      	bne.n	800c08c <SPI_EndRxTransaction+0xa6>
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c058:	d004      	beq.n	800c064 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c062:	d113      	bne.n	800c08c <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f7ff ff4b 	bl	800bf0c <SPI_WaitFifoStateUntilTimeout>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d007      	beq.n	800c08c <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c080:	f043 0220 	orr.w	r2, r3, #32
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800c088:	2303      	movs	r3, #3
 800c08a:	e000      	b.n	800c08e <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800c08c:	2300      	movs	r3, #0
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b086      	sub	sp, #24
 800c09a:	af02      	add	r7, sp, #8
 800c09c:	60f8      	str	r0, [r7, #12]
 800c09e:	60b9      	str	r1, [r7, #8]
 800c0a0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f7ff ff2c 	bl	800bf0c <SPI_WaitFifoStateUntilTimeout>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d007      	beq.n	800c0ca <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0be:	f043 0220 	orr.w	r2, r3, #32
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c0c6:	2303      	movs	r3, #3
 800c0c8:	e027      	b.n	800c11a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	2180      	movs	r1, #128	; 0x80
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	f7ff feaf 	bl	800be38 <SPI_WaitFlagStateUntilTimeout>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d007      	beq.n	800c0f0 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0e4:	f043 0220 	orr.w	r2, r3, #32
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	e014      	b.n	800c11a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	9300      	str	r3, [sp, #0]
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f7ff ff05 	bl	800bf0c <SPI_WaitFifoStateUntilTimeout>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d007      	beq.n	800c118 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c10c:	f043 0220 	orr.w	r2, r3, #32
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c114:	2303      	movs	r3, #3
 800c116:	e000      	b.n	800c11a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c118:	2300      	movs	r3, #0
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800c122:	b580      	push	{r7, lr}
 800c124:	b084      	sub	sp, #16
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c12a:	f7fa f967 	bl	80063fc <HAL_GetTick>
 800c12e:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f022 0220 	bic.w	r2, r2, #32
 800c13e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	2164      	movs	r1, #100	; 0x64
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f7ff ffa6 	bl	800c096 <SPI_EndRxTxTransaction>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d005      	beq.n	800c15c <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c154:	f043 0220 	orr.w	r2, r3, #32
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c160:	2b00      	cmp	r3, #0
 800c162:	d115      	bne.n	800c190 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	2b04      	cmp	r3, #4
 800c16e:	d107      	bne.n	800c180 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7f9 fe53 	bl	8005e24 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800c17e:	e00e      	b.n	800c19e <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7ff fcd3 	bl	800bb34 <HAL_SPI_TxRxCpltCallback>
}
 800c18e:	e006      	b.n	800c19e <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2201      	movs	r2, #1
 800c194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f7ff fcd5 	bl	800bb48 <HAL_SPI_ErrorCallback>
}
 800c19e:	bf00      	nop
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b082      	sub	sp, #8
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	685a      	ldr	r2, [r3, #4]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c1bc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800c1be:	f7fa f91d 	bl	80063fc <HAL_GetTick>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	2164      	movs	r1, #100	; 0x64
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f7ff ff0c 	bl	800bfe6 <SPI_EndRxTransaction>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d005      	beq.n	800c1e0 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1d8:	f043 0220 	orr.w	r2, r3, #32
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d103      	bne.n	800c1f8 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7f9 fe17 	bl	8005e24 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800c1f6:	e002      	b.n	800c1fe <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f7ff fca5 	bl	800bb48 <HAL_SPI_ErrorCallback>
}
 800c1fe:	bf00      	nop
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b082      	sub	sp, #8
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d101      	bne.n	800c218 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	e01d      	b.n	800c254 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b00      	cmp	r3, #0
 800c222:	d106      	bne.n	800c232 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f815 	bl	800c25c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2202      	movs	r2, #2
 800c236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	3304      	adds	r3, #4
 800c242:	4619      	mov	r1, r3
 800c244:	4610      	mov	r0, r2
 800c246:	f000 f985 	bl	800c554 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b083      	sub	sp, #12
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c264:	bf00      	nop
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c270:	b480      	push	{r7}
 800c272:	b085      	sub	sp, #20
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68da      	ldr	r2, [r3, #12]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f042 0201 	orr.w	r2, r2, #1
 800c286:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	689a      	ldr	r2, [r3, #8]
 800c28e:	4b0c      	ldr	r3, [pc, #48]	; (800c2c0 <HAL_TIM_Base_Start_IT+0x50>)
 800c290:	4013      	ands	r3, r2
 800c292:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2b06      	cmp	r3, #6
 800c298:	d00b      	beq.n	800c2b2 <HAL_TIM_Base_Start_IT+0x42>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2a0:	d007      	beq.n	800c2b2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f042 0201 	orr.w	r2, r2, #1
 800c2b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3714      	adds	r7, #20
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr
 800c2c0:	00010007 	.word	0x00010007

0800c2c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	691b      	ldr	r3, [r3, #16]
 800c2d2:	f003 0302 	and.w	r3, r3, #2
 800c2d6:	2b02      	cmp	r3, #2
 800c2d8:	d122      	bne.n	800c320 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	f003 0302 	and.w	r3, r3, #2
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d11b      	bne.n	800c320 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f06f 0202 	mvn.w	r2, #2
 800c2f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	699b      	ldr	r3, [r3, #24]
 800c2fe:	f003 0303 	and.w	r3, r3, #3
 800c302:	2b00      	cmp	r3, #0
 800c304:	d003      	beq.n	800c30e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 f905 	bl	800c516 <HAL_TIM_IC_CaptureCallback>
 800c30c:	e005      	b.n	800c31a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f8f7 	bl	800c502 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 f908 	bl	800c52a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	691b      	ldr	r3, [r3, #16]
 800c326:	f003 0304 	and.w	r3, r3, #4
 800c32a:	2b04      	cmp	r3, #4
 800c32c:	d122      	bne.n	800c374 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	f003 0304 	and.w	r3, r3, #4
 800c338:	2b04      	cmp	r3, #4
 800c33a:	d11b      	bne.n	800c374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f06f 0204 	mvn.w	r2, #4
 800c344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2202      	movs	r2, #2
 800c34a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	699b      	ldr	r3, [r3, #24]
 800c352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c356:	2b00      	cmp	r3, #0
 800c358:	d003      	beq.n	800c362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 f8db 	bl	800c516 <HAL_TIM_IC_CaptureCallback>
 800c360:	e005      	b.n	800c36e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 f8cd 	bl	800c502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 f8de 	bl	800c52a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	691b      	ldr	r3, [r3, #16]
 800c37a:	f003 0308 	and.w	r3, r3, #8
 800c37e:	2b08      	cmp	r3, #8
 800c380:	d122      	bne.n	800c3c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	f003 0308 	and.w	r3, r3, #8
 800c38c:	2b08      	cmp	r3, #8
 800c38e:	d11b      	bne.n	800c3c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f06f 0208 	mvn.w	r2, #8
 800c398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2204      	movs	r2, #4
 800c39e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	69db      	ldr	r3, [r3, #28]
 800c3a6:	f003 0303 	and.w	r3, r3, #3
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d003      	beq.n	800c3b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 f8b1 	bl	800c516 <HAL_TIM_IC_CaptureCallback>
 800c3b4:	e005      	b.n	800c3c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f8a3 	bl	800c502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 f8b4 	bl	800c52a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	f003 0310 	and.w	r3, r3, #16
 800c3d2:	2b10      	cmp	r3, #16
 800c3d4:	d122      	bne.n	800c41c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	f003 0310 	and.w	r3, r3, #16
 800c3e0:	2b10      	cmp	r3, #16
 800c3e2:	d11b      	bne.n	800c41c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f06f 0210 	mvn.w	r2, #16
 800c3ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2208      	movs	r2, #8
 800c3f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	69db      	ldr	r3, [r3, #28]
 800c3fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d003      	beq.n	800c40a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 f887 	bl	800c516 <HAL_TIM_IC_CaptureCallback>
 800c408:	e005      	b.n	800c416 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f879 	bl	800c502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f88a 	bl	800c52a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	f003 0301 	and.w	r3, r3, #1
 800c426:	2b01      	cmp	r3, #1
 800c428:	d10e      	bne.n	800c448 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	f003 0301 	and.w	r3, r3, #1
 800c434:	2b01      	cmp	r3, #1
 800c436:	d107      	bne.n	800c448 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f06f 0201 	mvn.w	r2, #1
 800c440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f7f8 f868 	bl	8004518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c452:	2b80      	cmp	r3, #128	; 0x80
 800c454:	d10e      	bne.n	800c474 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c460:	2b80      	cmp	r3, #128	; 0x80
 800c462:	d107      	bne.n	800c474 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c46c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f91a 	bl	800c6a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	691b      	ldr	r3, [r3, #16]
 800c47a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c47e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c482:	d10e      	bne.n	800c4a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c48e:	2b80      	cmp	r3, #128	; 0x80
 800c490:	d107      	bne.n	800c4a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c49a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f90d 	bl	800c6bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	691b      	ldr	r3, [r3, #16]
 800c4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ac:	2b40      	cmp	r3, #64	; 0x40
 800c4ae:	d10e      	bne.n	800c4ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4ba:	2b40      	cmp	r3, #64	; 0x40
 800c4bc:	d107      	bne.n	800c4ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c4c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 f838 	bl	800c53e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	691b      	ldr	r3, [r3, #16]
 800c4d4:	f003 0320 	and.w	r3, r3, #32
 800c4d8:	2b20      	cmp	r3, #32
 800c4da:	d10e      	bne.n	800c4fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	f003 0320 	and.w	r3, r3, #32
 800c4e6:	2b20      	cmp	r3, #32
 800c4e8:	d107      	bne.n	800c4fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f06f 0220 	mvn.w	r2, #32
 800c4f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 f8cd 	bl	800c694 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c4fa:	bf00      	nop
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c502:	b480      	push	{r7}
 800c504:	b083      	sub	sp, #12
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c50a:	bf00      	nop
 800c50c:	370c      	adds	r7, #12
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr

0800c516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c516:	b480      	push	{r7}
 800c518:	b083      	sub	sp, #12
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c51e:	bf00      	nop
 800c520:	370c      	adds	r7, #12
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr

0800c52a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c52a:	b480      	push	{r7}
 800c52c:	b083      	sub	sp, #12
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c532:	bf00      	nop
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr

0800c53e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c53e:	b480      	push	{r7}
 800c540:	b083      	sub	sp, #12
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c546:	bf00      	nop
 800c548:	370c      	adds	r7, #12
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr
	...

0800c554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4a40      	ldr	r2, [pc, #256]	; (800c668 <TIM_Base_SetConfig+0x114>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d013      	beq.n	800c594 <TIM_Base_SetConfig+0x40>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c572:	d00f      	beq.n	800c594 <TIM_Base_SetConfig+0x40>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a3d      	ldr	r2, [pc, #244]	; (800c66c <TIM_Base_SetConfig+0x118>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d00b      	beq.n	800c594 <TIM_Base_SetConfig+0x40>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4a3c      	ldr	r2, [pc, #240]	; (800c670 <TIM_Base_SetConfig+0x11c>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d007      	beq.n	800c594 <TIM_Base_SetConfig+0x40>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a3b      	ldr	r2, [pc, #236]	; (800c674 <TIM_Base_SetConfig+0x120>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d003      	beq.n	800c594 <TIM_Base_SetConfig+0x40>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a3a      	ldr	r2, [pc, #232]	; (800c678 <TIM_Base_SetConfig+0x124>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d108      	bne.n	800c5a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c59a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4a2f      	ldr	r2, [pc, #188]	; (800c668 <TIM_Base_SetConfig+0x114>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d02b      	beq.n	800c606 <TIM_Base_SetConfig+0xb2>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5b4:	d027      	beq.n	800c606 <TIM_Base_SetConfig+0xb2>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4a2c      	ldr	r2, [pc, #176]	; (800c66c <TIM_Base_SetConfig+0x118>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d023      	beq.n	800c606 <TIM_Base_SetConfig+0xb2>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4a2b      	ldr	r2, [pc, #172]	; (800c670 <TIM_Base_SetConfig+0x11c>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d01f      	beq.n	800c606 <TIM_Base_SetConfig+0xb2>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4a2a      	ldr	r2, [pc, #168]	; (800c674 <TIM_Base_SetConfig+0x120>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d01b      	beq.n	800c606 <TIM_Base_SetConfig+0xb2>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4a29      	ldr	r2, [pc, #164]	; (800c678 <TIM_Base_SetConfig+0x124>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d017      	beq.n	800c606 <TIM_Base_SetConfig+0xb2>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4a28      	ldr	r2, [pc, #160]	; (800c67c <TIM_Base_SetConfig+0x128>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d013      	beq.n	800c606 <TIM_Base_SetConfig+0xb2>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	4a27      	ldr	r2, [pc, #156]	; (800c680 <TIM_Base_SetConfig+0x12c>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d00f      	beq.n	800c606 <TIM_Base_SetConfig+0xb2>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4a26      	ldr	r2, [pc, #152]	; (800c684 <TIM_Base_SetConfig+0x130>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d00b      	beq.n	800c606 <TIM_Base_SetConfig+0xb2>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4a25      	ldr	r2, [pc, #148]	; (800c688 <TIM_Base_SetConfig+0x134>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d007      	beq.n	800c606 <TIM_Base_SetConfig+0xb2>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	4a24      	ldr	r2, [pc, #144]	; (800c68c <TIM_Base_SetConfig+0x138>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d003      	beq.n	800c606 <TIM_Base_SetConfig+0xb2>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4a23      	ldr	r2, [pc, #140]	; (800c690 <TIM_Base_SetConfig+0x13c>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d108      	bne.n	800c618 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c60c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	4313      	orrs	r3, r2
 800c616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	695b      	ldr	r3, [r3, #20]
 800c622:	4313      	orrs	r3, r2
 800c624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	689a      	ldr	r2, [r3, #8]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a0a      	ldr	r2, [pc, #40]	; (800c668 <TIM_Base_SetConfig+0x114>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d003      	beq.n	800c64c <TIM_Base_SetConfig+0xf8>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a0c      	ldr	r2, [pc, #48]	; (800c678 <TIM_Base_SetConfig+0x124>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d103      	bne.n	800c654 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	691a      	ldr	r2, [r3, #16]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	615a      	str	r2, [r3, #20]
}
 800c65a:	bf00      	nop
 800c65c:	3714      	adds	r7, #20
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
 800c666:	bf00      	nop
 800c668:	40010000 	.word	0x40010000
 800c66c:	40000400 	.word	0x40000400
 800c670:	40000800 	.word	0x40000800
 800c674:	40000c00 	.word	0x40000c00
 800c678:	40010400 	.word	0x40010400
 800c67c:	40014000 	.word	0x40014000
 800c680:	40014400 	.word	0x40014400
 800c684:	40014800 	.word	0x40014800
 800c688:	40001800 	.word	0x40001800
 800c68c:	40001c00 	.word	0x40001c00
 800c690:	40002000 	.word	0x40002000

0800c694 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c69c:	bf00      	nop
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c6b0:	bf00      	nop
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c6c4:	bf00      	nop
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d101      	bne.n	800c6e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e040      	b.n	800c764 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d106      	bne.n	800c6f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7f8 f9b6 	bl	8004a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2224      	movs	r2, #36	; 0x24
 800c6fc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	681a      	ldr	r2, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f022 0201 	bic.w	r2, r2, #1
 800c70c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fc6e 	bl	800cff0 <UART_SetConfig>
 800c714:	4603      	mov	r3, r0
 800c716:	2b01      	cmp	r3, #1
 800c718:	d101      	bne.n	800c71e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	e022      	b.n	800c764 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c722:	2b00      	cmp	r3, #0
 800c724:	d002      	beq.n	800c72c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 ff0c 	bl	800d544 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c73a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	689a      	ldr	r2, [r3, #8]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c74a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f042 0201 	orr.w	r2, r2, #1
 800c75a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 ff93 	bl	800d688 <UART_CheckIdleState>
 800c762:	4603      	mov	r3, r0
}
 800c764:	4618      	mov	r0, r3
 800c766:	3708      	adds	r7, #8
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b08a      	sub	sp, #40	; 0x28
 800c770:	af02      	add	r7, sp, #8
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	603b      	str	r3, [r7, #0]
 800c778:	4613      	mov	r3, r2
 800c77a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c780:	2b20      	cmp	r3, #32
 800c782:	d17f      	bne.n	800c884 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d002      	beq.n	800c790 <HAL_UART_Transmit+0x24>
 800c78a:	88fb      	ldrh	r3, [r7, #6]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d101      	bne.n	800c794 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c790:	2301      	movs	r3, #1
 800c792:	e078      	b.n	800c886 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d101      	bne.n	800c7a2 <HAL_UART_Transmit+0x36>
 800c79e:	2302      	movs	r3, #2
 800c7a0:	e071      	b.n	800c886 <HAL_UART_Transmit+0x11a>
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2221      	movs	r2, #33	; 0x21
 800c7b4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c7b6:	f7f9 fe21 	bl	80063fc <HAL_GetTick>
 800c7ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	88fa      	ldrh	r2, [r7, #6]
 800c7c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	88fa      	ldrh	r2, [r7, #6]
 800c7c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7d4:	d108      	bne.n	800c7e8 <HAL_UART_Transmit+0x7c>
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d104      	bne.n	800c7e8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	61bb      	str	r3, [r7, #24]
 800c7e6:	e003      	b.n	800c7f0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800c7f8:	e02c      	b.n	800c854 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	9300      	str	r3, [sp, #0]
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	2200      	movs	r2, #0
 800c802:	2180      	movs	r1, #128	; 0x80
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f000 ff6e 	bl	800d6e6 <UART_WaitOnFlagUntilTimeout>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d001      	beq.n	800c814 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800c810:	2303      	movs	r3, #3
 800c812:	e038      	b.n	800c886 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d10b      	bne.n	800c832 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	881b      	ldrh	r3, [r3, #0]
 800c81e:	461a      	mov	r2, r3
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c828:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	3302      	adds	r3, #2
 800c82e:	61bb      	str	r3, [r7, #24]
 800c830:	e007      	b.n	800c842 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	781a      	ldrb	r2, [r3, #0]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	3301      	adds	r3, #1
 800c840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c848:	b29b      	uxth	r3, r3
 800c84a:	3b01      	subs	r3, #1
 800c84c:	b29a      	uxth	r2, r3
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1cc      	bne.n	800c7fa <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	9300      	str	r3, [sp, #0]
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	2200      	movs	r2, #0
 800c868:	2140      	movs	r1, #64	; 0x40
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f000 ff3b 	bl	800d6e6 <UART_WaitOnFlagUntilTimeout>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d001      	beq.n	800c87a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c876:	2303      	movs	r3, #3
 800c878:	e005      	b.n	800c886 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2220      	movs	r2, #32
 800c87e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800c880:	2300      	movs	r3, #0
 800c882:	e000      	b.n	800c886 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800c884:	2302      	movs	r3, #2
  }
}
 800c886:	4618      	mov	r0, r3
 800c888:	3720      	adds	r7, #32
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b08a      	sub	sp, #40	; 0x28
 800c892:	af02      	add	r7, sp, #8
 800c894:	60f8      	str	r0, [r7, #12]
 800c896:	60b9      	str	r1, [r7, #8]
 800c898:	603b      	str	r3, [r7, #0]
 800c89a:	4613      	mov	r3, r2
 800c89c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8a2:	2b20      	cmp	r3, #32
 800c8a4:	f040 80ba 	bne.w	800ca1c <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d002      	beq.n	800c8b4 <HAL_UART_Receive+0x26>
 800c8ae:	88fb      	ldrh	r3, [r7, #6]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d101      	bne.n	800c8b8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e0b2      	b.n	800ca1e <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d101      	bne.n	800c8c6 <HAL_UART_Receive+0x38>
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	e0ab      	b.n	800ca1e <HAL_UART_Receive+0x190>
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2222      	movs	r2, #34	; 0x22
 800c8d8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c8da:	f7f9 fd8f 	bl	80063fc <HAL_GetTick>
 800c8de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	88fa      	ldrh	r2, [r7, #6]
 800c8e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	88fa      	ldrh	r2, [r7, #6]
 800c8ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8f8:	d10e      	bne.n	800c918 <HAL_UART_Receive+0x8a>
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d105      	bne.n	800c90e <HAL_UART_Receive+0x80>
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c908:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c90c:	e02d      	b.n	800c96a <HAL_UART_Receive+0xdc>
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	22ff      	movs	r2, #255	; 0xff
 800c912:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c916:	e028      	b.n	800c96a <HAL_UART_Receive+0xdc>
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d10d      	bne.n	800c93c <HAL_UART_Receive+0xae>
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d104      	bne.n	800c932 <HAL_UART_Receive+0xa4>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	22ff      	movs	r2, #255	; 0xff
 800c92c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c930:	e01b      	b.n	800c96a <HAL_UART_Receive+0xdc>
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	227f      	movs	r2, #127	; 0x7f
 800c936:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c93a:	e016      	b.n	800c96a <HAL_UART_Receive+0xdc>
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c944:	d10d      	bne.n	800c962 <HAL_UART_Receive+0xd4>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d104      	bne.n	800c958 <HAL_UART_Receive+0xca>
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	227f      	movs	r2, #127	; 0x7f
 800c952:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c956:	e008      	b.n	800c96a <HAL_UART_Receive+0xdc>
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	223f      	movs	r2, #63	; 0x3f
 800c95c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c960:	e003      	b.n	800c96a <HAL_UART_Receive+0xdc>
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2200      	movs	r2, #0
 800c966:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c970:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	689b      	ldr	r3, [r3, #8]
 800c976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c97a:	d108      	bne.n	800c98e <HAL_UART_Receive+0x100>
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d104      	bne.n	800c98e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800c984:	2300      	movs	r3, #0
 800c986:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	61bb      	str	r3, [r7, #24]
 800c98c:	e003      	b.n	800c996 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c992:	2300      	movs	r3, #0
 800c994:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2200      	movs	r2, #0
 800c99a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c99e:	e032      	b.n	800ca06 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	2120      	movs	r1, #32
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f000 fe9b 	bl	800d6e6 <UART_WaitOnFlagUntilTimeout>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d001      	beq.n	800c9ba <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800c9b6:	2303      	movs	r3, #3
 800c9b8:	e031      	b.n	800ca1e <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d10c      	bne.n	800c9da <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	8a7b      	ldrh	r3, [r7, #18]
 800c9ca:	4013      	ands	r3, r2
 800c9cc:	b29a      	uxth	r2, r3
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	3302      	adds	r3, #2
 800c9d6:	61bb      	str	r3, [r7, #24]
 800c9d8:	e00c      	b.n	800c9f4 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e0:	b2da      	uxtb	r2, r3
 800c9e2:	8a7b      	ldrh	r3, [r7, #18]
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	69fb      	ldr	r3, [r7, #28]
 800c9ec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	b29a      	uxth	r2, r3
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1c6      	bne.n	800c9a0 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2220      	movs	r2, #32
 800ca16:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	e000      	b.n	800ca1e <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800ca1c:	2302      	movs	r3, #2
  }
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3720      	adds	r7, #32
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
	...

0800ca28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	4613      	mov	r3, r2
 800ca34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca3a:	2b20      	cmp	r3, #32
 800ca3c:	d16c      	bne.n	800cb18 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <HAL_UART_Receive_DMA+0x22>
 800ca44:	88fb      	ldrh	r3, [r7, #6]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d101      	bne.n	800ca4e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	e065      	b.n	800cb1a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d101      	bne.n	800ca5c <HAL_UART_Receive_DMA+0x34>
 800ca58:	2302      	movs	r3, #2
 800ca5a:	e05e      	b.n	800cb1a <HAL_UART_Receive_DMA+0xf2>
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	88fa      	ldrh	r2, [r7, #6]
 800ca6e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2222      	movs	r2, #34	; 0x22
 800ca7c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d02a      	beq.n	800cadc <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca8a:	4a26      	ldr	r2, [pc, #152]	; (800cb24 <HAL_UART_Receive_DMA+0xfc>)
 800ca8c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca92:	4a25      	ldr	r2, [pc, #148]	; (800cb28 <HAL_UART_Receive_DMA+0x100>)
 800ca94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca9a:	4a24      	ldr	r2, [pc, #144]	; (800cb2c <HAL_UART_Receive_DMA+0x104>)
 800ca9c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caa2:	2200      	movs	r2, #0
 800caa4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	3324      	adds	r3, #36	; 0x24
 800cab0:	4619      	mov	r1, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cab6:	461a      	mov	r2, r3
 800cab8:	88fb      	ldrh	r3, [r7, #6]
 800caba:	f7fa fabd 	bl	8007038 <HAL_DMA_Start_IT>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00b      	beq.n	800cadc <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2210      	movs	r2, #16
 800cac8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2220      	movs	r2, #32
 800cad6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800cad8:	2301      	movs	r3, #1
 800cada:	e01e      	b.n	800cb1a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800caf2:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	689a      	ldr	r2, [r3, #8]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f042 0201 	orr.w	r2, r2, #1
 800cb02:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	689a      	ldr	r2, [r3, #8]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb12:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	e000      	b.n	800cb1a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800cb18:	2302      	movs	r3, #2
  }
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	0800d847 	.word	0x0800d847
 800cb28:	0800d8ab 	.word	0x0800d8ab
 800cb2c:	0800d8c7 	.word	0x0800d8c7

0800cb30 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb3c:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb42:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d101      	bne.n	800cb52 <HAL_UART_DMAPause+0x22>
 800cb4e:	2302      	movs	r3, #2
 800cb50:	e03c      	b.n	800cbcc <HAL_UART_DMAPause+0x9c>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2201      	movs	r2, #1
 800cb56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	689b      	ldr	r3, [r3, #8]
 800cb60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb64:	2b80      	cmp	r3, #128	; 0x80
 800cb66:	d10a      	bne.n	800cb7e <HAL_UART_DMAPause+0x4e>
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2b21      	cmp	r3, #33	; 0x21
 800cb6c:	d107      	bne.n	800cb7e <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	689a      	ldr	r2, [r3, #8]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cb7c:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb88:	2b40      	cmp	r3, #64	; 0x40
 800cb8a:	d11a      	bne.n	800cbc2 <HAL_UART_DMAPause+0x92>
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	2b22      	cmp	r3, #34	; 0x22
 800cb90:	d117      	bne.n	800cbc2 <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cba0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	689a      	ldr	r2, [r3, #8]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f022 0201 	bic.w	r2, r2, #1
 800cbb0:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	689a      	ldr	r2, [r3, #8]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbc0:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3714      	adds	r7, #20
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d101      	bne.n	800cbee <HAL_UART_DMAResume+0x16>
 800cbea:	2302      	movs	r3, #2
 800cbec:	e034      	b.n	800cc58 <HAL_UART_DMAResume+0x80>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbfa:	2b21      	cmp	r3, #33	; 0x21
 800cbfc:	d107      	bne.n	800cc0e <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	689a      	ldr	r2, [r3, #8]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cc0c:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc12:	2b22      	cmp	r3, #34	; 0x22
 800cc14:	d11b      	bne.n	800cc4e <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	2208      	movs	r2, #8
 800cc1c:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc2c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	689a      	ldr	r2, [r3, #8]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f042 0201 	orr.w	r2, r2, #1
 800cc3c:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	689a      	ldr	r2, [r3, #8]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc4c:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc70:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc76:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc82:	2b80      	cmp	r3, #128	; 0x80
 800cc84:	d126      	bne.n	800ccd4 <HAL_UART_DMAStop+0x70>
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2b21      	cmp	r3, #33	; 0x21
 800cc8a:	d123      	bne.n	800ccd4 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	689a      	ldr	r2, [r3, #8]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cc9a:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d014      	beq.n	800ccce <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7fa fa25 	bl	80070f8 <HAL_DMA_Abort>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00c      	beq.n	800ccce <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fa fc39 	bl	8007530 <HAL_DMA_GetError>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b20      	cmp	r3, #32
 800ccc2:	d104      	bne.n	800ccce <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2210      	movs	r2, #16
 800ccc8:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800ccca:	2303      	movs	r3, #3
 800cccc:	e031      	b.n	800cd32 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 fd84 	bl	800d7dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccde:	2b40      	cmp	r3, #64	; 0x40
 800cce0:	d126      	bne.n	800cd30 <HAL_UART_DMAStop+0xcc>
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	2b22      	cmp	r3, #34	; 0x22
 800cce6:	d123      	bne.n	800cd30 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	689a      	ldr	r2, [r3, #8]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ccf6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d014      	beq.n	800cd2a <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7fa f9f7 	bl	80070f8 <HAL_DMA_Abort>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d00c      	beq.n	800cd2a <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7fa fc0b 	bl	8007530 <HAL_DMA_GetError>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b20      	cmp	r3, #32
 800cd1e:	d104      	bne.n	800cd2a <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2210      	movs	r2, #16
 800cd24:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800cd26:	2303      	movs	r3, #3
 800cd28:	e003      	b.n	800cd32 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 fd6b 	bl	800d806 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
	...

0800cd3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b088      	sub	sp, #32
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	69db      	ldr	r3, [r3, #28]
 800cd4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cd5c:	69fa      	ldr	r2, [r7, #28]
 800cd5e:	f640 030f 	movw	r3, #2063	; 0x80f
 800cd62:	4013      	ands	r3, r2
 800cd64:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d113      	bne.n	800cd94 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	f003 0320 	and.w	r3, r3, #32
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d00e      	beq.n	800cd94 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	f003 0320 	and.w	r3, r3, #32
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d009      	beq.n	800cd94 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f000 8100 	beq.w	800cf8a <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	4798      	blx	r3
      }
      return;
 800cd92:	e0fa      	b.n	800cf8a <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f000 80d5 	beq.w	800cf46 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	f003 0301 	and.w	r3, r3, #1
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d105      	bne.n	800cdb2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f000 80ca 	beq.w	800cf46 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	f003 0301 	and.w	r3, r3, #1
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d00e      	beq.n	800cdda <HAL_UART_IRQHandler+0x9e>
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d009      	beq.n	800cdda <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdd2:	f043 0201 	orr.w	r2, r3, #1
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	f003 0302 	and.w	r3, r3, #2
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00e      	beq.n	800ce02 <HAL_UART_IRQHandler+0xc6>
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	f003 0301 	and.w	r3, r3, #1
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d009      	beq.n	800ce02 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2202      	movs	r2, #2
 800cdf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdfa:	f043 0204 	orr.w	r2, r3, #4
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	f003 0304 	and.w	r3, r3, #4
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00e      	beq.n	800ce2a <HAL_UART_IRQHandler+0xee>
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	f003 0301 	and.w	r3, r3, #1
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d009      	beq.n	800ce2a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2204      	movs	r2, #4
 800ce1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce22:	f043 0202 	orr.w	r2, r3, #2
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	f003 0308 	and.w	r3, r3, #8
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d013      	beq.n	800ce5c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	f003 0320 	and.w	r3, r3, #32
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d104      	bne.n	800ce48 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d009      	beq.n	800ce5c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2208      	movs	r2, #8
 800ce4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce54:	f043 0208 	orr.w	r2, r3, #8
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ce5c:	69fb      	ldr	r3, [r7, #28]
 800ce5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d00f      	beq.n	800ce86 <HAL_UART_IRQHandler+0x14a>
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00a      	beq.n	800ce86 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce7e:	f043 0220 	orr.w	r2, r3, #32
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d07f      	beq.n	800cf8e <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	f003 0320 	and.w	r3, r3, #32
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00c      	beq.n	800ceb2 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	f003 0320 	and.w	r3, r3, #32
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d007      	beq.n	800ceb2 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d003      	beq.n	800ceb2 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceb6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cec2:	2b40      	cmp	r3, #64	; 0x40
 800cec4:	d004      	beq.n	800ced0 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d031      	beq.n	800cf34 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 fc98 	bl	800d806 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cee0:	2b40      	cmp	r3, #64	; 0x40
 800cee2:	d123      	bne.n	800cf2c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	689a      	ldr	r2, [r3, #8]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cef2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d013      	beq.n	800cf24 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf00:	4a26      	ldr	r2, [pc, #152]	; (800cf9c <HAL_UART_IRQHandler+0x260>)
 800cf02:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fa f965 	bl	80071d8 <HAL_DMA_Abort_IT>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d016      	beq.n	800cf42 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800cf1e:	4610      	mov	r0, r2
 800cf20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf22:	e00e      	b.n	800cf42 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 f859 	bl	800cfdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf2a:	e00a      	b.n	800cf42 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 f855 	bl	800cfdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf32:	e006      	b.n	800cf42 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f851 	bl	800cfdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800cf40:	e025      	b.n	800cf8e <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf42:	bf00      	nop
    return;
 800cf44:	e023      	b.n	800cf8e <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00d      	beq.n	800cf6c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d008      	beq.n	800cf6c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d017      	beq.n	800cf92 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	4798      	blx	r3
    }
    return;
 800cf6a:	e012      	b.n	800cf92 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00e      	beq.n	800cf94 <HAL_UART_IRQHandler+0x258>
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d009      	beq.n	800cf94 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 fcf2 	bl	800d96a <UART_EndTransmit_IT>
    return;
 800cf86:	bf00      	nop
 800cf88:	e004      	b.n	800cf94 <HAL_UART_IRQHandler+0x258>
      return;
 800cf8a:	bf00      	nop
 800cf8c:	e002      	b.n	800cf94 <HAL_UART_IRQHandler+0x258>
    return;
 800cf8e:	bf00      	nop
 800cf90:	e000      	b.n	800cf94 <HAL_UART_IRQHandler+0x258>
    return;
 800cf92:	bf00      	nop
  }

}
 800cf94:	3720      	adds	r7, #32
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	0800d93f 	.word	0x0800d93f

0800cfa0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cfa8:	bf00      	nop
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800cfbc:	bf00      	nop
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b088      	sub	sp, #32
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800cff8:	2300      	movs	r3, #0
 800cffa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800cffc:	2300      	movs	r3, #0
 800cffe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	689a      	ldr	r2, [r3, #8]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	691b      	ldr	r3, [r3, #16]
 800d008:	431a      	orrs	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	695b      	ldr	r3, [r3, #20]
 800d00e:	431a      	orrs	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	69db      	ldr	r3, [r3, #28]
 800d014:	4313      	orrs	r3, r2
 800d016:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	4bb1      	ldr	r3, [pc, #708]	; (800d2e4 <UART_SetConfig+0x2f4>)
 800d020:	4013      	ands	r3, r2
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	6812      	ldr	r2, [r2, #0]
 800d026:	6939      	ldr	r1, [r7, #16]
 800d028:	430b      	orrs	r3, r1
 800d02a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	68da      	ldr	r2, [r3, #12]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	430a      	orrs	r2, r1
 800d040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	699b      	ldr	r3, [r3, #24]
 800d046:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6a1b      	ldr	r3, [r3, #32]
 800d04c:	693a      	ldr	r2, [r7, #16]
 800d04e:	4313      	orrs	r3, r2
 800d050:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	693a      	ldr	r2, [r7, #16]
 800d062:	430a      	orrs	r2, r1
 800d064:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a9f      	ldr	r2, [pc, #636]	; (800d2e8 <UART_SetConfig+0x2f8>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d121      	bne.n	800d0b4 <UART_SetConfig+0xc4>
 800d070:	4b9e      	ldr	r3, [pc, #632]	; (800d2ec <UART_SetConfig+0x2fc>)
 800d072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d076:	f003 0303 	and.w	r3, r3, #3
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	d816      	bhi.n	800d0ac <UART_SetConfig+0xbc>
 800d07e:	a201      	add	r2, pc, #4	; (adr r2, 800d084 <UART_SetConfig+0x94>)
 800d080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d084:	0800d095 	.word	0x0800d095
 800d088:	0800d0a1 	.word	0x0800d0a1
 800d08c:	0800d09b 	.word	0x0800d09b
 800d090:	0800d0a7 	.word	0x0800d0a7
 800d094:	2301      	movs	r3, #1
 800d096:	77fb      	strb	r3, [r7, #31]
 800d098:	e151      	b.n	800d33e <UART_SetConfig+0x34e>
 800d09a:	2302      	movs	r3, #2
 800d09c:	77fb      	strb	r3, [r7, #31]
 800d09e:	e14e      	b.n	800d33e <UART_SetConfig+0x34e>
 800d0a0:	2304      	movs	r3, #4
 800d0a2:	77fb      	strb	r3, [r7, #31]
 800d0a4:	e14b      	b.n	800d33e <UART_SetConfig+0x34e>
 800d0a6:	2308      	movs	r3, #8
 800d0a8:	77fb      	strb	r3, [r7, #31]
 800d0aa:	e148      	b.n	800d33e <UART_SetConfig+0x34e>
 800d0ac:	2310      	movs	r3, #16
 800d0ae:	77fb      	strb	r3, [r7, #31]
 800d0b0:	bf00      	nop
 800d0b2:	e144      	b.n	800d33e <UART_SetConfig+0x34e>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a8d      	ldr	r2, [pc, #564]	; (800d2f0 <UART_SetConfig+0x300>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d134      	bne.n	800d128 <UART_SetConfig+0x138>
 800d0be:	4b8b      	ldr	r3, [pc, #556]	; (800d2ec <UART_SetConfig+0x2fc>)
 800d0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0c4:	f003 030c 	and.w	r3, r3, #12
 800d0c8:	2b0c      	cmp	r3, #12
 800d0ca:	d829      	bhi.n	800d120 <UART_SetConfig+0x130>
 800d0cc:	a201      	add	r2, pc, #4	; (adr r2, 800d0d4 <UART_SetConfig+0xe4>)
 800d0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d2:	bf00      	nop
 800d0d4:	0800d109 	.word	0x0800d109
 800d0d8:	0800d121 	.word	0x0800d121
 800d0dc:	0800d121 	.word	0x0800d121
 800d0e0:	0800d121 	.word	0x0800d121
 800d0e4:	0800d115 	.word	0x0800d115
 800d0e8:	0800d121 	.word	0x0800d121
 800d0ec:	0800d121 	.word	0x0800d121
 800d0f0:	0800d121 	.word	0x0800d121
 800d0f4:	0800d10f 	.word	0x0800d10f
 800d0f8:	0800d121 	.word	0x0800d121
 800d0fc:	0800d121 	.word	0x0800d121
 800d100:	0800d121 	.word	0x0800d121
 800d104:	0800d11b 	.word	0x0800d11b
 800d108:	2300      	movs	r3, #0
 800d10a:	77fb      	strb	r3, [r7, #31]
 800d10c:	e117      	b.n	800d33e <UART_SetConfig+0x34e>
 800d10e:	2302      	movs	r3, #2
 800d110:	77fb      	strb	r3, [r7, #31]
 800d112:	e114      	b.n	800d33e <UART_SetConfig+0x34e>
 800d114:	2304      	movs	r3, #4
 800d116:	77fb      	strb	r3, [r7, #31]
 800d118:	e111      	b.n	800d33e <UART_SetConfig+0x34e>
 800d11a:	2308      	movs	r3, #8
 800d11c:	77fb      	strb	r3, [r7, #31]
 800d11e:	e10e      	b.n	800d33e <UART_SetConfig+0x34e>
 800d120:	2310      	movs	r3, #16
 800d122:	77fb      	strb	r3, [r7, #31]
 800d124:	bf00      	nop
 800d126:	e10a      	b.n	800d33e <UART_SetConfig+0x34e>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4a71      	ldr	r2, [pc, #452]	; (800d2f4 <UART_SetConfig+0x304>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d120      	bne.n	800d174 <UART_SetConfig+0x184>
 800d132:	4b6e      	ldr	r3, [pc, #440]	; (800d2ec <UART_SetConfig+0x2fc>)
 800d134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d138:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d13c:	2b10      	cmp	r3, #16
 800d13e:	d00f      	beq.n	800d160 <UART_SetConfig+0x170>
 800d140:	2b10      	cmp	r3, #16
 800d142:	d802      	bhi.n	800d14a <UART_SetConfig+0x15a>
 800d144:	2b00      	cmp	r3, #0
 800d146:	d005      	beq.n	800d154 <UART_SetConfig+0x164>
 800d148:	e010      	b.n	800d16c <UART_SetConfig+0x17c>
 800d14a:	2b20      	cmp	r3, #32
 800d14c:	d005      	beq.n	800d15a <UART_SetConfig+0x16a>
 800d14e:	2b30      	cmp	r3, #48	; 0x30
 800d150:	d009      	beq.n	800d166 <UART_SetConfig+0x176>
 800d152:	e00b      	b.n	800d16c <UART_SetConfig+0x17c>
 800d154:	2300      	movs	r3, #0
 800d156:	77fb      	strb	r3, [r7, #31]
 800d158:	e0f1      	b.n	800d33e <UART_SetConfig+0x34e>
 800d15a:	2302      	movs	r3, #2
 800d15c:	77fb      	strb	r3, [r7, #31]
 800d15e:	e0ee      	b.n	800d33e <UART_SetConfig+0x34e>
 800d160:	2304      	movs	r3, #4
 800d162:	77fb      	strb	r3, [r7, #31]
 800d164:	e0eb      	b.n	800d33e <UART_SetConfig+0x34e>
 800d166:	2308      	movs	r3, #8
 800d168:	77fb      	strb	r3, [r7, #31]
 800d16a:	e0e8      	b.n	800d33e <UART_SetConfig+0x34e>
 800d16c:	2310      	movs	r3, #16
 800d16e:	77fb      	strb	r3, [r7, #31]
 800d170:	bf00      	nop
 800d172:	e0e4      	b.n	800d33e <UART_SetConfig+0x34e>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a5f      	ldr	r2, [pc, #380]	; (800d2f8 <UART_SetConfig+0x308>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d120      	bne.n	800d1c0 <UART_SetConfig+0x1d0>
 800d17e:	4b5b      	ldr	r3, [pc, #364]	; (800d2ec <UART_SetConfig+0x2fc>)
 800d180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d184:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d188:	2b40      	cmp	r3, #64	; 0x40
 800d18a:	d00f      	beq.n	800d1ac <UART_SetConfig+0x1bc>
 800d18c:	2b40      	cmp	r3, #64	; 0x40
 800d18e:	d802      	bhi.n	800d196 <UART_SetConfig+0x1a6>
 800d190:	2b00      	cmp	r3, #0
 800d192:	d005      	beq.n	800d1a0 <UART_SetConfig+0x1b0>
 800d194:	e010      	b.n	800d1b8 <UART_SetConfig+0x1c8>
 800d196:	2b80      	cmp	r3, #128	; 0x80
 800d198:	d005      	beq.n	800d1a6 <UART_SetConfig+0x1b6>
 800d19a:	2bc0      	cmp	r3, #192	; 0xc0
 800d19c:	d009      	beq.n	800d1b2 <UART_SetConfig+0x1c2>
 800d19e:	e00b      	b.n	800d1b8 <UART_SetConfig+0x1c8>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	77fb      	strb	r3, [r7, #31]
 800d1a4:	e0cb      	b.n	800d33e <UART_SetConfig+0x34e>
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	77fb      	strb	r3, [r7, #31]
 800d1aa:	e0c8      	b.n	800d33e <UART_SetConfig+0x34e>
 800d1ac:	2304      	movs	r3, #4
 800d1ae:	77fb      	strb	r3, [r7, #31]
 800d1b0:	e0c5      	b.n	800d33e <UART_SetConfig+0x34e>
 800d1b2:	2308      	movs	r3, #8
 800d1b4:	77fb      	strb	r3, [r7, #31]
 800d1b6:	e0c2      	b.n	800d33e <UART_SetConfig+0x34e>
 800d1b8:	2310      	movs	r3, #16
 800d1ba:	77fb      	strb	r3, [r7, #31]
 800d1bc:	bf00      	nop
 800d1be:	e0be      	b.n	800d33e <UART_SetConfig+0x34e>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a4d      	ldr	r2, [pc, #308]	; (800d2fc <UART_SetConfig+0x30c>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d124      	bne.n	800d214 <UART_SetConfig+0x224>
 800d1ca:	4b48      	ldr	r3, [pc, #288]	; (800d2ec <UART_SetConfig+0x2fc>)
 800d1cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1d8:	d012      	beq.n	800d200 <UART_SetConfig+0x210>
 800d1da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1de:	d802      	bhi.n	800d1e6 <UART_SetConfig+0x1f6>
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d007      	beq.n	800d1f4 <UART_SetConfig+0x204>
 800d1e4:	e012      	b.n	800d20c <UART_SetConfig+0x21c>
 800d1e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1ea:	d006      	beq.n	800d1fa <UART_SetConfig+0x20a>
 800d1ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1f0:	d009      	beq.n	800d206 <UART_SetConfig+0x216>
 800d1f2:	e00b      	b.n	800d20c <UART_SetConfig+0x21c>
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	77fb      	strb	r3, [r7, #31]
 800d1f8:	e0a1      	b.n	800d33e <UART_SetConfig+0x34e>
 800d1fa:	2302      	movs	r3, #2
 800d1fc:	77fb      	strb	r3, [r7, #31]
 800d1fe:	e09e      	b.n	800d33e <UART_SetConfig+0x34e>
 800d200:	2304      	movs	r3, #4
 800d202:	77fb      	strb	r3, [r7, #31]
 800d204:	e09b      	b.n	800d33e <UART_SetConfig+0x34e>
 800d206:	2308      	movs	r3, #8
 800d208:	77fb      	strb	r3, [r7, #31]
 800d20a:	e098      	b.n	800d33e <UART_SetConfig+0x34e>
 800d20c:	2310      	movs	r3, #16
 800d20e:	77fb      	strb	r3, [r7, #31]
 800d210:	bf00      	nop
 800d212:	e094      	b.n	800d33e <UART_SetConfig+0x34e>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a39      	ldr	r2, [pc, #228]	; (800d300 <UART_SetConfig+0x310>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d124      	bne.n	800d268 <UART_SetConfig+0x278>
 800d21e:	4b33      	ldr	r3, [pc, #204]	; (800d2ec <UART_SetConfig+0x2fc>)
 800d220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d224:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d22c:	d012      	beq.n	800d254 <UART_SetConfig+0x264>
 800d22e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d232:	d802      	bhi.n	800d23a <UART_SetConfig+0x24a>
 800d234:	2b00      	cmp	r3, #0
 800d236:	d007      	beq.n	800d248 <UART_SetConfig+0x258>
 800d238:	e012      	b.n	800d260 <UART_SetConfig+0x270>
 800d23a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d23e:	d006      	beq.n	800d24e <UART_SetConfig+0x25e>
 800d240:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d244:	d009      	beq.n	800d25a <UART_SetConfig+0x26a>
 800d246:	e00b      	b.n	800d260 <UART_SetConfig+0x270>
 800d248:	2301      	movs	r3, #1
 800d24a:	77fb      	strb	r3, [r7, #31]
 800d24c:	e077      	b.n	800d33e <UART_SetConfig+0x34e>
 800d24e:	2302      	movs	r3, #2
 800d250:	77fb      	strb	r3, [r7, #31]
 800d252:	e074      	b.n	800d33e <UART_SetConfig+0x34e>
 800d254:	2304      	movs	r3, #4
 800d256:	77fb      	strb	r3, [r7, #31]
 800d258:	e071      	b.n	800d33e <UART_SetConfig+0x34e>
 800d25a:	2308      	movs	r3, #8
 800d25c:	77fb      	strb	r3, [r7, #31]
 800d25e:	e06e      	b.n	800d33e <UART_SetConfig+0x34e>
 800d260:	2310      	movs	r3, #16
 800d262:	77fb      	strb	r3, [r7, #31]
 800d264:	bf00      	nop
 800d266:	e06a      	b.n	800d33e <UART_SetConfig+0x34e>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a25      	ldr	r2, [pc, #148]	; (800d304 <UART_SetConfig+0x314>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d124      	bne.n	800d2bc <UART_SetConfig+0x2cc>
 800d272:	4b1e      	ldr	r3, [pc, #120]	; (800d2ec <UART_SetConfig+0x2fc>)
 800d274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d278:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d27c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d280:	d012      	beq.n	800d2a8 <UART_SetConfig+0x2b8>
 800d282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d286:	d802      	bhi.n	800d28e <UART_SetConfig+0x29e>
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d007      	beq.n	800d29c <UART_SetConfig+0x2ac>
 800d28c:	e012      	b.n	800d2b4 <UART_SetConfig+0x2c4>
 800d28e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d292:	d006      	beq.n	800d2a2 <UART_SetConfig+0x2b2>
 800d294:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d298:	d009      	beq.n	800d2ae <UART_SetConfig+0x2be>
 800d29a:	e00b      	b.n	800d2b4 <UART_SetConfig+0x2c4>
 800d29c:	2300      	movs	r3, #0
 800d29e:	77fb      	strb	r3, [r7, #31]
 800d2a0:	e04d      	b.n	800d33e <UART_SetConfig+0x34e>
 800d2a2:	2302      	movs	r3, #2
 800d2a4:	77fb      	strb	r3, [r7, #31]
 800d2a6:	e04a      	b.n	800d33e <UART_SetConfig+0x34e>
 800d2a8:	2304      	movs	r3, #4
 800d2aa:	77fb      	strb	r3, [r7, #31]
 800d2ac:	e047      	b.n	800d33e <UART_SetConfig+0x34e>
 800d2ae:	2308      	movs	r3, #8
 800d2b0:	77fb      	strb	r3, [r7, #31]
 800d2b2:	e044      	b.n	800d33e <UART_SetConfig+0x34e>
 800d2b4:	2310      	movs	r3, #16
 800d2b6:	77fb      	strb	r3, [r7, #31]
 800d2b8:	bf00      	nop
 800d2ba:	e040      	b.n	800d33e <UART_SetConfig+0x34e>
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a11      	ldr	r2, [pc, #68]	; (800d308 <UART_SetConfig+0x318>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d139      	bne.n	800d33a <UART_SetConfig+0x34a>
 800d2c6:	4b09      	ldr	r3, [pc, #36]	; (800d2ec <UART_SetConfig+0x2fc>)
 800d2c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d2d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d2d4:	d027      	beq.n	800d326 <UART_SetConfig+0x336>
 800d2d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d2da:	d817      	bhi.n	800d30c <UART_SetConfig+0x31c>
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d01c      	beq.n	800d31a <UART_SetConfig+0x32a>
 800d2e0:	e027      	b.n	800d332 <UART_SetConfig+0x342>
 800d2e2:	bf00      	nop
 800d2e4:	efff69f3 	.word	0xefff69f3
 800d2e8:	40011000 	.word	0x40011000
 800d2ec:	40023800 	.word	0x40023800
 800d2f0:	40004400 	.word	0x40004400
 800d2f4:	40004800 	.word	0x40004800
 800d2f8:	40004c00 	.word	0x40004c00
 800d2fc:	40005000 	.word	0x40005000
 800d300:	40011400 	.word	0x40011400
 800d304:	40007800 	.word	0x40007800
 800d308:	40007c00 	.word	0x40007c00
 800d30c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d310:	d006      	beq.n	800d320 <UART_SetConfig+0x330>
 800d312:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d316:	d009      	beq.n	800d32c <UART_SetConfig+0x33c>
 800d318:	e00b      	b.n	800d332 <UART_SetConfig+0x342>
 800d31a:	2300      	movs	r3, #0
 800d31c:	77fb      	strb	r3, [r7, #31]
 800d31e:	e00e      	b.n	800d33e <UART_SetConfig+0x34e>
 800d320:	2302      	movs	r3, #2
 800d322:	77fb      	strb	r3, [r7, #31]
 800d324:	e00b      	b.n	800d33e <UART_SetConfig+0x34e>
 800d326:	2304      	movs	r3, #4
 800d328:	77fb      	strb	r3, [r7, #31]
 800d32a:	e008      	b.n	800d33e <UART_SetConfig+0x34e>
 800d32c:	2308      	movs	r3, #8
 800d32e:	77fb      	strb	r3, [r7, #31]
 800d330:	e005      	b.n	800d33e <UART_SetConfig+0x34e>
 800d332:	2310      	movs	r3, #16
 800d334:	77fb      	strb	r3, [r7, #31]
 800d336:	bf00      	nop
 800d338:	e001      	b.n	800d33e <UART_SetConfig+0x34e>
 800d33a:	2310      	movs	r3, #16
 800d33c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	69db      	ldr	r3, [r3, #28]
 800d342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d346:	d17f      	bne.n	800d448 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800d348:	7ffb      	ldrb	r3, [r7, #31]
 800d34a:	2b08      	cmp	r3, #8
 800d34c:	d85c      	bhi.n	800d408 <UART_SetConfig+0x418>
 800d34e:	a201      	add	r2, pc, #4	; (adr r2, 800d354 <UART_SetConfig+0x364>)
 800d350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d354:	0800d379 	.word	0x0800d379
 800d358:	0800d399 	.word	0x0800d399
 800d35c:	0800d3b9 	.word	0x0800d3b9
 800d360:	0800d409 	.word	0x0800d409
 800d364:	0800d3d1 	.word	0x0800d3d1
 800d368:	0800d409 	.word	0x0800d409
 800d36c:	0800d409 	.word	0x0800d409
 800d370:	0800d409 	.word	0x0800d409
 800d374:	0800d3f1 	.word	0x0800d3f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d378:	f7fc f9ec 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800d37c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	005a      	lsls	r2, r3, #1
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	085b      	lsrs	r3, r3, #1
 800d388:	441a      	add	r2, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d392:	b29b      	uxth	r3, r3
 800d394:	61bb      	str	r3, [r7, #24]
        break;
 800d396:	e03a      	b.n	800d40e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d398:	f7fc f9f0 	bl	800977c <HAL_RCC_GetPCLK2Freq>
 800d39c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	005a      	lsls	r2, r3, #1
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	085b      	lsrs	r3, r3, #1
 800d3a8:	441a      	add	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	61bb      	str	r3, [r7, #24]
        break;
 800d3b6:	e02a      	b.n	800d40e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	085a      	lsrs	r2, r3, #1
 800d3be:	4b5f      	ldr	r3, [pc, #380]	; (800d53c <UART_SetConfig+0x54c>)
 800d3c0:	4413      	add	r3, r2
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	6852      	ldr	r2, [r2, #4]
 800d3c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	61bb      	str	r3, [r7, #24]
        break;
 800d3ce:	e01e      	b.n	800d40e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d3d0:	f7fc f8dc 	bl	800958c <HAL_RCC_GetSysClockFreq>
 800d3d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	005a      	lsls	r2, r3, #1
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	085b      	lsrs	r3, r3, #1
 800d3e0:	441a      	add	r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	61bb      	str	r3, [r7, #24]
        break;
 800d3ee:	e00e      	b.n	800d40e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	085b      	lsrs	r3, r3, #1
 800d3f6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800d402:	b29b      	uxth	r3, r3
 800d404:	61bb      	str	r3, [r7, #24]
        break;
 800d406:	e002      	b.n	800d40e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800d408:	2301      	movs	r3, #1
 800d40a:	75fb      	strb	r3, [r7, #23]
        break;
 800d40c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	2b0f      	cmp	r3, #15
 800d412:	d916      	bls.n	800d442 <UART_SetConfig+0x452>
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d41a:	d212      	bcs.n	800d442 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	b29b      	uxth	r3, r3
 800d420:	f023 030f 	bic.w	r3, r3, #15
 800d424:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	085b      	lsrs	r3, r3, #1
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	f003 0307 	and.w	r3, r3, #7
 800d430:	b29a      	uxth	r2, r3
 800d432:	897b      	ldrh	r3, [r7, #10]
 800d434:	4313      	orrs	r3, r2
 800d436:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	897a      	ldrh	r2, [r7, #10]
 800d43e:	60da      	str	r2, [r3, #12]
 800d440:	e070      	b.n	800d524 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	75fb      	strb	r3, [r7, #23]
 800d446:	e06d      	b.n	800d524 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800d448:	7ffb      	ldrb	r3, [r7, #31]
 800d44a:	2b08      	cmp	r3, #8
 800d44c:	d859      	bhi.n	800d502 <UART_SetConfig+0x512>
 800d44e:	a201      	add	r2, pc, #4	; (adr r2, 800d454 <UART_SetConfig+0x464>)
 800d450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d454:	0800d479 	.word	0x0800d479
 800d458:	0800d497 	.word	0x0800d497
 800d45c:	0800d4b5 	.word	0x0800d4b5
 800d460:	0800d503 	.word	0x0800d503
 800d464:	0800d4cd 	.word	0x0800d4cd
 800d468:	0800d503 	.word	0x0800d503
 800d46c:	0800d503 	.word	0x0800d503
 800d470:	0800d503 	.word	0x0800d503
 800d474:	0800d4eb 	.word	0x0800d4eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d478:	f7fc f96c 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800d47c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	085a      	lsrs	r2, r3, #1
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	441a      	add	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d490:	b29b      	uxth	r3, r3
 800d492:	61bb      	str	r3, [r7, #24]
        break;
 800d494:	e038      	b.n	800d508 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d496:	f7fc f971 	bl	800977c <HAL_RCC_GetPCLK2Freq>
 800d49a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	085a      	lsrs	r2, r3, #1
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	441a      	add	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	61bb      	str	r3, [r7, #24]
        break;
 800d4b2:	e029      	b.n	800d508 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	085a      	lsrs	r2, r3, #1
 800d4ba:	4b21      	ldr	r3, [pc, #132]	; (800d540 <UART_SetConfig+0x550>)
 800d4bc:	4413      	add	r3, r2
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	6852      	ldr	r2, [r2, #4]
 800d4c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	61bb      	str	r3, [r7, #24]
        break;
 800d4ca:	e01d      	b.n	800d508 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4cc:	f7fc f85e 	bl	800958c <HAL_RCC_GetSysClockFreq>
 800d4d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	085a      	lsrs	r2, r3, #1
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	441a      	add	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	61bb      	str	r3, [r7, #24]
        break;
 800d4e8:	e00e      	b.n	800d508 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	085b      	lsrs	r3, r3, #1
 800d4f0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4fc:	b29b      	uxth	r3, r3
 800d4fe:	61bb      	str	r3, [r7, #24]
        break;
 800d500:	e002      	b.n	800d508 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800d502:	2301      	movs	r3, #1
 800d504:	75fb      	strb	r3, [r7, #23]
        break;
 800d506:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	2b0f      	cmp	r3, #15
 800d50c:	d908      	bls.n	800d520 <UART_SetConfig+0x530>
 800d50e:	69bb      	ldr	r3, [r7, #24]
 800d510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d514:	d204      	bcs.n	800d520 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	69ba      	ldr	r2, [r7, #24]
 800d51c:	60da      	str	r2, [r3, #12]
 800d51e:	e001      	b.n	800d524 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800d530:	7dfb      	ldrb	r3, [r7, #23]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3720      	adds	r7, #32
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	01e84800 	.word	0x01e84800
 800d540:	00f42400 	.word	0x00f42400

0800d544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d550:	f003 0301 	and.w	r3, r3, #1
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00a      	beq.n	800d56e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	430a      	orrs	r2, r1
 800d56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d572:	f003 0302 	and.w	r3, r3, #2
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00a      	beq.n	800d590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	430a      	orrs	r2, r1
 800d58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d594:	f003 0304 	and.w	r3, r3, #4
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00a      	beq.n	800d5b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	430a      	orrs	r2, r1
 800d5b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b6:	f003 0308 	and.w	r3, r3, #8
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d00a      	beq.n	800d5d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	430a      	orrs	r2, r1
 800d5d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d8:	f003 0310 	and.w	r3, r3, #16
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d00a      	beq.n	800d5f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	430a      	orrs	r2, r1
 800d5f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fa:	f003 0320 	and.w	r3, r3, #32
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00a      	beq.n	800d618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	430a      	orrs	r2, r1
 800d616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d620:	2b00      	cmp	r3, #0
 800d622:	d01a      	beq.n	800d65a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	430a      	orrs	r2, r1
 800d638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d63e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d642:	d10a      	bne.n	800d65a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	430a      	orrs	r2, r1
 800d658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d662:	2b00      	cmp	r3, #0
 800d664:	d00a      	beq.n	800d67c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	430a      	orrs	r2, r1
 800d67a:	605a      	str	r2, [r3, #4]
  }
}
 800d67c:	bf00      	nop
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af02      	add	r7, sp, #8
 800d68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d696:	f7f8 feb1 	bl	80063fc <HAL_GetTick>
 800d69a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f003 0308 	and.w	r3, r3, #8
 800d6a6:	2b08      	cmp	r3, #8
 800d6a8:	d10e      	bne.n	800d6c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d6ae:	9300      	str	r3, [sp, #0]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 f814 	bl	800d6e6 <UART_WaitOnFlagUntilTimeout>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d001      	beq.n	800d6c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	e00a      	b.n	800d6de <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2220      	movs	r2, #32
 800d6cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2220      	movs	r2, #32
 800d6d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800d6dc:	2300      	movs	r3, #0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b084      	sub	sp, #16
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	60f8      	str	r0, [r7, #12]
 800d6ee:	60b9      	str	r1, [r7, #8]
 800d6f0:	603b      	str	r3, [r7, #0]
 800d6f2:	4613      	mov	r3, r2
 800d6f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6f6:	e05d      	b.n	800d7b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6f8:	69bb      	ldr	r3, [r7, #24]
 800d6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6fe:	d059      	beq.n	800d7b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d700:	f7f8 fe7c 	bl	80063fc <HAL_GetTick>
 800d704:	4602      	mov	r2, r0
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	1ad3      	subs	r3, r2, r3
 800d70a:	69ba      	ldr	r2, [r7, #24]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d302      	bcc.n	800d716 <UART_WaitOnFlagUntilTimeout+0x30>
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d11b      	bne.n	800d74e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d724:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	689a      	ldr	r2, [r3, #8]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f022 0201 	bic.w	r2, r2, #1
 800d734:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2220      	movs	r2, #32
 800d73a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2220      	movs	r2, #32
 800d740:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2200      	movs	r2, #0
 800d746:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800d74a:	2303      	movs	r3, #3
 800d74c:	e042      	b.n	800d7d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f003 0304 	and.w	r3, r3, #4
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d02b      	beq.n	800d7b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	69db      	ldr	r3, [r3, #28]
 800d762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d76a:	d123      	bne.n	800d7b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d774:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d784:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	689a      	ldr	r2, [r3, #8]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f022 0201 	bic.w	r2, r2, #1
 800d794:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2220      	movs	r2, #32
 800d79a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2220      	movs	r2, #32
 800d7a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2220      	movs	r2, #32
 800d7a6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800d7b0:	2303      	movs	r3, #3
 800d7b2:	e00f      	b.n	800d7d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	69da      	ldr	r2, [r3, #28]
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	4013      	ands	r3, r2
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	bf0c      	ite	eq
 800d7c4:	2301      	moveq	r3, #1
 800d7c6:	2300      	movne	r3, #0
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	79fb      	ldrb	r3, [r7, #7]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d092      	beq.n	800d6f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d7f2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2220      	movs	r2, #32
 800d7f8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d7fa:	bf00      	nop
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr

0800d806 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d806:	b480      	push	{r7}
 800d808:	b083      	sub	sp, #12
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	681a      	ldr	r2, [r3, #0]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d81c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	689a      	ldr	r2, [r3, #8]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f022 0201 	bic.w	r2, r2, #1
 800d82c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2220      	movs	r2, #32
 800d832:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	661a      	str	r2, [r3, #96]	; 0x60
}
 800d83a:	bf00      	nop
 800d83c:	370c      	adds	r7, #12
 800d83e:	46bd      	mov	sp, r7
 800d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d844:	4770      	bx	lr

0800d846 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d846:	b580      	push	{r7, lr}
 800d848:	b084      	sub	sp, #16
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d852:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	69db      	ldr	r3, [r3, #28]
 800d858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d85c:	d01e      	beq.n	800d89c <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2200      	movs	r2, #0
 800d862:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d874:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	689a      	ldr	r2, [r3, #8]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f022 0201 	bic.w	r2, r2, #1
 800d884:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	689a      	ldr	r2, [r3, #8]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d894:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2220      	movs	r2, #32
 800d89a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800d89c:	68f8      	ldr	r0, [r7, #12]
 800d89e:	f7ff fb89 	bl	800cfb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8a2:	bf00      	nop
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b084      	sub	sp, #16
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f7ff fb85 	bl	800cfc8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8be:	bf00      	nop
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b086      	sub	sp, #24
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8ea:	2b80      	cmp	r3, #128	; 0x80
 800d8ec:	d109      	bne.n	800d902 <UART_DMAError+0x3c>
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	2b21      	cmp	r3, #33	; 0x21
 800d8f2:	d106      	bne.n	800d902 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800d8fc:	6978      	ldr	r0, [r7, #20]
 800d8fe:	f7ff ff6d 	bl	800d7dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d90c:	2b40      	cmp	r3, #64	; 0x40
 800d90e:	d109      	bne.n	800d924 <UART_DMAError+0x5e>
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2b22      	cmp	r3, #34	; 0x22
 800d914:	d106      	bne.n	800d924 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	2200      	movs	r2, #0
 800d91a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800d91e:	6978      	ldr	r0, [r7, #20]
 800d920:	f7ff ff71 	bl	800d806 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d928:	f043 0210 	orr.w	r2, r3, #16
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d930:	6978      	ldr	r0, [r7, #20]
 800d932:	f7ff fb53 	bl	800cfdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d936:	bf00      	nop
 800d938:	3718      	adds	r7, #24
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}

0800d93e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d93e:	b580      	push	{r7, lr}
 800d940:	b084      	sub	sp, #16
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2200      	movs	r2, #0
 800d950:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2200      	movs	r2, #0
 800d958:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d95c:	68f8      	ldr	r0, [r7, #12]
 800d95e:	f7ff fb3d 	bl	800cfdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d962:	bf00      	nop
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}

0800d96a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d96a:	b580      	push	{r7, lr}
 800d96c:	b082      	sub	sp, #8
 800d96e:	af00      	add	r7, sp, #0
 800d970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d980:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2220      	movs	r2, #32
 800d986:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f7ff fb06 	bl	800cfa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d994:	bf00      	nop
 800d996:	3708      	adds	r7, #8
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d99c:	b084      	sub	sp, #16
 800d99e:	b480      	push	{r7}
 800d9a0:	b085      	sub	sp, #20
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	f107 001c 	add.w	r0, r7, #28
 800d9aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d9b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d9b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d9b6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d9ba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d9be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d9c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d9c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	685a      	ldr	r2, [r3, #4]
 800d9d2:	4b07      	ldr	r3, [pc, #28]	; (800d9f0 <SDMMC_Init+0x54>)
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	431a      	orrs	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3714      	adds	r7, #20
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	b004      	add	sp, #16
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	ffff8100 	.word	0xffff8100

0800d9f4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800da02:	4618      	mov	r0, r3
 800da04:	370c      	adds	r7, #12
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr

0800da0e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800da0e:	b480      	push	{r7}
 800da10:	b083      	sub	sp, #12
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
 800da16:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	681a      	ldr	r2, [r3, #0]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2203      	movs	r2, #3
 800da3c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800da3e:	2002      	movs	r0, #2
 800da40:	f7f8 fce8 	bl	8006414 <HAL_Delay>
  
  return HAL_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800da4e:	b480      	push	{r7}
 800da50:	b083      	sub	sp, #12
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f003 0303 	and.w	r3, r3, #3
}
 800da5e:	4618      	mov	r0, r3
 800da60:	370c      	adds	r7, #12
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
	...

0800da6c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800da6c:	b480      	push	{r7}
 800da6e:	b085      	sub	sp, #20
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
 800da74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800da76:	2300      	movs	r3, #0
 800da78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da8a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800da90:	431a      	orrs	r2, r3
                       Command->CPSM);
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800da96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	4313      	orrs	r3, r2
 800da9c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	68da      	ldr	r2, [r3, #12]
 800daa2:	4b06      	ldr	r3, [pc, #24]	; (800dabc <SDMMC_SendCommand+0x50>)
 800daa4:	4013      	ands	r3, r2
 800daa6:	68fa      	ldr	r2, [r7, #12]
 800daa8:	431a      	orrs	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3714      	adds	r7, #20
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	fffff000 	.word	0xfffff000

0800dac0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	691b      	ldr	r3, [r3, #16]
 800dacc:	b2db      	uxtb	r3, r3
}
 800dace:	4618      	mov	r0, r3
 800dad0:	370c      	adds	r7, #12
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr

0800dada <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800dada:	b480      	push	{r7}
 800dadc:	b085      	sub	sp, #20
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
 800dae2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	3314      	adds	r3, #20
 800dae8:	461a      	mov	r2, r3
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	4413      	add	r3, r2
 800daee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
}  
 800daf4:	4618      	mov	r0, r3
 800daf6:	3714      	adds	r7, #20
 800daf8:	46bd      	mov	sp, r7
 800dafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafe:	4770      	bx	lr

0800db00 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800db00:	b480      	push	{r7}
 800db02:	b085      	sub	sp, #20
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800db0a:	2300      	movs	r3, #0
 800db0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	681a      	ldr	r2, [r3, #0]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	685a      	ldr	r2, [r3, #4]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800db26:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800db2c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800db32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800db34:	68fa      	ldr	r2, [r7, #12]
 800db36:	4313      	orrs	r3, r2
 800db38:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db3e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	431a      	orrs	r2, r3
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800db4a:	2300      	movs	r3, #0

}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3714      	adds	r7, #20
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr

0800db58 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b088      	sub	sp, #32
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800db66:	2310      	movs	r3, #16
 800db68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800db6a:	2340      	movs	r3, #64	; 0x40
 800db6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800db6e:	2300      	movs	r3, #0
 800db70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800db72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800db78:	f107 0308 	add.w	r3, r7, #8
 800db7c:	4619      	mov	r1, r3
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7ff ff74 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800db84:	f241 3288 	movw	r2, #5000	; 0x1388
 800db88:	2110      	movs	r1, #16
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 fa42 	bl	800e014 <SDMMC_GetCmdResp1>
 800db90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800db92:	69fb      	ldr	r3, [r7, #28]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3720      	adds	r7, #32
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b088      	sub	sp, #32
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800dbaa:	2311      	movs	r3, #17
 800dbac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbae:	2340      	movs	r3, #64	; 0x40
 800dbb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dbbc:	f107 0308 	add.w	r3, r7, #8
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f7ff ff52 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dbc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbcc:	2111      	movs	r1, #17
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 fa20 	bl	800e014 <SDMMC_GetCmdResp1>
 800dbd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dbd6:	69fb      	ldr	r3, [r7, #28]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3720      	adds	r7, #32
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b088      	sub	sp, #32
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800dbee:	2312      	movs	r3, #18
 800dbf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dbf2:	2340      	movs	r3, #64	; 0x40
 800dbf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dbfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc00:	f107 0308 	add.w	r3, r7, #8
 800dc04:	4619      	mov	r1, r3
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f7ff ff30 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dc0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc10:	2112      	movs	r1, #18
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 f9fe 	bl	800e014 <SDMMC_GetCmdResp1>
 800dc18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc1a:	69fb      	ldr	r3, [r7, #28]
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3720      	adds	r7, #32
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b088      	sub	sp, #32
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dc32:	2318      	movs	r3, #24
 800dc34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc36:	2340      	movs	r3, #64	; 0x40
 800dc38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc44:	f107 0308 	add.w	r3, r7, #8
 800dc48:	4619      	mov	r1, r3
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff ff0e 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800dc50:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc54:	2118      	movs	r1, #24
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 f9dc 	bl	800e014 <SDMMC_GetCmdResp1>
 800dc5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dc5e:	69fb      	ldr	r3, [r7, #28]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3720      	adds	r7, #32
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b088      	sub	sp, #32
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dc76:	2319      	movs	r3, #25
 800dc78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dc7a:	2340      	movs	r3, #64	; 0x40
 800dc7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dc82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dc88:	f107 0308 	add.w	r3, r7, #8
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7ff feec 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800dc94:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc98:	2119      	movs	r1, #25
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f9ba 	bl	800e014 <SDMMC_GetCmdResp1>
 800dca0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dca2:	69fb      	ldr	r3, [r7, #28]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3720      	adds	r7, #32
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b088      	sub	sp, #32
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800dcb8:	230c      	movs	r3, #12
 800dcba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dcbc:	2340      	movs	r3, #64	; 0x40
 800dcbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dcc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dcca:	f107 0308 	add.w	r3, r7, #8
 800dcce:	4619      	mov	r1, r3
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f7ff fecb 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800dcd6:	4a05      	ldr	r2, [pc, #20]	; (800dcec <SDMMC_CmdStopTransfer+0x40>)
 800dcd8:	210c      	movs	r1, #12
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 f99a 	bl	800e014 <SDMMC_GetCmdResp1>
 800dce0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dce2:	69fb      	ldr	r3, [r7, #28]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3720      	adds	r7, #32
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	05f5e100 	.word	0x05f5e100

0800dcf0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b08a      	sub	sp, #40	; 0x28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800dd00:	2307      	movs	r3, #7
 800dd02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd04:	2340      	movs	r3, #64	; 0x40
 800dd06:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd10:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd12:	f107 0310 	add.w	r3, r7, #16
 800dd16:	4619      	mov	r1, r3
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f7ff fea7 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800dd1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd22:	2107      	movs	r1, #7
 800dd24:	68f8      	ldr	r0, [r7, #12]
 800dd26:	f000 f975 	bl	800e014 <SDMMC_GetCmdResp1>
 800dd2a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800dd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3728      	adds	r7, #40	; 0x28
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b088      	sub	sp, #32
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800dd42:	2300      	movs	r3, #0
 800dd44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800dd46:	2300      	movs	r3, #0
 800dd48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd54:	f107 0308 	add.w	r3, r7, #8
 800dd58:	4619      	mov	r1, r3
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f7ff fe86 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 f92f 	bl	800dfc4 <SDMMC_GetCmdError>
 800dd66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dd68:	69fb      	ldr	r3, [r7, #28]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3720      	adds	r7, #32
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b088      	sub	sp, #32
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800dd7a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800dd7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800dd80:	2308      	movs	r3, #8
 800dd82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800dd84:	2340      	movs	r3, #64	; 0x40
 800dd86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800dd8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dd92:	f107 0308 	add.w	r3, r7, #8
 800dd96:	4619      	mov	r1, r3
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7ff fe67 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 fb18 	bl	800e3d4 <SDMMC_GetCmdResp7>
 800dda4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dda6:	69fb      	ldr	r3, [r7, #28]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3720      	adds	r7, #32
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b088      	sub	sp, #32
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ddbe:	2337      	movs	r3, #55	; 0x37
 800ddc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ddc2:	2340      	movs	r3, #64	; 0x40
 800ddc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ddca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ddd0:	f107 0308 	add.w	r3, r7, #8
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7ff fe48 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800dddc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dde0:	2137      	movs	r1, #55	; 0x37
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 f916 	bl	800e014 <SDMMC_GetCmdResp1>
 800dde8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ddea:	69fb      	ldr	r3, [r7, #28]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3720      	adds	r7, #32
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b088      	sub	sp, #32
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ddfe:	683a      	ldr	r2, [r7, #0]
 800de00:	4b0d      	ldr	r3, [pc, #52]	; (800de38 <SDMMC_CmdAppOperCommand+0x44>)
 800de02:	4313      	orrs	r3, r2
 800de04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800de06:	2329      	movs	r3, #41	; 0x29
 800de08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de0a:	2340      	movs	r3, #64	; 0x40
 800de0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de0e:	2300      	movs	r3, #0
 800de10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de18:	f107 0308 	add.w	r3, r7, #8
 800de1c:	4619      	mov	r1, r3
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f7ff fe24 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 fa27 	bl	800e278 <SDMMC_GetCmdResp3>
 800de2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de2c:	69fb      	ldr	r3, [r7, #28]
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3720      	adds	r7, #32
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	80100000 	.word	0x80100000

0800de3c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b088      	sub	sp, #32
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800de4a:	2306      	movs	r3, #6
 800de4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de4e:	2340      	movs	r3, #64	; 0x40
 800de50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de52:	2300      	movs	r3, #0
 800de54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de5c:	f107 0308 	add.w	r3, r7, #8
 800de60:	4619      	mov	r1, r3
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7ff fe02 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800de68:	f241 3288 	movw	r2, #5000	; 0x1388
 800de6c:	2106      	movs	r1, #6
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f000 f8d0 	bl	800e014 <SDMMC_GetCmdResp1>
 800de74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800de76:	69fb      	ldr	r3, [r7, #28]
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3720      	adds	r7, #32
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b088      	sub	sp, #32
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800de88:	2300      	movs	r3, #0
 800de8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800de8c:	2333      	movs	r3, #51	; 0x33
 800de8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800de90:	2340      	movs	r3, #64	; 0x40
 800de92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800de94:	2300      	movs	r3, #0
 800de96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800de98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800de9e:	f107 0308 	add.w	r3, r7, #8
 800dea2:	4619      	mov	r1, r3
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f7ff fde1 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800deaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800deae:	2133      	movs	r1, #51	; 0x33
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 f8af 	bl	800e014 <SDMMC_GetCmdResp1>
 800deb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800deb8:	69fb      	ldr	r3, [r7, #28]
}
 800deba:	4618      	mov	r0, r3
 800debc:	3720      	adds	r7, #32
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b088      	sub	sp, #32
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800deca:	2300      	movs	r3, #0
 800decc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800dece:	2302      	movs	r3, #2
 800ded0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ded2:	23c0      	movs	r3, #192	; 0xc0
 800ded4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ded6:	2300      	movs	r3, #0
 800ded8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800deda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dede:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800dee0:	f107 0308 	add.w	r3, r7, #8
 800dee4:	4619      	mov	r1, r3
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f7ff fdc0 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f000 f97d 	bl	800e1ec <SDMMC_GetCmdResp2>
 800def2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800def4:	69fb      	ldr	r3, [r7, #28]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3720      	adds	r7, #32
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}

0800defe <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800defe:	b580      	push	{r7, lr}
 800df00:	b088      	sub	sp, #32
 800df02:	af00      	add	r7, sp, #0
 800df04:	6078      	str	r0, [r7, #4]
 800df06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800df0c:	2309      	movs	r3, #9
 800df0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800df10:	23c0      	movs	r3, #192	; 0xc0
 800df12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df14:	2300      	movs	r3, #0
 800df16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df1e:	f107 0308 	add.w	r3, r7, #8
 800df22:	4619      	mov	r1, r3
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f7ff fda1 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 f95e 	bl	800e1ec <SDMMC_GetCmdResp2>
 800df30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df32:	69fb      	ldr	r3, [r7, #28]
}
 800df34:	4618      	mov	r0, r3
 800df36:	3720      	adds	r7, #32
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b088      	sub	sp, #32
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800df46:	2300      	movs	r3, #0
 800df48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800df4a:	2303      	movs	r3, #3
 800df4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df4e:	2340      	movs	r3, #64	; 0x40
 800df50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df52:	2300      	movs	r3, #0
 800df54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df5c:	f107 0308 	add.w	r3, r7, #8
 800df60:	4619      	mov	r1, r3
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f7ff fd82 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800df68:	683a      	ldr	r2, [r7, #0]
 800df6a:	2103      	movs	r1, #3
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f000 f9bd 	bl	800e2ec <SDMMC_GetCmdResp6>
 800df72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df74:	69fb      	ldr	r3, [r7, #28]
}
 800df76:	4618      	mov	r0, r3
 800df78:	3720      	adds	r7, #32
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800df7e:	b580      	push	{r7, lr}
 800df80:	b088      	sub	sp, #32
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
 800df86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800df8c:	230d      	movs	r3, #13
 800df8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800df90:	2340      	movs	r3, #64	; 0x40
 800df92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800df94:	2300      	movs	r3, #0
 800df96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800df98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800df9e:	f107 0308 	add.w	r3, r7, #8
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f7ff fd61 	bl	800da6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800dfaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfae:	210d      	movs	r1, #13
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 f82f 	bl	800e014 <SDMMC_GetCmdResp1>
 800dfb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfb8:	69fb      	ldr	r3, [r7, #28]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3720      	adds	r7, #32
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
	...

0800dfc4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dfc4:	b490      	push	{r4, r7}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dfcc:	4b0f      	ldr	r3, [pc, #60]	; (800e00c <SDMMC_GetCmdError+0x48>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a0f      	ldr	r2, [pc, #60]	; (800e010 <SDMMC_GetCmdError+0x4c>)
 800dfd2:	fba2 2303 	umull	r2, r3, r2, r3
 800dfd6:	0a5b      	lsrs	r3, r3, #9
 800dfd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfdc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dfe0:	4623      	mov	r3, r4
 800dfe2:	1e5c      	subs	r4, r3, #1
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d102      	bne.n	800dfee <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dfe8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfec:	e009      	b.n	800e002 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d0f2      	beq.n	800dfe0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	22c5      	movs	r2, #197	; 0xc5
 800dffe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e000:	2300      	movs	r3, #0
}
 800e002:	4618      	mov	r0, r3
 800e004:	3708      	adds	r7, #8
 800e006:	46bd      	mov	sp, r7
 800e008:	bc90      	pop	{r4, r7}
 800e00a:	4770      	bx	lr
 800e00c:	20000000 	.word	0x20000000
 800e010:	10624dd3 	.word	0x10624dd3

0800e014 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e014:	b590      	push	{r4, r7, lr}
 800e016:	b087      	sub	sp, #28
 800e018:	af00      	add	r7, sp, #0
 800e01a:	60f8      	str	r0, [r7, #12]
 800e01c:	460b      	mov	r3, r1
 800e01e:	607a      	str	r2, [r7, #4]
 800e020:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e022:	4b6f      	ldr	r3, [pc, #444]	; (800e1e0 <SDMMC_GetCmdResp1+0x1cc>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4a6f      	ldr	r2, [pc, #444]	; (800e1e4 <SDMMC_GetCmdResp1+0x1d0>)
 800e028:	fba2 2303 	umull	r2, r3, r2, r3
 800e02c:	0a5b      	lsrs	r3, r3, #9
 800e02e:	687a      	ldr	r2, [r7, #4]
 800e030:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e034:	4623      	mov	r3, r4
 800e036:	1e5c      	subs	r4, r3, #1
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d102      	bne.n	800e042 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e03c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e040:	e0c9      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e046:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d0f0      	beq.n	800e034 <SDMMC_GetCmdResp1+0x20>
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d1eb      	bne.n	800e034 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e060:	f003 0304 	and.w	r3, r3, #4
 800e064:	2b00      	cmp	r3, #0
 800e066:	d004      	beq.n	800e072 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2204      	movs	r2, #4
 800e06c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e06e:	2304      	movs	r3, #4
 800e070:	e0b1      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e076:	f003 0301 	and.w	r3, r3, #1
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d004      	beq.n	800e088 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2201      	movs	r2, #1
 800e082:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e084:	2301      	movs	r3, #1
 800e086:	e0a6      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	22c5      	movs	r2, #197	; 0xc5
 800e08c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e08e:	68f8      	ldr	r0, [r7, #12]
 800e090:	f7ff fd16 	bl	800dac0 <SDMMC_GetCommandResponse>
 800e094:	4603      	mov	r3, r0
 800e096:	461a      	mov	r2, r3
 800e098:	7afb      	ldrb	r3, [r7, #11]
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d001      	beq.n	800e0a2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e099      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e0a2:	2100      	movs	r1, #0
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	f7ff fd18 	bl	800dada <SDMMC_GetResponse>
 800e0aa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e0ac:	693a      	ldr	r2, [r7, #16]
 800e0ae:	4b4e      	ldr	r3, [pc, #312]	; (800e1e8 <SDMMC_GetCmdResp1+0x1d4>)
 800e0b0:	4013      	ands	r3, r2
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d101      	bne.n	800e0ba <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	e08d      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	da02      	bge.n	800e0c6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e0c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e0c4:	e087      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d001      	beq.n	800e0d4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e0d0:	2340      	movs	r3, #64	; 0x40
 800e0d2:	e080      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d001      	beq.n	800e0e2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e0de:	2380      	movs	r3, #128	; 0x80
 800e0e0:	e079      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d002      	beq.n	800e0f2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e0ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e0f0:	e071      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d002      	beq.n	800e102 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e0fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e100:	e069      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d002      	beq.n	800e112 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e10c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e110:	e061      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d002      	beq.n	800e122 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e11c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e120:	e059      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d002      	beq.n	800e132 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e12c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e130:	e051      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d002      	beq.n	800e142 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e13c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e140:	e049      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d002      	beq.n	800e152 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e14c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e150:	e041      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d002      	beq.n	800e162 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e15c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e160:	e039      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d002      	beq.n	800e172 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e16c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e170:	e031      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d002      	beq.n	800e182 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e17c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e180:	e029      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d002      	beq.n	800e192 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e18c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e190:	e021      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d002      	beq.n	800e1a2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e19c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e1a0:	e019      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d002      	beq.n	800e1b2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e1ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e1b0:	e011      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d002      	beq.n	800e1c2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e1bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e1c0:	e009      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	f003 0308 	and.w	r3, r3, #8
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d002      	beq.n	800e1d2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e1cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e1d0:	e001      	b.n	800e1d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e1d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	371c      	adds	r7, #28
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd90      	pop	{r4, r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	20000000 	.word	0x20000000
 800e1e4:	10624dd3 	.word	0x10624dd3
 800e1e8:	fdffe008 	.word	0xfdffe008

0800e1ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800e1ec:	b490      	push	{r4, r7}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e1f4:	4b1e      	ldr	r3, [pc, #120]	; (800e270 <SDMMC_GetCmdResp2+0x84>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	4a1e      	ldr	r2, [pc, #120]	; (800e274 <SDMMC_GetCmdResp2+0x88>)
 800e1fa:	fba2 2303 	umull	r2, r3, r2, r3
 800e1fe:	0a5b      	lsrs	r3, r3, #9
 800e200:	f241 3288 	movw	r2, #5000	; 0x1388
 800e204:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e208:	4623      	mov	r3, r4
 800e20a:	1e5c      	subs	r4, r3, #1
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d102      	bne.n	800e216 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e210:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e214:	e026      	b.n	800e264 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e21a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e222:	2b00      	cmp	r3, #0
 800e224:	d0f0      	beq.n	800e208 <SDMMC_GetCmdResp2+0x1c>
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d1eb      	bne.n	800e208 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e234:	f003 0304 	and.w	r3, r3, #4
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d004      	beq.n	800e246 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2204      	movs	r2, #4
 800e240:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e242:	2304      	movs	r3, #4
 800e244:	e00e      	b.n	800e264 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e24a:	f003 0301 	and.w	r3, r3, #1
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d004      	beq.n	800e25c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2201      	movs	r2, #1
 800e256:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e258:	2301      	movs	r3, #1
 800e25a:	e003      	b.n	800e264 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	22c5      	movs	r2, #197	; 0xc5
 800e260:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e262:	2300      	movs	r3, #0
}
 800e264:	4618      	mov	r0, r3
 800e266:	3710      	adds	r7, #16
 800e268:	46bd      	mov	sp, r7
 800e26a:	bc90      	pop	{r4, r7}
 800e26c:	4770      	bx	lr
 800e26e:	bf00      	nop
 800e270:	20000000 	.word	0x20000000
 800e274:	10624dd3 	.word	0x10624dd3

0800e278 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800e278:	b490      	push	{r4, r7}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e280:	4b18      	ldr	r3, [pc, #96]	; (800e2e4 <SDMMC_GetCmdResp3+0x6c>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a18      	ldr	r2, [pc, #96]	; (800e2e8 <SDMMC_GetCmdResp3+0x70>)
 800e286:	fba2 2303 	umull	r2, r3, r2, r3
 800e28a:	0a5b      	lsrs	r3, r3, #9
 800e28c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e290:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e294:	4623      	mov	r3, r4
 800e296:	1e5c      	subs	r4, r3, #1
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d102      	bne.n	800e2a2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e29c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2a0:	e01b      	b.n	800e2da <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d0f0      	beq.n	800e294 <SDMMC_GetCmdResp3+0x1c>
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d1eb      	bne.n	800e294 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c0:	f003 0304 	and.w	r3, r3, #4
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d004      	beq.n	800e2d2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2204      	movs	r2, #4
 800e2cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e2ce:	2304      	movs	r3, #4
 800e2d0:	e003      	b.n	800e2da <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	22c5      	movs	r2, #197	; 0xc5
 800e2d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e2d8:	2300      	movs	r3, #0
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bc90      	pop	{r4, r7}
 800e2e2:	4770      	bx	lr
 800e2e4:	20000000 	.word	0x20000000
 800e2e8:	10624dd3 	.word	0x10624dd3

0800e2ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e2ec:	b590      	push	{r4, r7, lr}
 800e2ee:	b087      	sub	sp, #28
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	607a      	str	r2, [r7, #4]
 800e2f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e2fa:	4b34      	ldr	r3, [pc, #208]	; (800e3cc <SDMMC_GetCmdResp6+0xe0>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4a34      	ldr	r2, [pc, #208]	; (800e3d0 <SDMMC_GetCmdResp6+0xe4>)
 800e300:	fba2 2303 	umull	r2, r3, r2, r3
 800e304:	0a5b      	lsrs	r3, r3, #9
 800e306:	f241 3288 	movw	r2, #5000	; 0x1388
 800e30a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e30e:	4623      	mov	r3, r4
 800e310:	1e5c      	subs	r4, r3, #1
 800e312:	2b00      	cmp	r3, #0
 800e314:	d102      	bne.n	800e31c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e316:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e31a:	e052      	b.n	800e3c2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e320:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d0f0      	beq.n	800e30e <SDMMC_GetCmdResp6+0x22>
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1eb      	bne.n	800e30e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e33a:	f003 0304 	and.w	r3, r3, #4
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d004      	beq.n	800e34c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2204      	movs	r2, #4
 800e346:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e348:	2304      	movs	r3, #4
 800e34a:	e03a      	b.n	800e3c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e350:	f003 0301 	and.w	r3, r3, #1
 800e354:	2b00      	cmp	r3, #0
 800e356:	d004      	beq.n	800e362 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2201      	movs	r2, #1
 800e35c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e35e:	2301      	movs	r3, #1
 800e360:	e02f      	b.n	800e3c2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	f7ff fbac 	bl	800dac0 <SDMMC_GetCommandResponse>
 800e368:	4603      	mov	r3, r0
 800e36a:	461a      	mov	r2, r3
 800e36c:	7afb      	ldrb	r3, [r7, #11]
 800e36e:	4293      	cmp	r3, r2
 800e370:	d001      	beq.n	800e376 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e372:	2301      	movs	r3, #1
 800e374:	e025      	b.n	800e3c2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	22c5      	movs	r2, #197	; 0xc5
 800e37a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800e37c:	2100      	movs	r1, #0
 800e37e:	68f8      	ldr	r0, [r7, #12]
 800e380:	f7ff fbab 	bl	800dada <SDMMC_GetResponse>
 800e384:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d106      	bne.n	800e39e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	0c1b      	lsrs	r3, r3, #16
 800e394:	b29a      	uxth	r2, r3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e39a:	2300      	movs	r3, #0
 800e39c:	e011      	b.n	800e3c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d002      	beq.n	800e3ae <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e3a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e3ac:	e009      	b.n	800e3c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d002      	beq.n	800e3be <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e3b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3bc:	e001      	b.n	800e3c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e3be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	371c      	adds	r7, #28
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd90      	pop	{r4, r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	20000000 	.word	0x20000000
 800e3d0:	10624dd3 	.word	0x10624dd3

0800e3d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800e3d4:	b490      	push	{r4, r7}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e3dc:	4b21      	ldr	r3, [pc, #132]	; (800e464 <SDMMC_GetCmdResp7+0x90>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a21      	ldr	r2, [pc, #132]	; (800e468 <SDMMC_GetCmdResp7+0x94>)
 800e3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3e6:	0a5b      	lsrs	r3, r3, #9
 800e3e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e3f0:	4623      	mov	r3, r4
 800e3f2:	1e5c      	subs	r4, r3, #1
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d102      	bne.n	800e3fe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e3f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3fc:	e02c      	b.n	800e458 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e402:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d0f0      	beq.n	800e3f0 <SDMMC_GetCmdResp7+0x1c>
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800e414:	2b00      	cmp	r3, #0
 800e416:	d1eb      	bne.n	800e3f0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e41c:	f003 0304 	and.w	r3, r3, #4
 800e420:	2b00      	cmp	r3, #0
 800e422:	d004      	beq.n	800e42e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2204      	movs	r2, #4
 800e428:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e42a:	2304      	movs	r3, #4
 800e42c:	e014      	b.n	800e458 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e432:	f003 0301 	and.w	r3, r3, #1
 800e436:	2b00      	cmp	r3, #0
 800e438:	d004      	beq.n	800e444 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2201      	movs	r2, #1
 800e43e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e440:	2301      	movs	r3, #1
 800e442:	e009      	b.n	800e458 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d002      	beq.n	800e456 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2240      	movs	r2, #64	; 0x40
 800e454:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e456:	2300      	movs	r3, #0
  
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bc90      	pop	{r4, r7}
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	20000000 	.word	0x20000000
 800e468:	10624dd3 	.word	0x10624dd3

0800e46c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e46c:	b084      	sub	sp, #16
 800e46e:	b580      	push	{r7, lr}
 800e470:	b084      	sub	sp, #16
 800e472:	af00      	add	r7, sp, #0
 800e474:	6078      	str	r0, [r7, #4]
 800e476:	f107 001c 	add.w	r0, r7, #28
 800e47a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e480:	2b01      	cmp	r3, #1
 800e482:	d120      	bne.n	800e4c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e488:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	68da      	ldr	r2, [r3, #12]
 800e494:	4b20      	ldr	r3, [pc, #128]	; (800e518 <USB_CoreInit+0xac>)
 800e496:	4013      	ands	r3, r2
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e4a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d105      	bne.n	800e4ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f001 fac4 	bl	800fa48 <USB_CoreReset>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73fb      	strb	r3, [r7, #15]
 800e4c4:	e010      	b.n	800e4e8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	68db      	ldr	r3, [r3, #12]
 800e4ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f001 fab8 	bl	800fa48 <USB_CoreReset>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d10b      	bne.n	800e506 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	f043 0206 	orr.w	r2, r3, #6
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	f043 0220 	orr.w	r2, r3, #32
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e506:	7bfb      	ldrb	r3, [r7, #15]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3710      	adds	r7, #16
 800e50c:	46bd      	mov	sp, r7
 800e50e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e512:	b004      	add	sp, #16
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop
 800e518:	ffbdffbf 	.word	0xffbdffbf

0800e51c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b087      	sub	sp, #28
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	4613      	mov	r3, r2
 800e528:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e52a:	79fb      	ldrb	r3, [r7, #7]
 800e52c:	2b02      	cmp	r3, #2
 800e52e:	d165      	bne.n	800e5fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	4a41      	ldr	r2, [pc, #260]	; (800e638 <USB_SetTurnaroundTime+0x11c>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d906      	bls.n	800e546 <USB_SetTurnaroundTime+0x2a>
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	4a40      	ldr	r2, [pc, #256]	; (800e63c <USB_SetTurnaroundTime+0x120>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d802      	bhi.n	800e546 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e540:	230f      	movs	r3, #15
 800e542:	617b      	str	r3, [r7, #20]
 800e544:	e062      	b.n	800e60c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	4a3c      	ldr	r2, [pc, #240]	; (800e63c <USB_SetTurnaroundTime+0x120>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d906      	bls.n	800e55c <USB_SetTurnaroundTime+0x40>
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	4a3b      	ldr	r2, [pc, #236]	; (800e640 <USB_SetTurnaroundTime+0x124>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d802      	bhi.n	800e55c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e556:	230e      	movs	r3, #14
 800e558:	617b      	str	r3, [r7, #20]
 800e55a:	e057      	b.n	800e60c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	4a38      	ldr	r2, [pc, #224]	; (800e640 <USB_SetTurnaroundTime+0x124>)
 800e560:	4293      	cmp	r3, r2
 800e562:	d906      	bls.n	800e572 <USB_SetTurnaroundTime+0x56>
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	4a37      	ldr	r2, [pc, #220]	; (800e644 <USB_SetTurnaroundTime+0x128>)
 800e568:	4293      	cmp	r3, r2
 800e56a:	d802      	bhi.n	800e572 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e56c:	230d      	movs	r3, #13
 800e56e:	617b      	str	r3, [r7, #20]
 800e570:	e04c      	b.n	800e60c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	4a33      	ldr	r2, [pc, #204]	; (800e644 <USB_SetTurnaroundTime+0x128>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d906      	bls.n	800e588 <USB_SetTurnaroundTime+0x6c>
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	4a32      	ldr	r2, [pc, #200]	; (800e648 <USB_SetTurnaroundTime+0x12c>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d802      	bhi.n	800e588 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e582:	230c      	movs	r3, #12
 800e584:	617b      	str	r3, [r7, #20]
 800e586:	e041      	b.n	800e60c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	4a2f      	ldr	r2, [pc, #188]	; (800e648 <USB_SetTurnaroundTime+0x12c>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d906      	bls.n	800e59e <USB_SetTurnaroundTime+0x82>
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	4a2e      	ldr	r2, [pc, #184]	; (800e64c <USB_SetTurnaroundTime+0x130>)
 800e594:	4293      	cmp	r3, r2
 800e596:	d802      	bhi.n	800e59e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e598:	230b      	movs	r3, #11
 800e59a:	617b      	str	r3, [r7, #20]
 800e59c:	e036      	b.n	800e60c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	4a2a      	ldr	r2, [pc, #168]	; (800e64c <USB_SetTurnaroundTime+0x130>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d906      	bls.n	800e5b4 <USB_SetTurnaroundTime+0x98>
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	4a29      	ldr	r2, [pc, #164]	; (800e650 <USB_SetTurnaroundTime+0x134>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d802      	bhi.n	800e5b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e5ae:	230a      	movs	r3, #10
 800e5b0:	617b      	str	r3, [r7, #20]
 800e5b2:	e02b      	b.n	800e60c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	4a26      	ldr	r2, [pc, #152]	; (800e650 <USB_SetTurnaroundTime+0x134>)
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	d906      	bls.n	800e5ca <USB_SetTurnaroundTime+0xae>
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	4a25      	ldr	r2, [pc, #148]	; (800e654 <USB_SetTurnaroundTime+0x138>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d802      	bhi.n	800e5ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e5c4:	2309      	movs	r3, #9
 800e5c6:	617b      	str	r3, [r7, #20]
 800e5c8:	e020      	b.n	800e60c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	4a21      	ldr	r2, [pc, #132]	; (800e654 <USB_SetTurnaroundTime+0x138>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d906      	bls.n	800e5e0 <USB_SetTurnaroundTime+0xc4>
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	4a20      	ldr	r2, [pc, #128]	; (800e658 <USB_SetTurnaroundTime+0x13c>)
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d802      	bhi.n	800e5e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e5da:	2308      	movs	r3, #8
 800e5dc:	617b      	str	r3, [r7, #20]
 800e5de:	e015      	b.n	800e60c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	4a1d      	ldr	r2, [pc, #116]	; (800e658 <USB_SetTurnaroundTime+0x13c>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d906      	bls.n	800e5f6 <USB_SetTurnaroundTime+0xda>
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	4a1c      	ldr	r2, [pc, #112]	; (800e65c <USB_SetTurnaroundTime+0x140>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d802      	bhi.n	800e5f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e5f0:	2307      	movs	r3, #7
 800e5f2:	617b      	str	r3, [r7, #20]
 800e5f4:	e00a      	b.n	800e60c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e5f6:	2306      	movs	r3, #6
 800e5f8:	617b      	str	r3, [r7, #20]
 800e5fa:	e007      	b.n	800e60c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e5fc:	79fb      	ldrb	r3, [r7, #7]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d102      	bne.n	800e608 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e602:	2309      	movs	r3, #9
 800e604:	617b      	str	r3, [r7, #20]
 800e606:	e001      	b.n	800e60c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e608:	2309      	movs	r3, #9
 800e60a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	68da      	ldr	r2, [r3, #12]
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	029b      	lsls	r3, r3, #10
 800e620:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e624:	431a      	orrs	r2, r3
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	371c      	adds	r7, #28
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr
 800e638:	00d8acbf 	.word	0x00d8acbf
 800e63c:	00e4e1bf 	.word	0x00e4e1bf
 800e640:	00f423ff 	.word	0x00f423ff
 800e644:	0106737f 	.word	0x0106737f
 800e648:	011a499f 	.word	0x011a499f
 800e64c:	01312cff 	.word	0x01312cff
 800e650:	014ca43f 	.word	0x014ca43f
 800e654:	016e35ff 	.word	0x016e35ff
 800e658:	01a6ab1f 	.word	0x01a6ab1f
 800e65c:	01e847ff 	.word	0x01e847ff

0800e660 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e660:	b480      	push	{r7}
 800e662:	b083      	sub	sp, #12
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	689b      	ldr	r3, [r3, #8]
 800e66c:	f043 0201 	orr.w	r2, r3, #1
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e674:	2300      	movs	r3, #0
}
 800e676:	4618      	mov	r0, r3
 800e678:	370c      	adds	r7, #12
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr

0800e682 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e682:	b480      	push	{r7}
 800e684:	b083      	sub	sp, #12
 800e686:	af00      	add	r7, sp, #0
 800e688:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	f023 0201 	bic.w	r2, r3, #1
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e696:	2300      	movs	r3, #0
}
 800e698:	4618      	mov	r0, r3
 800e69a:	370c      	adds	r7, #12
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr

0800e6a4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e6bc:	78fb      	ldrb	r3, [r7, #3]
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d106      	bne.n	800e6d0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	68db      	ldr	r3, [r3, #12]
 800e6c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	60da      	str	r2, [r3, #12]
 800e6ce:	e00b      	b.n	800e6e8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e6d0:	78fb      	ldrb	r3, [r7, #3]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d106      	bne.n	800e6e4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	68db      	ldr	r3, [r3, #12]
 800e6da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	60da      	str	r2, [r3, #12]
 800e6e2:	e001      	b.n	800e6e8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e003      	b.n	800e6f0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e6e8:	2032      	movs	r0, #50	; 0x32
 800e6ea:	f7f7 fe93 	bl	8006414 <HAL_Delay>

  return HAL_OK;
 800e6ee:	2300      	movs	r3, #0
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3708      	adds	r7, #8
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e6f8:	b084      	sub	sp, #16
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b086      	sub	sp, #24
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
 800e702:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e70a:	2300      	movs	r3, #0
 800e70c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e712:	2300      	movs	r3, #0
 800e714:	613b      	str	r3, [r7, #16]
 800e716:	e009      	b.n	800e72c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	3340      	adds	r3, #64	; 0x40
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	4413      	add	r3, r2
 800e722:	2200      	movs	r2, #0
 800e724:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	3301      	adds	r3, #1
 800e72a:	613b      	str	r3, [r7, #16]
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	2b0e      	cmp	r3, #14
 800e730:	d9f2      	bls.n	800e718 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e734:	2b00      	cmp	r3, #0
 800e736:	d11c      	bne.n	800e772 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e746:	f043 0302 	orr.w	r3, r3, #2
 800e74a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e750:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	601a      	str	r2, [r3, #0]
 800e770:	e005      	b.n	800e77e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e776:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e784:	461a      	mov	r2, r3
 800e786:	2300      	movs	r3, #0
 800e788:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e790:	4619      	mov	r1, r3
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e798:	461a      	mov	r2, r3
 800e79a:	680b      	ldr	r3, [r1, #0]
 800e79c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d10c      	bne.n	800e7be <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d104      	bne.n	800e7b4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 f959 	bl	800ea64 <USB_SetDevSpeed>
 800e7b2:	e018      	b.n	800e7e6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e7b4:	2101      	movs	r1, #1
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 f954 	bl	800ea64 <USB_SetDevSpeed>
 800e7bc:	e013      	b.n	800e7e6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800e7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c0:	2b03      	cmp	r3, #3
 800e7c2:	d10c      	bne.n	800e7de <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d104      	bne.n	800e7d4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e7ca:	2100      	movs	r1, #0
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 f949 	bl	800ea64 <USB_SetDevSpeed>
 800e7d2:	e008      	b.n	800e7e6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e7d4:	2101      	movs	r1, #1
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f944 	bl	800ea64 <USB_SetDevSpeed>
 800e7dc:	e003      	b.n	800e7e6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e7de:	2103      	movs	r1, #3
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f000 f93f 	bl	800ea64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e7e6:	2110      	movs	r1, #16
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f000 f8f3 	bl	800e9d4 <USB_FlushTxFifo>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d001      	beq.n	800e7f8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f000 f911 	bl	800ea20 <USB_FlushRxFifo>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800e804:	2301      	movs	r3, #1
 800e806:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e80e:	461a      	mov	r2, r3
 800e810:	2300      	movs	r3, #0
 800e812:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e81a:	461a      	mov	r2, r3
 800e81c:	2300      	movs	r3, #0
 800e81e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e826:	461a      	mov	r2, r3
 800e828:	2300      	movs	r3, #0
 800e82a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e82c:	2300      	movs	r3, #0
 800e82e:	613b      	str	r3, [r7, #16]
 800e830:	e043      	b.n	800e8ba <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	015a      	lsls	r2, r3, #5
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	4413      	add	r3, r2
 800e83a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e848:	d118      	bne.n	800e87c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10a      	bne.n	800e866 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	015a      	lsls	r2, r3, #5
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	4413      	add	r3, r2
 800e858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e85c:	461a      	mov	r2, r3
 800e85e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e862:	6013      	str	r3, [r2, #0]
 800e864:	e013      	b.n	800e88e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	015a      	lsls	r2, r3, #5
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	4413      	add	r3, r2
 800e86e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e872:	461a      	mov	r2, r3
 800e874:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e878:	6013      	str	r3, [r2, #0]
 800e87a:	e008      	b.n	800e88e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	015a      	lsls	r2, r3, #5
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	4413      	add	r3, r2
 800e884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e888:	461a      	mov	r2, r3
 800e88a:	2300      	movs	r3, #0
 800e88c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	015a      	lsls	r2, r3, #5
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	4413      	add	r3, r2
 800e896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e89a:	461a      	mov	r2, r3
 800e89c:	2300      	movs	r3, #0
 800e89e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	015a      	lsls	r2, r3, #5
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e8b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	613b      	str	r3, [r7, #16]
 800e8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8bc:	693a      	ldr	r2, [r7, #16]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d3b7      	bcc.n	800e832 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	613b      	str	r3, [r7, #16]
 800e8c6:	e043      	b.n	800e950 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	015a      	lsls	r2, r3, #5
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	4413      	add	r3, r2
 800e8d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e8da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e8de:	d118      	bne.n	800e912 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d10a      	bne.n	800e8fc <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	015a      	lsls	r2, r3, #5
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e8f8:	6013      	str	r3, [r2, #0]
 800e8fa:	e013      	b.n	800e924 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	015a      	lsls	r2, r3, #5
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	4413      	add	r3, r2
 800e904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e908:	461a      	mov	r2, r3
 800e90a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e90e:	6013      	str	r3, [r2, #0]
 800e910:	e008      	b.n	800e924 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	015a      	lsls	r2, r3, #5
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	4413      	add	r3, r2
 800e91a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e91e:	461a      	mov	r2, r3
 800e920:	2300      	movs	r3, #0
 800e922:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	015a      	lsls	r2, r3, #5
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	4413      	add	r3, r2
 800e92c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e930:	461a      	mov	r2, r3
 800e932:	2300      	movs	r3, #0
 800e934:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	015a      	lsls	r2, r3, #5
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	4413      	add	r3, r2
 800e93e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e942:	461a      	mov	r2, r3
 800e944:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e948:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	3301      	adds	r3, #1
 800e94e:	613b      	str	r3, [r7, #16]
 800e950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e952:	693a      	ldr	r2, [r7, #16]
 800e954:	429a      	cmp	r2, r3
 800e956:	d3b7      	bcc.n	800e8c8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e96a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2200      	movs	r2, #0
 800e970:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e978:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d105      	bne.n	800e98c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	699b      	ldr	r3, [r3, #24]
 800e984:	f043 0210 	orr.w	r2, r3, #16
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	699a      	ldr	r2, [r3, #24]
 800e990:	4b0e      	ldr	r3, [pc, #56]	; (800e9cc <USB_DevInit+0x2d4>)
 800e992:	4313      	orrs	r3, r2
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d005      	beq.n	800e9aa <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	699b      	ldr	r3, [r3, #24]
 800e9a2:	f043 0208 	orr.w	r2, r3, #8
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e9aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d105      	bne.n	800e9bc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	699a      	ldr	r2, [r3, #24]
 800e9b4:	4b06      	ldr	r3, [pc, #24]	; (800e9d0 <USB_DevInit+0x2d8>)
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	687a      	ldr	r2, [r7, #4]
 800e9ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3718      	adds	r7, #24
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e9c8:	b004      	add	sp, #16
 800e9ca:	4770      	bx	lr
 800e9cc:	803c3800 	.word	0x803c3800
 800e9d0:	40000004 	.word	0x40000004

0800e9d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b085      	sub	sp, #20
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	019b      	lsls	r3, r3, #6
 800e9e6:	f043 0220 	orr.w	r2, r3, #32
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	60fb      	str	r3, [r7, #12]
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	4a09      	ldr	r2, [pc, #36]	; (800ea1c <USB_FlushTxFifo+0x48>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d901      	bls.n	800ea00 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e9fc:	2303      	movs	r3, #3
 800e9fe:	e006      	b.n	800ea0e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	691b      	ldr	r3, [r3, #16]
 800ea04:	f003 0320 	and.w	r3, r3, #32
 800ea08:	2b20      	cmp	r3, #32
 800ea0a:	d0f0      	beq.n	800e9ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ea0c:	2300      	movs	r3, #0
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3714      	adds	r7, #20
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr
 800ea1a:	bf00      	nop
 800ea1c:	00030d40 	.word	0x00030d40

0800ea20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b085      	sub	sp, #20
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2210      	movs	r2, #16
 800ea30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	3301      	adds	r3, #1
 800ea36:	60fb      	str	r3, [r7, #12]
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	4a09      	ldr	r2, [pc, #36]	; (800ea60 <USB_FlushRxFifo+0x40>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d901      	bls.n	800ea44 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ea40:	2303      	movs	r3, #3
 800ea42:	e006      	b.n	800ea52 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	691b      	ldr	r3, [r3, #16]
 800ea48:	f003 0310 	and.w	r3, r3, #16
 800ea4c:	2b10      	cmp	r3, #16
 800ea4e:	d0f0      	beq.n	800ea32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ea50:	2300      	movs	r3, #0
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3714      	adds	r7, #20
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	00030d40 	.word	0x00030d40

0800ea64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b085      	sub	sp, #20
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	78fb      	ldrb	r3, [r7, #3]
 800ea7e:	68f9      	ldr	r1, [r7, #12]
 800ea80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea84:	4313      	orrs	r3, r2
 800ea86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ea88:	2300      	movs	r3, #0
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3714      	adds	r7, #20
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr

0800ea96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ea96:	b480      	push	{r7}
 800ea98:	b087      	sub	sp, #28
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	f003 0306 	and.w	r3, r3, #6
 800eaae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d102      	bne.n	800eabc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800eab6:	2300      	movs	r3, #0
 800eab8:	75fb      	strb	r3, [r7, #23]
 800eaba:	e00a      	b.n	800ead2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	d002      	beq.n	800eac8 <USB_GetDevSpeed+0x32>
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2b06      	cmp	r3, #6
 800eac6:	d102      	bne.n	800eace <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800eac8:	2302      	movs	r3, #2
 800eaca:	75fb      	strb	r3, [r7, #23]
 800eacc:	e001      	b.n	800ead2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800eace:	230f      	movs	r3, #15
 800ead0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ead2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	371c      	adds	r7, #28
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b085      	sub	sp, #20
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	785b      	ldrb	r3, [r3, #1]
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d139      	bne.n	800eb70 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb02:	69da      	ldr	r2, [r3, #28]
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	f003 030f 	and.w	r3, r3, #15
 800eb0c:	2101      	movs	r1, #1
 800eb0e:	fa01 f303 	lsl.w	r3, r1, r3
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	68f9      	ldr	r1, [r7, #12]
 800eb16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb1a:	4313      	orrs	r3, r2
 800eb1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	015a      	lsls	r2, r3, #5
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	4413      	add	r3, r2
 800eb26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d153      	bne.n	800ebdc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	015a      	lsls	r2, r3, #5
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	4413      	add	r3, r2
 800eb3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	78db      	ldrb	r3, [r3, #3]
 800eb4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eb50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	059b      	lsls	r3, r3, #22
 800eb56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eb58:	431a      	orrs	r2, r3
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	0159      	lsls	r1, r3, #5
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	440b      	add	r3, r1
 800eb62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb66:	4619      	mov	r1, r3
 800eb68:	4b20      	ldr	r3, [pc, #128]	; (800ebec <USB_ActivateEndpoint+0x10c>)
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	600b      	str	r3, [r1, #0]
 800eb6e:	e035      	b.n	800ebdc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb76:	69da      	ldr	r2, [r3, #28]
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	f003 030f 	and.w	r3, r3, #15
 800eb80:	2101      	movs	r1, #1
 800eb82:	fa01 f303 	lsl.w	r3, r1, r3
 800eb86:	041b      	lsls	r3, r3, #16
 800eb88:	68f9      	ldr	r1, [r7, #12]
 800eb8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	015a      	lsls	r2, r3, #5
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	4413      	add	r3, r2
 800eb9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d119      	bne.n	800ebdc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	015a      	lsls	r2, r3, #5
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	4413      	add	r3, r2
 800ebb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	689b      	ldr	r3, [r3, #8]
 800ebba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	78db      	ldrb	r3, [r3, #3]
 800ebc2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ebc4:	430b      	orrs	r3, r1
 800ebc6:	431a      	orrs	r2, r3
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	0159      	lsls	r1, r3, #5
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	440b      	add	r3, r1
 800ebd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	4b05      	ldr	r3, [pc, #20]	; (800ebec <USB_ActivateEndpoint+0x10c>)
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ebdc:	2300      	movs	r3, #0
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3714      	adds	r7, #20
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	10008000 	.word	0x10008000

0800ebf0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b085      	sub	sp, #20
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	781b      	ldrb	r3, [r3, #0]
 800ec02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	785b      	ldrb	r3, [r3, #1]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d161      	bne.n	800ecd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	015a      	lsls	r2, r3, #5
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	4413      	add	r3, r2
 800ec14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec22:	d11f      	bne.n	800ec64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	015a      	lsls	r2, r3, #5
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	4413      	add	r3, r2
 800ec2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	68ba      	ldr	r2, [r7, #8]
 800ec34:	0151      	lsls	r1, r2, #5
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	440a      	add	r2, r1
 800ec3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ec42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	015a      	lsls	r2, r3, #5
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	68ba      	ldr	r2, [r7, #8]
 800ec54:	0151      	lsls	r1, r2, #5
 800ec56:	68fa      	ldr	r2, [r7, #12]
 800ec58:	440a      	add	r2, r1
 800ec5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ec62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	f003 030f 	and.w	r3, r3, #15
 800ec74:	2101      	movs	r1, #1
 800ec76:	fa01 f303 	lsl.w	r3, r1, r3
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	43db      	mvns	r3, r3
 800ec7e:	68f9      	ldr	r1, [r7, #12]
 800ec80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec84:	4013      	ands	r3, r2
 800ec86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec8e:	69da      	ldr	r2, [r3, #28]
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	f003 030f 	and.w	r3, r3, #15
 800ec98:	2101      	movs	r1, #1
 800ec9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	43db      	mvns	r3, r3
 800eca2:	68f9      	ldr	r1, [r7, #12]
 800eca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eca8:	4013      	ands	r3, r2
 800ecaa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	015a      	lsls	r2, r3, #5
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	0159      	lsls	r1, r3, #5
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	440b      	add	r3, r1
 800ecc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	4b35      	ldr	r3, [pc, #212]	; (800eda0 <USB_DeactivateEndpoint+0x1b0>)
 800ecca:	4013      	ands	r3, r2
 800eccc:	600b      	str	r3, [r1, #0]
 800ecce:	e060      	b.n	800ed92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	015a      	lsls	r2, r3, #5
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	4413      	add	r3, r2
 800ecd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ece2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ece6:	d11f      	bne.n	800ed28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	015a      	lsls	r2, r3, #5
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	4413      	add	r3, r2
 800ecf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	68ba      	ldr	r2, [r7, #8]
 800ecf8:	0151      	lsls	r1, r2, #5
 800ecfa:	68fa      	ldr	r2, [r7, #12]
 800ecfc:	440a      	add	r2, r1
 800ecfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ed06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	015a      	lsls	r2, r3, #5
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	4413      	add	r3, r2
 800ed10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	0151      	lsls	r1, r2, #5
 800ed1a:	68fa      	ldr	r2, [r7, #12]
 800ed1c:	440a      	add	r2, r1
 800ed1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ed26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	f003 030f 	and.w	r3, r3, #15
 800ed38:	2101      	movs	r1, #1
 800ed3a:	fa01 f303 	lsl.w	r3, r1, r3
 800ed3e:	041b      	lsls	r3, r3, #16
 800ed40:	43db      	mvns	r3, r3
 800ed42:	68f9      	ldr	r1, [r7, #12]
 800ed44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed48:	4013      	ands	r3, r2
 800ed4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed52:	69da      	ldr	r2, [r3, #28]
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	f003 030f 	and.w	r3, r3, #15
 800ed5c:	2101      	movs	r1, #1
 800ed5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ed62:	041b      	lsls	r3, r3, #16
 800ed64:	43db      	mvns	r3, r3
 800ed66:	68f9      	ldr	r1, [r7, #12]
 800ed68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed6c:	4013      	ands	r3, r2
 800ed6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	015a      	lsls	r2, r3, #5
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	4413      	add	r3, r2
 800ed78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	0159      	lsls	r1, r3, #5
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	440b      	add	r3, r1
 800ed86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	4b05      	ldr	r3, [pc, #20]	; (800eda4 <USB_DeactivateEndpoint+0x1b4>)
 800ed8e:	4013      	ands	r3, r2
 800ed90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3714      	adds	r7, #20
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr
 800eda0:	ec337800 	.word	0xec337800
 800eda4:	eff37800 	.word	0xeff37800

0800eda8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b08a      	sub	sp, #40	; 0x28
 800edac:	af02      	add	r7, sp, #8
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	4613      	mov	r3, r2
 800edb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	785b      	ldrb	r3, [r3, #1]
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	f040 8163 	bne.w	800f090 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	695b      	ldr	r3, [r3, #20]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d132      	bne.n	800ee38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800edd2:	69bb      	ldr	r3, [r7, #24]
 800edd4:	015a      	lsls	r2, r3, #5
 800edd6:	69fb      	ldr	r3, [r7, #28]
 800edd8:	4413      	add	r3, r2
 800edda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edde:	691a      	ldr	r2, [r3, #16]
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	0159      	lsls	r1, r3, #5
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	440b      	add	r3, r1
 800ede8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edec:	4619      	mov	r1, r3
 800edee:	4ba5      	ldr	r3, [pc, #660]	; (800f084 <USB_EPStartXfer+0x2dc>)
 800edf0:	4013      	ands	r3, r2
 800edf2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800edf4:	69bb      	ldr	r3, [r7, #24]
 800edf6:	015a      	lsls	r2, r3, #5
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	4413      	add	r3, r2
 800edfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee00:	691b      	ldr	r3, [r3, #16]
 800ee02:	69ba      	ldr	r2, [r7, #24]
 800ee04:	0151      	lsls	r1, r2, #5
 800ee06:	69fa      	ldr	r2, [r7, #28]
 800ee08:	440a      	add	r2, r1
 800ee0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	015a      	lsls	r2, r3, #5
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee20:	691a      	ldr	r2, [r3, #16]
 800ee22:	69bb      	ldr	r3, [r7, #24]
 800ee24:	0159      	lsls	r1, r3, #5
 800ee26:	69fb      	ldr	r3, [r7, #28]
 800ee28:	440b      	add	r3, r1
 800ee2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee2e:	4619      	mov	r1, r3
 800ee30:	4b95      	ldr	r3, [pc, #596]	; (800f088 <USB_EPStartXfer+0x2e0>)
 800ee32:	4013      	ands	r3, r2
 800ee34:	610b      	str	r3, [r1, #16]
 800ee36:	e074      	b.n	800ef22 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	015a      	lsls	r2, r3, #5
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	4413      	add	r3, r2
 800ee40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee44:	691a      	ldr	r2, [r3, #16]
 800ee46:	69bb      	ldr	r3, [r7, #24]
 800ee48:	0159      	lsls	r1, r3, #5
 800ee4a:	69fb      	ldr	r3, [r7, #28]
 800ee4c:	440b      	add	r3, r1
 800ee4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee52:	4619      	mov	r1, r3
 800ee54:	4b8c      	ldr	r3, [pc, #560]	; (800f088 <USB_EPStartXfer+0x2e0>)
 800ee56:	4013      	ands	r3, r2
 800ee58:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	015a      	lsls	r2, r3, #5
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	4413      	add	r3, r2
 800ee62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee66:	691a      	ldr	r2, [r3, #16]
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	0159      	lsls	r1, r3, #5
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	440b      	add	r3, r1
 800ee70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee74:	4619      	mov	r1, r3
 800ee76:	4b83      	ldr	r3, [pc, #524]	; (800f084 <USB_EPStartXfer+0x2dc>)
 800ee78:	4013      	ands	r3, r2
 800ee7a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	015a      	lsls	r2, r3, #5
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	4413      	add	r3, r2
 800ee84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee88:	691a      	ldr	r2, [r3, #16]
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	6959      	ldr	r1, [r3, #20]
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	440b      	add	r3, r1
 800ee94:	1e59      	subs	r1, r3, #1
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	fbb1 f3f3 	udiv	r3, r1, r3
 800ee9e:	04d9      	lsls	r1, r3, #19
 800eea0:	4b7a      	ldr	r3, [pc, #488]	; (800f08c <USB_EPStartXfer+0x2e4>)
 800eea2:	400b      	ands	r3, r1
 800eea4:	69b9      	ldr	r1, [r7, #24]
 800eea6:	0148      	lsls	r0, r1, #5
 800eea8:	69f9      	ldr	r1, [r7, #28]
 800eeaa:	4401      	add	r1, r0
 800eeac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	015a      	lsls	r2, r3, #5
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	4413      	add	r3, r2
 800eebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eec0:	691a      	ldr	r2, [r3, #16]
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	695b      	ldr	r3, [r3, #20]
 800eec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eeca:	69b9      	ldr	r1, [r7, #24]
 800eecc:	0148      	lsls	r0, r1, #5
 800eece:	69f9      	ldr	r1, [r7, #28]
 800eed0:	4401      	add	r1, r0
 800eed2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800eed6:	4313      	orrs	r3, r2
 800eed8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	78db      	ldrb	r3, [r3, #3]
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d11f      	bne.n	800ef22 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	015a      	lsls	r2, r3, #5
 800eee6:	69fb      	ldr	r3, [r7, #28]
 800eee8:	4413      	add	r3, r2
 800eeea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeee:	691b      	ldr	r3, [r3, #16]
 800eef0:	69ba      	ldr	r2, [r7, #24]
 800eef2:	0151      	lsls	r1, r2, #5
 800eef4:	69fa      	ldr	r2, [r7, #28]
 800eef6:	440a      	add	r2, r1
 800eef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eefc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ef00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	015a      	lsls	r2, r3, #5
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	4413      	add	r3, r2
 800ef0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef0e:	691b      	ldr	r3, [r3, #16]
 800ef10:	69ba      	ldr	r2, [r7, #24]
 800ef12:	0151      	lsls	r1, r2, #5
 800ef14:	69fa      	ldr	r2, [r7, #28]
 800ef16:	440a      	add	r2, r1
 800ef18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ef22:	79fb      	ldrb	r3, [r7, #7]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d14b      	bne.n	800efc0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	691b      	ldr	r3, [r3, #16]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d009      	beq.n	800ef44 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	015a      	lsls	r2, r3, #5
 800ef34:	69fb      	ldr	r3, [r7, #28]
 800ef36:	4413      	add	r3, r2
 800ef38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	691b      	ldr	r3, [r3, #16]
 800ef42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	78db      	ldrb	r3, [r3, #3]
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d128      	bne.n	800ef9e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d110      	bne.n	800ef7e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	015a      	lsls	r2, r3, #5
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	4413      	add	r3, r2
 800ef64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	69ba      	ldr	r2, [r7, #24]
 800ef6c:	0151      	lsls	r1, r2, #5
 800ef6e:	69fa      	ldr	r2, [r7, #28]
 800ef70:	440a      	add	r2, r1
 800ef72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ef7a:	6013      	str	r3, [r2, #0]
 800ef7c:	e00f      	b.n	800ef9e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	015a      	lsls	r2, r3, #5
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	4413      	add	r3, r2
 800ef86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	69ba      	ldr	r2, [r7, #24]
 800ef8e:	0151      	lsls	r1, r2, #5
 800ef90:	69fa      	ldr	r2, [r7, #28]
 800ef92:	440a      	add	r2, r1
 800ef94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ef98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ef9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ef9e:	69bb      	ldr	r3, [r7, #24]
 800efa0:	015a      	lsls	r2, r3, #5
 800efa2:	69fb      	ldr	r3, [r7, #28]
 800efa4:	4413      	add	r3, r2
 800efa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	69ba      	ldr	r2, [r7, #24]
 800efae:	0151      	lsls	r1, r2, #5
 800efb0:	69fa      	ldr	r2, [r7, #28]
 800efb2:	440a      	add	r2, r1
 800efb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800efbc:	6013      	str	r3, [r2, #0]
 800efbe:	e133      	b.n	800f228 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800efc0:	69bb      	ldr	r3, [r7, #24]
 800efc2:	015a      	lsls	r2, r3, #5
 800efc4:	69fb      	ldr	r3, [r7, #28]
 800efc6:	4413      	add	r3, r2
 800efc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	69ba      	ldr	r2, [r7, #24]
 800efd0:	0151      	lsls	r1, r2, #5
 800efd2:	69fa      	ldr	r2, [r7, #28]
 800efd4:	440a      	add	r2, r1
 800efd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800efde:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	78db      	ldrb	r3, [r3, #3]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d015      	beq.n	800f014 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	695b      	ldr	r3, [r3, #20]
 800efec:	2b00      	cmp	r3, #0
 800efee:	f000 811b 	beq.w	800f228 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	f003 030f 	and.w	r3, r3, #15
 800f002:	2101      	movs	r1, #1
 800f004:	fa01 f303 	lsl.w	r3, r1, r3
 800f008:	69f9      	ldr	r1, [r7, #28]
 800f00a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f00e:	4313      	orrs	r3, r2
 800f010:	634b      	str	r3, [r1, #52]	; 0x34
 800f012:	e109      	b.n	800f228 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f020:	2b00      	cmp	r3, #0
 800f022:	d110      	bne.n	800f046 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f024:	69bb      	ldr	r3, [r7, #24]
 800f026:	015a      	lsls	r2, r3, #5
 800f028:	69fb      	ldr	r3, [r7, #28]
 800f02a:	4413      	add	r3, r2
 800f02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	69ba      	ldr	r2, [r7, #24]
 800f034:	0151      	lsls	r1, r2, #5
 800f036:	69fa      	ldr	r2, [r7, #28]
 800f038:	440a      	add	r2, r1
 800f03a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f03e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f042:	6013      	str	r3, [r2, #0]
 800f044:	e00f      	b.n	800f066 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	015a      	lsls	r2, r3, #5
 800f04a:	69fb      	ldr	r3, [r7, #28]
 800f04c:	4413      	add	r3, r2
 800f04e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	69ba      	ldr	r2, [r7, #24]
 800f056:	0151      	lsls	r1, r2, #5
 800f058:	69fa      	ldr	r2, [r7, #28]
 800f05a:	440a      	add	r2, r1
 800f05c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f064:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	68d9      	ldr	r1, [r3, #12]
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	781a      	ldrb	r2, [r3, #0]
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	695b      	ldr	r3, [r3, #20]
 800f072:	b298      	uxth	r0, r3
 800f074:	79fb      	ldrb	r3, [r7, #7]
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	4603      	mov	r3, r0
 800f07a:	68f8      	ldr	r0, [r7, #12]
 800f07c:	f000 fa38 	bl	800f4f0 <USB_WritePacket>
 800f080:	e0d2      	b.n	800f228 <USB_EPStartXfer+0x480>
 800f082:	bf00      	nop
 800f084:	e007ffff 	.word	0xe007ffff
 800f088:	fff80000 	.word	0xfff80000
 800f08c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f090:	69bb      	ldr	r3, [r7, #24]
 800f092:	015a      	lsls	r2, r3, #5
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	4413      	add	r3, r2
 800f098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f09c:	691a      	ldr	r2, [r3, #16]
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	0159      	lsls	r1, r3, #5
 800f0a2:	69fb      	ldr	r3, [r7, #28]
 800f0a4:	440b      	add	r3, r1
 800f0a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	4b61      	ldr	r3, [pc, #388]	; (800f234 <USB_EPStartXfer+0x48c>)
 800f0ae:	4013      	ands	r3, r2
 800f0b0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	015a      	lsls	r2, r3, #5
 800f0b6:	69fb      	ldr	r3, [r7, #28]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0be:	691a      	ldr	r2, [r3, #16]
 800f0c0:	69bb      	ldr	r3, [r7, #24]
 800f0c2:	0159      	lsls	r1, r3, #5
 800f0c4:	69fb      	ldr	r3, [r7, #28]
 800f0c6:	440b      	add	r3, r1
 800f0c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	4b5a      	ldr	r3, [pc, #360]	; (800f238 <USB_EPStartXfer+0x490>)
 800f0d0:	4013      	ands	r3, r2
 800f0d2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	695b      	ldr	r3, [r3, #20]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d123      	bne.n	800f124 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f0dc:	69bb      	ldr	r3, [r7, #24]
 800f0de:	015a      	lsls	r2, r3, #5
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0e8:	691a      	ldr	r2, [r3, #16]
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	689b      	ldr	r3, [r3, #8]
 800f0ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f0f2:	69b9      	ldr	r1, [r7, #24]
 800f0f4:	0148      	lsls	r0, r1, #5
 800f0f6:	69f9      	ldr	r1, [r7, #28]
 800f0f8:	4401      	add	r1, r0
 800f0fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f0fe:	4313      	orrs	r3, r2
 800f100:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f102:	69bb      	ldr	r3, [r7, #24]
 800f104:	015a      	lsls	r2, r3, #5
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	4413      	add	r3, r2
 800f10a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f10e:	691b      	ldr	r3, [r3, #16]
 800f110:	69ba      	ldr	r2, [r7, #24]
 800f112:	0151      	lsls	r1, r2, #5
 800f114:	69fa      	ldr	r2, [r7, #28]
 800f116:	440a      	add	r2, r1
 800f118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f11c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f120:	6113      	str	r3, [r2, #16]
 800f122:	e033      	b.n	800f18c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	695a      	ldr	r2, [r3, #20]
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	4413      	add	r3, r2
 800f12e:	1e5a      	subs	r2, r3, #1
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	fbb2 f3f3 	udiv	r3, r2, r3
 800f138:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	015a      	lsls	r2, r3, #5
 800f13e:	69fb      	ldr	r3, [r7, #28]
 800f140:	4413      	add	r3, r2
 800f142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f146:	691a      	ldr	r2, [r3, #16]
 800f148:	8afb      	ldrh	r3, [r7, #22]
 800f14a:	04d9      	lsls	r1, r3, #19
 800f14c:	4b3b      	ldr	r3, [pc, #236]	; (800f23c <USB_EPStartXfer+0x494>)
 800f14e:	400b      	ands	r3, r1
 800f150:	69b9      	ldr	r1, [r7, #24]
 800f152:	0148      	lsls	r0, r1, #5
 800f154:	69f9      	ldr	r1, [r7, #28]
 800f156:	4401      	add	r1, r0
 800f158:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f15c:	4313      	orrs	r3, r2
 800f15e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f160:	69bb      	ldr	r3, [r7, #24]
 800f162:	015a      	lsls	r2, r3, #5
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	4413      	add	r3, r2
 800f168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f16c:	691a      	ldr	r2, [r3, #16]
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	689b      	ldr	r3, [r3, #8]
 800f172:	8af9      	ldrh	r1, [r7, #22]
 800f174:	fb01 f303 	mul.w	r3, r1, r3
 800f178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f17c:	69b9      	ldr	r1, [r7, #24]
 800f17e:	0148      	lsls	r0, r1, #5
 800f180:	69f9      	ldr	r1, [r7, #28]
 800f182:	4401      	add	r1, r0
 800f184:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f188:	4313      	orrs	r3, r2
 800f18a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f18c:	79fb      	ldrb	r3, [r7, #7]
 800f18e:	2b01      	cmp	r3, #1
 800f190:	d10d      	bne.n	800f1ae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	68db      	ldr	r3, [r3, #12]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d009      	beq.n	800f1ae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	68d9      	ldr	r1, [r3, #12]
 800f19e:	69bb      	ldr	r3, [r7, #24]
 800f1a0:	015a      	lsls	r2, r3, #5
 800f1a2:	69fb      	ldr	r3, [r7, #28]
 800f1a4:	4413      	add	r3, r2
 800f1a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1aa:	460a      	mov	r2, r1
 800f1ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	78db      	ldrb	r3, [r3, #3]
 800f1b2:	2b01      	cmp	r3, #1
 800f1b4:	d128      	bne.n	800f208 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1bc:	689b      	ldr	r3, [r3, #8]
 800f1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d110      	bne.n	800f1e8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	015a      	lsls	r2, r3, #5
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	69ba      	ldr	r2, [r7, #24]
 800f1d6:	0151      	lsls	r1, r2, #5
 800f1d8:	69fa      	ldr	r2, [r7, #28]
 800f1da:	440a      	add	r2, r1
 800f1dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f1e4:	6013      	str	r3, [r2, #0]
 800f1e6:	e00f      	b.n	800f208 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	015a      	lsls	r2, r3, #5
 800f1ec:	69fb      	ldr	r3, [r7, #28]
 800f1ee:	4413      	add	r3, r2
 800f1f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	69ba      	ldr	r2, [r7, #24]
 800f1f8:	0151      	lsls	r1, r2, #5
 800f1fa:	69fa      	ldr	r2, [r7, #28]
 800f1fc:	440a      	add	r2, r1
 800f1fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f206:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f208:	69bb      	ldr	r3, [r7, #24]
 800f20a:	015a      	lsls	r2, r3, #5
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	4413      	add	r3, r2
 800f210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	69ba      	ldr	r2, [r7, #24]
 800f218:	0151      	lsls	r1, r2, #5
 800f21a:	69fa      	ldr	r2, [r7, #28]
 800f21c:	440a      	add	r2, r1
 800f21e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f226:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f228:	2300      	movs	r3, #0
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	3720      	adds	r7, #32
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	bf00      	nop
 800f234:	fff80000 	.word	0xfff80000
 800f238:	e007ffff 	.word	0xe007ffff
 800f23c:	1ff80000 	.word	0x1ff80000

0800f240 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f240:	b480      	push	{r7}
 800f242:	b087      	sub	sp, #28
 800f244:	af00      	add	r7, sp, #0
 800f246:	60f8      	str	r0, [r7, #12]
 800f248:	60b9      	str	r1, [r7, #8]
 800f24a:	4613      	mov	r3, r2
 800f24c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	785b      	ldrb	r3, [r3, #1]
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	f040 80cd 	bne.w	800f3fc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	695b      	ldr	r3, [r3, #20]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d132      	bne.n	800f2d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	015a      	lsls	r2, r3, #5
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	4413      	add	r3, r2
 800f272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f276:	691a      	ldr	r2, [r3, #16]
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	0159      	lsls	r1, r3, #5
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	440b      	add	r3, r1
 800f280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f284:	4619      	mov	r1, r3
 800f286:	4b98      	ldr	r3, [pc, #608]	; (800f4e8 <USB_EP0StartXfer+0x2a8>)
 800f288:	4013      	ands	r3, r2
 800f28a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	015a      	lsls	r2, r3, #5
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	4413      	add	r3, r2
 800f294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f298:	691b      	ldr	r3, [r3, #16]
 800f29a:	693a      	ldr	r2, [r7, #16]
 800f29c:	0151      	lsls	r1, r2, #5
 800f29e:	697a      	ldr	r2, [r7, #20]
 800f2a0:	440a      	add	r2, r1
 800f2a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f2aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	015a      	lsls	r2, r3, #5
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	4413      	add	r3, r2
 800f2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2b8:	691a      	ldr	r2, [r3, #16]
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	0159      	lsls	r1, r3, #5
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	440b      	add	r3, r1
 800f2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	4b88      	ldr	r3, [pc, #544]	; (800f4ec <USB_EP0StartXfer+0x2ac>)
 800f2ca:	4013      	ands	r3, r2
 800f2cc:	610b      	str	r3, [r1, #16]
 800f2ce:	e04e      	b.n	800f36e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	015a      	lsls	r2, r3, #5
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2dc:	691a      	ldr	r2, [r3, #16]
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	0159      	lsls	r1, r3, #5
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	440b      	add	r3, r1
 800f2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ea:	4619      	mov	r1, r3
 800f2ec:	4b7f      	ldr	r3, [pc, #508]	; (800f4ec <USB_EP0StartXfer+0x2ac>)
 800f2ee:	4013      	ands	r3, r2
 800f2f0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	015a      	lsls	r2, r3, #5
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	4413      	add	r3, r2
 800f2fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2fe:	691a      	ldr	r2, [r3, #16]
 800f300:	693b      	ldr	r3, [r7, #16]
 800f302:	0159      	lsls	r1, r3, #5
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	440b      	add	r3, r1
 800f308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f30c:	4619      	mov	r1, r3
 800f30e:	4b76      	ldr	r3, [pc, #472]	; (800f4e8 <USB_EP0StartXfer+0x2a8>)
 800f310:	4013      	ands	r3, r2
 800f312:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	695a      	ldr	r2, [r3, #20]
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d903      	bls.n	800f328 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	689a      	ldr	r2, [r3, #8]
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	015a      	lsls	r2, r3, #5
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	4413      	add	r3, r2
 800f330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f334:	691b      	ldr	r3, [r3, #16]
 800f336:	693a      	ldr	r2, [r7, #16]
 800f338:	0151      	lsls	r1, r2, #5
 800f33a:	697a      	ldr	r2, [r7, #20]
 800f33c:	440a      	add	r2, r1
 800f33e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f346:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	015a      	lsls	r2, r3, #5
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	4413      	add	r3, r2
 800f350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f354:	691a      	ldr	r2, [r3, #16]
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	695b      	ldr	r3, [r3, #20]
 800f35a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f35e:	6939      	ldr	r1, [r7, #16]
 800f360:	0148      	lsls	r0, r1, #5
 800f362:	6979      	ldr	r1, [r7, #20]
 800f364:	4401      	add	r1, r0
 800f366:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f36a:	4313      	orrs	r3, r2
 800f36c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f36e:	79fb      	ldrb	r3, [r7, #7]
 800f370:	2b01      	cmp	r3, #1
 800f372:	d11e      	bne.n	800f3b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	691b      	ldr	r3, [r3, #16]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d009      	beq.n	800f390 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	015a      	lsls	r2, r3, #5
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	4413      	add	r3, r2
 800f384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f388:	461a      	mov	r2, r3
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	691b      	ldr	r3, [r3, #16]
 800f38e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	015a      	lsls	r2, r3, #5
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	4413      	add	r3, r2
 800f398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	693a      	ldr	r2, [r7, #16]
 800f3a0:	0151      	lsls	r1, r2, #5
 800f3a2:	697a      	ldr	r2, [r7, #20]
 800f3a4:	440a      	add	r2, r1
 800f3a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f3ae:	6013      	str	r3, [r2, #0]
 800f3b0:	e092      	b.n	800f4d8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	015a      	lsls	r2, r3, #5
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	693a      	ldr	r2, [r7, #16]
 800f3c2:	0151      	lsls	r1, r2, #5
 800f3c4:	697a      	ldr	r2, [r7, #20]
 800f3c6:	440a      	add	r2, r1
 800f3c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f3d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	695b      	ldr	r3, [r3, #20]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d07e      	beq.n	800f4d8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	f003 030f 	and.w	r3, r3, #15
 800f3ea:	2101      	movs	r1, #1
 800f3ec:	fa01 f303 	lsl.w	r3, r1, r3
 800f3f0:	6979      	ldr	r1, [r7, #20]
 800f3f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3f6:	4313      	orrs	r3, r2
 800f3f8:	634b      	str	r3, [r1, #52]	; 0x34
 800f3fa:	e06d      	b.n	800f4d8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	015a      	lsls	r2, r3, #5
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	4413      	add	r3, r2
 800f404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f408:	691a      	ldr	r2, [r3, #16]
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	0159      	lsls	r1, r3, #5
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	440b      	add	r3, r1
 800f412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f416:	4619      	mov	r1, r3
 800f418:	4b34      	ldr	r3, [pc, #208]	; (800f4ec <USB_EP0StartXfer+0x2ac>)
 800f41a:	4013      	ands	r3, r2
 800f41c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	015a      	lsls	r2, r3, #5
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	4413      	add	r3, r2
 800f426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f42a:	691a      	ldr	r2, [r3, #16]
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	0159      	lsls	r1, r3, #5
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	440b      	add	r3, r1
 800f434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f438:	4619      	mov	r1, r3
 800f43a:	4b2b      	ldr	r3, [pc, #172]	; (800f4e8 <USB_EP0StartXfer+0x2a8>)
 800f43c:	4013      	ands	r3, r2
 800f43e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	695b      	ldr	r3, [r3, #20]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d003      	beq.n	800f450 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	689a      	ldr	r2, [r3, #8]
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	015a      	lsls	r2, r3, #5
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	4413      	add	r3, r2
 800f458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f45c:	691b      	ldr	r3, [r3, #16]
 800f45e:	693a      	ldr	r2, [r7, #16]
 800f460:	0151      	lsls	r1, r2, #5
 800f462:	697a      	ldr	r2, [r7, #20]
 800f464:	440a      	add	r2, r1
 800f466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f46a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f46e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	015a      	lsls	r2, r3, #5
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	4413      	add	r3, r2
 800f478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f47c:	691a      	ldr	r2, [r3, #16]
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	689b      	ldr	r3, [r3, #8]
 800f482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f486:	6939      	ldr	r1, [r7, #16]
 800f488:	0148      	lsls	r0, r1, #5
 800f48a:	6979      	ldr	r1, [r7, #20]
 800f48c:	4401      	add	r1, r0
 800f48e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f492:	4313      	orrs	r3, r2
 800f494:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f496:	79fb      	ldrb	r3, [r7, #7]
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d10d      	bne.n	800f4b8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d009      	beq.n	800f4b8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	68d9      	ldr	r1, [r3, #12]
 800f4a8:	693b      	ldr	r3, [r7, #16]
 800f4aa:	015a      	lsls	r2, r3, #5
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b4:	460a      	mov	r2, r1
 800f4b6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	015a      	lsls	r2, r3, #5
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	4413      	add	r3, r2
 800f4c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	693a      	ldr	r2, [r7, #16]
 800f4c8:	0151      	lsls	r1, r2, #5
 800f4ca:	697a      	ldr	r2, [r7, #20]
 800f4cc:	440a      	add	r2, r1
 800f4ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f4d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f4d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f4d8:	2300      	movs	r3, #0
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	371c      	adds	r7, #28
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr
 800f4e6:	bf00      	nop
 800f4e8:	e007ffff 	.word	0xe007ffff
 800f4ec:	fff80000 	.word	0xfff80000

0800f4f0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b089      	sub	sp, #36	; 0x24
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	60f8      	str	r0, [r7, #12]
 800f4f8:	60b9      	str	r1, [r7, #8]
 800f4fa:	4611      	mov	r1, r2
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	460b      	mov	r3, r1
 800f500:	71fb      	strb	r3, [r7, #7]
 800f502:	4613      	mov	r3, r2
 800f504:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f50e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f512:	2b00      	cmp	r3, #0
 800f514:	d11a      	bne.n	800f54c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f516:	88bb      	ldrh	r3, [r7, #4]
 800f518:	3303      	adds	r3, #3
 800f51a:	089b      	lsrs	r3, r3, #2
 800f51c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f51e:	2300      	movs	r3, #0
 800f520:	61bb      	str	r3, [r7, #24]
 800f522:	e00f      	b.n	800f544 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f524:	79fb      	ldrb	r3, [r7, #7]
 800f526:	031a      	lsls	r2, r3, #12
 800f528:	697b      	ldr	r3, [r7, #20]
 800f52a:	4413      	add	r3, r2
 800f52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f530:	461a      	mov	r2, r3
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f538:	69fb      	ldr	r3, [r7, #28]
 800f53a:	3304      	adds	r3, #4
 800f53c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	3301      	adds	r3, #1
 800f542:	61bb      	str	r3, [r7, #24]
 800f544:	69ba      	ldr	r2, [r7, #24]
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d3eb      	bcc.n	800f524 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f54c:	2300      	movs	r3, #0
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3724      	adds	r7, #36	; 0x24
 800f552:	46bd      	mov	sp, r7
 800f554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f558:	4770      	bx	lr

0800f55a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f55a:	b480      	push	{r7}
 800f55c:	b089      	sub	sp, #36	; 0x24
 800f55e:	af00      	add	r7, sp, #0
 800f560:	60f8      	str	r0, [r7, #12]
 800f562:	60b9      	str	r1, [r7, #8]
 800f564:	4613      	mov	r3, r2
 800f566:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f570:	88fb      	ldrh	r3, [r7, #6]
 800f572:	3303      	adds	r3, #3
 800f574:	089b      	lsrs	r3, r3, #2
 800f576:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f578:	2300      	movs	r3, #0
 800f57a:	61bb      	str	r3, [r7, #24]
 800f57c:	e00b      	b.n	800f596 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	69fb      	ldr	r3, [r7, #28]
 800f588:	601a      	str	r2, [r3, #0]
    pDest++;
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	3304      	adds	r3, #4
 800f58e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f590:	69bb      	ldr	r3, [r7, #24]
 800f592:	3301      	adds	r3, #1
 800f594:	61bb      	str	r3, [r7, #24]
 800f596:	69ba      	ldr	r2, [r7, #24]
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d3ef      	bcc.n	800f57e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f59e:	69fb      	ldr	r3, [r7, #28]
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3724      	adds	r7, #36	; 0x24
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr

0800f5ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b085      	sub	sp, #20
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
 800f5b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	785b      	ldrb	r3, [r3, #1]
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d12c      	bne.n	800f622 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	015a      	lsls	r2, r3, #5
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	4413      	add	r3, r2
 800f5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	db12      	blt.n	800f600 <USB_EPSetStall+0x54>
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00f      	beq.n	800f600 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	015a      	lsls	r2, r3, #5
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	68ba      	ldr	r2, [r7, #8]
 800f5f0:	0151      	lsls	r1, r2, #5
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	440a      	add	r2, r1
 800f5f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f5fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	015a      	lsls	r2, r3, #5
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	4413      	add	r3, r2
 800f608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	68ba      	ldr	r2, [r7, #8]
 800f610:	0151      	lsls	r1, r2, #5
 800f612:	68fa      	ldr	r2, [r7, #12]
 800f614:	440a      	add	r2, r1
 800f616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f61a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f61e:	6013      	str	r3, [r2, #0]
 800f620:	e02b      	b.n	800f67a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	015a      	lsls	r2, r3, #5
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	4413      	add	r3, r2
 800f62a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	db12      	blt.n	800f65a <USB_EPSetStall+0xae>
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d00f      	beq.n	800f65a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	015a      	lsls	r2, r3, #5
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	4413      	add	r3, r2
 800f642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	68ba      	ldr	r2, [r7, #8]
 800f64a:	0151      	lsls	r1, r2, #5
 800f64c:	68fa      	ldr	r2, [r7, #12]
 800f64e:	440a      	add	r2, r1
 800f650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f654:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f658:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	015a      	lsls	r2, r3, #5
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	4413      	add	r3, r2
 800f662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	68ba      	ldr	r2, [r7, #8]
 800f66a:	0151      	lsls	r1, r2, #5
 800f66c:	68fa      	ldr	r2, [r7, #12]
 800f66e:	440a      	add	r2, r1
 800f670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f678:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3714      	adds	r7, #20
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f688:	b480      	push	{r7}
 800f68a:	b085      	sub	sp, #20
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	785b      	ldrb	r3, [r3, #1]
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d128      	bne.n	800f6f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	015a      	lsls	r2, r3, #5
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	4413      	add	r3, r2
 800f6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	68ba      	ldr	r2, [r7, #8]
 800f6b4:	0151      	lsls	r1, r2, #5
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	440a      	add	r2, r1
 800f6ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f6c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	78db      	ldrb	r3, [r3, #3]
 800f6c8:	2b03      	cmp	r3, #3
 800f6ca:	d003      	beq.n	800f6d4 <USB_EPClearStall+0x4c>
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	78db      	ldrb	r3, [r3, #3]
 800f6d0:	2b02      	cmp	r3, #2
 800f6d2:	d138      	bne.n	800f746 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	015a      	lsls	r2, r3, #5
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	4413      	add	r3, r2
 800f6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	68ba      	ldr	r2, [r7, #8]
 800f6e4:	0151      	lsls	r1, r2, #5
 800f6e6:	68fa      	ldr	r2, [r7, #12]
 800f6e8:	440a      	add	r2, r1
 800f6ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f6f2:	6013      	str	r3, [r2, #0]
 800f6f4:	e027      	b.n	800f746 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	015a      	lsls	r2, r3, #5
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	68ba      	ldr	r2, [r7, #8]
 800f706:	0151      	lsls	r1, r2, #5
 800f708:	68fa      	ldr	r2, [r7, #12]
 800f70a:	440a      	add	r2, r1
 800f70c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f710:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f714:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	78db      	ldrb	r3, [r3, #3]
 800f71a:	2b03      	cmp	r3, #3
 800f71c:	d003      	beq.n	800f726 <USB_EPClearStall+0x9e>
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	78db      	ldrb	r3, [r3, #3]
 800f722:	2b02      	cmp	r3, #2
 800f724:	d10f      	bne.n	800f746 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	015a      	lsls	r2, r3, #5
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	4413      	add	r3, r2
 800f72e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	68ba      	ldr	r2, [r7, #8]
 800f736:	0151      	lsls	r1, r2, #5
 800f738:	68fa      	ldr	r2, [r7, #12]
 800f73a:	440a      	add	r2, r1
 800f73c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f744:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f746:	2300      	movs	r3, #0
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3714      	adds	r7, #20
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr

0800f754 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f754:	b480      	push	{r7}
 800f756:	b085      	sub	sp, #20
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
 800f75c:	460b      	mov	r3, r1
 800f75e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	68fa      	ldr	r2, [r7, #12]
 800f76e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f772:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f776:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	78fb      	ldrb	r3, [r7, #3]
 800f782:	011b      	lsls	r3, r3, #4
 800f784:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f788:	68f9      	ldr	r1, [r7, #12]
 800f78a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f78e:	4313      	orrs	r3, r2
 800f790:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f792:	2300      	movs	r3, #0
}
 800f794:	4618      	mov	r0, r3
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b084      	sub	sp, #16
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f7ba:	f023 0302 	bic.w	r3, r3, #2
 800f7be:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f7c0:	2003      	movs	r0, #3
 800f7c2:	f7f6 fe27 	bl	8006414 <HAL_Delay>

  return HAL_OK;
 800f7c6:	2300      	movs	r3, #0
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3710      	adds	r7, #16
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f7ea:	f043 0302 	orr.w	r3, r3, #2
 800f7ee:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f7f0:	2003      	movs	r0, #3
 800f7f2:	f7f6 fe0f 	bl	8006414 <HAL_Delay>

  return HAL_OK;
 800f7f6:	2300      	movs	r3, #0
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3710      	adds	r7, #16
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f800:	b480      	push	{r7}
 800f802:	b085      	sub	sp, #20
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	695b      	ldr	r3, [r3, #20]
 800f80c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	699b      	ldr	r3, [r3, #24]
 800f812:	68fa      	ldr	r2, [r7, #12]
 800f814:	4013      	ands	r3, r2
 800f816:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f818:	68fb      	ldr	r3, [r7, #12]
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f826:	b480      	push	{r7}
 800f828:	b085      	sub	sp, #20
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f838:	699b      	ldr	r3, [r3, #24]
 800f83a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f842:	69db      	ldr	r3, [r3, #28]
 800f844:	68ba      	ldr	r2, [r7, #8]
 800f846:	4013      	ands	r3, r2
 800f848:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	0c1b      	lsrs	r3, r3, #16
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3714      	adds	r7, #20
 800f852:	46bd      	mov	sp, r7
 800f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f858:	4770      	bx	lr

0800f85a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f85a:	b480      	push	{r7}
 800f85c:	b085      	sub	sp, #20
 800f85e:	af00      	add	r7, sp, #0
 800f860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f86c:	699b      	ldr	r3, [r3, #24]
 800f86e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f876:	69db      	ldr	r3, [r3, #28]
 800f878:	68ba      	ldr	r2, [r7, #8]
 800f87a:	4013      	ands	r3, r2
 800f87c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	b29b      	uxth	r3, r3
}
 800f882:	4618      	mov	r0, r3
 800f884:	3714      	adds	r7, #20
 800f886:	46bd      	mov	sp, r7
 800f888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88c:	4770      	bx	lr

0800f88e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f88e:	b480      	push	{r7}
 800f890:	b085      	sub	sp, #20
 800f892:	af00      	add	r7, sp, #0
 800f894:	6078      	str	r0, [r7, #4]
 800f896:	460b      	mov	r3, r1
 800f898:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f89e:	78fb      	ldrb	r3, [r7, #3]
 800f8a0:	015a      	lsls	r2, r3, #5
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8aa:	689b      	ldr	r3, [r3, #8]
 800f8ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8b4:	695b      	ldr	r3, [r3, #20]
 800f8b6:	68ba      	ldr	r2, [r7, #8]
 800f8b8:	4013      	ands	r3, r2
 800f8ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f8bc:	68bb      	ldr	r3, [r7, #8]
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	3714      	adds	r7, #20
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr

0800f8ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f8ca:	b480      	push	{r7}
 800f8cc:	b087      	sub	sp, #28
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
 800f8d2:	460b      	mov	r3, r1
 800f8d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8e0:	691b      	ldr	r3, [r3, #16]
 800f8e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f8ee:	78fb      	ldrb	r3, [r7, #3]
 800f8f0:	f003 030f 	and.w	r3, r3, #15
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	fa22 f303 	lsr.w	r3, r2, r3
 800f8fa:	01db      	lsls	r3, r3, #7
 800f8fc:	b2db      	uxtb	r3, r3
 800f8fe:	693a      	ldr	r2, [r7, #16]
 800f900:	4313      	orrs	r3, r2
 800f902:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f904:	78fb      	ldrb	r3, [r7, #3]
 800f906:	015a      	lsls	r2, r3, #5
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	4413      	add	r3, r2
 800f90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f910:	689b      	ldr	r3, [r3, #8]
 800f912:	693a      	ldr	r2, [r7, #16]
 800f914:	4013      	ands	r3, r2
 800f916:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f918:	68bb      	ldr	r3, [r7, #8]
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	371c      	adds	r7, #28
 800f91e:	46bd      	mov	sp, r7
 800f920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f924:	4770      	bx	lr

0800f926 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f926:	b480      	push	{r7}
 800f928:	b083      	sub	sp, #12
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	695b      	ldr	r3, [r3, #20]
 800f932:	f003 0301 	and.w	r3, r3, #1
}
 800f936:	4618      	mov	r0, r3
 800f938:	370c      	adds	r7, #12
 800f93a:	46bd      	mov	sp, r7
 800f93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f940:	4770      	bx	lr
	...

0800f944 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f944:	b480      	push	{r7}
 800f946:	b085      	sub	sp, #20
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f95e:	4619      	mov	r1, r3
 800f960:	4b09      	ldr	r3, [pc, #36]	; (800f988 <USB_ActivateSetup+0x44>)
 800f962:	4013      	ands	r3, r2
 800f964:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f96c:	685b      	ldr	r3, [r3, #4]
 800f96e:	68fa      	ldr	r2, [r7, #12]
 800f970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f978:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f97a:	2300      	movs	r3, #0
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3714      	adds	r7, #20
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr
 800f988:	fffff800 	.word	0xfffff800

0800f98c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b087      	sub	sp, #28
 800f990:	af00      	add	r7, sp, #0
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	460b      	mov	r3, r1
 800f996:	607a      	str	r2, [r7, #4]
 800f998:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	333c      	adds	r3, #60	; 0x3c
 800f9a2:	3304      	adds	r3, #4
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	4a26      	ldr	r2, [pc, #152]	; (800fa44 <USB_EP0_OutStart+0xb8>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d90a      	bls.n	800f9c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f9b0:	697b      	ldr	r3, [r7, #20]
 800f9b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f9bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f9c0:	d101      	bne.n	800f9c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	e037      	b.n	800fa36 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9d8:	691b      	ldr	r3, [r3, #16]
 800f9da:	697a      	ldr	r2, [r7, #20]
 800f9dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f9e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9ec:	691b      	ldr	r3, [r3, #16]
 800f9ee:	697a      	ldr	r2, [r7, #20]
 800f9f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9f4:	f043 0318 	orr.w	r3, r3, #24
 800f9f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa00:	691b      	ldr	r3, [r3, #16]
 800fa02:	697a      	ldr	r2, [r7, #20]
 800fa04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa08:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fa0c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fa0e:	7afb      	ldrb	r3, [r7, #11]
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d10f      	bne.n	800fa34 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	697a      	ldr	r2, [r7, #20]
 800fa2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa2e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fa32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fa34:	2300      	movs	r3, #0
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	371c      	adds	r7, #28
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	4f54300a 	.word	0x4f54300a

0800fa48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b085      	sub	sp, #20
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fa50:	2300      	movs	r3, #0
 800fa52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	3301      	adds	r3, #1
 800fa58:	60fb      	str	r3, [r7, #12]
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	4a13      	ldr	r2, [pc, #76]	; (800faac <USB_CoreReset+0x64>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d901      	bls.n	800fa66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fa62:	2303      	movs	r3, #3
 800fa64:	e01b      	b.n	800fa9e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	691b      	ldr	r3, [r3, #16]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	daf2      	bge.n	800fa54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	691b      	ldr	r3, [r3, #16]
 800fa76:	f043 0201 	orr.w	r2, r3, #1
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	3301      	adds	r3, #1
 800fa82:	60fb      	str	r3, [r7, #12]
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	4a09      	ldr	r2, [pc, #36]	; (800faac <USB_CoreReset+0x64>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d901      	bls.n	800fa90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fa8c:	2303      	movs	r3, #3
 800fa8e:	e006      	b.n	800fa9e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	691b      	ldr	r3, [r3, #16]
 800fa94:	f003 0301 	and.w	r3, r3, #1
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d0f0      	beq.n	800fa7e <USB_CoreReset+0x36>

  return HAL_OK;
 800fa9c:	2300      	movs	r3, #0
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3714      	adds	r7, #20
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop
 800faac:	00030d40 	.word	0x00030d40

0800fab0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fab4:	4904      	ldr	r1, [pc, #16]	; (800fac8 <MX_FATFS_Init+0x18>)
 800fab6:	4805      	ldr	r0, [pc, #20]	; (800facc <MX_FATFS_Init+0x1c>)
 800fab8:	f004 fdaa 	bl	8014610 <FATFS_LinkDriver>
 800fabc:	4603      	mov	r3, r0
 800fabe:	461a      	mov	r2, r3
 800fac0:	4b03      	ldr	r3, [pc, #12]	; (800fad0 <MX_FATFS_Init+0x20>)
 800fac2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800fac4:	bf00      	nop
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	2001a4a4 	.word	0x2001a4a4
 800facc:	0801c3c0 	.word	0x0801c3c0
 800fad0:	2001a4a0 	.word	0x2001a4a0

0800fad4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fad4:	b480      	push	{r7}
 800fad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fad8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800fada:	4618      	mov	r0, r3
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b082      	sub	sp, #8
 800fae8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800faea:	2300      	movs	r3, #0
 800faec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800faee:	f000 f896 	bl	800fc1e <BSP_SD_IsDetected>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b01      	cmp	r3, #1
 800faf6:	d001      	beq.n	800fafc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800faf8:	2302      	movs	r3, #2
 800fafa:	e012      	b.n	800fb22 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fafc:	480b      	ldr	r0, [pc, #44]	; (800fb2c <BSP_SD_Init+0x48>)
 800fafe:	f7fa fa39 	bl	8009f74 <HAL_SD_Init>
 800fb02:	4603      	mov	r3, r0
 800fb04:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fb06:	79fb      	ldrb	r3, [r7, #7]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d109      	bne.n	800fb20 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fb0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800fb10:	4806      	ldr	r0, [pc, #24]	; (800fb2c <BSP_SD_Init+0x48>)
 800fb12:	f7fa fff1 	bl	800aaf8 <HAL_SD_ConfigWideBusOperation>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d001      	beq.n	800fb20 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fb20:	79fb      	ldrb	r3, [r7, #7]
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	3708      	adds	r7, #8
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	2000b914 	.word	0x2000b914

0800fb30 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b086      	sub	sp, #24
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	68ba      	ldr	r2, [r7, #8]
 800fb44:	68f9      	ldr	r1, [r7, #12]
 800fb46:	4806      	ldr	r0, [pc, #24]	; (800fb60 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fb48:	f7fa faac 	bl	800a0a4 <HAL_SD_ReadBlocks_DMA>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d001      	beq.n	800fb56 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fb52:	2301      	movs	r3, #1
 800fb54:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800fb56:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3718      	adds	r7, #24
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	2000b914 	.word	0x2000b914

0800fb64 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b086      	sub	sp, #24
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	60f8      	str	r0, [r7, #12]
 800fb6c:	60b9      	str	r1, [r7, #8]
 800fb6e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fb70:	2300      	movs	r3, #0
 800fb72:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	68ba      	ldr	r2, [r7, #8]
 800fb78:	68f9      	ldr	r1, [r7, #12]
 800fb7a:	4806      	ldr	r0, [pc, #24]	; (800fb94 <BSP_SD_WriteBlocks_DMA+0x30>)
 800fb7c:	f7fa fb7e 	bl	800a27c <HAL_SD_WriteBlocks_DMA>
 800fb80:	4603      	mov	r3, r0
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d001      	beq.n	800fb8a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fb86:	2301      	movs	r3, #1
 800fb88:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800fb8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3718      	adds	r7, #24
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	2000b914 	.word	0x2000b914

0800fb98 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fb9c:	4805      	ldr	r0, [pc, #20]	; (800fbb4 <BSP_SD_GetCardState+0x1c>)
 800fb9e:	f7fb f827 	bl	800abf0 <HAL_SD_GetCardState>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b04      	cmp	r3, #4
 800fba6:	bf14      	ite	ne
 800fba8:	2301      	movne	r3, #1
 800fbaa:	2300      	moveq	r3, #0
 800fbac:	b2db      	uxtb	r3, r3
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	2000b914 	.word	0x2000b914

0800fbb8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fbc0:	6879      	ldr	r1, [r7, #4]
 800fbc2:	4803      	ldr	r0, [pc, #12]	; (800fbd0 <BSP_SD_GetCardInfo+0x18>)
 800fbc4:	f7fa ff6c 	bl	800aaa0 <HAL_SD_GetCardInfo>
}
 800fbc8:	bf00      	nop
 800fbca:	3708      	adds	r7, #8
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}
 800fbd0:	2000b914 	.word	0x2000b914

0800fbd4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800fbdc:	f000 f818 	bl	800fc10 <BSP_SD_AbortCallback>
}
 800fbe0:	bf00      	nop
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fbf0:	f000 f9b4 	bl	800ff5c <BSP_SD_WriteCpltCallback>
}
 800fbf4:	bf00      	nop
 800fbf6:	3708      	adds	r7, #8
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b082      	sub	sp, #8
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fc04:	f000 f9bc 	bl	800ff80 <BSP_SD_ReadCpltCallback>
}
 800fc08:	bf00      	nop
 800fc0a:	3708      	adds	r7, #8
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800fc10:	b480      	push	{r7}
 800fc12:	af00      	add	r7, sp, #0

}
 800fc14:	bf00      	nop
 800fc16:	46bd      	mov	sp, r7
 800fc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1c:	4770      	bx	lr

0800fc1e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fc1e:	b580      	push	{r7, lr}
 800fc20:	b082      	sub	sp, #8
 800fc22:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fc24:	2301      	movs	r3, #1
 800fc26:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800fc28:	f000 f80c 	bl	800fc44 <BSP_PlatformIsDetected>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d101      	bne.n	800fc36 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fc32:	2300      	movs	r3, #0
 800fc34:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fc36:	79fb      	ldrb	r3, [r7, #7]
 800fc38:	b2db      	uxtb	r3, r3
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3708      	adds	r7, #8
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
	...

0800fc44 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fc4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fc52:	4806      	ldr	r0, [pc, #24]	; (800fc6c <BSP_PlatformIsDetected+0x28>)
 800fc54:	f7f7 ff00 	bl	8007a58 <HAL_GPIO_ReadPin>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d001      	beq.n	800fc62 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800fc62:	79fb      	ldrb	r3, [r7, #7]
}  
 800fc64:	4618      	mov	r0, r3
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	40020800 	.word	0x40020800

0800fc70 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800fc78:	f004 fdb4 	bl	80147e4 <osKernelGetTickCount>
 800fc7c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800fc7e:	e006      	b.n	800fc8e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fc80:	f7ff ff8a 	bl	800fb98 <BSP_SD_GetCardState>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d101      	bne.n	800fc8e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	e009      	b.n	800fca2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800fc8e:	f004 fda9 	bl	80147e4 <osKernelGetTickCount>
 800fc92:	4602      	mov	r2, r0
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	1ad3      	subs	r3, r2, r3
 800fc98:	687a      	ldr	r2, [r7, #4]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d8f0      	bhi.n	800fc80 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fc9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3710      	adds	r7, #16
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
	...

0800fcac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fcb6:	4b0b      	ldr	r3, [pc, #44]	; (800fce4 <SD_CheckStatus+0x38>)
 800fcb8:	2201      	movs	r2, #1
 800fcba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fcbc:	f7ff ff6c 	bl	800fb98 <BSP_SD_GetCardState>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d107      	bne.n	800fcd6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fcc6:	4b07      	ldr	r3, [pc, #28]	; (800fce4 <SD_CheckStatus+0x38>)
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	b2db      	uxtb	r3, r3
 800fccc:	f023 0301 	bic.w	r3, r3, #1
 800fcd0:	b2da      	uxtb	r2, r3
 800fcd2:	4b04      	ldr	r3, [pc, #16]	; (800fce4 <SD_CheckStatus+0x38>)
 800fcd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fcd6:	4b03      	ldr	r3, [pc, #12]	; (800fce4 <SD_CheckStatus+0x38>)
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	b2db      	uxtb	r3, r3
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3708      	adds	r7, #8
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	20000091 	.word	0x20000091

0800fce8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	4603      	mov	r3, r0
 800fcf0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800fcf2:	4b1c      	ldr	r3, [pc, #112]	; (800fd64 <SD_initialize+0x7c>)
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800fcf8:	f004 fd1c 	bl	8014734 <osKernelGetState>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b02      	cmp	r3, #2
 800fd00:	d129      	bne.n	800fd56 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800fd02:	f7ff feef 	bl	800fae4 <BSP_SD_Init>
 800fd06:	4603      	mov	r3, r0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d107      	bne.n	800fd1c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800fd0c:	79fb      	ldrb	r3, [r7, #7]
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7ff ffcc 	bl	800fcac <SD_CheckStatus>
 800fd14:	4603      	mov	r3, r0
 800fd16:	461a      	mov	r2, r3
 800fd18:	4b12      	ldr	r3, [pc, #72]	; (800fd64 <SD_initialize+0x7c>)
 800fd1a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800fd1c:	4b11      	ldr	r3, [pc, #68]	; (800fd64 <SD_initialize+0x7c>)
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	b2db      	uxtb	r3, r3
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d017      	beq.n	800fd56 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800fd26:	4b10      	ldr	r3, [pc, #64]	; (800fd68 <SD_initialize+0x80>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d107      	bne.n	800fd3e <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800fd2e:	2200      	movs	r2, #0
 800fd30:	2102      	movs	r1, #2
 800fd32:	200a      	movs	r0, #10
 800fd34:	f005 f9a6 	bl	8015084 <osMessageQueueNew>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	4b0b      	ldr	r3, [pc, #44]	; (800fd68 <SD_initialize+0x80>)
 800fd3c:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800fd3e:	4b0a      	ldr	r3, [pc, #40]	; (800fd68 <SD_initialize+0x80>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d107      	bne.n	800fd56 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800fd46:	4b07      	ldr	r3, [pc, #28]	; (800fd64 <SD_initialize+0x7c>)
 800fd48:	781b      	ldrb	r3, [r3, #0]
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	f043 0301 	orr.w	r3, r3, #1
 800fd50:	b2da      	uxtb	r2, r3
 800fd52:	4b04      	ldr	r3, [pc, #16]	; (800fd64 <SD_initialize+0x7c>)
 800fd54:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800fd56:	4b03      	ldr	r3, [pc, #12]	; (800fd64 <SD_initialize+0x7c>)
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	b2db      	uxtb	r3, r3
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3708      	adds	r7, #8
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	20000091 	.word	0x20000091
 800fd68:	20000374 	.word	0x20000374

0800fd6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	4603      	mov	r3, r0
 800fd74:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fd76:	79fb      	ldrb	r3, [r7, #7]
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7ff ff97 	bl	800fcac <SD_CheckStatus>
 800fd7e:	4603      	mov	r3, r0
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3708      	adds	r7, #8
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b088      	sub	sp, #32
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60b9      	str	r1, [r7, #8]
 800fd90:	607a      	str	r2, [r7, #4]
 800fd92:	603b      	str	r3, [r7, #0]
 800fd94:	4603      	mov	r3, r0
 800fd96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fd9c:	f247 5030 	movw	r0, #30000	; 0x7530
 800fda0:	f7ff ff66 	bl	800fc70 <SD_CheckStatusWithTimeout>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	da01      	bge.n	800fdae <SD_read+0x26>
  {
    return res;
 800fdaa:	7ffb      	ldrb	r3, [r7, #31]
 800fdac:	e02f      	b.n	800fe0e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800fdae:	683a      	ldr	r2, [r7, #0]
 800fdb0:	6879      	ldr	r1, [r7, #4]
 800fdb2:	68b8      	ldr	r0, [r7, #8]
 800fdb4:	f7ff febc 	bl	800fb30 <BSP_SD_ReadBlocks_DMA>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800fdbc:	7fbb      	ldrb	r3, [r7, #30]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d124      	bne.n	800fe0c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800fdc2:	4b15      	ldr	r3, [pc, #84]	; (800fe18 <SD_read+0x90>)
 800fdc4:	6818      	ldr	r0, [r3, #0]
 800fdc6:	f107 0112 	add.w	r1, r7, #18
 800fdca:	f247 5330 	movw	r3, #30000	; 0x7530
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f005 fa52 	bl	8015278 <osMessageQueueGet>
 800fdd4:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800fdd6:	69bb      	ldr	r3, [r7, #24]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d117      	bne.n	800fe0c <SD_read+0x84>
 800fddc:	8a7b      	ldrh	r3, [r7, #18]
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d114      	bne.n	800fe0c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800fde2:	f004 fcff 	bl	80147e4 <osKernelGetTickCount>
 800fde6:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800fde8:	e007      	b.n	800fdfa <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fdea:	f7ff fed5 	bl	800fb98 <BSP_SD_GetCardState>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d102      	bne.n	800fdfa <SD_read+0x72>
              {
                res = RES_OK;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800fdf8:	e008      	b.n	800fe0c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800fdfa:	f004 fcf3 	bl	80147e4 <osKernelGetTickCount>
 800fdfe:	4602      	mov	r2, r0
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	1ad3      	subs	r3, r2, r3
 800fe04:	f247 522f 	movw	r2, #29999	; 0x752f
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d9ee      	bls.n	800fdea <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800fe0c:	7ffb      	ldrb	r3, [r7, #31]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3720      	adds	r7, #32
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	20000374 	.word	0x20000374

0800fe1c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b088      	sub	sp, #32
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	60b9      	str	r1, [r7, #8]
 800fe24:	607a      	str	r2, [r7, #4]
 800fe26:	603b      	str	r3, [r7, #0]
 800fe28:	4603      	mov	r3, r0
 800fe2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fe30:	f247 5030 	movw	r0, #30000	; 0x7530
 800fe34:	f7ff ff1c 	bl	800fc70 <SD_CheckStatusWithTimeout>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	da01      	bge.n	800fe42 <SD_write+0x26>
  {
    return res;
 800fe3e:	7ffb      	ldrb	r3, [r7, #31]
 800fe40:	e02d      	b.n	800fe9e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fe42:	683a      	ldr	r2, [r7, #0]
 800fe44:	6879      	ldr	r1, [r7, #4]
 800fe46:	68b8      	ldr	r0, [r7, #8]
 800fe48:	f7ff fe8c 	bl	800fb64 <BSP_SD_WriteBlocks_DMA>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d124      	bne.n	800fe9c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800fe52:	4b15      	ldr	r3, [pc, #84]	; (800fea8 <SD_write+0x8c>)
 800fe54:	6818      	ldr	r0, [r3, #0]
 800fe56:	f107 0112 	add.w	r1, r7, #18
 800fe5a:	f247 5330 	movw	r3, #30000	; 0x7530
 800fe5e:	2200      	movs	r2, #0
 800fe60:	f005 fa0a 	bl	8015278 <osMessageQueueGet>
 800fe64:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800fe66:	69bb      	ldr	r3, [r7, #24]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d117      	bne.n	800fe9c <SD_write+0x80>
 800fe6c:	8a7b      	ldrh	r3, [r7, #18]
 800fe6e:	2b02      	cmp	r3, #2
 800fe70:	d114      	bne.n	800fe9c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800fe72:	f004 fcb7 	bl	80147e4 <osKernelGetTickCount>
 800fe76:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800fe78:	e007      	b.n	800fe8a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fe7a:	f7ff fe8d 	bl	800fb98 <BSP_SD_GetCardState>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d102      	bne.n	800fe8a <SD_write+0x6e>
          {
            res = RES_OK;
 800fe84:	2300      	movs	r3, #0
 800fe86:	77fb      	strb	r3, [r7, #31]
            break;
 800fe88:	e008      	b.n	800fe9c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800fe8a:	f004 fcab 	bl	80147e4 <osKernelGetTickCount>
 800fe8e:	4602      	mov	r2, r0
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	1ad3      	subs	r3, r2, r3
 800fe94:	f247 522f 	movw	r2, #29999	; 0x752f
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	d9ee      	bls.n	800fe7a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800fe9c:	7ffb      	ldrb	r3, [r7, #31]
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3720      	adds	r7, #32
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}
 800fea6:	bf00      	nop
 800fea8:	20000374 	.word	0x20000374

0800feac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b08c      	sub	sp, #48	; 0x30
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	4603      	mov	r3, r0
 800feb4:	603a      	str	r2, [r7, #0]
 800feb6:	71fb      	strb	r3, [r7, #7]
 800feb8:	460b      	mov	r3, r1
 800feba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800febc:	2301      	movs	r3, #1
 800febe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fec2:	4b25      	ldr	r3, [pc, #148]	; (800ff58 <SD_ioctl+0xac>)
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	f003 0301 	and.w	r3, r3, #1
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <SD_ioctl+0x28>
 800fed0:	2303      	movs	r3, #3
 800fed2:	e03c      	b.n	800ff4e <SD_ioctl+0xa2>

  switch (cmd)
 800fed4:	79bb      	ldrb	r3, [r7, #6]
 800fed6:	2b03      	cmp	r3, #3
 800fed8:	d834      	bhi.n	800ff44 <SD_ioctl+0x98>
 800feda:	a201      	add	r2, pc, #4	; (adr r2, 800fee0 <SD_ioctl+0x34>)
 800fedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fee0:	0800fef1 	.word	0x0800fef1
 800fee4:	0800fef9 	.word	0x0800fef9
 800fee8:	0800ff11 	.word	0x0800ff11
 800feec:	0800ff2b 	.word	0x0800ff2b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fef0:	2300      	movs	r3, #0
 800fef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fef6:	e028      	b.n	800ff4a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fef8:	f107 030c 	add.w	r3, r7, #12
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7ff fe5b 	bl	800fbb8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ff02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff0e:	e01c      	b.n	800ff4a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff10:	f107 030c 	add.w	r3, r7, #12
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7ff fe4f 	bl	800fbb8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ff1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1c:	b29a      	uxth	r2, r3
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ff22:	2300      	movs	r3, #0
 800ff24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff28:	e00f      	b.n	800ff4a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ff2a:	f107 030c 	add.w	r3, r7, #12
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7ff fe42 	bl	800fbb8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ff34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff36:	0a5a      	lsrs	r2, r3, #9
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ff42:	e002      	b.n	800ff4a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ff44:	2304      	movs	r3, #4
 800ff46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ff4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3730      	adds	r7, #48	; 0x30
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	20000091 	.word	0x20000091

0800ff5c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b082      	sub	sp, #8
 800ff60:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800ff62:	2302      	movs	r3, #2
 800ff64:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ff66:	4b05      	ldr	r3, [pc, #20]	; (800ff7c <BSP_SD_WriteCpltCallback+0x20>)
 800ff68:	6818      	ldr	r0, [r3, #0]
 800ff6a:	1db9      	adds	r1, r7, #6
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	2200      	movs	r2, #0
 800ff70:	f005 f90e 	bl	8015190 <osMessageQueuePut>
#endif
}
 800ff74:	bf00      	nop
 800ff76:	3708      	adds	r7, #8
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}
 800ff7c:	20000374 	.word	0x20000374

0800ff80 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800ff86:	2301      	movs	r3, #1
 800ff88:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800ff8a:	4b05      	ldr	r3, [pc, #20]	; (800ffa0 <BSP_SD_ReadCpltCallback+0x20>)
 800ff8c:	6818      	ldr	r0, [r3, #0]
 800ff8e:	1db9      	adds	r1, r7, #6
 800ff90:	2300      	movs	r3, #0
 800ff92:	2200      	movs	r2, #0
 800ff94:	f005 f8fc 	bl	8015190 <osMessageQueuePut>
#endif
}
 800ff98:	bf00      	nop
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	20000374 	.word	0x20000374

0800ffa4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	460b      	mov	r3, r1
 800ffae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ffb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ffb4:	f009 f95c 	bl	8019270 <malloc>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d105      	bne.n	800ffce <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ffca:	2302      	movs	r3, #2
 800ffcc:	e066      	b.n	801009c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	68fa      	ldr	r2, [r7, #12]
 800ffd2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	7c1b      	ldrb	r3, [r3, #16]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d119      	bne.n	8010012 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ffde:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ffe2:	2202      	movs	r2, #2
 800ffe4:	2181      	movs	r1, #129	; 0x81
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f008 ff75 	bl	8018ed6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2201      	movs	r2, #1
 800fff0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fff6:	2202      	movs	r2, #2
 800fff8:	2101      	movs	r1, #1
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f008 ff6b 	bl	8018ed6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2201      	movs	r2, #1
 8010004:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2210      	movs	r2, #16
 801000c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8010010:	e016      	b.n	8010040 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010012:	2340      	movs	r3, #64	; 0x40
 8010014:	2202      	movs	r2, #2
 8010016:	2181      	movs	r1, #129	; 0x81
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f008 ff5c 	bl	8018ed6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2201      	movs	r2, #1
 8010022:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010024:	2340      	movs	r3, #64	; 0x40
 8010026:	2202      	movs	r2, #2
 8010028:	2101      	movs	r1, #1
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f008 ff53 	bl	8018ed6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2201      	movs	r2, #1
 8010034:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2210      	movs	r2, #16
 801003c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010040:	2308      	movs	r3, #8
 8010042:	2203      	movs	r2, #3
 8010044:	2182      	movs	r1, #130	; 0x82
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f008 ff45 	bl	8018ed6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	2201      	movs	r2, #1
 8010050:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2200      	movs	r2, #0
 8010062:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	2200      	movs	r2, #0
 801006a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	7c1b      	ldrb	r3, [r3, #16]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d109      	bne.n	801008a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801007c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010080:	2101      	movs	r1, #1
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f009 f816 	bl	80190b4 <USBD_LL_PrepareReceive>
 8010088:	e007      	b.n	801009a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010090:	2340      	movs	r3, #64	; 0x40
 8010092:	2101      	movs	r1, #1
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f009 f80d 	bl	80190b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801009a:	2300      	movs	r3, #0
}
 801009c:	4618      	mov	r0, r3
 801009e:	3710      	adds	r7, #16
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b084      	sub	sp, #16
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	460b      	mov	r3, r1
 80100ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80100b0:	2300      	movs	r3, #0
 80100b2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80100b4:	2181      	movs	r1, #129	; 0x81
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f008 ff33 	bl	8018f22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2200      	movs	r2, #0
 80100c0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80100c2:	2101      	movs	r1, #1
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f008 ff2c 	bl	8018f22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2200      	movs	r2, #0
 80100ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80100d2:	2182      	movs	r1, #130	; 0x82
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f008 ff24 	bl	8018f22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2200      	movs	r2, #0
 80100de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d00e      	beq.n	8010112 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010104:	4618      	mov	r0, r3
 8010106:	f009 f8bb 	bl	8019280 <free>
    pdev->pClassData = NULL;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8010112:	7bfb      	ldrb	r3, [r7, #15]
}
 8010114:	4618      	mov	r0, r3
 8010116:	3710      	adds	r7, #16
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b086      	sub	sp, #24
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801012c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801012e:	2300      	movs	r3, #0
 8010130:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010132:	2300      	movs	r3, #0
 8010134:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8010136:	2300      	movs	r3, #0
 8010138:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010142:	2b00      	cmp	r3, #0
 8010144:	d03a      	beq.n	80101bc <USBD_CDC_Setup+0xa0>
 8010146:	2b20      	cmp	r3, #32
 8010148:	f040 8097 	bne.w	801027a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	88db      	ldrh	r3, [r3, #6]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d029      	beq.n	80101a8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	b25b      	sxtb	r3, r3
 801015a:	2b00      	cmp	r3, #0
 801015c:	da11      	bge.n	8010182 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010164:	689b      	ldr	r3, [r3, #8]
 8010166:	683a      	ldr	r2, [r7, #0]
 8010168:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 801016a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801016c:	683a      	ldr	r2, [r7, #0]
 801016e:	88d2      	ldrh	r2, [r2, #6]
 8010170:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010172:	6939      	ldr	r1, [r7, #16]
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	88db      	ldrh	r3, [r3, #6]
 8010178:	461a      	mov	r2, r3
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f001 fac7 	bl	801170e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8010180:	e082      	b.n	8010288 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	785a      	ldrb	r2, [r3, #1]
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	88db      	ldrh	r3, [r3, #6]
 8010190:	b2da      	uxtb	r2, r3
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010198:	6939      	ldr	r1, [r7, #16]
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	88db      	ldrh	r3, [r3, #6]
 801019e:	461a      	mov	r2, r3
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f001 fae0 	bl	8011766 <USBD_CtlPrepareRx>
    break;
 80101a6:	e06f      	b.n	8010288 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80101ae:	689b      	ldr	r3, [r3, #8]
 80101b0:	683a      	ldr	r2, [r7, #0]
 80101b2:	7850      	ldrb	r0, [r2, #1]
 80101b4:	2200      	movs	r2, #0
 80101b6:	6839      	ldr	r1, [r7, #0]
 80101b8:	4798      	blx	r3
    break;
 80101ba:	e065      	b.n	8010288 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80101bc:	683b      	ldr	r3, [r7, #0]
 80101be:	785b      	ldrb	r3, [r3, #1]
 80101c0:	2b0b      	cmp	r3, #11
 80101c2:	d84f      	bhi.n	8010264 <USBD_CDC_Setup+0x148>
 80101c4:	a201      	add	r2, pc, #4	; (adr r2, 80101cc <USBD_CDC_Setup+0xb0>)
 80101c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101ca:	bf00      	nop
 80101cc:	080101fd 	.word	0x080101fd
 80101d0:	08010273 	.word	0x08010273
 80101d4:	08010265 	.word	0x08010265
 80101d8:	08010265 	.word	0x08010265
 80101dc:	08010265 	.word	0x08010265
 80101e0:	08010265 	.word	0x08010265
 80101e4:	08010265 	.word	0x08010265
 80101e8:	08010265 	.word	0x08010265
 80101ec:	08010265 	.word	0x08010265
 80101f0:	08010265 	.word	0x08010265
 80101f4:	08010225 	.word	0x08010225
 80101f8:	0801024d 	.word	0x0801024d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010202:	2b03      	cmp	r3, #3
 8010204:	d107      	bne.n	8010216 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010206:	f107 030c 	add.w	r3, r7, #12
 801020a:	2202      	movs	r2, #2
 801020c:	4619      	mov	r1, r3
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f001 fa7d 	bl	801170e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8010214:	e030      	b.n	8010278 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8010216:	6839      	ldr	r1, [r7, #0]
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f001 fa07 	bl	801162c <USBD_CtlError>
        ret = USBD_FAIL;
 801021e:	2303      	movs	r3, #3
 8010220:	75fb      	strb	r3, [r7, #23]
      break;
 8010222:	e029      	b.n	8010278 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801022a:	2b03      	cmp	r3, #3
 801022c:	d107      	bne.n	801023e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801022e:	f107 030f 	add.w	r3, r7, #15
 8010232:	2201      	movs	r2, #1
 8010234:	4619      	mov	r1, r3
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f001 fa69 	bl	801170e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801023c:	e01c      	b.n	8010278 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 801023e:	6839      	ldr	r1, [r7, #0]
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f001 f9f3 	bl	801162c <USBD_CtlError>
        ret = USBD_FAIL;
 8010246:	2303      	movs	r3, #3
 8010248:	75fb      	strb	r3, [r7, #23]
      break;
 801024a:	e015      	b.n	8010278 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010252:	2b03      	cmp	r3, #3
 8010254:	d00f      	beq.n	8010276 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8010256:	6839      	ldr	r1, [r7, #0]
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f001 f9e7 	bl	801162c <USBD_CtlError>
        ret = USBD_FAIL;
 801025e:	2303      	movs	r3, #3
 8010260:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8010262:	e008      	b.n	8010276 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8010264:	6839      	ldr	r1, [r7, #0]
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f001 f9e0 	bl	801162c <USBD_CtlError>
      ret = USBD_FAIL;
 801026c:	2303      	movs	r3, #3
 801026e:	75fb      	strb	r3, [r7, #23]
      break;
 8010270:	e002      	b.n	8010278 <USBD_CDC_Setup+0x15c>
      break;
 8010272:	bf00      	nop
 8010274:	e008      	b.n	8010288 <USBD_CDC_Setup+0x16c>
      break;
 8010276:	bf00      	nop
    }
    break;
 8010278:	e006      	b.n	8010288 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 801027a:	6839      	ldr	r1, [r7, #0]
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f001 f9d5 	bl	801162c <USBD_CtlError>
    ret = USBD_FAIL;
 8010282:	2303      	movs	r3, #3
 8010284:	75fb      	strb	r3, [r7, #23]
    break;
 8010286:	bf00      	nop
  }

  return (uint8_t)ret;
 8010288:	7dfb      	ldrb	r3, [r7, #23]
}
 801028a:	4618      	mov	r0, r3
 801028c:	3718      	adds	r7, #24
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
 8010292:	bf00      	nop

08010294 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	460b      	mov	r3, r1
 801029e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80102a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d101      	bne.n	80102b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80102b2:	2303      	movs	r3, #3
 80102b4:	e049      	b.n	801034a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80102be:	78fa      	ldrb	r2, [r7, #3]
 80102c0:	6879      	ldr	r1, [r7, #4]
 80102c2:	4613      	mov	r3, r2
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	4413      	add	r3, r2
 80102c8:	009b      	lsls	r3, r3, #2
 80102ca:	440b      	add	r3, r1
 80102cc:	3318      	adds	r3, #24
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d029      	beq.n	8010328 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80102d4:	78fa      	ldrb	r2, [r7, #3]
 80102d6:	6879      	ldr	r1, [r7, #4]
 80102d8:	4613      	mov	r3, r2
 80102da:	009b      	lsls	r3, r3, #2
 80102dc:	4413      	add	r3, r2
 80102de:	009b      	lsls	r3, r3, #2
 80102e0:	440b      	add	r3, r1
 80102e2:	3318      	adds	r3, #24
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	78f9      	ldrb	r1, [r7, #3]
 80102e8:	68f8      	ldr	r0, [r7, #12]
 80102ea:	460b      	mov	r3, r1
 80102ec:	00db      	lsls	r3, r3, #3
 80102ee:	1a5b      	subs	r3, r3, r1
 80102f0:	009b      	lsls	r3, r3, #2
 80102f2:	4403      	add	r3, r0
 80102f4:	3344      	adds	r3, #68	; 0x44
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80102fc:	fb03 f301 	mul.w	r3, r3, r1
 8010300:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010302:	2b00      	cmp	r3, #0
 8010304:	d110      	bne.n	8010328 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8010306:	78fa      	ldrb	r2, [r7, #3]
 8010308:	6879      	ldr	r1, [r7, #4]
 801030a:	4613      	mov	r3, r2
 801030c:	009b      	lsls	r3, r3, #2
 801030e:	4413      	add	r3, r2
 8010310:	009b      	lsls	r3, r3, #2
 8010312:	440b      	add	r3, r1
 8010314:	3318      	adds	r3, #24
 8010316:	2200      	movs	r2, #0
 8010318:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801031a:	78f9      	ldrb	r1, [r7, #3]
 801031c:	2300      	movs	r3, #0
 801031e:	2200      	movs	r2, #0
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f008 fea6 	bl	8019072 <USBD_LL_Transmit>
 8010326:	e00f      	b.n	8010348 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	2200      	movs	r2, #0
 801032c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010336:	691b      	ldr	r3, [r3, #16]
 8010338:	68ba      	ldr	r2, [r7, #8]
 801033a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801033e:	68ba      	ldr	r2, [r7, #8]
 8010340:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010344:	78fa      	ldrb	r2, [r7, #3]
 8010346:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8010348:	2300      	movs	r3, #0
}
 801034a:	4618      	mov	r0, r3
 801034c:	3710      	adds	r7, #16
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010352:	b580      	push	{r7, lr}
 8010354:	b084      	sub	sp, #16
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
 801035a:	460b      	mov	r3, r1
 801035c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010364:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801036c:	2b00      	cmp	r3, #0
 801036e:	d101      	bne.n	8010374 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010370:	2303      	movs	r3, #3
 8010372:	e015      	b.n	80103a0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010374:	78fb      	ldrb	r3, [r7, #3]
 8010376:	4619      	mov	r1, r3
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f008 febc 	bl	80190f6 <USBD_LL_GetRxDataSize>
 801037e:	4602      	mov	r2, r0
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801038c:	68db      	ldr	r3, [r3, #12]
 801038e:	68fa      	ldr	r2, [r7, #12]
 8010390:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010394:	68fa      	ldr	r2, [r7, #12]
 8010396:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801039a:	4611      	mov	r1, r2
 801039c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801039e:	2300      	movs	r3, #0
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3710      	adds	r7, #16
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80103b6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d015      	beq.n	80103ee <USBD_CDC_EP0_RxReady+0x46>
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80103c8:	2bff      	cmp	r3, #255	; 0xff
 80103ca:	d010      	beq.n	80103ee <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80103d2:	689b      	ldr	r3, [r3, #8]
 80103d4:	68fa      	ldr	r2, [r7, #12]
 80103d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80103da:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80103dc:	68fa      	ldr	r2, [r7, #12]
 80103de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80103e2:	b292      	uxth	r2, r2
 80103e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	22ff      	movs	r2, #255	; 0xff
 80103ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80103ee:	2300      	movs	r3, #0
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3710      	adds	r7, #16
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80103f8:	b480      	push	{r7}
 80103fa:	b083      	sub	sp, #12
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2243      	movs	r2, #67	; 0x43
 8010404:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010406:	4b03      	ldr	r3, [pc, #12]	; (8010414 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010408:	4618      	mov	r0, r3
 801040a:	370c      	adds	r7, #12
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr
 8010414:	2000011c 	.word	0x2000011c

08010418 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010418:	b480      	push	{r7}
 801041a:	b083      	sub	sp, #12
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2243      	movs	r2, #67	; 0x43
 8010424:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010426:	4b03      	ldr	r3, [pc, #12]	; (8010434 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010428:	4618      	mov	r0, r3
 801042a:	370c      	adds	r7, #12
 801042c:	46bd      	mov	sp, r7
 801042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010432:	4770      	bx	lr
 8010434:	200000d8 	.word	0x200000d8

08010438 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010438:	b480      	push	{r7}
 801043a:	b083      	sub	sp, #12
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2243      	movs	r2, #67	; 0x43
 8010444:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010446:	4b03      	ldr	r3, [pc, #12]	; (8010454 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010448:	4618      	mov	r0, r3
 801044a:	370c      	adds	r7, #12
 801044c:	46bd      	mov	sp, r7
 801044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010452:	4770      	bx	lr
 8010454:	20000160 	.word	0x20000160

08010458 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010458:	b480      	push	{r7}
 801045a:	b083      	sub	sp, #12
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	220a      	movs	r2, #10
 8010464:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010466:	4b03      	ldr	r3, [pc, #12]	; (8010474 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010468:	4618      	mov	r0, r3
 801046a:	370c      	adds	r7, #12
 801046c:	46bd      	mov	sp, r7
 801046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010472:	4770      	bx	lr
 8010474:	20000094 	.word	0x20000094

08010478 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d101      	bne.n	801048c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010488:	2303      	movs	r3, #3
 801048a:	e004      	b.n	8010496 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	683a      	ldr	r2, [r7, #0]
 8010490:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010494:	2300      	movs	r3, #0
}
 8010496:	4618      	mov	r0, r3
 8010498:	370c      	adds	r7, #12
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr

080104a2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80104a2:	b480      	push	{r7}
 80104a4:	b087      	sub	sp, #28
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	60f8      	str	r0, [r7, #12]
 80104aa:	60b9      	str	r1, [r7, #8]
 80104ac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	68ba      	ldr	r2, [r7, #8]
 80104ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	687a      	ldr	r2, [r7, #4]
 80104c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80104c6:	2300      	movs	r3, #0
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	371c      	adds	r7, #28
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b085      	sub	sp, #20
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104e4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	683a      	ldr	r2, [r7, #0]
 80104ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80104ee:	2300      	movs	r3, #0
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3714      	adds	r7, #20
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr

080104fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801050a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801050c:	2301      	movs	r3, #1
 801050e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010516:	2b00      	cmp	r3, #0
 8010518:	d101      	bne.n	801051e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801051a:	2303      	movs	r3, #3
 801051c:	e01a      	b.n	8010554 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010524:	2b00      	cmp	r3, #0
 8010526:	d114      	bne.n	8010552 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	2201      	movs	r2, #1
 801052c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010546:	2181      	movs	r1, #129	; 0x81
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f008 fd92 	bl	8019072 <USBD_LL_Transmit>

    ret = USBD_OK;
 801054e:	2300      	movs	r3, #0
 8010550:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010552:	7bfb      	ldrb	r3, [r7, #15]
}
 8010554:	4618      	mov	r0, r3
 8010556:	3710      	adds	r7, #16
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801056a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010572:	2b00      	cmp	r3, #0
 8010574:	d101      	bne.n	801057a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010576:	2303      	movs	r3, #3
 8010578:	e016      	b.n	80105a8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	7c1b      	ldrb	r3, [r3, #16]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d109      	bne.n	8010596 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010588:	f44f 7300 	mov.w	r3, #512	; 0x200
 801058c:	2101      	movs	r1, #1
 801058e:	6878      	ldr	r0, [r7, #4]
 8010590:	f008 fd90 	bl	80190b4 <USBD_LL_PrepareReceive>
 8010594:	e007      	b.n	80105a6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801059c:	2340      	movs	r3, #64	; 0x40
 801059e:	2101      	movs	r1, #1
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f008 fd87 	bl	80190b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80105a6:	2300      	movs	r3, #0
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	3710      	adds	r7, #16
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}

080105b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b086      	sub	sp, #24
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	4613      	mov	r3, r2
 80105bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d101      	bne.n	80105c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80105c4:	2303      	movs	r3, #3
 80105c6:	e025      	b.n	8010614 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d003      	beq.n	80105da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	2200      	movs	r2, #0
 80105d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d003      	beq.n	80105ec <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2200      	movs	r2, #0
 80105e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80105ec:	68bb      	ldr	r3, [r7, #8]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d003      	beq.n	80105fa <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	68ba      	ldr	r2, [r7, #8]
 80105f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2201      	movs	r2, #1
 80105fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	79fa      	ldrb	r2, [r7, #7]
 8010606:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f008 fbfd 	bl	8018e08 <USBD_LL_Init>
 801060e:	4603      	mov	r3, r0
 8010610:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010612:	7dfb      	ldrb	r3, [r7, #23]
}
 8010614:	4618      	mov	r0, r3
 8010616:	3718      	adds	r7, #24
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010626:	2300      	movs	r3, #0
 8010628:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d101      	bne.n	8010634 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010630:	2303      	movs	r3, #3
 8010632:	e010      	b.n	8010656 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	683a      	ldr	r2, [r7, #0]
 8010638:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010644:	f107 020e 	add.w	r2, r7, #14
 8010648:	4610      	mov	r0, r2
 801064a:	4798      	blx	r3
 801064c:	4602      	mov	r2, r0
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8010654:	2300      	movs	r3, #0
}
 8010656:	4618      	mov	r0, r3
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}

0801065e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801065e:	b580      	push	{r7, lr}
 8010660:	b082      	sub	sp, #8
 8010662:	af00      	add	r7, sp, #0
 8010664:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f008 fc1a 	bl	8018ea0 <USBD_LL_Start>
 801066c:	4603      	mov	r3, r0
}
 801066e:	4618      	mov	r0, r3
 8010670:	3708      	adds	r7, #8
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}

08010676 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010676:	b480      	push	{r7}
 8010678:	b083      	sub	sp, #12
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801067e:	2300      	movs	r3, #0
}
 8010680:	4618      	mov	r0, r3
 8010682:	370c      	adds	r7, #12
 8010684:	46bd      	mov	sp, r7
 8010686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068a:	4770      	bx	lr

0801068c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b084      	sub	sp, #16
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	460b      	mov	r3, r1
 8010696:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010698:	2303      	movs	r3, #3
 801069a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d009      	beq.n	80106ba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	78fa      	ldrb	r2, [r7, #3]
 80106b0:	4611      	mov	r1, r2
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	4798      	blx	r3
 80106b6:	4603      	mov	r3, r0
 80106b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80106ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80106bc:	4618      	mov	r0, r3
 80106be:	3710      	adds	r7, #16
 80106c0:	46bd      	mov	sp, r7
 80106c2:	bd80      	pop	{r7, pc}

080106c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b082      	sub	sp, #8
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	460b      	mov	r3, r1
 80106ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d007      	beq.n	80106ea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106e0:	685b      	ldr	r3, [r3, #4]
 80106e2:	78fa      	ldrb	r2, [r7, #3]
 80106e4:	4611      	mov	r1, r2
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	4798      	blx	r3
  }

  return USBD_OK;
 80106ea:	2300      	movs	r3, #0
}
 80106ec:	4618      	mov	r0, r3
 80106ee:	3708      	adds	r7, #8
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}

080106f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010704:	6839      	ldr	r1, [r7, #0]
 8010706:	4618      	mov	r0, r3
 8010708:	f000 ff56 	bl	80115b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2201      	movs	r2, #1
 8010710:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801071a:	461a      	mov	r2, r3
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010728:	f003 031f 	and.w	r3, r3, #31
 801072c:	2b01      	cmp	r3, #1
 801072e:	d00e      	beq.n	801074e <USBD_LL_SetupStage+0x5a>
 8010730:	2b01      	cmp	r3, #1
 8010732:	d302      	bcc.n	801073a <USBD_LL_SetupStage+0x46>
 8010734:	2b02      	cmp	r3, #2
 8010736:	d014      	beq.n	8010762 <USBD_LL_SetupStage+0x6e>
 8010738:	e01d      	b.n	8010776 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010740:	4619      	mov	r1, r3
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 fa18 	bl	8010b78 <USBD_StdDevReq>
 8010748:	4603      	mov	r3, r0
 801074a:	73fb      	strb	r3, [r7, #15]
      break;
 801074c:	e020      	b.n	8010790 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010754:	4619      	mov	r1, r3
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f000 fa7c 	bl	8010c54 <USBD_StdItfReq>
 801075c:	4603      	mov	r3, r0
 801075e:	73fb      	strb	r3, [r7, #15]
      break;
 8010760:	e016      	b.n	8010790 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010768:	4619      	mov	r1, r3
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f000 fab8 	bl	8010ce0 <USBD_StdEPReq>
 8010770:	4603      	mov	r3, r0
 8010772:	73fb      	strb	r3, [r7, #15]
      break;
 8010774:	e00c      	b.n	8010790 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801077c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010780:	b2db      	uxtb	r3, r3
 8010782:	4619      	mov	r1, r3
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f008 fbeb 	bl	8018f60 <USBD_LL_StallEP>
 801078a:	4603      	mov	r3, r0
 801078c:	73fb      	strb	r3, [r7, #15]
      break;
 801078e:	bf00      	nop
  }

  return ret;
 8010790:	7bfb      	ldrb	r3, [r7, #15]
}
 8010792:	4618      	mov	r0, r3
 8010794:	3710      	adds	r7, #16
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}

0801079a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801079a:	b580      	push	{r7, lr}
 801079c:	b086      	sub	sp, #24
 801079e:	af00      	add	r7, sp, #0
 80107a0:	60f8      	str	r0, [r7, #12]
 80107a2:	460b      	mov	r3, r1
 80107a4:	607a      	str	r2, [r7, #4]
 80107a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80107a8:	7afb      	ldrb	r3, [r7, #11]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d137      	bne.n	801081e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80107b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80107bc:	2b03      	cmp	r3, #3
 80107be:	d14a      	bne.n	8010856 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	689a      	ldr	r2, [r3, #8]
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d913      	bls.n	80107f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	689a      	ldr	r2, [r3, #8]
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	68db      	ldr	r3, [r3, #12]
 80107d4:	1ad2      	subs	r2, r2, r3
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	68da      	ldr	r2, [r3, #12]
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	689b      	ldr	r3, [r3, #8]
 80107e2:	4293      	cmp	r3, r2
 80107e4:	bf28      	it	cs
 80107e6:	4613      	movcs	r3, r2
 80107e8:	461a      	mov	r2, r3
 80107ea:	6879      	ldr	r1, [r7, #4]
 80107ec:	68f8      	ldr	r0, [r7, #12]
 80107ee:	f000 ffd7 	bl	80117a0 <USBD_CtlContinueRx>
 80107f2:	e030      	b.n	8010856 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107fa:	691b      	ldr	r3, [r3, #16]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d00a      	beq.n	8010816 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010806:	2b03      	cmp	r3, #3
 8010808:	d105      	bne.n	8010816 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010810:	691b      	ldr	r3, [r3, #16]
 8010812:	68f8      	ldr	r0, [r7, #12]
 8010814:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8010816:	68f8      	ldr	r0, [r7, #12]
 8010818:	f000 ffd3 	bl	80117c2 <USBD_CtlSendStatus>
 801081c:	e01b      	b.n	8010856 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010824:	699b      	ldr	r3, [r3, #24]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d013      	beq.n	8010852 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8010830:	2b03      	cmp	r3, #3
 8010832:	d10e      	bne.n	8010852 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801083a:	699b      	ldr	r3, [r3, #24]
 801083c:	7afa      	ldrb	r2, [r7, #11]
 801083e:	4611      	mov	r1, r2
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	4798      	blx	r3
 8010844:	4603      	mov	r3, r0
 8010846:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8010848:	7dfb      	ldrb	r3, [r7, #23]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d003      	beq.n	8010856 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 801084e:	7dfb      	ldrb	r3, [r7, #23]
 8010850:	e002      	b.n	8010858 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010852:	2303      	movs	r3, #3
 8010854:	e000      	b.n	8010858 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8010856:	2300      	movs	r3, #0
}
 8010858:	4618      	mov	r0, r3
 801085a:	3718      	adds	r7, #24
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b086      	sub	sp, #24
 8010864:	af00      	add	r7, sp, #0
 8010866:	60f8      	str	r0, [r7, #12]
 8010868:	460b      	mov	r3, r1
 801086a:	607a      	str	r2, [r7, #4]
 801086c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801086e:	7afb      	ldrb	r3, [r7, #11]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d16a      	bne.n	801094a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	3314      	adds	r3, #20
 8010878:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010880:	2b02      	cmp	r3, #2
 8010882:	d155      	bne.n	8010930 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	689a      	ldr	r2, [r3, #8]
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	68db      	ldr	r3, [r3, #12]
 801088c:	429a      	cmp	r2, r3
 801088e:	d914      	bls.n	80108ba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	689a      	ldr	r2, [r3, #8]
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	1ad2      	subs	r2, r2, r3
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	689b      	ldr	r3, [r3, #8]
 80108a2:	461a      	mov	r2, r3
 80108a4:	6879      	ldr	r1, [r7, #4]
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f000 ff4c 	bl	8011744 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80108ac:	2300      	movs	r3, #0
 80108ae:	2200      	movs	r2, #0
 80108b0:	2100      	movs	r1, #0
 80108b2:	68f8      	ldr	r0, [r7, #12]
 80108b4:	f008 fbfe 	bl	80190b4 <USBD_LL_PrepareReceive>
 80108b8:	e03a      	b.n	8010930 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	68da      	ldr	r2, [r3, #12]
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	689b      	ldr	r3, [r3, #8]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d11c      	bne.n	8010900 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	685a      	ldr	r2, [r3, #4]
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d316      	bcc.n	8010900 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	685a      	ldr	r2, [r3, #4]
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80108dc:	429a      	cmp	r2, r3
 80108de:	d20f      	bcs.n	8010900 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80108e0:	2200      	movs	r2, #0
 80108e2:	2100      	movs	r1, #0
 80108e4:	68f8      	ldr	r0, [r7, #12]
 80108e6:	f000 ff2d 	bl	8011744 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2200      	movs	r2, #0
 80108ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80108f2:	2300      	movs	r3, #0
 80108f4:	2200      	movs	r2, #0
 80108f6:	2100      	movs	r1, #0
 80108f8:	68f8      	ldr	r0, [r7, #12]
 80108fa:	f008 fbdb 	bl	80190b4 <USBD_LL_PrepareReceive>
 80108fe:	e017      	b.n	8010930 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010906:	68db      	ldr	r3, [r3, #12]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d00a      	beq.n	8010922 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010912:	2b03      	cmp	r3, #3
 8010914:	d105      	bne.n	8010922 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801091c:	68db      	ldr	r3, [r3, #12]
 801091e:	68f8      	ldr	r0, [r7, #12]
 8010920:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010922:	2180      	movs	r1, #128	; 0x80
 8010924:	68f8      	ldr	r0, [r7, #12]
 8010926:	f008 fb1b 	bl	8018f60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801092a:	68f8      	ldr	r0, [r7, #12]
 801092c:	f000 ff5c 	bl	80117e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010936:	2b01      	cmp	r3, #1
 8010938:	d123      	bne.n	8010982 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801093a:	68f8      	ldr	r0, [r7, #12]
 801093c:	f7ff fe9b 	bl	8010676 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	2200      	movs	r2, #0
 8010944:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010948:	e01b      	b.n	8010982 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010950:	695b      	ldr	r3, [r3, #20]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d013      	beq.n	801097e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801095c:	2b03      	cmp	r3, #3
 801095e:	d10e      	bne.n	801097e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010966:	695b      	ldr	r3, [r3, #20]
 8010968:	7afa      	ldrb	r2, [r7, #11]
 801096a:	4611      	mov	r1, r2
 801096c:	68f8      	ldr	r0, [r7, #12]
 801096e:	4798      	blx	r3
 8010970:	4603      	mov	r3, r0
 8010972:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8010974:	7dfb      	ldrb	r3, [r7, #23]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d003      	beq.n	8010982 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 801097a:	7dfb      	ldrb	r3, [r7, #23]
 801097c:	e002      	b.n	8010984 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801097e:	2303      	movs	r3, #3
 8010980:	e000      	b.n	8010984 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8010982:	2300      	movs	r3, #0
}
 8010984:	4618      	mov	r0, r3
 8010986:	3718      	adds	r7, #24
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2201      	movs	r2, #1
 8010998:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2200      	movs	r2, #0
 80109a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2200      	movs	r2, #0
 80109a8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2200      	movs	r2, #0
 80109ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d009      	beq.n	80109d0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109c2:	685b      	ldr	r3, [r3, #4]
 80109c4:	687a      	ldr	r2, [r7, #4]
 80109c6:	6852      	ldr	r2, [r2, #4]
 80109c8:	b2d2      	uxtb	r2, r2
 80109ca:	4611      	mov	r1, r2
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80109d0:	2340      	movs	r3, #64	; 0x40
 80109d2:	2200      	movs	r2, #0
 80109d4:	2100      	movs	r1, #0
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f008 fa7d 	bl	8018ed6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2201      	movs	r2, #1
 80109e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2240      	movs	r2, #64	; 0x40
 80109e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80109ec:	2340      	movs	r3, #64	; 0x40
 80109ee:	2200      	movs	r2, #0
 80109f0:	2180      	movs	r1, #128	; 0x80
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f008 fa6f 	bl	8018ed6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2201      	movs	r2, #1
 80109fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2240      	movs	r2, #64	; 0x40
 8010a02:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010a04:	2300      	movs	r3, #0
}
 8010a06:	4618      	mov	r0, r3
 8010a08:	3708      	adds	r7, #8
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}

08010a0e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010a0e:	b480      	push	{r7}
 8010a10:	b083      	sub	sp, #12
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
 8010a16:	460b      	mov	r3, r1
 8010a18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	78fa      	ldrb	r2, [r7, #3]
 8010a1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010a20:	2300      	movs	r3, #0
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	370c      	adds	r7, #12
 8010a26:	46bd      	mov	sp, r7
 8010a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2c:	4770      	bx	lr

08010a2e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010a2e:	b480      	push	{r7}
 8010a30:	b083      	sub	sp, #12
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2204      	movs	r2, #4
 8010a46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8010a4a:	2300      	movs	r3, #0
}
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	370c      	adds	r7, #12
 8010a50:	46bd      	mov	sp, r7
 8010a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a56:	4770      	bx	lr

08010a58 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b083      	sub	sp, #12
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a66:	2b04      	cmp	r3, #4
 8010a68:	d105      	bne.n	8010a76 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8010a76:	2300      	movs	r3, #0
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	370c      	adds	r7, #12
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a92:	2b03      	cmp	r3, #3
 8010a94:	d10b      	bne.n	8010aae <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a9c:	69db      	ldr	r3, [r3, #28]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d005      	beq.n	8010aae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010aa8:	69db      	ldr	r3, [r3, #28]
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010aae:	2300      	movs	r3, #0
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3708      	adds	r7, #8
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	460b      	mov	r3, r1
 8010ac2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010ac4:	2300      	movs	r3, #0
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	370c      	adds	r7, #12
 8010aca:	46bd      	mov	sp, r7
 8010acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad0:	4770      	bx	lr

08010ad2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010ad2:	b480      	push	{r7}
 8010ad4:	b083      	sub	sp, #12
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
 8010ada:	460b      	mov	r3, r1
 8010adc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010ade:	2300      	movs	r3, #0
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	370c      	adds	r7, #12
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aea:	4770      	bx	lr

08010aec <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010aec:	b480      	push	{r7}
 8010aee:	b083      	sub	sp, #12
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010af4:	2300      	movs	r3, #0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	370c      	adds	r7, #12
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr

08010b02 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010b02:	b580      	push	{r7, lr}
 8010b04:	b082      	sub	sp, #8
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d009      	beq.n	8010b30 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b22:	685b      	ldr	r3, [r3, #4]
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	6852      	ldr	r2, [r2, #4]
 8010b28:	b2d2      	uxtb	r2, r2
 8010b2a:	4611      	mov	r1, r2
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	4798      	blx	r3
  }

  return USBD_OK;
 8010b30:	2300      	movs	r3, #0
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3708      	adds	r7, #8
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010b3a:	b480      	push	{r7}
 8010b3c:	b087      	sub	sp, #28
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010b58:	8a3b      	ldrh	r3, [r7, #16]
 8010b5a:	021b      	lsls	r3, r3, #8
 8010b5c:	b21a      	sxth	r2, r3
 8010b5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010b62:	4313      	orrs	r3, r2
 8010b64:	b21b      	sxth	r3, r3
 8010b66:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010b68:	89fb      	ldrh	r3, [r7, #14]
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	371c      	adds	r7, #28
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b74:	4770      	bx	lr
	...

08010b78 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b82:	2300      	movs	r3, #0
 8010b84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010b8e:	2b20      	cmp	r3, #32
 8010b90:	d004      	beq.n	8010b9c <USBD_StdDevReq+0x24>
 8010b92:	2b40      	cmp	r3, #64	; 0x40
 8010b94:	d002      	beq.n	8010b9c <USBD_StdDevReq+0x24>
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d00a      	beq.n	8010bb0 <USBD_StdDevReq+0x38>
 8010b9a:	e050      	b.n	8010c3e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ba2:	689b      	ldr	r3, [r3, #8]
 8010ba4:	6839      	ldr	r1, [r7, #0]
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	4798      	blx	r3
 8010baa:	4603      	mov	r3, r0
 8010bac:	73fb      	strb	r3, [r7, #15]
    break;
 8010bae:	e04b      	b.n	8010c48 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	785b      	ldrb	r3, [r3, #1]
 8010bb4:	2b09      	cmp	r3, #9
 8010bb6:	d83c      	bhi.n	8010c32 <USBD_StdDevReq+0xba>
 8010bb8:	a201      	add	r2, pc, #4	; (adr r2, 8010bc0 <USBD_StdDevReq+0x48>)
 8010bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bbe:	bf00      	nop
 8010bc0:	08010c15 	.word	0x08010c15
 8010bc4:	08010c29 	.word	0x08010c29
 8010bc8:	08010c33 	.word	0x08010c33
 8010bcc:	08010c1f 	.word	0x08010c1f
 8010bd0:	08010c33 	.word	0x08010c33
 8010bd4:	08010bf3 	.word	0x08010bf3
 8010bd8:	08010be9 	.word	0x08010be9
 8010bdc:	08010c33 	.word	0x08010c33
 8010be0:	08010c0b 	.word	0x08010c0b
 8010be4:	08010bfd 	.word	0x08010bfd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8010be8:	6839      	ldr	r1, [r7, #0]
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 f9ce 	bl	8010f8c <USBD_GetDescriptor>
      break;
 8010bf0:	e024      	b.n	8010c3c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8010bf2:	6839      	ldr	r1, [r7, #0]
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f000 fb5d 	bl	80112b4 <USBD_SetAddress>
      break;
 8010bfa:	e01f      	b.n	8010c3c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8010bfc:	6839      	ldr	r1, [r7, #0]
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f000 fb9a 	bl	8011338 <USBD_SetConfig>
 8010c04:	4603      	mov	r3, r0
 8010c06:	73fb      	strb	r3, [r7, #15]
      break;
 8010c08:	e018      	b.n	8010c3c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8010c0a:	6839      	ldr	r1, [r7, #0]
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f000 fc37 	bl	8011480 <USBD_GetConfig>
      break;
 8010c12:	e013      	b.n	8010c3c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8010c14:	6839      	ldr	r1, [r7, #0]
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f000 fc66 	bl	80114e8 <USBD_GetStatus>
      break;
 8010c1c:	e00e      	b.n	8010c3c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8010c1e:	6839      	ldr	r1, [r7, #0]
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f000 fc94 	bl	801154e <USBD_SetFeature>
      break;
 8010c26:	e009      	b.n	8010c3c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8010c28:	6839      	ldr	r1, [r7, #0]
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f000 fca3 	bl	8011576 <USBD_ClrFeature>
      break;
 8010c30:	e004      	b.n	8010c3c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8010c32:	6839      	ldr	r1, [r7, #0]
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f000 fcf9 	bl	801162c <USBD_CtlError>
      break;
 8010c3a:	bf00      	nop
    }
    break;
 8010c3c:	e004      	b.n	8010c48 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8010c3e:	6839      	ldr	r1, [r7, #0]
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f000 fcf3 	bl	801162c <USBD_CtlError>
    break;
 8010c46:	bf00      	nop
  }

  return ret;
 8010c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3710      	adds	r7, #16
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
 8010c52:	bf00      	nop

08010c54 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010c6a:	2b20      	cmp	r3, #32
 8010c6c:	d003      	beq.n	8010c76 <USBD_StdItfReq+0x22>
 8010c6e:	2b40      	cmp	r3, #64	; 0x40
 8010c70:	d001      	beq.n	8010c76 <USBD_StdItfReq+0x22>
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d12a      	bne.n	8010ccc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c7c:	3b01      	subs	r3, #1
 8010c7e:	2b02      	cmp	r3, #2
 8010c80:	d81d      	bhi.n	8010cbe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	889b      	ldrh	r3, [r3, #4]
 8010c86:	b2db      	uxtb	r3, r3
 8010c88:	2b01      	cmp	r3, #1
 8010c8a:	d813      	bhi.n	8010cb4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c92:	689b      	ldr	r3, [r3, #8]
 8010c94:	6839      	ldr	r1, [r7, #0]
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	4798      	blx	r3
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	88db      	ldrh	r3, [r3, #6]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d110      	bne.n	8010cc8 <USBD_StdItfReq+0x74>
 8010ca6:	7bfb      	ldrb	r3, [r7, #15]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d10d      	bne.n	8010cc8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f000 fd88 	bl	80117c2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8010cb2:	e009      	b.n	8010cc8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8010cb4:	6839      	ldr	r1, [r7, #0]
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f000 fcb8 	bl	801162c <USBD_CtlError>
      break;
 8010cbc:	e004      	b.n	8010cc8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8010cbe:	6839      	ldr	r1, [r7, #0]
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f000 fcb3 	bl	801162c <USBD_CtlError>
      break;
 8010cc6:	e000      	b.n	8010cca <USBD_StdItfReq+0x76>
      break;
 8010cc8:	bf00      	nop
    }
    break;
 8010cca:	e004      	b.n	8010cd6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8010ccc:	6839      	ldr	r1, [r7, #0]
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f000 fcac 	bl	801162c <USBD_CtlError>
    break;
 8010cd4:	bf00      	nop
  }

  return ret;
 8010cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3710      	adds	r7, #16
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b084      	sub	sp, #16
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010cea:	2300      	movs	r3, #0
 8010cec:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	889b      	ldrh	r3, [r3, #4]
 8010cf2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010cfc:	2b20      	cmp	r3, #32
 8010cfe:	d004      	beq.n	8010d0a <USBD_StdEPReq+0x2a>
 8010d00:	2b40      	cmp	r3, #64	; 0x40
 8010d02:	d002      	beq.n	8010d0a <USBD_StdEPReq+0x2a>
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d00a      	beq.n	8010d1e <USBD_StdEPReq+0x3e>
 8010d08:	e135      	b.n	8010f76 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d10:	689b      	ldr	r3, [r3, #8]
 8010d12:	6839      	ldr	r1, [r7, #0]
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	4798      	blx	r3
 8010d18:	4603      	mov	r3, r0
 8010d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8010d1c:	e130      	b.n	8010f80 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	785b      	ldrb	r3, [r3, #1]
 8010d22:	2b01      	cmp	r3, #1
 8010d24:	d03e      	beq.n	8010da4 <USBD_StdEPReq+0xc4>
 8010d26:	2b03      	cmp	r3, #3
 8010d28:	d002      	beq.n	8010d30 <USBD_StdEPReq+0x50>
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d077      	beq.n	8010e1e <USBD_StdEPReq+0x13e>
 8010d2e:	e11c      	b.n	8010f6a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010d36:	2b02      	cmp	r3, #2
 8010d38:	d002      	beq.n	8010d40 <USBD_StdEPReq+0x60>
 8010d3a:	2b03      	cmp	r3, #3
 8010d3c:	d015      	beq.n	8010d6a <USBD_StdEPReq+0x8a>
 8010d3e:	e02b      	b.n	8010d98 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010d40:	7bbb      	ldrb	r3, [r7, #14]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d00c      	beq.n	8010d60 <USBD_StdEPReq+0x80>
 8010d46:	7bbb      	ldrb	r3, [r7, #14]
 8010d48:	2b80      	cmp	r3, #128	; 0x80
 8010d4a:	d009      	beq.n	8010d60 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8010d4c:	7bbb      	ldrb	r3, [r7, #14]
 8010d4e:	4619      	mov	r1, r3
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f008 f905 	bl	8018f60 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010d56:	2180      	movs	r1, #128	; 0x80
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f008 f901 	bl	8018f60 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010d5e:	e020      	b.n	8010da2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8010d60:	6839      	ldr	r1, [r7, #0]
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f000 fc62 	bl	801162c <USBD_CtlError>
        break;
 8010d68:	e01b      	b.n	8010da2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	885b      	ldrh	r3, [r3, #2]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d10e      	bne.n	8010d90 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010d72:	7bbb      	ldrb	r3, [r7, #14]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d00b      	beq.n	8010d90 <USBD_StdEPReq+0xb0>
 8010d78:	7bbb      	ldrb	r3, [r7, #14]
 8010d7a:	2b80      	cmp	r3, #128	; 0x80
 8010d7c:	d008      	beq.n	8010d90 <USBD_StdEPReq+0xb0>
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	88db      	ldrh	r3, [r3, #6]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d104      	bne.n	8010d90 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8010d86:	7bbb      	ldrb	r3, [r7, #14]
 8010d88:	4619      	mov	r1, r3
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f008 f8e8 	bl	8018f60 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f000 fd16 	bl	80117c2 <USBD_CtlSendStatus>

        break;
 8010d96:	e004      	b.n	8010da2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8010d98:	6839      	ldr	r1, [r7, #0]
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f000 fc46 	bl	801162c <USBD_CtlError>
        break;
 8010da0:	bf00      	nop
      }
      break;
 8010da2:	e0e7      	b.n	8010f74 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010daa:	2b02      	cmp	r3, #2
 8010dac:	d002      	beq.n	8010db4 <USBD_StdEPReq+0xd4>
 8010dae:	2b03      	cmp	r3, #3
 8010db0:	d015      	beq.n	8010dde <USBD_StdEPReq+0xfe>
 8010db2:	e02d      	b.n	8010e10 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010db4:	7bbb      	ldrb	r3, [r7, #14]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00c      	beq.n	8010dd4 <USBD_StdEPReq+0xf4>
 8010dba:	7bbb      	ldrb	r3, [r7, #14]
 8010dbc:	2b80      	cmp	r3, #128	; 0x80
 8010dbe:	d009      	beq.n	8010dd4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8010dc0:	7bbb      	ldrb	r3, [r7, #14]
 8010dc2:	4619      	mov	r1, r3
 8010dc4:	6878      	ldr	r0, [r7, #4]
 8010dc6:	f008 f8cb 	bl	8018f60 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010dca:	2180      	movs	r1, #128	; 0x80
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f008 f8c7 	bl	8018f60 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010dd2:	e023      	b.n	8010e1c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8010dd4:	6839      	ldr	r1, [r7, #0]
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f000 fc28 	bl	801162c <USBD_CtlError>
        break;
 8010ddc:	e01e      	b.n	8010e1c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	885b      	ldrh	r3, [r3, #2]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d119      	bne.n	8010e1a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8010de6:	7bbb      	ldrb	r3, [r7, #14]
 8010de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d004      	beq.n	8010dfa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010df0:	7bbb      	ldrb	r3, [r7, #14]
 8010df2:	4619      	mov	r1, r3
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f008 f8d2 	bl	8018f9e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	f000 fce1 	bl	80117c2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e06:	689b      	ldr	r3, [r3, #8]
 8010e08:	6839      	ldr	r1, [r7, #0]
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	4798      	blx	r3
        }
        break;
 8010e0e:	e004      	b.n	8010e1a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8010e10:	6839      	ldr	r1, [r7, #0]
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f000 fc0a 	bl	801162c <USBD_CtlError>
        break;
 8010e18:	e000      	b.n	8010e1c <USBD_StdEPReq+0x13c>
        break;
 8010e1a:	bf00      	nop
      }
      break;
 8010e1c:	e0aa      	b.n	8010f74 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e24:	2b02      	cmp	r3, #2
 8010e26:	d002      	beq.n	8010e2e <USBD_StdEPReq+0x14e>
 8010e28:	2b03      	cmp	r3, #3
 8010e2a:	d032      	beq.n	8010e92 <USBD_StdEPReq+0x1b2>
 8010e2c:	e097      	b.n	8010f5e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010e2e:	7bbb      	ldrb	r3, [r7, #14]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d007      	beq.n	8010e44 <USBD_StdEPReq+0x164>
 8010e34:	7bbb      	ldrb	r3, [r7, #14]
 8010e36:	2b80      	cmp	r3, #128	; 0x80
 8010e38:	d004      	beq.n	8010e44 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8010e3a:	6839      	ldr	r1, [r7, #0]
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f000 fbf5 	bl	801162c <USBD_CtlError>
          break;
 8010e42:	e091      	b.n	8010f68 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010e44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	da0b      	bge.n	8010e64 <USBD_StdEPReq+0x184>
 8010e4c:	7bbb      	ldrb	r3, [r7, #14]
 8010e4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010e52:	4613      	mov	r3, r2
 8010e54:	009b      	lsls	r3, r3, #2
 8010e56:	4413      	add	r3, r2
 8010e58:	009b      	lsls	r3, r3, #2
 8010e5a:	3310      	adds	r3, #16
 8010e5c:	687a      	ldr	r2, [r7, #4]
 8010e5e:	4413      	add	r3, r2
 8010e60:	3304      	adds	r3, #4
 8010e62:	e00b      	b.n	8010e7c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8010e64:	7bbb      	ldrb	r3, [r7, #14]
 8010e66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010e6a:	4613      	mov	r3, r2
 8010e6c:	009b      	lsls	r3, r3, #2
 8010e6e:	4413      	add	r3, r2
 8010e70:	009b      	lsls	r3, r3, #2
 8010e72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010e76:	687a      	ldr	r2, [r7, #4]
 8010e78:	4413      	add	r3, r2
 8010e7a:	3304      	adds	r3, #4
 8010e7c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	2200      	movs	r2, #0
 8010e82:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	2202      	movs	r2, #2
 8010e88:	4619      	mov	r1, r3
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f000 fc3f 	bl	801170e <USBD_CtlSendData>
        break;
 8010e90:	e06a      	b.n	8010f68 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8010e92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	da11      	bge.n	8010ebe <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010e9a:	7bbb      	ldrb	r3, [r7, #14]
 8010e9c:	f003 020f 	and.w	r2, r3, #15
 8010ea0:	6879      	ldr	r1, [r7, #4]
 8010ea2:	4613      	mov	r3, r2
 8010ea4:	009b      	lsls	r3, r3, #2
 8010ea6:	4413      	add	r3, r2
 8010ea8:	009b      	lsls	r3, r3, #2
 8010eaa:	440b      	add	r3, r1
 8010eac:	3324      	adds	r3, #36	; 0x24
 8010eae:	881b      	ldrh	r3, [r3, #0]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d117      	bne.n	8010ee4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8010eb4:	6839      	ldr	r1, [r7, #0]
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f000 fbb8 	bl	801162c <USBD_CtlError>
            break;
 8010ebc:	e054      	b.n	8010f68 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010ebe:	7bbb      	ldrb	r3, [r7, #14]
 8010ec0:	f003 020f 	and.w	r2, r3, #15
 8010ec4:	6879      	ldr	r1, [r7, #4]
 8010ec6:	4613      	mov	r3, r2
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	4413      	add	r3, r2
 8010ecc:	009b      	lsls	r3, r3, #2
 8010ece:	440b      	add	r3, r1
 8010ed0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010ed4:	881b      	ldrh	r3, [r3, #0]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d104      	bne.n	8010ee4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8010eda:	6839      	ldr	r1, [r7, #0]
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	f000 fba5 	bl	801162c <USBD_CtlError>
            break;
 8010ee2:	e041      	b.n	8010f68 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ee4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	da0b      	bge.n	8010f04 <USBD_StdEPReq+0x224>
 8010eec:	7bbb      	ldrb	r3, [r7, #14]
 8010eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010ef2:	4613      	mov	r3, r2
 8010ef4:	009b      	lsls	r3, r3, #2
 8010ef6:	4413      	add	r3, r2
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	3310      	adds	r3, #16
 8010efc:	687a      	ldr	r2, [r7, #4]
 8010efe:	4413      	add	r3, r2
 8010f00:	3304      	adds	r3, #4
 8010f02:	e00b      	b.n	8010f1c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8010f04:	7bbb      	ldrb	r3, [r7, #14]
 8010f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	009b      	lsls	r3, r3, #2
 8010f0e:	4413      	add	r3, r2
 8010f10:	009b      	lsls	r3, r3, #2
 8010f12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010f16:	687a      	ldr	r2, [r7, #4]
 8010f18:	4413      	add	r3, r2
 8010f1a:	3304      	adds	r3, #4
 8010f1c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010f1e:	7bbb      	ldrb	r3, [r7, #14]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d002      	beq.n	8010f2a <USBD_StdEPReq+0x24a>
 8010f24:	7bbb      	ldrb	r3, [r7, #14]
 8010f26:	2b80      	cmp	r3, #128	; 0x80
 8010f28:	d103      	bne.n	8010f32 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8010f2a:	68bb      	ldr	r3, [r7, #8]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	601a      	str	r2, [r3, #0]
 8010f30:	e00e      	b.n	8010f50 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010f32:	7bbb      	ldrb	r3, [r7, #14]
 8010f34:	4619      	mov	r1, r3
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f008 f850 	bl	8018fdc <USBD_LL_IsStallEP>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d003      	beq.n	8010f4a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	2201      	movs	r2, #1
 8010f46:	601a      	str	r2, [r3, #0]
 8010f48:	e002      	b.n	8010f50 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	2202      	movs	r2, #2
 8010f54:	4619      	mov	r1, r3
 8010f56:	6878      	ldr	r0, [r7, #4]
 8010f58:	f000 fbd9 	bl	801170e <USBD_CtlSendData>
          break;
 8010f5c:	e004      	b.n	8010f68 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8010f5e:	6839      	ldr	r1, [r7, #0]
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f000 fb63 	bl	801162c <USBD_CtlError>
        break;
 8010f66:	bf00      	nop
      }
      break;
 8010f68:	e004      	b.n	8010f74 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8010f6a:	6839      	ldr	r1, [r7, #0]
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f000 fb5d 	bl	801162c <USBD_CtlError>
      break;
 8010f72:	bf00      	nop
    }
    break;
 8010f74:	e004      	b.n	8010f80 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8010f76:	6839      	ldr	r1, [r7, #0]
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f000 fb57 	bl	801162c <USBD_CtlError>
    break;
 8010f7e:	bf00      	nop
  }

  return ret;
 8010f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3710      	adds	r7, #16
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}
	...

08010f8c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010f96:	2300      	movs	r3, #0
 8010f98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	885b      	ldrh	r3, [r3, #2]
 8010fa6:	0a1b      	lsrs	r3, r3, #8
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	3b01      	subs	r3, #1
 8010fac:	2b0e      	cmp	r3, #14
 8010fae:	f200 8152 	bhi.w	8011256 <USBD_GetDescriptor+0x2ca>
 8010fb2:	a201      	add	r2, pc, #4	; (adr r2, 8010fb8 <USBD_GetDescriptor+0x2c>)
 8010fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fb8:	08011029 	.word	0x08011029
 8010fbc:	08011041 	.word	0x08011041
 8010fc0:	08011081 	.word	0x08011081
 8010fc4:	08011257 	.word	0x08011257
 8010fc8:	08011257 	.word	0x08011257
 8010fcc:	080111f7 	.word	0x080111f7
 8010fd0:	08011223 	.word	0x08011223
 8010fd4:	08011257 	.word	0x08011257
 8010fd8:	08011257 	.word	0x08011257
 8010fdc:	08011257 	.word	0x08011257
 8010fe0:	08011257 	.word	0x08011257
 8010fe4:	08011257 	.word	0x08011257
 8010fe8:	08011257 	.word	0x08011257
 8010fec:	08011257 	.word	0x08011257
 8010ff0:	08010ff5 	.word	0x08010ff5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010ffa:	69db      	ldr	r3, [r3, #28]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d00b      	beq.n	8011018 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011006:	69db      	ldr	r3, [r3, #28]
 8011008:	687a      	ldr	r2, [r7, #4]
 801100a:	7c12      	ldrb	r2, [r2, #16]
 801100c:	f107 0108 	add.w	r1, r7, #8
 8011010:	4610      	mov	r0, r2
 8011012:	4798      	blx	r3
 8011014:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011016:	e126      	b.n	8011266 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8011018:	6839      	ldr	r1, [r7, #0]
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 fb06 	bl	801162c <USBD_CtlError>
      err++;
 8011020:	7afb      	ldrb	r3, [r7, #11]
 8011022:	3301      	adds	r3, #1
 8011024:	72fb      	strb	r3, [r7, #11]
    break;
 8011026:	e11e      	b.n	8011266 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	7c12      	ldrb	r2, [r2, #16]
 8011034:	f107 0108 	add.w	r1, r7, #8
 8011038:	4610      	mov	r0, r2
 801103a:	4798      	blx	r3
 801103c:	60f8      	str	r0, [r7, #12]
    break;
 801103e:	e112      	b.n	8011266 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	7c1b      	ldrb	r3, [r3, #16]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d10d      	bne.n	8011064 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801104e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011050:	f107 0208 	add.w	r2, r7, #8
 8011054:	4610      	mov	r0, r2
 8011056:	4798      	blx	r3
 8011058:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	3301      	adds	r3, #1
 801105e:	2202      	movs	r2, #2
 8011060:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011062:	e100      	b.n	8011266 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801106c:	f107 0208 	add.w	r2, r7, #8
 8011070:	4610      	mov	r0, r2
 8011072:	4798      	blx	r3
 8011074:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	3301      	adds	r3, #1
 801107a:	2202      	movs	r2, #2
 801107c:	701a      	strb	r2, [r3, #0]
    break;
 801107e:	e0f2      	b.n	8011266 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	885b      	ldrh	r3, [r3, #2]
 8011084:	b2db      	uxtb	r3, r3
 8011086:	2b05      	cmp	r3, #5
 8011088:	f200 80ac 	bhi.w	80111e4 <USBD_GetDescriptor+0x258>
 801108c:	a201      	add	r2, pc, #4	; (adr r2, 8011094 <USBD_GetDescriptor+0x108>)
 801108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011092:	bf00      	nop
 8011094:	080110ad 	.word	0x080110ad
 8011098:	080110e1 	.word	0x080110e1
 801109c:	08011115 	.word	0x08011115
 80110a0:	08011149 	.word	0x08011149
 80110a4:	0801117d 	.word	0x0801117d
 80110a8:	080111b1 	.word	0x080111b1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d00b      	beq.n	80110d0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	7c12      	ldrb	r2, [r2, #16]
 80110c4:	f107 0108 	add.w	r1, r7, #8
 80110c8:	4610      	mov	r0, r2
 80110ca:	4798      	blx	r3
 80110cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80110ce:	e091      	b.n	80111f4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80110d0:	6839      	ldr	r1, [r7, #0]
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f000 faaa 	bl	801162c <USBD_CtlError>
        err++;
 80110d8:	7afb      	ldrb	r3, [r7, #11]
 80110da:	3301      	adds	r3, #1
 80110dc:	72fb      	strb	r3, [r7, #11]
      break;
 80110de:	e089      	b.n	80111f4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110e6:	689b      	ldr	r3, [r3, #8]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d00b      	beq.n	8011104 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110f2:	689b      	ldr	r3, [r3, #8]
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	7c12      	ldrb	r2, [r2, #16]
 80110f8:	f107 0108 	add.w	r1, r7, #8
 80110fc:	4610      	mov	r0, r2
 80110fe:	4798      	blx	r3
 8011100:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011102:	e077      	b.n	80111f4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8011104:	6839      	ldr	r1, [r7, #0]
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f000 fa90 	bl	801162c <USBD_CtlError>
        err++;
 801110c:	7afb      	ldrb	r3, [r7, #11]
 801110e:	3301      	adds	r3, #1
 8011110:	72fb      	strb	r3, [r7, #11]
      break;
 8011112:	e06f      	b.n	80111f4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d00b      	beq.n	8011138 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	7c12      	ldrb	r2, [r2, #16]
 801112c:	f107 0108 	add.w	r1, r7, #8
 8011130:	4610      	mov	r0, r2
 8011132:	4798      	blx	r3
 8011134:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011136:	e05d      	b.n	80111f4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8011138:	6839      	ldr	r1, [r7, #0]
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 fa76 	bl	801162c <USBD_CtlError>
        err++;
 8011140:	7afb      	ldrb	r3, [r7, #11]
 8011142:	3301      	adds	r3, #1
 8011144:	72fb      	strb	r3, [r7, #11]
      break;
 8011146:	e055      	b.n	80111f4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801114e:	691b      	ldr	r3, [r3, #16]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d00b      	beq.n	801116c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801115a:	691b      	ldr	r3, [r3, #16]
 801115c:	687a      	ldr	r2, [r7, #4]
 801115e:	7c12      	ldrb	r2, [r2, #16]
 8011160:	f107 0108 	add.w	r1, r7, #8
 8011164:	4610      	mov	r0, r2
 8011166:	4798      	blx	r3
 8011168:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801116a:	e043      	b.n	80111f4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 801116c:	6839      	ldr	r1, [r7, #0]
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f000 fa5c 	bl	801162c <USBD_CtlError>
        err++;
 8011174:	7afb      	ldrb	r3, [r7, #11]
 8011176:	3301      	adds	r3, #1
 8011178:	72fb      	strb	r3, [r7, #11]
      break;
 801117a:	e03b      	b.n	80111f4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011182:	695b      	ldr	r3, [r3, #20]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d00b      	beq.n	80111a0 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801118e:	695b      	ldr	r3, [r3, #20]
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	7c12      	ldrb	r2, [r2, #16]
 8011194:	f107 0108 	add.w	r1, r7, #8
 8011198:	4610      	mov	r0, r2
 801119a:	4798      	blx	r3
 801119c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801119e:	e029      	b.n	80111f4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80111a0:	6839      	ldr	r1, [r7, #0]
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f000 fa42 	bl	801162c <USBD_CtlError>
        err++;
 80111a8:	7afb      	ldrb	r3, [r7, #11]
 80111aa:	3301      	adds	r3, #1
 80111ac:	72fb      	strb	r3, [r7, #11]
      break;
 80111ae:	e021      	b.n	80111f4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111b6:	699b      	ldr	r3, [r3, #24]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d00b      	beq.n	80111d4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80111c2:	699b      	ldr	r3, [r3, #24]
 80111c4:	687a      	ldr	r2, [r7, #4]
 80111c6:	7c12      	ldrb	r2, [r2, #16]
 80111c8:	f107 0108 	add.w	r1, r7, #8
 80111cc:	4610      	mov	r0, r2
 80111ce:	4798      	blx	r3
 80111d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80111d2:	e00f      	b.n	80111f4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80111d4:	6839      	ldr	r1, [r7, #0]
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f000 fa28 	bl	801162c <USBD_CtlError>
        err++;
 80111dc:	7afb      	ldrb	r3, [r7, #11]
 80111de:	3301      	adds	r3, #1
 80111e0:	72fb      	strb	r3, [r7, #11]
      break;
 80111e2:	e007      	b.n	80111f4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80111e4:	6839      	ldr	r1, [r7, #0]
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f000 fa20 	bl	801162c <USBD_CtlError>
      err++;
 80111ec:	7afb      	ldrb	r3, [r7, #11]
 80111ee:	3301      	adds	r3, #1
 80111f0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80111f2:	bf00      	nop
    }
    break;
 80111f4:	e037      	b.n	8011266 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	7c1b      	ldrb	r3, [r3, #16]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d109      	bne.n	8011212 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011206:	f107 0208 	add.w	r2, r7, #8
 801120a:	4610      	mov	r0, r2
 801120c:	4798      	blx	r3
 801120e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011210:	e029      	b.n	8011266 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8011212:	6839      	ldr	r1, [r7, #0]
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f000 fa09 	bl	801162c <USBD_CtlError>
      err++;
 801121a:	7afb      	ldrb	r3, [r7, #11]
 801121c:	3301      	adds	r3, #1
 801121e:	72fb      	strb	r3, [r7, #11]
    break;
 8011220:	e021      	b.n	8011266 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	7c1b      	ldrb	r3, [r3, #16]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d10d      	bne.n	8011246 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011232:	f107 0208 	add.w	r2, r7, #8
 8011236:	4610      	mov	r0, r2
 8011238:	4798      	blx	r3
 801123a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	3301      	adds	r3, #1
 8011240:	2207      	movs	r2, #7
 8011242:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011244:	e00f      	b.n	8011266 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8011246:	6839      	ldr	r1, [r7, #0]
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f000 f9ef 	bl	801162c <USBD_CtlError>
      err++;
 801124e:	7afb      	ldrb	r3, [r7, #11]
 8011250:	3301      	adds	r3, #1
 8011252:	72fb      	strb	r3, [r7, #11]
    break;
 8011254:	e007      	b.n	8011266 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8011256:	6839      	ldr	r1, [r7, #0]
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	f000 f9e7 	bl	801162c <USBD_CtlError>
    err++;
 801125e:	7afb      	ldrb	r3, [r7, #11]
 8011260:	3301      	adds	r3, #1
 8011262:	72fb      	strb	r3, [r7, #11]
    break;
 8011264:	bf00      	nop
  }

  if (err != 0U)
 8011266:	7afb      	ldrb	r3, [r7, #11]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d11e      	bne.n	80112aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	88db      	ldrh	r3, [r3, #6]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d016      	beq.n	80112a2 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8011274:	893b      	ldrh	r3, [r7, #8]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d00e      	beq.n	8011298 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	88da      	ldrh	r2, [r3, #6]
 801127e:	893b      	ldrh	r3, [r7, #8]
 8011280:	4293      	cmp	r3, r2
 8011282:	bf28      	it	cs
 8011284:	4613      	movcs	r3, r2
 8011286:	b29b      	uxth	r3, r3
 8011288:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801128a:	893b      	ldrh	r3, [r7, #8]
 801128c:	461a      	mov	r2, r3
 801128e:	68f9      	ldr	r1, [r7, #12]
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 fa3c 	bl	801170e <USBD_CtlSendData>
 8011296:	e009      	b.n	80112ac <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011298:	6839      	ldr	r1, [r7, #0]
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f000 f9c6 	bl	801162c <USBD_CtlError>
 80112a0:	e004      	b.n	80112ac <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f000 fa8d 	bl	80117c2 <USBD_CtlSendStatus>
 80112a8:	e000      	b.n	80112ac <USBD_GetDescriptor+0x320>
    return;
 80112aa:	bf00      	nop
    }
  }
}
 80112ac:	3710      	adds	r7, #16
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop

080112b4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	889b      	ldrh	r3, [r3, #4]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d130      	bne.n	8011328 <USBD_SetAddress+0x74>
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	88db      	ldrh	r3, [r3, #6]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d12c      	bne.n	8011328 <USBD_SetAddress+0x74>
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	885b      	ldrh	r3, [r3, #2]
 80112d2:	2b7f      	cmp	r3, #127	; 0x7f
 80112d4:	d828      	bhi.n	8011328 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	885b      	ldrh	r3, [r3, #2]
 80112da:	b2db      	uxtb	r3, r3
 80112dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80112e8:	2b03      	cmp	r3, #3
 80112ea:	d104      	bne.n	80112f6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80112ec:	6839      	ldr	r1, [r7, #0]
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f000 f99c 	bl	801162c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80112f4:	e01c      	b.n	8011330 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	7bfa      	ldrb	r2, [r7, #15]
 80112fa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80112fe:	7bfb      	ldrb	r3, [r7, #15]
 8011300:	4619      	mov	r1, r3
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f007 fe96 	bl	8019034 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f000 fa5a 	bl	80117c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801130e:	7bfb      	ldrb	r3, [r7, #15]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d004      	beq.n	801131e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2202      	movs	r2, #2
 8011318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801131c:	e008      	b.n	8011330 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2201      	movs	r2, #1
 8011322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011326:	e003      	b.n	8011330 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011328:	6839      	ldr	r1, [r7, #0]
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f000 f97e 	bl	801162c <USBD_CtlError>
  }
}
 8011330:	bf00      	nop
 8011332:	3710      	adds	r7, #16
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}

08011338 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011342:	2300      	movs	r3, #0
 8011344:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	885b      	ldrh	r3, [r3, #2]
 801134a:	b2da      	uxtb	r2, r3
 801134c:	4b4b      	ldr	r3, [pc, #300]	; (801147c <USBD_SetConfig+0x144>)
 801134e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011350:	4b4a      	ldr	r3, [pc, #296]	; (801147c <USBD_SetConfig+0x144>)
 8011352:	781b      	ldrb	r3, [r3, #0]
 8011354:	2b01      	cmp	r3, #1
 8011356:	d905      	bls.n	8011364 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011358:	6839      	ldr	r1, [r7, #0]
 801135a:	6878      	ldr	r0, [r7, #4]
 801135c:	f000 f966 	bl	801162c <USBD_CtlError>
    return USBD_FAIL;
 8011360:	2303      	movs	r3, #3
 8011362:	e087      	b.n	8011474 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801136a:	2b02      	cmp	r3, #2
 801136c:	d002      	beq.n	8011374 <USBD_SetConfig+0x3c>
 801136e:	2b03      	cmp	r3, #3
 8011370:	d025      	beq.n	80113be <USBD_SetConfig+0x86>
 8011372:	e071      	b.n	8011458 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8011374:	4b41      	ldr	r3, [pc, #260]	; (801147c <USBD_SetConfig+0x144>)
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d01c      	beq.n	80113b6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 801137c:	4b3f      	ldr	r3, [pc, #252]	; (801147c <USBD_SetConfig+0x144>)
 801137e:	781b      	ldrb	r3, [r3, #0]
 8011380:	461a      	mov	r2, r3
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011386:	4b3d      	ldr	r3, [pc, #244]	; (801147c <USBD_SetConfig+0x144>)
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	4619      	mov	r1, r3
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f7ff f97d 	bl	801068c <USBD_SetClassConfig>
 8011392:	4603      	mov	r3, r0
 8011394:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8011396:	7bfb      	ldrb	r3, [r7, #15]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d004      	beq.n	80113a6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 801139c:	6839      	ldr	r1, [r7, #0]
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f000 f944 	bl	801162c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80113a4:	e065      	b.n	8011472 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f000 fa0b 	bl	80117c2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2203      	movs	r2, #3
 80113b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80113b4:	e05d      	b.n	8011472 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80113b6:	6878      	ldr	r0, [r7, #4]
 80113b8:	f000 fa03 	bl	80117c2 <USBD_CtlSendStatus>
    break;
 80113bc:	e059      	b.n	8011472 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80113be:	4b2f      	ldr	r3, [pc, #188]	; (801147c <USBD_SetConfig+0x144>)
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d112      	bne.n	80113ec <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2202      	movs	r2, #2
 80113ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80113ce:	4b2b      	ldr	r3, [pc, #172]	; (801147c <USBD_SetConfig+0x144>)
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	461a      	mov	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80113d8:	4b28      	ldr	r3, [pc, #160]	; (801147c <USBD_SetConfig+0x144>)
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	4619      	mov	r1, r3
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f7ff f970 	bl	80106c4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f000 f9ec 	bl	80117c2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80113ea:	e042      	b.n	8011472 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80113ec:	4b23      	ldr	r3, [pc, #140]	; (801147c <USBD_SetConfig+0x144>)
 80113ee:	781b      	ldrb	r3, [r3, #0]
 80113f0:	461a      	mov	r2, r3
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d02a      	beq.n	8011450 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	685b      	ldr	r3, [r3, #4]
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	4619      	mov	r1, r3
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f7ff f95e 	bl	80106c4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8011408:	4b1c      	ldr	r3, [pc, #112]	; (801147c <USBD_SetConfig+0x144>)
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	461a      	mov	r2, r3
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011412:	4b1a      	ldr	r3, [pc, #104]	; (801147c <USBD_SetConfig+0x144>)
 8011414:	781b      	ldrb	r3, [r3, #0]
 8011416:	4619      	mov	r1, r3
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7ff f937 	bl	801068c <USBD_SetClassConfig>
 801141e:	4603      	mov	r3, r0
 8011420:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8011422:	7bfb      	ldrb	r3, [r7, #15]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d00f      	beq.n	8011448 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8011428:	6839      	ldr	r1, [r7, #0]
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f000 f8fe 	bl	801162c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	b2db      	uxtb	r3, r3
 8011436:	4619      	mov	r1, r3
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f7ff f943 	bl	80106c4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2202      	movs	r2, #2
 8011442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011446:	e014      	b.n	8011472 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f000 f9ba 	bl	80117c2 <USBD_CtlSendStatus>
    break;
 801144e:	e010      	b.n	8011472 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f000 f9b6 	bl	80117c2 <USBD_CtlSendStatus>
    break;
 8011456:	e00c      	b.n	8011472 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8011458:	6839      	ldr	r1, [r7, #0]
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f000 f8e6 	bl	801162c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011460:	4b06      	ldr	r3, [pc, #24]	; (801147c <USBD_SetConfig+0x144>)
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	4619      	mov	r1, r3
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f7ff f92c 	bl	80106c4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801146c:	2303      	movs	r3, #3
 801146e:	73fb      	strb	r3, [r7, #15]
    break;
 8011470:	bf00      	nop
  }

  return ret;
 8011472:	7bfb      	ldrb	r3, [r7, #15]
}
 8011474:	4618      	mov	r0, r3
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}
 801147c:	20000378 	.word	0x20000378

08011480 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b082      	sub	sp, #8
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	88db      	ldrh	r3, [r3, #6]
 801148e:	2b01      	cmp	r3, #1
 8011490:	d004      	beq.n	801149c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011492:	6839      	ldr	r1, [r7, #0]
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f000 f8c9 	bl	801162c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801149a:	e021      	b.n	80114e0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114a2:	2b01      	cmp	r3, #1
 80114a4:	db17      	blt.n	80114d6 <USBD_GetConfig+0x56>
 80114a6:	2b02      	cmp	r3, #2
 80114a8:	dd02      	ble.n	80114b0 <USBD_GetConfig+0x30>
 80114aa:	2b03      	cmp	r3, #3
 80114ac:	d00b      	beq.n	80114c6 <USBD_GetConfig+0x46>
 80114ae:	e012      	b.n	80114d6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2200      	movs	r2, #0
 80114b4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	3308      	adds	r3, #8
 80114ba:	2201      	movs	r2, #1
 80114bc:	4619      	mov	r1, r3
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	f000 f925 	bl	801170e <USBD_CtlSendData>
      break;
 80114c4:	e00c      	b.n	80114e0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	3304      	adds	r3, #4
 80114ca:	2201      	movs	r2, #1
 80114cc:	4619      	mov	r1, r3
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f000 f91d 	bl	801170e <USBD_CtlSendData>
      break;
 80114d4:	e004      	b.n	80114e0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80114d6:	6839      	ldr	r1, [r7, #0]
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f000 f8a7 	bl	801162c <USBD_CtlError>
      break;
 80114de:	bf00      	nop
}
 80114e0:	bf00      	nop
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}

080114e8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b082      	sub	sp, #8
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
 80114f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114f8:	3b01      	subs	r3, #1
 80114fa:	2b02      	cmp	r3, #2
 80114fc:	d81e      	bhi.n	801153c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	88db      	ldrh	r3, [r3, #6]
 8011502:	2b02      	cmp	r3, #2
 8011504:	d004      	beq.n	8011510 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8011506:	6839      	ldr	r1, [r7, #0]
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f000 f88f 	bl	801162c <USBD_CtlError>
      break;
 801150e:	e01a      	b.n	8011546 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2201      	movs	r2, #1
 8011514:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801151c:	2b00      	cmp	r3, #0
 801151e:	d005      	beq.n	801152c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	f043 0202 	orr.w	r2, r3, #2
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	330c      	adds	r3, #12
 8011530:	2202      	movs	r2, #2
 8011532:	4619      	mov	r1, r3
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f000 f8ea 	bl	801170e <USBD_CtlSendData>
    break;
 801153a:	e004      	b.n	8011546 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801153c:	6839      	ldr	r1, [r7, #0]
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f000 f874 	bl	801162c <USBD_CtlError>
    break;
 8011544:	bf00      	nop
  }
}
 8011546:	bf00      	nop
 8011548:	3708      	adds	r7, #8
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}

0801154e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801154e:	b580      	push	{r7, lr}
 8011550:	b082      	sub	sp, #8
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
 8011556:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	885b      	ldrh	r3, [r3, #2]
 801155c:	2b01      	cmp	r3, #1
 801155e:	d106      	bne.n	801156e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2201      	movs	r2, #1
 8011564:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f000 f92a 	bl	80117c2 <USBD_CtlSendStatus>
  }
}
 801156e:	bf00      	nop
 8011570:	3708      	adds	r7, #8
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}

08011576 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011576:	b580      	push	{r7, lr}
 8011578:	b082      	sub	sp, #8
 801157a:	af00      	add	r7, sp, #0
 801157c:	6078      	str	r0, [r7, #4]
 801157e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011586:	3b01      	subs	r3, #1
 8011588:	2b02      	cmp	r3, #2
 801158a:	d80b      	bhi.n	80115a4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	885b      	ldrh	r3, [r3, #2]
 8011590:	2b01      	cmp	r3, #1
 8011592:	d10c      	bne.n	80115ae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2200      	movs	r2, #0
 8011598:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801159c:	6878      	ldr	r0, [r7, #4]
 801159e:	f000 f910 	bl	80117c2 <USBD_CtlSendStatus>
      }
      break;
 80115a2:	e004      	b.n	80115ae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80115a4:	6839      	ldr	r1, [r7, #0]
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f000 f840 	bl	801162c <USBD_CtlError>
      break;
 80115ac:	e000      	b.n	80115b0 <USBD_ClrFeature+0x3a>
      break;
 80115ae:	bf00      	nop
  }
}
 80115b0:	bf00      	nop
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}

080115b8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b084      	sub	sp, #16
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	781a      	ldrb	r2, [r3, #0]
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	3301      	adds	r3, #1
 80115d2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	781a      	ldrb	r2, [r3, #0]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	3301      	adds	r3, #1
 80115e0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80115e2:	68f8      	ldr	r0, [r7, #12]
 80115e4:	f7ff faa9 	bl	8010b3a <SWAPBYTE>
 80115e8:	4603      	mov	r3, r0
 80115ea:	461a      	mov	r2, r3
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	3301      	adds	r3, #1
 80115f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	3301      	adds	r3, #1
 80115fa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80115fc:	68f8      	ldr	r0, [r7, #12]
 80115fe:	f7ff fa9c 	bl	8010b3a <SWAPBYTE>
 8011602:	4603      	mov	r3, r0
 8011604:	461a      	mov	r2, r3
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	3301      	adds	r3, #1
 801160e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	3301      	adds	r3, #1
 8011614:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011616:	68f8      	ldr	r0, [r7, #12]
 8011618:	f7ff fa8f 	bl	8010b3a <SWAPBYTE>
 801161c:	4603      	mov	r3, r0
 801161e:	461a      	mov	r2, r3
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	80da      	strh	r2, [r3, #6]
}
 8011624:	bf00      	nop
 8011626:	3710      	adds	r7, #16
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011636:	2180      	movs	r1, #128	; 0x80
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f007 fc91 	bl	8018f60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801163e:	2100      	movs	r1, #0
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f007 fc8d 	bl	8018f60 <USBD_LL_StallEP>
}
 8011646:	bf00      	nop
 8011648:	3708      	adds	r7, #8
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}

0801164e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801164e:	b580      	push	{r7, lr}
 8011650:	b086      	sub	sp, #24
 8011652:	af00      	add	r7, sp, #0
 8011654:	60f8      	str	r0, [r7, #12]
 8011656:	60b9      	str	r1, [r7, #8]
 8011658:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801165a:	2300      	movs	r3, #0
 801165c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d036      	beq.n	80116d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011668:	6938      	ldr	r0, [r7, #16]
 801166a:	f000 f836 	bl	80116da <USBD_GetLen>
 801166e:	4603      	mov	r3, r0
 8011670:	3301      	adds	r3, #1
 8011672:	b29b      	uxth	r3, r3
 8011674:	005b      	lsls	r3, r3, #1
 8011676:	b29a      	uxth	r2, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801167c:	7dfb      	ldrb	r3, [r7, #23]
 801167e:	68ba      	ldr	r2, [r7, #8]
 8011680:	4413      	add	r3, r2
 8011682:	687a      	ldr	r2, [r7, #4]
 8011684:	7812      	ldrb	r2, [r2, #0]
 8011686:	701a      	strb	r2, [r3, #0]
  idx++;
 8011688:	7dfb      	ldrb	r3, [r7, #23]
 801168a:	3301      	adds	r3, #1
 801168c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801168e:	7dfb      	ldrb	r3, [r7, #23]
 8011690:	68ba      	ldr	r2, [r7, #8]
 8011692:	4413      	add	r3, r2
 8011694:	2203      	movs	r2, #3
 8011696:	701a      	strb	r2, [r3, #0]
  idx++;
 8011698:	7dfb      	ldrb	r3, [r7, #23]
 801169a:	3301      	adds	r3, #1
 801169c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801169e:	e013      	b.n	80116c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80116a0:	7dfb      	ldrb	r3, [r7, #23]
 80116a2:	68ba      	ldr	r2, [r7, #8]
 80116a4:	4413      	add	r3, r2
 80116a6:	693a      	ldr	r2, [r7, #16]
 80116a8:	7812      	ldrb	r2, [r2, #0]
 80116aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80116ac:	693b      	ldr	r3, [r7, #16]
 80116ae:	3301      	adds	r3, #1
 80116b0:	613b      	str	r3, [r7, #16]
    idx++;
 80116b2:	7dfb      	ldrb	r3, [r7, #23]
 80116b4:	3301      	adds	r3, #1
 80116b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80116b8:	7dfb      	ldrb	r3, [r7, #23]
 80116ba:	68ba      	ldr	r2, [r7, #8]
 80116bc:	4413      	add	r3, r2
 80116be:	2200      	movs	r2, #0
 80116c0:	701a      	strb	r2, [r3, #0]
    idx++;
 80116c2:	7dfb      	ldrb	r3, [r7, #23]
 80116c4:	3301      	adds	r3, #1
 80116c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80116c8:	693b      	ldr	r3, [r7, #16]
 80116ca:	781b      	ldrb	r3, [r3, #0]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d1e7      	bne.n	80116a0 <USBD_GetString+0x52>
 80116d0:	e000      	b.n	80116d4 <USBD_GetString+0x86>
    return;
 80116d2:	bf00      	nop
  }
}
 80116d4:	3718      	adds	r7, #24
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}

080116da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80116da:	b480      	push	{r7}
 80116dc:	b085      	sub	sp, #20
 80116de:	af00      	add	r7, sp, #0
 80116e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80116e2:	2300      	movs	r3, #0
 80116e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80116ea:	e005      	b.n	80116f8 <USBD_GetLen+0x1e>
  {
    len++;
 80116ec:	7bfb      	ldrb	r3, [r7, #15]
 80116ee:	3301      	adds	r3, #1
 80116f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	3301      	adds	r3, #1
 80116f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80116f8:	68bb      	ldr	r3, [r7, #8]
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d1f5      	bne.n	80116ec <USBD_GetLen+0x12>
  }

  return len;
 8011700:	7bfb      	ldrb	r3, [r7, #15]
}
 8011702:	4618      	mov	r0, r3
 8011704:	3714      	adds	r7, #20
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr

0801170e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801170e:	b580      	push	{r7, lr}
 8011710:	b084      	sub	sp, #16
 8011712:	af00      	add	r7, sp, #0
 8011714:	60f8      	str	r0, [r7, #12]
 8011716:	60b9      	str	r1, [r7, #8]
 8011718:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	2202      	movs	r2, #2
 801171e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	687a      	ldr	r2, [r7, #4]
 8011726:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	68ba      	ldr	r2, [r7, #8]
 8011732:	2100      	movs	r1, #0
 8011734:	68f8      	ldr	r0, [r7, #12]
 8011736:	f007 fc9c 	bl	8019072 <USBD_LL_Transmit>

  return USBD_OK;
 801173a:	2300      	movs	r3, #0
}
 801173c:	4618      	mov	r0, r3
 801173e:	3710      	adds	r7, #16
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}

08011744 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b084      	sub	sp, #16
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	68ba      	ldr	r2, [r7, #8]
 8011754:	2100      	movs	r1, #0
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	f007 fc8b 	bl	8019072 <USBD_LL_Transmit>

  return USBD_OK;
 801175c:	2300      	movs	r3, #0
}
 801175e:	4618      	mov	r0, r3
 8011760:	3710      	adds	r7, #16
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}

08011766 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011766:	b580      	push	{r7, lr}
 8011768:	b084      	sub	sp, #16
 801176a:	af00      	add	r7, sp, #0
 801176c:	60f8      	str	r0, [r7, #12]
 801176e:	60b9      	str	r1, [r7, #8]
 8011770:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	2203      	movs	r2, #3
 8011776:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	687a      	ldr	r2, [r7, #4]
 801177e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	687a      	ldr	r2, [r7, #4]
 8011786:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	68ba      	ldr	r2, [r7, #8]
 801178e:	2100      	movs	r1, #0
 8011790:	68f8      	ldr	r0, [r7, #12]
 8011792:	f007 fc8f 	bl	80190b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011796:	2300      	movs	r3, #0
}
 8011798:	4618      	mov	r0, r3
 801179a:	3710      	adds	r7, #16
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}

080117a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b084      	sub	sp, #16
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	68ba      	ldr	r2, [r7, #8]
 80117b0:	2100      	movs	r1, #0
 80117b2:	68f8      	ldr	r0, [r7, #12]
 80117b4:	f007 fc7e 	bl	80190b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80117b8:	2300      	movs	r3, #0
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3710      	adds	r7, #16
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}

080117c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80117c2:	b580      	push	{r7, lr}
 80117c4:	b082      	sub	sp, #8
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2204      	movs	r2, #4
 80117ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80117d2:	2300      	movs	r3, #0
 80117d4:	2200      	movs	r2, #0
 80117d6:	2100      	movs	r1, #0
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f007 fc4a 	bl	8019072 <USBD_LL_Transmit>

  return USBD_OK;
 80117de:	2300      	movs	r3, #0
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3708      	adds	r7, #8
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2205      	movs	r2, #5
 80117f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80117f8:	2300      	movs	r3, #0
 80117fa:	2200      	movs	r2, #0
 80117fc:	2100      	movs	r1, #0
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f007 fc58 	bl	80190b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011804:	2300      	movs	r3, #0
}
 8011806:	4618      	mov	r0, r3
 8011808:	3708      	adds	r7, #8
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
	...

08011810 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b084      	sub	sp, #16
 8011814:	af00      	add	r7, sp, #0
 8011816:	4603      	mov	r3, r0
 8011818:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801181a:	79fb      	ldrb	r3, [r7, #7]
 801181c:	4a08      	ldr	r2, [pc, #32]	; (8011840 <disk_status+0x30>)
 801181e:	009b      	lsls	r3, r3, #2
 8011820:	4413      	add	r3, r2
 8011822:	685b      	ldr	r3, [r3, #4]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	79fa      	ldrb	r2, [r7, #7]
 8011828:	4905      	ldr	r1, [pc, #20]	; (8011840 <disk_status+0x30>)
 801182a:	440a      	add	r2, r1
 801182c:	7a12      	ldrb	r2, [r2, #8]
 801182e:	4610      	mov	r0, r2
 8011830:	4798      	blx	r3
 8011832:	4603      	mov	r3, r0
 8011834:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011836:	7bfb      	ldrb	r3, [r7, #15]
}
 8011838:	4618      	mov	r0, r3
 801183a:	3710      	adds	r7, #16
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}
 8011840:	200003a4 	.word	0x200003a4

08011844 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	4603      	mov	r3, r0
 801184c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801184e:	2300      	movs	r3, #0
 8011850:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011852:	79fb      	ldrb	r3, [r7, #7]
 8011854:	4a0d      	ldr	r2, [pc, #52]	; (801188c <disk_initialize+0x48>)
 8011856:	5cd3      	ldrb	r3, [r2, r3]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d111      	bne.n	8011880 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801185c:	79fb      	ldrb	r3, [r7, #7]
 801185e:	4a0b      	ldr	r2, [pc, #44]	; (801188c <disk_initialize+0x48>)
 8011860:	2101      	movs	r1, #1
 8011862:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011864:	79fb      	ldrb	r3, [r7, #7]
 8011866:	4a09      	ldr	r2, [pc, #36]	; (801188c <disk_initialize+0x48>)
 8011868:	009b      	lsls	r3, r3, #2
 801186a:	4413      	add	r3, r2
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	79fa      	ldrb	r2, [r7, #7]
 8011872:	4906      	ldr	r1, [pc, #24]	; (801188c <disk_initialize+0x48>)
 8011874:	440a      	add	r2, r1
 8011876:	7a12      	ldrb	r2, [r2, #8]
 8011878:	4610      	mov	r0, r2
 801187a:	4798      	blx	r3
 801187c:	4603      	mov	r3, r0
 801187e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011880:	7bfb      	ldrb	r3, [r7, #15]
}
 8011882:	4618      	mov	r0, r3
 8011884:	3710      	adds	r7, #16
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}
 801188a:	bf00      	nop
 801188c:	200003a4 	.word	0x200003a4

08011890 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011890:	b590      	push	{r4, r7, lr}
 8011892:	b087      	sub	sp, #28
 8011894:	af00      	add	r7, sp, #0
 8011896:	60b9      	str	r1, [r7, #8]
 8011898:	607a      	str	r2, [r7, #4]
 801189a:	603b      	str	r3, [r7, #0]
 801189c:	4603      	mov	r3, r0
 801189e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80118a0:	7bfb      	ldrb	r3, [r7, #15]
 80118a2:	4a0a      	ldr	r2, [pc, #40]	; (80118cc <disk_read+0x3c>)
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	4413      	add	r3, r2
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	689c      	ldr	r4, [r3, #8]
 80118ac:	7bfb      	ldrb	r3, [r7, #15]
 80118ae:	4a07      	ldr	r2, [pc, #28]	; (80118cc <disk_read+0x3c>)
 80118b0:	4413      	add	r3, r2
 80118b2:	7a18      	ldrb	r0, [r3, #8]
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	687a      	ldr	r2, [r7, #4]
 80118b8:	68b9      	ldr	r1, [r7, #8]
 80118ba:	47a0      	blx	r4
 80118bc:	4603      	mov	r3, r0
 80118be:	75fb      	strb	r3, [r7, #23]
  return res;
 80118c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	371c      	adds	r7, #28
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd90      	pop	{r4, r7, pc}
 80118ca:	bf00      	nop
 80118cc:	200003a4 	.word	0x200003a4

080118d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80118d0:	b590      	push	{r4, r7, lr}
 80118d2:	b087      	sub	sp, #28
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	60b9      	str	r1, [r7, #8]
 80118d8:	607a      	str	r2, [r7, #4]
 80118da:	603b      	str	r3, [r7, #0]
 80118dc:	4603      	mov	r3, r0
 80118de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80118e0:	7bfb      	ldrb	r3, [r7, #15]
 80118e2:	4a0a      	ldr	r2, [pc, #40]	; (801190c <disk_write+0x3c>)
 80118e4:	009b      	lsls	r3, r3, #2
 80118e6:	4413      	add	r3, r2
 80118e8:	685b      	ldr	r3, [r3, #4]
 80118ea:	68dc      	ldr	r4, [r3, #12]
 80118ec:	7bfb      	ldrb	r3, [r7, #15]
 80118ee:	4a07      	ldr	r2, [pc, #28]	; (801190c <disk_write+0x3c>)
 80118f0:	4413      	add	r3, r2
 80118f2:	7a18      	ldrb	r0, [r3, #8]
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	68b9      	ldr	r1, [r7, #8]
 80118fa:	47a0      	blx	r4
 80118fc:	4603      	mov	r3, r0
 80118fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8011900:	7dfb      	ldrb	r3, [r7, #23]
}
 8011902:	4618      	mov	r0, r3
 8011904:	371c      	adds	r7, #28
 8011906:	46bd      	mov	sp, r7
 8011908:	bd90      	pop	{r4, r7, pc}
 801190a:	bf00      	nop
 801190c:	200003a4 	.word	0x200003a4

08011910 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	4603      	mov	r3, r0
 8011918:	603a      	str	r2, [r7, #0]
 801191a:	71fb      	strb	r3, [r7, #7]
 801191c:	460b      	mov	r3, r1
 801191e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011920:	79fb      	ldrb	r3, [r7, #7]
 8011922:	4a09      	ldr	r2, [pc, #36]	; (8011948 <disk_ioctl+0x38>)
 8011924:	009b      	lsls	r3, r3, #2
 8011926:	4413      	add	r3, r2
 8011928:	685b      	ldr	r3, [r3, #4]
 801192a:	691b      	ldr	r3, [r3, #16]
 801192c:	79fa      	ldrb	r2, [r7, #7]
 801192e:	4906      	ldr	r1, [pc, #24]	; (8011948 <disk_ioctl+0x38>)
 8011930:	440a      	add	r2, r1
 8011932:	7a10      	ldrb	r0, [r2, #8]
 8011934:	79b9      	ldrb	r1, [r7, #6]
 8011936:	683a      	ldr	r2, [r7, #0]
 8011938:	4798      	blx	r3
 801193a:	4603      	mov	r3, r0
 801193c:	73fb      	strb	r3, [r7, #15]
  return res;
 801193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011940:	4618      	mov	r0, r3
 8011942:	3710      	adds	r7, #16
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}
 8011948:	200003a4 	.word	0x200003a4

0801194c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801194c:	b480      	push	{r7}
 801194e:	b085      	sub	sp, #20
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3301      	adds	r3, #1
 8011958:	781b      	ldrb	r3, [r3, #0]
 801195a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801195c:	89fb      	ldrh	r3, [r7, #14]
 801195e:	021b      	lsls	r3, r3, #8
 8011960:	b21a      	sxth	r2, r3
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	b21b      	sxth	r3, r3
 8011968:	4313      	orrs	r3, r2
 801196a:	b21b      	sxth	r3, r3
 801196c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801196e:	89fb      	ldrh	r3, [r7, #14]
}
 8011970:	4618      	mov	r0, r3
 8011972:	3714      	adds	r7, #20
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr

0801197c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801197c:	b480      	push	{r7}
 801197e:	b085      	sub	sp, #20
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	3303      	adds	r3, #3
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	021b      	lsls	r3, r3, #8
 8011990:	687a      	ldr	r2, [r7, #4]
 8011992:	3202      	adds	r2, #2
 8011994:	7812      	ldrb	r2, [r2, #0]
 8011996:	4313      	orrs	r3, r2
 8011998:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	021b      	lsls	r3, r3, #8
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	3201      	adds	r2, #1
 80119a2:	7812      	ldrb	r2, [r2, #0]
 80119a4:	4313      	orrs	r3, r2
 80119a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	021b      	lsls	r3, r3, #8
 80119ac:	687a      	ldr	r2, [r7, #4]
 80119ae:	7812      	ldrb	r2, [r2, #0]
 80119b0:	4313      	orrs	r3, r2
 80119b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80119b4:	68fb      	ldr	r3, [r7, #12]
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3714      	adds	r7, #20
 80119ba:	46bd      	mov	sp, r7
 80119bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c0:	4770      	bx	lr

080119c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80119c2:	b480      	push	{r7}
 80119c4:	b083      	sub	sp, #12
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	6078      	str	r0, [r7, #4]
 80119ca:	460b      	mov	r3, r1
 80119cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	1c5a      	adds	r2, r3, #1
 80119d2:	607a      	str	r2, [r7, #4]
 80119d4:	887a      	ldrh	r2, [r7, #2]
 80119d6:	b2d2      	uxtb	r2, r2
 80119d8:	701a      	strb	r2, [r3, #0]
 80119da:	887b      	ldrh	r3, [r7, #2]
 80119dc:	0a1b      	lsrs	r3, r3, #8
 80119de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	1c5a      	adds	r2, r3, #1
 80119e4:	607a      	str	r2, [r7, #4]
 80119e6:	887a      	ldrh	r2, [r7, #2]
 80119e8:	b2d2      	uxtb	r2, r2
 80119ea:	701a      	strb	r2, [r3, #0]
}
 80119ec:	bf00      	nop
 80119ee:	370c      	adds	r7, #12
 80119f0:	46bd      	mov	sp, r7
 80119f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f6:	4770      	bx	lr

080119f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	1c5a      	adds	r2, r3, #1
 8011a06:	607a      	str	r2, [r7, #4]
 8011a08:	683a      	ldr	r2, [r7, #0]
 8011a0a:	b2d2      	uxtb	r2, r2
 8011a0c:	701a      	strb	r2, [r3, #0]
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	0a1b      	lsrs	r3, r3, #8
 8011a12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	1c5a      	adds	r2, r3, #1
 8011a18:	607a      	str	r2, [r7, #4]
 8011a1a:	683a      	ldr	r2, [r7, #0]
 8011a1c:	b2d2      	uxtb	r2, r2
 8011a1e:	701a      	strb	r2, [r3, #0]
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	0a1b      	lsrs	r3, r3, #8
 8011a24:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	1c5a      	adds	r2, r3, #1
 8011a2a:	607a      	str	r2, [r7, #4]
 8011a2c:	683a      	ldr	r2, [r7, #0]
 8011a2e:	b2d2      	uxtb	r2, r2
 8011a30:	701a      	strb	r2, [r3, #0]
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	0a1b      	lsrs	r3, r3, #8
 8011a36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	1c5a      	adds	r2, r3, #1
 8011a3c:	607a      	str	r2, [r7, #4]
 8011a3e:	683a      	ldr	r2, [r7, #0]
 8011a40:	b2d2      	uxtb	r2, r2
 8011a42:	701a      	strb	r2, [r3, #0]
}
 8011a44:	bf00      	nop
 8011a46:	370c      	adds	r7, #12
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4e:	4770      	bx	lr

08011a50 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011a50:	b480      	push	{r7}
 8011a52:	b087      	sub	sp, #28
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	60f8      	str	r0, [r7, #12]
 8011a58:	60b9      	str	r1, [r7, #8]
 8011a5a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d00d      	beq.n	8011a86 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011a6a:	693a      	ldr	r2, [r7, #16]
 8011a6c:	1c53      	adds	r3, r2, #1
 8011a6e:	613b      	str	r3, [r7, #16]
 8011a70:	697b      	ldr	r3, [r7, #20]
 8011a72:	1c59      	adds	r1, r3, #1
 8011a74:	6179      	str	r1, [r7, #20]
 8011a76:	7812      	ldrb	r2, [r2, #0]
 8011a78:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	3b01      	subs	r3, #1
 8011a7e:	607b      	str	r3, [r7, #4]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d1f1      	bne.n	8011a6a <mem_cpy+0x1a>
	}
}
 8011a86:	bf00      	nop
 8011a88:	371c      	adds	r7, #28
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a90:	4770      	bx	lr

08011a92 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011a92:	b480      	push	{r7}
 8011a94:	b087      	sub	sp, #28
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	60f8      	str	r0, [r7, #12]
 8011a9a:	60b9      	str	r1, [r7, #8]
 8011a9c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011aa2:	697b      	ldr	r3, [r7, #20]
 8011aa4:	1c5a      	adds	r2, r3, #1
 8011aa6:	617a      	str	r2, [r7, #20]
 8011aa8:	68ba      	ldr	r2, [r7, #8]
 8011aaa:	b2d2      	uxtb	r2, r2
 8011aac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	3b01      	subs	r3, #1
 8011ab2:	607b      	str	r3, [r7, #4]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d1f3      	bne.n	8011aa2 <mem_set+0x10>
}
 8011aba:	bf00      	nop
 8011abc:	371c      	adds	r7, #28
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac4:	4770      	bx	lr

08011ac6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011ac6:	b480      	push	{r7}
 8011ac8:	b089      	sub	sp, #36	; 0x24
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	60f8      	str	r0, [r7, #12]
 8011ace:	60b9      	str	r1, [r7, #8]
 8011ad0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	61fb      	str	r3, [r7, #28]
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011ada:	2300      	movs	r3, #0
 8011adc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011ade:	69fb      	ldr	r3, [r7, #28]
 8011ae0:	1c5a      	adds	r2, r3, #1
 8011ae2:	61fa      	str	r2, [r7, #28]
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	69bb      	ldr	r3, [r7, #24]
 8011aea:	1c5a      	adds	r2, r3, #1
 8011aec:	61ba      	str	r2, [r7, #24]
 8011aee:	781b      	ldrb	r3, [r3, #0]
 8011af0:	1acb      	subs	r3, r1, r3
 8011af2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	3b01      	subs	r3, #1
 8011af8:	607b      	str	r3, [r7, #4]
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d002      	beq.n	8011b06 <mem_cmp+0x40>
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d0eb      	beq.n	8011ade <mem_cmp+0x18>

	return r;
 8011b06:	697b      	ldr	r3, [r7, #20]
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3724      	adds	r7, #36	; 0x24
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b12:	4770      	bx	lr

08011b14 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011b14:	b480      	push	{r7}
 8011b16:	b083      	sub	sp, #12
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011b1e:	e002      	b.n	8011b26 <chk_chr+0x12>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	3301      	adds	r3, #1
 8011b24:	607b      	str	r3, [r7, #4]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d005      	beq.n	8011b3a <chk_chr+0x26>
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	781b      	ldrb	r3, [r3, #0]
 8011b32:	461a      	mov	r2, r3
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d1f2      	bne.n	8011b20 <chk_chr+0xc>
	return *str;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	781b      	ldrb	r3, [r3, #0]
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	370c      	adds	r7, #12
 8011b42:	46bd      	mov	sp, r7
 8011b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b48:	4770      	bx	lr

08011b4a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8011b4a:	b580      	push	{r7, lr}
 8011b4c:	b082      	sub	sp, #8
 8011b4e:	af00      	add	r7, sp, #0
 8011b50:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d009      	beq.n	8011b6c <lock_fs+0x22>
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f002 fd8d 	bl	801467c <ff_req_grant>
 8011b62:	4603      	mov	r3, r0
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d001      	beq.n	8011b6c <lock_fs+0x22>
 8011b68:	2301      	movs	r3, #1
 8011b6a:	e000      	b.n	8011b6e <lock_fs+0x24>
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3708      	adds	r7, #8
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}

08011b76 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8011b76:	b580      	push	{r7, lr}
 8011b78:	b082      	sub	sp, #8
 8011b7a:	af00      	add	r7, sp, #0
 8011b7c:	6078      	str	r0, [r7, #4]
 8011b7e:	460b      	mov	r3, r1
 8011b80:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d00d      	beq.n	8011ba4 <unlock_fs+0x2e>
 8011b88:	78fb      	ldrb	r3, [r7, #3]
 8011b8a:	2b0c      	cmp	r3, #12
 8011b8c:	d00a      	beq.n	8011ba4 <unlock_fs+0x2e>
 8011b8e:	78fb      	ldrb	r3, [r7, #3]
 8011b90:	2b0b      	cmp	r3, #11
 8011b92:	d007      	beq.n	8011ba4 <unlock_fs+0x2e>
 8011b94:	78fb      	ldrb	r3, [r7, #3]
 8011b96:	2b0f      	cmp	r3, #15
 8011b98:	d004      	beq.n	8011ba4 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	68db      	ldr	r3, [r3, #12]
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f002 fd81 	bl	80146a6 <ff_rel_grant>
	}
}
 8011ba4:	bf00      	nop
 8011ba6:	3708      	adds	r7, #8
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}

08011bac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011bac:	b480      	push	{r7}
 8011bae:	b085      	sub	sp, #20
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	60bb      	str	r3, [r7, #8]
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	60fb      	str	r3, [r7, #12]
 8011bbe:	e029      	b.n	8011c14 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011bc0:	4a27      	ldr	r2, [pc, #156]	; (8011c60 <chk_lock+0xb4>)
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	011b      	lsls	r3, r3, #4
 8011bc6:	4413      	add	r3, r2
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d01d      	beq.n	8011c0a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011bce:	4a24      	ldr	r2, [pc, #144]	; (8011c60 <chk_lock+0xb4>)
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	011b      	lsls	r3, r3, #4
 8011bd4:	4413      	add	r3, r2
 8011bd6:	681a      	ldr	r2, [r3, #0]
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d116      	bne.n	8011c0e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011be0:	4a1f      	ldr	r2, [pc, #124]	; (8011c60 <chk_lock+0xb4>)
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	011b      	lsls	r3, r3, #4
 8011be6:	4413      	add	r3, r2
 8011be8:	3304      	adds	r3, #4
 8011bea:	681a      	ldr	r2, [r3, #0]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d10c      	bne.n	8011c0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011bf4:	4a1a      	ldr	r2, [pc, #104]	; (8011c60 <chk_lock+0xb4>)
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	011b      	lsls	r3, r3, #4
 8011bfa:	4413      	add	r3, r2
 8011bfc:	3308      	adds	r3, #8
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011c04:	429a      	cmp	r2, r3
 8011c06:	d102      	bne.n	8011c0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011c08:	e007      	b.n	8011c1a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	3301      	adds	r3, #1
 8011c12:	60fb      	str	r3, [r7, #12]
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	2b01      	cmp	r3, #1
 8011c18:	d9d2      	bls.n	8011bc0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	2b02      	cmp	r3, #2
 8011c1e:	d109      	bne.n	8011c34 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d102      	bne.n	8011c2c <chk_lock+0x80>
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	2b02      	cmp	r3, #2
 8011c2a:	d101      	bne.n	8011c30 <chk_lock+0x84>
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	e010      	b.n	8011c52 <chk_lock+0xa6>
 8011c30:	2312      	movs	r3, #18
 8011c32:	e00e      	b.n	8011c52 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d108      	bne.n	8011c4c <chk_lock+0xa0>
 8011c3a:	4a09      	ldr	r2, [pc, #36]	; (8011c60 <chk_lock+0xb4>)
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	011b      	lsls	r3, r3, #4
 8011c40:	4413      	add	r3, r2
 8011c42:	330c      	adds	r3, #12
 8011c44:	881b      	ldrh	r3, [r3, #0]
 8011c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c4a:	d101      	bne.n	8011c50 <chk_lock+0xa4>
 8011c4c:	2310      	movs	r3, #16
 8011c4e:	e000      	b.n	8011c52 <chk_lock+0xa6>
 8011c50:	2300      	movs	r3, #0
}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3714      	adds	r7, #20
 8011c56:	46bd      	mov	sp, r7
 8011c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5c:	4770      	bx	lr
 8011c5e:	bf00      	nop
 8011c60:	20000384 	.word	0x20000384

08011c64 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011c64:	b480      	push	{r7}
 8011c66:	b083      	sub	sp, #12
 8011c68:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	607b      	str	r3, [r7, #4]
 8011c6e:	e002      	b.n	8011c76 <enq_lock+0x12>
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	3301      	adds	r3, #1
 8011c74:	607b      	str	r3, [r7, #4]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	d806      	bhi.n	8011c8a <enq_lock+0x26>
 8011c7c:	4a09      	ldr	r2, [pc, #36]	; (8011ca4 <enq_lock+0x40>)
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	011b      	lsls	r3, r3, #4
 8011c82:	4413      	add	r3, r2
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d1f2      	bne.n	8011c70 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2b02      	cmp	r3, #2
 8011c8e:	bf14      	ite	ne
 8011c90:	2301      	movne	r3, #1
 8011c92:	2300      	moveq	r3, #0
 8011c94:	b2db      	uxtb	r3, r3
}
 8011c96:	4618      	mov	r0, r3
 8011c98:	370c      	adds	r7, #12
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca0:	4770      	bx	lr
 8011ca2:	bf00      	nop
 8011ca4:	20000384 	.word	0x20000384

08011ca8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b085      	sub	sp, #20
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
 8011cb0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	60fb      	str	r3, [r7, #12]
 8011cb6:	e01f      	b.n	8011cf8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011cb8:	4a41      	ldr	r2, [pc, #260]	; (8011dc0 <inc_lock+0x118>)
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	011b      	lsls	r3, r3, #4
 8011cbe:	4413      	add	r3, r2
 8011cc0:	681a      	ldr	r2, [r3, #0]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d113      	bne.n	8011cf2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011cca:	4a3d      	ldr	r2, [pc, #244]	; (8011dc0 <inc_lock+0x118>)
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	011b      	lsls	r3, r3, #4
 8011cd0:	4413      	add	r3, r2
 8011cd2:	3304      	adds	r3, #4
 8011cd4:	681a      	ldr	r2, [r3, #0]
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d109      	bne.n	8011cf2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011cde:	4a38      	ldr	r2, [pc, #224]	; (8011dc0 <inc_lock+0x118>)
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	011b      	lsls	r3, r3, #4
 8011ce4:	4413      	add	r3, r2
 8011ce6:	3308      	adds	r3, #8
 8011ce8:	681a      	ldr	r2, [r3, #0]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011cee:	429a      	cmp	r2, r3
 8011cf0:	d006      	beq.n	8011d00 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	60fb      	str	r3, [r7, #12]
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	2b01      	cmp	r3, #1
 8011cfc:	d9dc      	bls.n	8011cb8 <inc_lock+0x10>
 8011cfe:	e000      	b.n	8011d02 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011d00:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	2b02      	cmp	r3, #2
 8011d06:	d132      	bne.n	8011d6e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	60fb      	str	r3, [r7, #12]
 8011d0c:	e002      	b.n	8011d14 <inc_lock+0x6c>
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	3301      	adds	r3, #1
 8011d12:	60fb      	str	r3, [r7, #12]
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	d806      	bhi.n	8011d28 <inc_lock+0x80>
 8011d1a:	4a29      	ldr	r2, [pc, #164]	; (8011dc0 <inc_lock+0x118>)
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	011b      	lsls	r3, r3, #4
 8011d20:	4413      	add	r3, r2
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d1f2      	bne.n	8011d0e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	2b02      	cmp	r3, #2
 8011d2c:	d101      	bne.n	8011d32 <inc_lock+0x8a>
 8011d2e:	2300      	movs	r3, #0
 8011d30:	e040      	b.n	8011db4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	681a      	ldr	r2, [r3, #0]
 8011d36:	4922      	ldr	r1, [pc, #136]	; (8011dc0 <inc_lock+0x118>)
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	011b      	lsls	r3, r3, #4
 8011d3c:	440b      	add	r3, r1
 8011d3e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	689a      	ldr	r2, [r3, #8]
 8011d44:	491e      	ldr	r1, [pc, #120]	; (8011dc0 <inc_lock+0x118>)
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	011b      	lsls	r3, r3, #4
 8011d4a:	440b      	add	r3, r1
 8011d4c:	3304      	adds	r3, #4
 8011d4e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	695a      	ldr	r2, [r3, #20]
 8011d54:	491a      	ldr	r1, [pc, #104]	; (8011dc0 <inc_lock+0x118>)
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	011b      	lsls	r3, r3, #4
 8011d5a:	440b      	add	r3, r1
 8011d5c:	3308      	adds	r3, #8
 8011d5e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011d60:	4a17      	ldr	r2, [pc, #92]	; (8011dc0 <inc_lock+0x118>)
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	011b      	lsls	r3, r3, #4
 8011d66:	4413      	add	r3, r2
 8011d68:	330c      	adds	r3, #12
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d009      	beq.n	8011d88 <inc_lock+0xe0>
 8011d74:	4a12      	ldr	r2, [pc, #72]	; (8011dc0 <inc_lock+0x118>)
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	011b      	lsls	r3, r3, #4
 8011d7a:	4413      	add	r3, r2
 8011d7c:	330c      	adds	r3, #12
 8011d7e:	881b      	ldrh	r3, [r3, #0]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d001      	beq.n	8011d88 <inc_lock+0xe0>
 8011d84:	2300      	movs	r3, #0
 8011d86:	e015      	b.n	8011db4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011d88:	683b      	ldr	r3, [r7, #0]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d108      	bne.n	8011da0 <inc_lock+0xf8>
 8011d8e:	4a0c      	ldr	r2, [pc, #48]	; (8011dc0 <inc_lock+0x118>)
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	011b      	lsls	r3, r3, #4
 8011d94:	4413      	add	r3, r2
 8011d96:	330c      	adds	r3, #12
 8011d98:	881b      	ldrh	r3, [r3, #0]
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	b29a      	uxth	r2, r3
 8011d9e:	e001      	b.n	8011da4 <inc_lock+0xfc>
 8011da0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011da4:	4906      	ldr	r1, [pc, #24]	; (8011dc0 <inc_lock+0x118>)
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	011b      	lsls	r3, r3, #4
 8011daa:	440b      	add	r3, r1
 8011dac:	330c      	adds	r3, #12
 8011dae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	3301      	adds	r3, #1
}
 8011db4:	4618      	mov	r0, r3
 8011db6:	3714      	adds	r7, #20
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr
 8011dc0:	20000384 	.word	0x20000384

08011dc4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b085      	sub	sp, #20
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	3b01      	subs	r3, #1
 8011dd0:	607b      	str	r3, [r7, #4]
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d825      	bhi.n	8011e24 <dec_lock+0x60>
		n = Files[i].ctr;
 8011dd8:	4a17      	ldr	r2, [pc, #92]	; (8011e38 <dec_lock+0x74>)
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	011b      	lsls	r3, r3, #4
 8011dde:	4413      	add	r3, r2
 8011de0:	330c      	adds	r3, #12
 8011de2:	881b      	ldrh	r3, [r3, #0]
 8011de4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011de6:	89fb      	ldrh	r3, [r7, #14]
 8011de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011dec:	d101      	bne.n	8011df2 <dec_lock+0x2e>
 8011dee:	2300      	movs	r3, #0
 8011df0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011df2:	89fb      	ldrh	r3, [r7, #14]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d002      	beq.n	8011dfe <dec_lock+0x3a>
 8011df8:	89fb      	ldrh	r3, [r7, #14]
 8011dfa:	3b01      	subs	r3, #1
 8011dfc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011dfe:	4a0e      	ldr	r2, [pc, #56]	; (8011e38 <dec_lock+0x74>)
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	011b      	lsls	r3, r3, #4
 8011e04:	4413      	add	r3, r2
 8011e06:	330c      	adds	r3, #12
 8011e08:	89fa      	ldrh	r2, [r7, #14]
 8011e0a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011e0c:	89fb      	ldrh	r3, [r7, #14]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d105      	bne.n	8011e1e <dec_lock+0x5a>
 8011e12:	4a09      	ldr	r2, [pc, #36]	; (8011e38 <dec_lock+0x74>)
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	011b      	lsls	r3, r3, #4
 8011e18:	4413      	add	r3, r2
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	737b      	strb	r3, [r7, #13]
 8011e22:	e001      	b.n	8011e28 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011e24:	2302      	movs	r3, #2
 8011e26:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011e28:	7b7b      	ldrb	r3, [r7, #13]
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3714      	adds	r7, #20
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e34:	4770      	bx	lr
 8011e36:	bf00      	nop
 8011e38:	20000384 	.word	0x20000384

08011e3c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b085      	sub	sp, #20
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011e44:	2300      	movs	r3, #0
 8011e46:	60fb      	str	r3, [r7, #12]
 8011e48:	e010      	b.n	8011e6c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011e4a:	4a0d      	ldr	r2, [pc, #52]	; (8011e80 <clear_lock+0x44>)
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	011b      	lsls	r3, r3, #4
 8011e50:	4413      	add	r3, r2
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	687a      	ldr	r2, [r7, #4]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d105      	bne.n	8011e66 <clear_lock+0x2a>
 8011e5a:	4a09      	ldr	r2, [pc, #36]	; (8011e80 <clear_lock+0x44>)
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	011b      	lsls	r3, r3, #4
 8011e60:	4413      	add	r3, r2
 8011e62:	2200      	movs	r2, #0
 8011e64:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	3301      	adds	r3, #1
 8011e6a:	60fb      	str	r3, [r7, #12]
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	d9eb      	bls.n	8011e4a <clear_lock+0xe>
	}
}
 8011e72:	bf00      	nop
 8011e74:	3714      	adds	r7, #20
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop
 8011e80:	20000384 	.word	0x20000384

08011e84 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b086      	sub	sp, #24
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	78db      	ldrb	r3, [r3, #3]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d034      	beq.n	8011f02 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	7858      	ldrb	r0, [r3, #1]
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	697a      	ldr	r2, [r7, #20]
 8011eac:	f7ff fd10 	bl	80118d0 <disk_write>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d002      	beq.n	8011ebc <sync_window+0x38>
			res = FR_DISK_ERR;
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	73fb      	strb	r3, [r7, #15]
 8011eba:	e022      	b.n	8011f02 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ec6:	697a      	ldr	r2, [r7, #20]
 8011ec8:	1ad2      	subs	r2, r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	69db      	ldr	r3, [r3, #28]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d217      	bcs.n	8011f02 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	789b      	ldrb	r3, [r3, #2]
 8011ed6:	613b      	str	r3, [r7, #16]
 8011ed8:	e010      	b.n	8011efc <sync_window+0x78>
					wsect += fs->fsize;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	69db      	ldr	r3, [r3, #28]
 8011ede:	697a      	ldr	r2, [r7, #20]
 8011ee0:	4413      	add	r3, r2
 8011ee2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	7858      	ldrb	r0, [r3, #1]
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011eee:	2301      	movs	r3, #1
 8011ef0:	697a      	ldr	r2, [r7, #20]
 8011ef2:	f7ff fced 	bl	80118d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	3b01      	subs	r3, #1
 8011efa:	613b      	str	r3, [r7, #16]
 8011efc:	693b      	ldr	r3, [r7, #16]
 8011efe:	2b01      	cmp	r3, #1
 8011f00:	d8eb      	bhi.n	8011eda <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	3718      	adds	r7, #24
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}

08011f0c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b084      	sub	sp, #16
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011f16:	2300      	movs	r3, #0
 8011f18:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f1e:	683a      	ldr	r2, [r7, #0]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d01b      	beq.n	8011f5c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011f24:	6878      	ldr	r0, [r7, #4]
 8011f26:	f7ff ffad 	bl	8011e84 <sync_window>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011f2e:	7bfb      	ldrb	r3, [r7, #15]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d113      	bne.n	8011f5c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	7858      	ldrb	r0, [r3, #1]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8011f3e:	2301      	movs	r3, #1
 8011f40:	683a      	ldr	r2, [r7, #0]
 8011f42:	f7ff fca5 	bl	8011890 <disk_read>
 8011f46:	4603      	mov	r3, r0
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d004      	beq.n	8011f56 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8011f50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011f52:	2301      	movs	r3, #1
 8011f54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	683a      	ldr	r2, [r7, #0]
 8011f5a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8011f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3710      	adds	r7, #16
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
	...

08011f68 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b084      	sub	sp, #16
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f7ff ff87 	bl	8011e84 <sync_window>
 8011f76:	4603      	mov	r3, r0
 8011f78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011f7a:	7bfb      	ldrb	r3, [r7, #15]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d158      	bne.n	8012032 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	781b      	ldrb	r3, [r3, #0]
 8011f84:	2b03      	cmp	r3, #3
 8011f86:	d148      	bne.n	801201a <sync_fs+0xb2>
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	791b      	ldrb	r3, [r3, #4]
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d144      	bne.n	801201a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	3334      	adds	r3, #52	; 0x34
 8011f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011f98:	2100      	movs	r1, #0
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7ff fd79 	bl	8011a92 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	3334      	adds	r3, #52	; 0x34
 8011fa4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011fa8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011fac:	4618      	mov	r0, r3
 8011fae:	f7ff fd08 	bl	80119c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	3334      	adds	r3, #52	; 0x34
 8011fb6:	4921      	ldr	r1, [pc, #132]	; (801203c <sync_fs+0xd4>)
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7ff fd1d 	bl	80119f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	3334      	adds	r3, #52	; 0x34
 8011fc2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011fc6:	491e      	ldr	r1, [pc, #120]	; (8012040 <sync_fs+0xd8>)
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7ff fd15 	bl	80119f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	3334      	adds	r3, #52	; 0x34
 8011fd2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	695b      	ldr	r3, [r3, #20]
 8011fda:	4619      	mov	r1, r3
 8011fdc:	4610      	mov	r0, r2
 8011fde:	f7ff fd0b 	bl	80119f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	3334      	adds	r3, #52	; 0x34
 8011fe6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	691b      	ldr	r3, [r3, #16]
 8011fee:	4619      	mov	r1, r3
 8011ff0:	4610      	mov	r0, r2
 8011ff2:	f7ff fd01 	bl	80119f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6a1b      	ldr	r3, [r3, #32]
 8011ffa:	1c5a      	adds	r2, r3, #1
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	7858      	ldrb	r0, [r3, #1]
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801200e:	2301      	movs	r3, #1
 8012010:	f7ff fc5e 	bl	80118d0 <disk_write>
			fs->fsi_flag = 0;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2200      	movs	r2, #0
 8012018:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	785b      	ldrb	r3, [r3, #1]
 801201e:	2200      	movs	r2, #0
 8012020:	2100      	movs	r1, #0
 8012022:	4618      	mov	r0, r3
 8012024:	f7ff fc74 	bl	8011910 <disk_ioctl>
 8012028:	4603      	mov	r3, r0
 801202a:	2b00      	cmp	r3, #0
 801202c:	d001      	beq.n	8012032 <sync_fs+0xca>
 801202e:	2301      	movs	r3, #1
 8012030:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012032:	7bfb      	ldrb	r3, [r7, #15]
}
 8012034:	4618      	mov	r0, r3
 8012036:	3710      	adds	r7, #16
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}
 801203c:	41615252 	.word	0x41615252
 8012040:	61417272 	.word	0x61417272

08012044 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012044:	b480      	push	{r7}
 8012046:	b083      	sub	sp, #12
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	3b02      	subs	r3, #2
 8012052:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	699b      	ldr	r3, [r3, #24]
 8012058:	3b02      	subs	r3, #2
 801205a:	683a      	ldr	r2, [r7, #0]
 801205c:	429a      	cmp	r2, r3
 801205e:	d301      	bcc.n	8012064 <clust2sect+0x20>
 8012060:	2300      	movs	r3, #0
 8012062:	e008      	b.n	8012076 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	895b      	ldrh	r3, [r3, #10]
 8012068:	461a      	mov	r2, r3
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	fb03 f202 	mul.w	r2, r3, r2
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012074:	4413      	add	r3, r2
}
 8012076:	4618      	mov	r0, r3
 8012078:	370c      	adds	r7, #12
 801207a:	46bd      	mov	sp, r7
 801207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012080:	4770      	bx	lr

08012082 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012082:	b580      	push	{r7, lr}
 8012084:	b086      	sub	sp, #24
 8012086:	af00      	add	r7, sp, #0
 8012088:	6078      	str	r0, [r7, #4]
 801208a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	2b01      	cmp	r3, #1
 8012096:	d904      	bls.n	80120a2 <get_fat+0x20>
 8012098:	693b      	ldr	r3, [r7, #16]
 801209a:	699b      	ldr	r3, [r3, #24]
 801209c:	683a      	ldr	r2, [r7, #0]
 801209e:	429a      	cmp	r2, r3
 80120a0:	d302      	bcc.n	80120a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80120a2:	2301      	movs	r3, #1
 80120a4:	617b      	str	r3, [r7, #20]
 80120a6:	e08c      	b.n	80121c2 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80120a8:	f04f 33ff 	mov.w	r3, #4294967295
 80120ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	2b02      	cmp	r3, #2
 80120b4:	d045      	beq.n	8012142 <get_fat+0xc0>
 80120b6:	2b03      	cmp	r3, #3
 80120b8:	d05d      	beq.n	8012176 <get_fat+0xf4>
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d177      	bne.n	80121ae <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	60fb      	str	r3, [r7, #12]
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	085b      	lsrs	r3, r3, #1
 80120c6:	68fa      	ldr	r2, [r7, #12]
 80120c8:	4413      	add	r3, r2
 80120ca:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80120cc:	693b      	ldr	r3, [r7, #16]
 80120ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	0a5b      	lsrs	r3, r3, #9
 80120d4:	4413      	add	r3, r2
 80120d6:	4619      	mov	r1, r3
 80120d8:	6938      	ldr	r0, [r7, #16]
 80120da:	f7ff ff17 	bl	8011f0c <move_window>
 80120de:	4603      	mov	r3, r0
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d167      	bne.n	80121b4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	1c5a      	adds	r2, r3, #1
 80120e8:	60fa      	str	r2, [r7, #12]
 80120ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120ee:	693a      	ldr	r2, [r7, #16]
 80120f0:	4413      	add	r3, r2
 80120f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80120f6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80120f8:	693b      	ldr	r3, [r7, #16]
 80120fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	0a5b      	lsrs	r3, r3, #9
 8012100:	4413      	add	r3, r2
 8012102:	4619      	mov	r1, r3
 8012104:	6938      	ldr	r0, [r7, #16]
 8012106:	f7ff ff01 	bl	8011f0c <move_window>
 801210a:	4603      	mov	r3, r0
 801210c:	2b00      	cmp	r3, #0
 801210e:	d153      	bne.n	80121b8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012116:	693a      	ldr	r2, [r7, #16]
 8012118:	4413      	add	r3, r2
 801211a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801211e:	021b      	lsls	r3, r3, #8
 8012120:	461a      	mov	r2, r3
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	4313      	orrs	r3, r2
 8012126:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	f003 0301 	and.w	r3, r3, #1
 801212e:	2b00      	cmp	r3, #0
 8012130:	d002      	beq.n	8012138 <get_fat+0xb6>
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	091b      	lsrs	r3, r3, #4
 8012136:	e002      	b.n	801213e <get_fat+0xbc>
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801213e:	617b      	str	r3, [r7, #20]
			break;
 8012140:	e03f      	b.n	80121c2 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	0a1b      	lsrs	r3, r3, #8
 801214a:	4413      	add	r3, r2
 801214c:	4619      	mov	r1, r3
 801214e:	6938      	ldr	r0, [r7, #16]
 8012150:	f7ff fedc 	bl	8011f0c <move_window>
 8012154:	4603      	mov	r3, r0
 8012156:	2b00      	cmp	r3, #0
 8012158:	d130      	bne.n	80121bc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	005b      	lsls	r3, r3, #1
 8012164:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012168:	4413      	add	r3, r2
 801216a:	4618      	mov	r0, r3
 801216c:	f7ff fbee 	bl	801194c <ld_word>
 8012170:	4603      	mov	r3, r0
 8012172:	617b      	str	r3, [r7, #20]
			break;
 8012174:	e025      	b.n	80121c2 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	09db      	lsrs	r3, r3, #7
 801217e:	4413      	add	r3, r2
 8012180:	4619      	mov	r1, r3
 8012182:	6938      	ldr	r0, [r7, #16]
 8012184:	f7ff fec2 	bl	8011f0c <move_window>
 8012188:	4603      	mov	r3, r0
 801218a:	2b00      	cmp	r3, #0
 801218c:	d118      	bne.n	80121c0 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	009b      	lsls	r3, r3, #2
 8012198:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801219c:	4413      	add	r3, r2
 801219e:	4618      	mov	r0, r3
 80121a0:	f7ff fbec 	bl	801197c <ld_dword>
 80121a4:	4603      	mov	r3, r0
 80121a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80121aa:	617b      	str	r3, [r7, #20]
			break;
 80121ac:	e009      	b.n	80121c2 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80121ae:	2301      	movs	r3, #1
 80121b0:	617b      	str	r3, [r7, #20]
 80121b2:	e006      	b.n	80121c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80121b4:	bf00      	nop
 80121b6:	e004      	b.n	80121c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80121b8:	bf00      	nop
 80121ba:	e002      	b.n	80121c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80121bc:	bf00      	nop
 80121be:	e000      	b.n	80121c2 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80121c0:	bf00      	nop
		}
	}

	return val;
 80121c2:	697b      	ldr	r3, [r7, #20]
}
 80121c4:	4618      	mov	r0, r3
 80121c6:	3718      	adds	r7, #24
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80121cc:	b590      	push	{r4, r7, lr}
 80121ce:	b089      	sub	sp, #36	; 0x24
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	60f8      	str	r0, [r7, #12]
 80121d4:	60b9      	str	r1, [r7, #8]
 80121d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80121d8:	2302      	movs	r3, #2
 80121da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	2b01      	cmp	r3, #1
 80121e0:	f240 80d6 	bls.w	8012390 <put_fat+0x1c4>
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	699b      	ldr	r3, [r3, #24]
 80121e8:	68ba      	ldr	r2, [r7, #8]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	f080 80d0 	bcs.w	8012390 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	2b02      	cmp	r3, #2
 80121f6:	d073      	beq.n	80122e0 <put_fat+0x114>
 80121f8:	2b03      	cmp	r3, #3
 80121fa:	f000 8091 	beq.w	8012320 <put_fat+0x154>
 80121fe:	2b01      	cmp	r3, #1
 8012200:	f040 80c6 	bne.w	8012390 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	61bb      	str	r3, [r7, #24]
 8012208:	69bb      	ldr	r3, [r7, #24]
 801220a:	085b      	lsrs	r3, r3, #1
 801220c:	69ba      	ldr	r2, [r7, #24]
 801220e:	4413      	add	r3, r2
 8012210:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012216:	69bb      	ldr	r3, [r7, #24]
 8012218:	0a5b      	lsrs	r3, r3, #9
 801221a:	4413      	add	r3, r2
 801221c:	4619      	mov	r1, r3
 801221e:	68f8      	ldr	r0, [r7, #12]
 8012220:	f7ff fe74 	bl	8011f0c <move_window>
 8012224:	4603      	mov	r3, r0
 8012226:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012228:	7ffb      	ldrb	r3, [r7, #31]
 801222a:	2b00      	cmp	r3, #0
 801222c:	f040 80a9 	bne.w	8012382 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012236:	69bb      	ldr	r3, [r7, #24]
 8012238:	1c59      	adds	r1, r3, #1
 801223a:	61b9      	str	r1, [r7, #24]
 801223c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012240:	4413      	add	r3, r2
 8012242:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	f003 0301 	and.w	r3, r3, #1
 801224a:	2b00      	cmp	r3, #0
 801224c:	d00d      	beq.n	801226a <put_fat+0x9e>
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	781b      	ldrb	r3, [r3, #0]
 8012252:	b25b      	sxtb	r3, r3
 8012254:	f003 030f 	and.w	r3, r3, #15
 8012258:	b25a      	sxtb	r2, r3
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	b2db      	uxtb	r3, r3
 801225e:	011b      	lsls	r3, r3, #4
 8012260:	b25b      	sxtb	r3, r3
 8012262:	4313      	orrs	r3, r2
 8012264:	b25b      	sxtb	r3, r3
 8012266:	b2db      	uxtb	r3, r3
 8012268:	e001      	b.n	801226e <put_fat+0xa2>
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	b2db      	uxtb	r3, r3
 801226e:	697a      	ldr	r2, [r7, #20]
 8012270:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2201      	movs	r2, #1
 8012276:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801227c:	69bb      	ldr	r3, [r7, #24]
 801227e:	0a5b      	lsrs	r3, r3, #9
 8012280:	4413      	add	r3, r2
 8012282:	4619      	mov	r1, r3
 8012284:	68f8      	ldr	r0, [r7, #12]
 8012286:	f7ff fe41 	bl	8011f0c <move_window>
 801228a:	4603      	mov	r3, r0
 801228c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801228e:	7ffb      	ldrb	r3, [r7, #31]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d178      	bne.n	8012386 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801229a:	69bb      	ldr	r3, [r7, #24]
 801229c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122a0:	4413      	add	r3, r2
 80122a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	f003 0301 	and.w	r3, r3, #1
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d003      	beq.n	80122b6 <put_fat+0xea>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	091b      	lsrs	r3, r3, #4
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	e00e      	b.n	80122d4 <put_fat+0x108>
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	781b      	ldrb	r3, [r3, #0]
 80122ba:	b25b      	sxtb	r3, r3
 80122bc:	f023 030f 	bic.w	r3, r3, #15
 80122c0:	b25a      	sxtb	r2, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	0a1b      	lsrs	r3, r3, #8
 80122c6:	b25b      	sxtb	r3, r3
 80122c8:	f003 030f 	and.w	r3, r3, #15
 80122cc:	b25b      	sxtb	r3, r3
 80122ce:	4313      	orrs	r3, r2
 80122d0:	b25b      	sxtb	r3, r3
 80122d2:	b2db      	uxtb	r3, r3
 80122d4:	697a      	ldr	r2, [r7, #20]
 80122d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	2201      	movs	r2, #1
 80122dc:	70da      	strb	r2, [r3, #3]
			break;
 80122de:	e057      	b.n	8012390 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80122e4:	68bb      	ldr	r3, [r7, #8]
 80122e6:	0a1b      	lsrs	r3, r3, #8
 80122e8:	4413      	add	r3, r2
 80122ea:	4619      	mov	r1, r3
 80122ec:	68f8      	ldr	r0, [r7, #12]
 80122ee:	f7ff fe0d 	bl	8011f0c <move_window>
 80122f2:	4603      	mov	r3, r0
 80122f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80122f6:	7ffb      	ldrb	r3, [r7, #31]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d146      	bne.n	801238a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	005b      	lsls	r3, r3, #1
 8012306:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801230a:	4413      	add	r3, r2
 801230c:	687a      	ldr	r2, [r7, #4]
 801230e:	b292      	uxth	r2, r2
 8012310:	4611      	mov	r1, r2
 8012312:	4618      	mov	r0, r3
 8012314:	f7ff fb55 	bl	80119c2 <st_word>
			fs->wflag = 1;
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	2201      	movs	r2, #1
 801231c:	70da      	strb	r2, [r3, #3]
			break;
 801231e:	e037      	b.n	8012390 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	09db      	lsrs	r3, r3, #7
 8012328:	4413      	add	r3, r2
 801232a:	4619      	mov	r1, r3
 801232c:	68f8      	ldr	r0, [r7, #12]
 801232e:	f7ff fded 	bl	8011f0c <move_window>
 8012332:	4603      	mov	r3, r0
 8012334:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012336:	7ffb      	ldrb	r3, [r7, #31]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d128      	bne.n	801238e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	009b      	lsls	r3, r3, #2
 801234c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012350:	4413      	add	r3, r2
 8012352:	4618      	mov	r0, r3
 8012354:	f7ff fb12 	bl	801197c <ld_dword>
 8012358:	4603      	mov	r3, r0
 801235a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801235e:	4323      	orrs	r3, r4
 8012360:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012368:	68bb      	ldr	r3, [r7, #8]
 801236a:	009b      	lsls	r3, r3, #2
 801236c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8012370:	4413      	add	r3, r2
 8012372:	6879      	ldr	r1, [r7, #4]
 8012374:	4618      	mov	r0, r3
 8012376:	f7ff fb3f 	bl	80119f8 <st_dword>
			fs->wflag = 1;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	2201      	movs	r2, #1
 801237e:	70da      	strb	r2, [r3, #3]
			break;
 8012380:	e006      	b.n	8012390 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8012382:	bf00      	nop
 8012384:	e004      	b.n	8012390 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8012386:	bf00      	nop
 8012388:	e002      	b.n	8012390 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801238a:	bf00      	nop
 801238c:	e000      	b.n	8012390 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801238e:	bf00      	nop
		}
	}
	return res;
 8012390:	7ffb      	ldrb	r3, [r7, #31]
}
 8012392:	4618      	mov	r0, r3
 8012394:	3724      	adds	r7, #36	; 0x24
 8012396:	46bd      	mov	sp, r7
 8012398:	bd90      	pop	{r4, r7, pc}

0801239a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801239a:	b580      	push	{r7, lr}
 801239c:	b088      	sub	sp, #32
 801239e:	af00      	add	r7, sp, #0
 80123a0:	60f8      	str	r0, [r7, #12]
 80123a2:	60b9      	str	r1, [r7, #8]
 80123a4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80123a6:	2300      	movs	r3, #0
 80123a8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	2b01      	cmp	r3, #1
 80123b4:	d904      	bls.n	80123c0 <remove_chain+0x26>
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	699b      	ldr	r3, [r3, #24]
 80123ba:	68ba      	ldr	r2, [r7, #8]
 80123bc:	429a      	cmp	r2, r3
 80123be:	d301      	bcc.n	80123c4 <remove_chain+0x2a>
 80123c0:	2302      	movs	r3, #2
 80123c2:	e04b      	b.n	801245c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d00c      	beq.n	80123e4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80123ca:	f04f 32ff 	mov.w	r2, #4294967295
 80123ce:	6879      	ldr	r1, [r7, #4]
 80123d0:	69b8      	ldr	r0, [r7, #24]
 80123d2:	f7ff fefb 	bl	80121cc <put_fat>
 80123d6:	4603      	mov	r3, r0
 80123d8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80123da:	7ffb      	ldrb	r3, [r7, #31]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d001      	beq.n	80123e4 <remove_chain+0x4a>
 80123e0:	7ffb      	ldrb	r3, [r7, #31]
 80123e2:	e03b      	b.n	801245c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80123e4:	68b9      	ldr	r1, [r7, #8]
 80123e6:	68f8      	ldr	r0, [r7, #12]
 80123e8:	f7ff fe4b 	bl	8012082 <get_fat>
 80123ec:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d031      	beq.n	8012458 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	2b01      	cmp	r3, #1
 80123f8:	d101      	bne.n	80123fe <remove_chain+0x64>
 80123fa:	2302      	movs	r3, #2
 80123fc:	e02e      	b.n	801245c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012404:	d101      	bne.n	801240a <remove_chain+0x70>
 8012406:	2301      	movs	r3, #1
 8012408:	e028      	b.n	801245c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801240a:	2200      	movs	r2, #0
 801240c:	68b9      	ldr	r1, [r7, #8]
 801240e:	69b8      	ldr	r0, [r7, #24]
 8012410:	f7ff fedc 	bl	80121cc <put_fat>
 8012414:	4603      	mov	r3, r0
 8012416:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012418:	7ffb      	ldrb	r3, [r7, #31]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d001      	beq.n	8012422 <remove_chain+0x88>
 801241e:	7ffb      	ldrb	r3, [r7, #31]
 8012420:	e01c      	b.n	801245c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012422:	69bb      	ldr	r3, [r7, #24]
 8012424:	695a      	ldr	r2, [r3, #20]
 8012426:	69bb      	ldr	r3, [r7, #24]
 8012428:	699b      	ldr	r3, [r3, #24]
 801242a:	3b02      	subs	r3, #2
 801242c:	429a      	cmp	r2, r3
 801242e:	d20b      	bcs.n	8012448 <remove_chain+0xae>
			fs->free_clst++;
 8012430:	69bb      	ldr	r3, [r7, #24]
 8012432:	695b      	ldr	r3, [r3, #20]
 8012434:	1c5a      	adds	r2, r3, #1
 8012436:	69bb      	ldr	r3, [r7, #24]
 8012438:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801243a:	69bb      	ldr	r3, [r7, #24]
 801243c:	791b      	ldrb	r3, [r3, #4]
 801243e:	f043 0301 	orr.w	r3, r3, #1
 8012442:	b2da      	uxtb	r2, r3
 8012444:	69bb      	ldr	r3, [r7, #24]
 8012446:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	699b      	ldr	r3, [r3, #24]
 8012450:	68ba      	ldr	r2, [r7, #8]
 8012452:	429a      	cmp	r2, r3
 8012454:	d3c6      	bcc.n	80123e4 <remove_chain+0x4a>
 8012456:	e000      	b.n	801245a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012458:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801245a:	2300      	movs	r3, #0
}
 801245c:	4618      	mov	r0, r3
 801245e:	3720      	adds	r7, #32
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b088      	sub	sp, #32
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d10d      	bne.n	8012496 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	691b      	ldr	r3, [r3, #16]
 801247e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012480:	69bb      	ldr	r3, [r7, #24]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d004      	beq.n	8012490 <create_chain+0x2c>
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	699b      	ldr	r3, [r3, #24]
 801248a:	69ba      	ldr	r2, [r7, #24]
 801248c:	429a      	cmp	r2, r3
 801248e:	d31b      	bcc.n	80124c8 <create_chain+0x64>
 8012490:	2301      	movs	r3, #1
 8012492:	61bb      	str	r3, [r7, #24]
 8012494:	e018      	b.n	80124c8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012496:	6839      	ldr	r1, [r7, #0]
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f7ff fdf2 	bl	8012082 <get_fat>
 801249e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	2b01      	cmp	r3, #1
 80124a4:	d801      	bhi.n	80124aa <create_chain+0x46>
 80124a6:	2301      	movs	r3, #1
 80124a8:	e070      	b.n	801258c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124b0:	d101      	bne.n	80124b6 <create_chain+0x52>
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	e06a      	b.n	801258c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	699b      	ldr	r3, [r3, #24]
 80124ba:	68fa      	ldr	r2, [r7, #12]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d201      	bcs.n	80124c4 <create_chain+0x60>
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	e063      	b.n	801258c <create_chain+0x128>
		scl = clst;
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80124c8:	69bb      	ldr	r3, [r7, #24]
 80124ca:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	3301      	adds	r3, #1
 80124d0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	699b      	ldr	r3, [r3, #24]
 80124d6:	69fa      	ldr	r2, [r7, #28]
 80124d8:	429a      	cmp	r2, r3
 80124da:	d307      	bcc.n	80124ec <create_chain+0x88>
				ncl = 2;
 80124dc:	2302      	movs	r3, #2
 80124de:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80124e0:	69fa      	ldr	r2, [r7, #28]
 80124e2:	69bb      	ldr	r3, [r7, #24]
 80124e4:	429a      	cmp	r2, r3
 80124e6:	d901      	bls.n	80124ec <create_chain+0x88>
 80124e8:	2300      	movs	r3, #0
 80124ea:	e04f      	b.n	801258c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80124ec:	69f9      	ldr	r1, [r7, #28]
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f7ff fdc7 	bl	8012082 <get_fat>
 80124f4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d00e      	beq.n	801251a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	2b01      	cmp	r3, #1
 8012500:	d003      	beq.n	801250a <create_chain+0xa6>
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012508:	d101      	bne.n	801250e <create_chain+0xaa>
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	e03e      	b.n	801258c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801250e:	69fa      	ldr	r2, [r7, #28]
 8012510:	69bb      	ldr	r3, [r7, #24]
 8012512:	429a      	cmp	r2, r3
 8012514:	d1da      	bne.n	80124cc <create_chain+0x68>
 8012516:	2300      	movs	r3, #0
 8012518:	e038      	b.n	801258c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801251a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801251c:	f04f 32ff 	mov.w	r2, #4294967295
 8012520:	69f9      	ldr	r1, [r7, #28]
 8012522:	6938      	ldr	r0, [r7, #16]
 8012524:	f7ff fe52 	bl	80121cc <put_fat>
 8012528:	4603      	mov	r3, r0
 801252a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801252c:	7dfb      	ldrb	r3, [r7, #23]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d109      	bne.n	8012546 <create_chain+0xe2>
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d006      	beq.n	8012546 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012538:	69fa      	ldr	r2, [r7, #28]
 801253a:	6839      	ldr	r1, [r7, #0]
 801253c:	6938      	ldr	r0, [r7, #16]
 801253e:	f7ff fe45 	bl	80121cc <put_fat>
 8012542:	4603      	mov	r3, r0
 8012544:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012546:	7dfb      	ldrb	r3, [r7, #23]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d116      	bne.n	801257a <create_chain+0x116>
		fs->last_clst = ncl;
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	69fa      	ldr	r2, [r7, #28]
 8012550:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012552:	693b      	ldr	r3, [r7, #16]
 8012554:	695a      	ldr	r2, [r3, #20]
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	699b      	ldr	r3, [r3, #24]
 801255a:	3b02      	subs	r3, #2
 801255c:	429a      	cmp	r2, r3
 801255e:	d804      	bhi.n	801256a <create_chain+0x106>
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	695b      	ldr	r3, [r3, #20]
 8012564:	1e5a      	subs	r2, r3, #1
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	791b      	ldrb	r3, [r3, #4]
 801256e:	f043 0301 	orr.w	r3, r3, #1
 8012572:	b2da      	uxtb	r2, r3
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	711a      	strb	r2, [r3, #4]
 8012578:	e007      	b.n	801258a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801257a:	7dfb      	ldrb	r3, [r7, #23]
 801257c:	2b01      	cmp	r3, #1
 801257e:	d102      	bne.n	8012586 <create_chain+0x122>
 8012580:	f04f 33ff 	mov.w	r3, #4294967295
 8012584:	e000      	b.n	8012588 <create_chain+0x124>
 8012586:	2301      	movs	r3, #1
 8012588:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801258a:	69fb      	ldr	r3, [r7, #28]
}
 801258c:	4618      	mov	r0, r3
 801258e:	3720      	adds	r7, #32
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012594:	b480      	push	{r7}
 8012596:	b087      	sub	sp, #28
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125a8:	3304      	adds	r3, #4
 80125aa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	0a5b      	lsrs	r3, r3, #9
 80125b0:	68fa      	ldr	r2, [r7, #12]
 80125b2:	8952      	ldrh	r2, [r2, #10]
 80125b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80125b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80125ba:	693b      	ldr	r3, [r7, #16]
 80125bc:	1d1a      	adds	r2, r3, #4
 80125be:	613a      	str	r2, [r7, #16]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d101      	bne.n	80125ce <clmt_clust+0x3a>
 80125ca:	2300      	movs	r3, #0
 80125cc:	e010      	b.n	80125f0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80125ce:	697a      	ldr	r2, [r7, #20]
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d307      	bcc.n	80125e6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80125d6:	697a      	ldr	r2, [r7, #20]
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	1ad3      	subs	r3, r2, r3
 80125dc:	617b      	str	r3, [r7, #20]
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	3304      	adds	r3, #4
 80125e2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80125e4:	e7e9      	b.n	80125ba <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80125e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	681a      	ldr	r2, [r3, #0]
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	4413      	add	r3, r2
}
 80125f0:	4618      	mov	r0, r3
 80125f2:	371c      	adds	r7, #28
 80125f4:	46bd      	mov	sp, r7
 80125f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fa:	4770      	bx	lr

080125fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b086      	sub	sp, #24
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012612:	d204      	bcs.n	801261e <dir_sdi+0x22>
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	f003 031f 	and.w	r3, r3, #31
 801261a:	2b00      	cmp	r3, #0
 801261c:	d001      	beq.n	8012622 <dir_sdi+0x26>
		return FR_INT_ERR;
 801261e:	2302      	movs	r3, #2
 8012620:	e063      	b.n	80126ea <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	683a      	ldr	r2, [r7, #0]
 8012626:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	689b      	ldr	r3, [r3, #8]
 801262c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d106      	bne.n	8012642 <dir_sdi+0x46>
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	781b      	ldrb	r3, [r3, #0]
 8012638:	2b02      	cmp	r3, #2
 801263a:	d902      	bls.n	8012642 <dir_sdi+0x46>
		clst = fs->dirbase;
 801263c:	693b      	ldr	r3, [r7, #16]
 801263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012640:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d10c      	bne.n	8012662 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	095b      	lsrs	r3, r3, #5
 801264c:	693a      	ldr	r2, [r7, #16]
 801264e:	8912      	ldrh	r2, [r2, #8]
 8012650:	4293      	cmp	r3, r2
 8012652:	d301      	bcc.n	8012658 <dir_sdi+0x5c>
 8012654:	2302      	movs	r3, #2
 8012656:	e048      	b.n	80126ea <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012658:	693b      	ldr	r3, [r7, #16]
 801265a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	61da      	str	r2, [r3, #28]
 8012660:	e029      	b.n	80126b6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012662:	693b      	ldr	r3, [r7, #16]
 8012664:	895b      	ldrh	r3, [r3, #10]
 8012666:	025b      	lsls	r3, r3, #9
 8012668:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801266a:	e019      	b.n	80126a0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6979      	ldr	r1, [r7, #20]
 8012670:	4618      	mov	r0, r3
 8012672:	f7ff fd06 	bl	8012082 <get_fat>
 8012676:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801267e:	d101      	bne.n	8012684 <dir_sdi+0x88>
 8012680:	2301      	movs	r3, #1
 8012682:	e032      	b.n	80126ea <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	2b01      	cmp	r3, #1
 8012688:	d904      	bls.n	8012694 <dir_sdi+0x98>
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	699b      	ldr	r3, [r3, #24]
 801268e:	697a      	ldr	r2, [r7, #20]
 8012690:	429a      	cmp	r2, r3
 8012692:	d301      	bcc.n	8012698 <dir_sdi+0x9c>
 8012694:	2302      	movs	r3, #2
 8012696:	e028      	b.n	80126ea <dir_sdi+0xee>
			ofs -= csz;
 8012698:	683a      	ldr	r2, [r7, #0]
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	1ad3      	subs	r3, r2, r3
 801269e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80126a0:	683a      	ldr	r2, [r7, #0]
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d2e1      	bcs.n	801266c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80126a8:	6979      	ldr	r1, [r7, #20]
 80126aa:	6938      	ldr	r0, [r7, #16]
 80126ac:	f7ff fcca 	bl	8012044 <clust2sect>
 80126b0:	4602      	mov	r2, r0
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	697a      	ldr	r2, [r7, #20]
 80126ba:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	69db      	ldr	r3, [r3, #28]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d101      	bne.n	80126c8 <dir_sdi+0xcc>
 80126c4:	2302      	movs	r3, #2
 80126c6:	e010      	b.n	80126ea <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	69da      	ldr	r2, [r3, #28]
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	0a5b      	lsrs	r3, r3, #9
 80126d0:	441a      	add	r2, r3
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126e2:	441a      	add	r2, r3
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80126e8:	2300      	movs	r3, #0
}
 80126ea:	4618      	mov	r0, r3
 80126ec:	3718      	adds	r7, #24
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}

080126f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80126f2:	b580      	push	{r7, lr}
 80126f4:	b086      	sub	sp, #24
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	6078      	str	r0, [r7, #4]
 80126fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	695b      	ldr	r3, [r3, #20]
 8012706:	3320      	adds	r3, #32
 8012708:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	69db      	ldr	r3, [r3, #28]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d003      	beq.n	801271a <dir_next+0x28>
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012718:	d301      	bcc.n	801271e <dir_next+0x2c>
 801271a:	2304      	movs	r3, #4
 801271c:	e0aa      	b.n	8012874 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012724:	2b00      	cmp	r3, #0
 8012726:	f040 8098 	bne.w	801285a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	69db      	ldr	r3, [r3, #28]
 801272e:	1c5a      	adds	r2, r3, #1
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	699b      	ldr	r3, [r3, #24]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d10b      	bne.n	8012754 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801273c:	68bb      	ldr	r3, [r7, #8]
 801273e:	095b      	lsrs	r3, r3, #5
 8012740:	68fa      	ldr	r2, [r7, #12]
 8012742:	8912      	ldrh	r2, [r2, #8]
 8012744:	4293      	cmp	r3, r2
 8012746:	f0c0 8088 	bcc.w	801285a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2200      	movs	r2, #0
 801274e:	61da      	str	r2, [r3, #28]
 8012750:	2304      	movs	r3, #4
 8012752:	e08f      	b.n	8012874 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	0a5b      	lsrs	r3, r3, #9
 8012758:	68fa      	ldr	r2, [r7, #12]
 801275a:	8952      	ldrh	r2, [r2, #10]
 801275c:	3a01      	subs	r2, #1
 801275e:	4013      	ands	r3, r2
 8012760:	2b00      	cmp	r3, #0
 8012762:	d17a      	bne.n	801285a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012764:	687a      	ldr	r2, [r7, #4]
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	699b      	ldr	r3, [r3, #24]
 801276a:	4619      	mov	r1, r3
 801276c:	4610      	mov	r0, r2
 801276e:	f7ff fc88 	bl	8012082 <get_fat>
 8012772:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	2b01      	cmp	r3, #1
 8012778:	d801      	bhi.n	801277e <dir_next+0x8c>
 801277a:	2302      	movs	r3, #2
 801277c:	e07a      	b.n	8012874 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801277e:	697b      	ldr	r3, [r7, #20]
 8012780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012784:	d101      	bne.n	801278a <dir_next+0x98>
 8012786:	2301      	movs	r3, #1
 8012788:	e074      	b.n	8012874 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	699b      	ldr	r3, [r3, #24]
 801278e:	697a      	ldr	r2, [r7, #20]
 8012790:	429a      	cmp	r2, r3
 8012792:	d358      	bcc.n	8012846 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d104      	bne.n	80127a4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	2200      	movs	r2, #0
 801279e:	61da      	str	r2, [r3, #28]
 80127a0:	2304      	movs	r3, #4
 80127a2:	e067      	b.n	8012874 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80127a4:	687a      	ldr	r2, [r7, #4]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	699b      	ldr	r3, [r3, #24]
 80127aa:	4619      	mov	r1, r3
 80127ac:	4610      	mov	r0, r2
 80127ae:	f7ff fe59 	bl	8012464 <create_chain>
 80127b2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d101      	bne.n	80127be <dir_next+0xcc>
 80127ba:	2307      	movs	r3, #7
 80127bc:	e05a      	b.n	8012874 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	2b01      	cmp	r3, #1
 80127c2:	d101      	bne.n	80127c8 <dir_next+0xd6>
 80127c4:	2302      	movs	r3, #2
 80127c6:	e055      	b.n	8012874 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127ce:	d101      	bne.n	80127d4 <dir_next+0xe2>
 80127d0:	2301      	movs	r3, #1
 80127d2:	e04f      	b.n	8012874 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80127d4:	68f8      	ldr	r0, [r7, #12]
 80127d6:	f7ff fb55 	bl	8011e84 <sync_window>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d001      	beq.n	80127e4 <dir_next+0xf2>
 80127e0:	2301      	movs	r3, #1
 80127e2:	e047      	b.n	8012874 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	3334      	adds	r3, #52	; 0x34
 80127e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80127ec:	2100      	movs	r1, #0
 80127ee:	4618      	mov	r0, r3
 80127f0:	f7ff f94f 	bl	8011a92 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80127f4:	2300      	movs	r3, #0
 80127f6:	613b      	str	r3, [r7, #16]
 80127f8:	6979      	ldr	r1, [r7, #20]
 80127fa:	68f8      	ldr	r0, [r7, #12]
 80127fc:	f7ff fc22 	bl	8012044 <clust2sect>
 8012800:	4602      	mov	r2, r0
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	631a      	str	r2, [r3, #48]	; 0x30
 8012806:	e012      	b.n	801282e <dir_next+0x13c>
						fs->wflag = 1;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	2201      	movs	r2, #1
 801280c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801280e:	68f8      	ldr	r0, [r7, #12]
 8012810:	f7ff fb38 	bl	8011e84 <sync_window>
 8012814:	4603      	mov	r3, r0
 8012816:	2b00      	cmp	r3, #0
 8012818:	d001      	beq.n	801281e <dir_next+0x12c>
 801281a:	2301      	movs	r3, #1
 801281c:	e02a      	b.n	8012874 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801281e:	693b      	ldr	r3, [r7, #16]
 8012820:	3301      	adds	r3, #1
 8012822:	613b      	str	r3, [r7, #16]
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012828:	1c5a      	adds	r2, r3, #1
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	631a      	str	r2, [r3, #48]	; 0x30
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	895b      	ldrh	r3, [r3, #10]
 8012832:	461a      	mov	r2, r3
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	4293      	cmp	r3, r2
 8012838:	d3e6      	bcc.n	8012808 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	1ad2      	subs	r2, r2, r3
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	697a      	ldr	r2, [r7, #20]
 801284a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801284c:	6979      	ldr	r1, [r7, #20]
 801284e:	68f8      	ldr	r0, [r7, #12]
 8012850:	f7ff fbf8 	bl	8012044 <clust2sect>
 8012854:	4602      	mov	r2, r0
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	68ba      	ldr	r2, [r7, #8]
 801285e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012866:	68bb      	ldr	r3, [r7, #8]
 8012868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801286c:	441a      	add	r2, r3
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012872:	2300      	movs	r3, #0
}
 8012874:	4618      	mov	r0, r3
 8012876:	3718      	adds	r7, #24
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b086      	sub	sp, #24
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801288c:	2100      	movs	r1, #0
 801288e:	6878      	ldr	r0, [r7, #4]
 8012890:	f7ff feb4 	bl	80125fc <dir_sdi>
 8012894:	4603      	mov	r3, r0
 8012896:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012898:	7dfb      	ldrb	r3, [r7, #23]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d12b      	bne.n	80128f6 <dir_alloc+0x7a>
		n = 0;
 801289e:	2300      	movs	r3, #0
 80128a0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	69db      	ldr	r3, [r3, #28]
 80128a6:	4619      	mov	r1, r3
 80128a8:	68f8      	ldr	r0, [r7, #12]
 80128aa:	f7ff fb2f 	bl	8011f0c <move_window>
 80128ae:	4603      	mov	r3, r0
 80128b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80128b2:	7dfb      	ldrb	r3, [r7, #23]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d11d      	bne.n	80128f4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6a1b      	ldr	r3, [r3, #32]
 80128bc:	781b      	ldrb	r3, [r3, #0]
 80128be:	2be5      	cmp	r3, #229	; 0xe5
 80128c0:	d004      	beq.n	80128cc <dir_alloc+0x50>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6a1b      	ldr	r3, [r3, #32]
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d107      	bne.n	80128dc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	3301      	adds	r3, #1
 80128d0:	613b      	str	r3, [r7, #16]
 80128d2:	693a      	ldr	r2, [r7, #16]
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d102      	bne.n	80128e0 <dir_alloc+0x64>
 80128da:	e00c      	b.n	80128f6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80128dc:	2300      	movs	r3, #0
 80128de:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80128e0:	2101      	movs	r1, #1
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f7ff ff05 	bl	80126f2 <dir_next>
 80128e8:	4603      	mov	r3, r0
 80128ea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80128ec:	7dfb      	ldrb	r3, [r7, #23]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d0d7      	beq.n	80128a2 <dir_alloc+0x26>
 80128f2:	e000      	b.n	80128f6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80128f4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80128f6:	7dfb      	ldrb	r3, [r7, #23]
 80128f8:	2b04      	cmp	r3, #4
 80128fa:	d101      	bne.n	8012900 <dir_alloc+0x84>
 80128fc:	2307      	movs	r3, #7
 80128fe:	75fb      	strb	r3, [r7, #23]
	return res;
 8012900:	7dfb      	ldrb	r3, [r7, #23]
}
 8012902:	4618      	mov	r0, r3
 8012904:	3718      	adds	r7, #24
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}

0801290a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801290a:	b580      	push	{r7, lr}
 801290c:	b084      	sub	sp, #16
 801290e:	af00      	add	r7, sp, #0
 8012910:	6078      	str	r0, [r7, #4]
 8012912:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	331a      	adds	r3, #26
 8012918:	4618      	mov	r0, r3
 801291a:	f7ff f817 	bl	801194c <ld_word>
 801291e:	4603      	mov	r3, r0
 8012920:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	781b      	ldrb	r3, [r3, #0]
 8012926:	2b03      	cmp	r3, #3
 8012928:	d109      	bne.n	801293e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	3314      	adds	r3, #20
 801292e:	4618      	mov	r0, r3
 8012930:	f7ff f80c 	bl	801194c <ld_word>
 8012934:	4603      	mov	r3, r0
 8012936:	041b      	lsls	r3, r3, #16
 8012938:	68fa      	ldr	r2, [r7, #12]
 801293a:	4313      	orrs	r3, r2
 801293c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801293e:	68fb      	ldr	r3, [r7, #12]
}
 8012940:	4618      	mov	r0, r3
 8012942:	3710      	adds	r7, #16
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b084      	sub	sp, #16
 801294c:	af00      	add	r7, sp, #0
 801294e:	60f8      	str	r0, [r7, #12]
 8012950:	60b9      	str	r1, [r7, #8]
 8012952:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	331a      	adds	r3, #26
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	b292      	uxth	r2, r2
 801295c:	4611      	mov	r1, r2
 801295e:	4618      	mov	r0, r3
 8012960:	f7ff f82f 	bl	80119c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	2b03      	cmp	r3, #3
 801296a:	d109      	bne.n	8012980 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	f103 0214 	add.w	r2, r3, #20
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	0c1b      	lsrs	r3, r3, #16
 8012976:	b29b      	uxth	r3, r3
 8012978:	4619      	mov	r1, r3
 801297a:	4610      	mov	r0, r2
 801297c:	f7ff f821 	bl	80119c2 <st_word>
	}
}
 8012980:	bf00      	nop
 8012982:	3710      	adds	r7, #16
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}

08012988 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b086      	sub	sp, #24
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
 8012990:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012992:	2304      	movs	r3, #4
 8012994:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801299c:	e03c      	b.n	8012a18 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	69db      	ldr	r3, [r3, #28]
 80129a2:	4619      	mov	r1, r3
 80129a4:	6938      	ldr	r0, [r7, #16]
 80129a6:	f7ff fab1 	bl	8011f0c <move_window>
 80129aa:	4603      	mov	r3, r0
 80129ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80129ae:	7dfb      	ldrb	r3, [r7, #23]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d136      	bne.n	8012a22 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6a1b      	ldr	r3, [r3, #32]
 80129b8:	781b      	ldrb	r3, [r3, #0]
 80129ba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80129bc:	7bfb      	ldrb	r3, [r7, #15]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d102      	bne.n	80129c8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80129c2:	2304      	movs	r3, #4
 80129c4:	75fb      	strb	r3, [r7, #23]
 80129c6:	e031      	b.n	8012a2c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6a1b      	ldr	r3, [r3, #32]
 80129cc:	330b      	adds	r3, #11
 80129ce:	781b      	ldrb	r3, [r3, #0]
 80129d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80129d4:	73bb      	strb	r3, [r7, #14]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	7bba      	ldrb	r2, [r7, #14]
 80129da:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80129dc:	7bfb      	ldrb	r3, [r7, #15]
 80129de:	2be5      	cmp	r3, #229	; 0xe5
 80129e0:	d011      	beq.n	8012a06 <dir_read+0x7e>
 80129e2:	7bfb      	ldrb	r3, [r7, #15]
 80129e4:	2b2e      	cmp	r3, #46	; 0x2e
 80129e6:	d00e      	beq.n	8012a06 <dir_read+0x7e>
 80129e8:	7bbb      	ldrb	r3, [r7, #14]
 80129ea:	2b0f      	cmp	r3, #15
 80129ec:	d00b      	beq.n	8012a06 <dir_read+0x7e>
 80129ee:	7bbb      	ldrb	r3, [r7, #14]
 80129f0:	f023 0320 	bic.w	r3, r3, #32
 80129f4:	2b08      	cmp	r3, #8
 80129f6:	bf0c      	ite	eq
 80129f8:	2301      	moveq	r3, #1
 80129fa:	2300      	movne	r3, #0
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	461a      	mov	r2, r3
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	4293      	cmp	r3, r2
 8012a04:	d00f      	beq.n	8012a26 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012a06:	2100      	movs	r1, #0
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f7ff fe72 	bl	80126f2 <dir_next>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012a12:	7dfb      	ldrb	r3, [r7, #23]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d108      	bne.n	8012a2a <dir_read+0xa2>
	while (dp->sect) {
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	69db      	ldr	r3, [r3, #28]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d1be      	bne.n	801299e <dir_read+0x16>
 8012a20:	e004      	b.n	8012a2c <dir_read+0xa4>
		if (res != FR_OK) break;
 8012a22:	bf00      	nop
 8012a24:	e002      	b.n	8012a2c <dir_read+0xa4>
				break;
 8012a26:	bf00      	nop
 8012a28:	e000      	b.n	8012a2c <dir_read+0xa4>
		if (res != FR_OK) break;
 8012a2a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012a2c:	7dfb      	ldrb	r3, [r7, #23]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d002      	beq.n	8012a38 <dir_read+0xb0>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2200      	movs	r2, #0
 8012a36:	61da      	str	r2, [r3, #28]
	return res;
 8012a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3718      	adds	r7, #24
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}

08012a42 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012a42:	b580      	push	{r7, lr}
 8012a44:	b086      	sub	sp, #24
 8012a46:	af00      	add	r7, sp, #0
 8012a48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012a50:	2100      	movs	r1, #0
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f7ff fdd2 	bl	80125fc <dir_sdi>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012a5c:	7dfb      	ldrb	r3, [r7, #23]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d001      	beq.n	8012a66 <dir_find+0x24>
 8012a62:	7dfb      	ldrb	r3, [r7, #23]
 8012a64:	e03e      	b.n	8012ae4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	69db      	ldr	r3, [r3, #28]
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	6938      	ldr	r0, [r7, #16]
 8012a6e:	f7ff fa4d 	bl	8011f0c <move_window>
 8012a72:	4603      	mov	r3, r0
 8012a74:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012a76:	7dfb      	ldrb	r3, [r7, #23]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d12f      	bne.n	8012adc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6a1b      	ldr	r3, [r3, #32]
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012a84:	7bfb      	ldrb	r3, [r7, #15]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d102      	bne.n	8012a90 <dir_find+0x4e>
 8012a8a:	2304      	movs	r3, #4
 8012a8c:	75fb      	strb	r3, [r7, #23]
 8012a8e:	e028      	b.n	8012ae2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6a1b      	ldr	r3, [r3, #32]
 8012a94:	330b      	adds	r3, #11
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a9c:	b2da      	uxtb	r2, r3
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	6a1b      	ldr	r3, [r3, #32]
 8012aa6:	330b      	adds	r3, #11
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	f003 0308 	and.w	r3, r3, #8
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d10a      	bne.n	8012ac8 <dir_find+0x86>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6a18      	ldr	r0, [r3, #32]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	3324      	adds	r3, #36	; 0x24
 8012aba:	220b      	movs	r2, #11
 8012abc:	4619      	mov	r1, r3
 8012abe:	f7ff f802 	bl	8011ac6 <mem_cmp>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d00b      	beq.n	8012ae0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012ac8:	2100      	movs	r1, #0
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f7ff fe11 	bl	80126f2 <dir_next>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012ad4:	7dfb      	ldrb	r3, [r7, #23]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d0c5      	beq.n	8012a66 <dir_find+0x24>
 8012ada:	e002      	b.n	8012ae2 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012adc:	bf00      	nop
 8012ade:	e000      	b.n	8012ae2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012ae0:	bf00      	nop

	return res;
 8012ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3718      	adds	r7, #24
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}

08012aec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b084      	sub	sp, #16
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012afa:	2101      	movs	r1, #1
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f7ff febd 	bl	801287c <dir_alloc>
 8012b02:	4603      	mov	r3, r0
 8012b04:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012b06:	7bfb      	ldrb	r3, [r7, #15]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d11c      	bne.n	8012b46 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	69db      	ldr	r3, [r3, #28]
 8012b10:	4619      	mov	r1, r3
 8012b12:	68b8      	ldr	r0, [r7, #8]
 8012b14:	f7ff f9fa 	bl	8011f0c <move_window>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012b1c:	7bfb      	ldrb	r3, [r7, #15]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d111      	bne.n	8012b46 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	6a1b      	ldr	r3, [r3, #32]
 8012b26:	2220      	movs	r2, #32
 8012b28:	2100      	movs	r1, #0
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7fe ffb1 	bl	8011a92 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	6a18      	ldr	r0, [r3, #32]
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	3324      	adds	r3, #36	; 0x24
 8012b38:	220b      	movs	r2, #11
 8012b3a:	4619      	mov	r1, r3
 8012b3c:	f7fe ff88 	bl	8011a50 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	2201      	movs	r2, #1
 8012b44:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3710      	adds	r7, #16
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b086      	sub	sp, #24
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012b5a:	683b      	ldr	r3, [r7, #0]
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	69db      	ldr	r3, [r3, #28]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d04e      	beq.n	8012c06 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	613b      	str	r3, [r7, #16]
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8012b70:	e021      	b.n	8012bb6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6a1a      	ldr	r2, [r3, #32]
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	1c59      	adds	r1, r3, #1
 8012b7a:	6179      	str	r1, [r7, #20]
 8012b7c:	4413      	add	r3, r2
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012b82:	7bfb      	ldrb	r3, [r7, #15]
 8012b84:	2b20      	cmp	r3, #32
 8012b86:	d100      	bne.n	8012b8a <get_fileinfo+0x3a>
 8012b88:	e015      	b.n	8012bb6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012b8a:	7bfb      	ldrb	r3, [r7, #15]
 8012b8c:	2b05      	cmp	r3, #5
 8012b8e:	d101      	bne.n	8012b94 <get_fileinfo+0x44>
 8012b90:	23e5      	movs	r3, #229	; 0xe5
 8012b92:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	2b09      	cmp	r3, #9
 8012b98:	d106      	bne.n	8012ba8 <get_fileinfo+0x58>
 8012b9a:	693b      	ldr	r3, [r7, #16]
 8012b9c:	1c5a      	adds	r2, r3, #1
 8012b9e:	613a      	str	r2, [r7, #16]
 8012ba0:	683a      	ldr	r2, [r7, #0]
 8012ba2:	4413      	add	r3, r2
 8012ba4:	222e      	movs	r2, #46	; 0x2e
 8012ba6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	1c5a      	adds	r2, r3, #1
 8012bac:	613a      	str	r2, [r7, #16]
 8012bae:	683a      	ldr	r2, [r7, #0]
 8012bb0:	4413      	add	r3, r2
 8012bb2:	7bfa      	ldrb	r2, [r7, #15]
 8012bb4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8012bb6:	697b      	ldr	r3, [r7, #20]
 8012bb8:	2b0a      	cmp	r3, #10
 8012bba:	d9da      	bls.n	8012b72 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8012bbc:	683a      	ldr	r2, [r7, #0]
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	4413      	add	r3, r2
 8012bc2:	3309      	adds	r3, #9
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	6a1b      	ldr	r3, [r3, #32]
 8012bcc:	7ada      	ldrb	r2, [r3, #11]
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	6a1b      	ldr	r3, [r3, #32]
 8012bd6:	331c      	adds	r3, #28
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7fe fecf 	bl	801197c <ld_dword>
 8012bde:	4602      	mov	r2, r0
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6a1b      	ldr	r3, [r3, #32]
 8012be8:	3316      	adds	r3, #22
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7fe fec6 	bl	801197c <ld_dword>
 8012bf0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	b29a      	uxth	r2, r3
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	80da      	strh	r2, [r3, #6]
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	0c1b      	lsrs	r3, r3, #16
 8012bfe:	b29a      	uxth	r2, r3
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	809a      	strh	r2, [r3, #4]
 8012c04:	e000      	b.n	8012c08 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012c06:	bf00      	nop
}
 8012c08:	3718      	adds	r7, #24
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}
	...

08012c10 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b085      	sub	sp, #20
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	1c59      	adds	r1, r3, #1
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	6011      	str	r1, [r2, #0]
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012c26:	89fb      	ldrh	r3, [r7, #14]
 8012c28:	2b60      	cmp	r3, #96	; 0x60
 8012c2a:	d905      	bls.n	8012c38 <get_achar+0x28>
 8012c2c:	89fb      	ldrh	r3, [r7, #14]
 8012c2e:	2b7a      	cmp	r3, #122	; 0x7a
 8012c30:	d802      	bhi.n	8012c38 <get_achar+0x28>
 8012c32:	89fb      	ldrh	r3, [r7, #14]
 8012c34:	3b20      	subs	r3, #32
 8012c36:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8012c38:	89fb      	ldrh	r3, [r7, #14]
 8012c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8012c3c:	d904      	bls.n	8012c48 <get_achar+0x38>
 8012c3e:	89fb      	ldrh	r3, [r7, #14]
 8012c40:	3b80      	subs	r3, #128	; 0x80
 8012c42:	4a05      	ldr	r2, [pc, #20]	; (8012c58 <get_achar+0x48>)
 8012c44:	5cd3      	ldrb	r3, [r2, r3]
 8012c46:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8012c48:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3714      	adds	r7, #20
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c54:	4770      	bx	lr
 8012c56:	bf00      	nop
 8012c58:	0801c3d4 	.word	0x0801c3d4

08012c5c <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b08a      	sub	sp, #40	; 0x28
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	607a      	str	r2, [r7, #4]
 8012c68:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8012c6a:	e009      	b.n	8012c80 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8012c6c:	f107 0308 	add.w	r3, r7, #8
 8012c70:	4618      	mov	r0, r3
 8012c72:	f7ff ffcd 	bl	8012c10 <get_achar>
 8012c76:	4603      	mov	r3, r0
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d101      	bne.n	8012c80 <pattern_matching+0x24>
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	e064      	b.n	8012d4a <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	1e5a      	subs	r2, r3, #1
 8012c84:	607a      	str	r2, [r7, #4]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d1f0      	bne.n	8012c6c <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	781b      	ldrb	r3, [r3, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d104      	bne.n	8012c9c <pattern_matching+0x40>
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d001      	beq.n	8012c9c <pattern_matching+0x40>
 8012c98:	2301      	movs	r3, #1
 8012c9a:	e056      	b.n	8012d4a <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	617b      	str	r3, [r7, #20]
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	781b      	ldrb	r3, [r3, #0]
 8012ca8:	2b3f      	cmp	r3, #63	; 0x3f
 8012caa:	d003      	beq.n	8012cb4 <pattern_matching+0x58>
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8012cb2:	d126      	bne.n	8012d02 <pattern_matching+0xa6>
				nm = nx = 0;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	61fb      	str	r3, [r7, #28]
 8012cb8:	69fb      	ldr	r3, [r7, #28]
 8012cba:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	1c5a      	adds	r2, r3, #1
 8012cc0:	617a      	str	r2, [r7, #20]
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	2b3f      	cmp	r3, #63	; 0x3f
 8012cc6:	d103      	bne.n	8012cd0 <pattern_matching+0x74>
 8012cc8:	6a3b      	ldr	r3, [r7, #32]
 8012cca:	3301      	adds	r3, #1
 8012ccc:	623b      	str	r3, [r7, #32]
 8012cce:	e001      	b.n	8012cd4 <pattern_matching+0x78>
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	2b3f      	cmp	r3, #63	; 0x3f
 8012cda:	d0ef      	beq.n	8012cbc <pattern_matching+0x60>
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8012ce2:	d0eb      	beq.n	8012cbc <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8012ce4:	6978      	ldr	r0, [r7, #20]
 8012ce6:	6939      	ldr	r1, [r7, #16]
 8012ce8:	69fb      	ldr	r3, [r7, #28]
 8012cea:	6a3a      	ldr	r2, [r7, #32]
 8012cec:	f7ff ffb6 	bl	8012c5c <pattern_matching>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d001      	beq.n	8012cfa <pattern_matching+0x9e>
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	e027      	b.n	8012d4a <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8012cfa:	693b      	ldr	r3, [r7, #16]
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012d00:	e017      	b.n	8012d32 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8012d02:	f107 0314 	add.w	r3, r7, #20
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7ff ff82 	bl	8012c10 <get_achar>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8012d10:	f107 0310 	add.w	r3, r7, #16
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7ff ff7b 	bl	8012c10 <get_achar>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8012d1e:	8b7a      	ldrh	r2, [r7, #26]
 8012d20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d104      	bne.n	8012d30 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8012d26:	8b7b      	ldrh	r3, [r7, #26]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d1bb      	bne.n	8012ca4 <pattern_matching+0x48>
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	e00c      	b.n	8012d4a <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8012d30:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8012d32:	f107 0308 	add.w	r3, r7, #8
 8012d36:	4618      	mov	r0, r3
 8012d38:	f7ff ff6a 	bl	8012c10 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d002      	beq.n	8012d48 <pattern_matching+0xec>
 8012d42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d1a9      	bne.n	8012c9c <pattern_matching+0x40>

	return 0;
 8012d48:	2300      	movs	r3, #0
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3728      	adds	r7, #40	; 0x28
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
	...

08012d54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b088      	sub	sp, #32
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
 8012d5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	60fb      	str	r3, [r7, #12]
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	3324      	adds	r3, #36	; 0x24
 8012d68:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012d6a:	220b      	movs	r2, #11
 8012d6c:	2120      	movs	r1, #32
 8012d6e:	68b8      	ldr	r0, [r7, #8]
 8012d70:	f7fe fe8f 	bl	8011a92 <mem_set>
	si = i = 0; ni = 8;
 8012d74:	2300      	movs	r3, #0
 8012d76:	613b      	str	r3, [r7, #16]
 8012d78:	693b      	ldr	r3, [r7, #16]
 8012d7a:	617b      	str	r3, [r7, #20]
 8012d7c:	2308      	movs	r3, #8
 8012d7e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	1c5a      	adds	r2, r3, #1
 8012d84:	617a      	str	r2, [r7, #20]
 8012d86:	68fa      	ldr	r2, [r7, #12]
 8012d88:	4413      	add	r3, r2
 8012d8a:	781b      	ldrb	r3, [r3, #0]
 8012d8c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012d8e:	7ffb      	ldrb	r3, [r7, #31]
 8012d90:	2b20      	cmp	r3, #32
 8012d92:	d94e      	bls.n	8012e32 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012d94:	7ffb      	ldrb	r3, [r7, #31]
 8012d96:	2b2f      	cmp	r3, #47	; 0x2f
 8012d98:	d006      	beq.n	8012da8 <create_name+0x54>
 8012d9a:	7ffb      	ldrb	r3, [r7, #31]
 8012d9c:	2b5c      	cmp	r3, #92	; 0x5c
 8012d9e:	d110      	bne.n	8012dc2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012da0:	e002      	b.n	8012da8 <create_name+0x54>
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	3301      	adds	r3, #1
 8012da6:	617b      	str	r3, [r7, #20]
 8012da8:	68fa      	ldr	r2, [r7, #12]
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	4413      	add	r3, r2
 8012dae:	781b      	ldrb	r3, [r3, #0]
 8012db0:	2b2f      	cmp	r3, #47	; 0x2f
 8012db2:	d0f6      	beq.n	8012da2 <create_name+0x4e>
 8012db4:	68fa      	ldr	r2, [r7, #12]
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	4413      	add	r3, r2
 8012dba:	781b      	ldrb	r3, [r3, #0]
 8012dbc:	2b5c      	cmp	r3, #92	; 0x5c
 8012dbe:	d0f0      	beq.n	8012da2 <create_name+0x4e>
			break;
 8012dc0:	e038      	b.n	8012e34 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012dc2:	7ffb      	ldrb	r3, [r7, #31]
 8012dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8012dc6:	d003      	beq.n	8012dd0 <create_name+0x7c>
 8012dc8:	693a      	ldr	r2, [r7, #16]
 8012dca:	69bb      	ldr	r3, [r7, #24]
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d30c      	bcc.n	8012dea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012dd0:	69bb      	ldr	r3, [r7, #24]
 8012dd2:	2b0b      	cmp	r3, #11
 8012dd4:	d002      	beq.n	8012ddc <create_name+0x88>
 8012dd6:	7ffb      	ldrb	r3, [r7, #31]
 8012dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8012dda:	d001      	beq.n	8012de0 <create_name+0x8c>
 8012ddc:	2306      	movs	r3, #6
 8012dde:	e044      	b.n	8012e6a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012de0:	2308      	movs	r3, #8
 8012de2:	613b      	str	r3, [r7, #16]
 8012de4:	230b      	movs	r3, #11
 8012de6:	61bb      	str	r3, [r7, #24]
			continue;
 8012de8:	e022      	b.n	8012e30 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012dea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	da04      	bge.n	8012dfc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012df2:	7ffb      	ldrb	r3, [r7, #31]
 8012df4:	3b80      	subs	r3, #128	; 0x80
 8012df6:	4a1f      	ldr	r2, [pc, #124]	; (8012e74 <create_name+0x120>)
 8012df8:	5cd3      	ldrb	r3, [r2, r3]
 8012dfa:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012dfc:	7ffb      	ldrb	r3, [r7, #31]
 8012dfe:	4619      	mov	r1, r3
 8012e00:	481d      	ldr	r0, [pc, #116]	; (8012e78 <create_name+0x124>)
 8012e02:	f7fe fe87 	bl	8011b14 <chk_chr>
 8012e06:	4603      	mov	r3, r0
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d001      	beq.n	8012e10 <create_name+0xbc>
 8012e0c:	2306      	movs	r3, #6
 8012e0e:	e02c      	b.n	8012e6a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012e10:	7ffb      	ldrb	r3, [r7, #31]
 8012e12:	2b60      	cmp	r3, #96	; 0x60
 8012e14:	d905      	bls.n	8012e22 <create_name+0xce>
 8012e16:	7ffb      	ldrb	r3, [r7, #31]
 8012e18:	2b7a      	cmp	r3, #122	; 0x7a
 8012e1a:	d802      	bhi.n	8012e22 <create_name+0xce>
 8012e1c:	7ffb      	ldrb	r3, [r7, #31]
 8012e1e:	3b20      	subs	r3, #32
 8012e20:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	1c5a      	adds	r2, r3, #1
 8012e26:	613a      	str	r2, [r7, #16]
 8012e28:	68ba      	ldr	r2, [r7, #8]
 8012e2a:	4413      	add	r3, r2
 8012e2c:	7ffa      	ldrb	r2, [r7, #31]
 8012e2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012e30:	e7a6      	b.n	8012d80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012e32:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012e34:	68fa      	ldr	r2, [r7, #12]
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	441a      	add	r2, r3
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d101      	bne.n	8012e48 <create_name+0xf4>
 8012e44:	2306      	movs	r3, #6
 8012e46:	e010      	b.n	8012e6a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	2be5      	cmp	r3, #229	; 0xe5
 8012e4e:	d102      	bne.n	8012e56 <create_name+0x102>
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	2205      	movs	r2, #5
 8012e54:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012e56:	7ffb      	ldrb	r3, [r7, #31]
 8012e58:	2b20      	cmp	r3, #32
 8012e5a:	d801      	bhi.n	8012e60 <create_name+0x10c>
 8012e5c:	2204      	movs	r2, #4
 8012e5e:	e000      	b.n	8012e62 <create_name+0x10e>
 8012e60:	2200      	movs	r2, #0
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	330b      	adds	r3, #11
 8012e66:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012e68:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3720      	adds	r7, #32
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	0801c3d4 	.word	0x0801c3d4
 8012e78:	0801c1b8 	.word	0x0801c1b8

08012e7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b086      	sub	sp, #24
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
 8012e84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012e90:	e002      	b.n	8012e98 <follow_path+0x1c>
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	3301      	adds	r3, #1
 8012e96:	603b      	str	r3, [r7, #0]
 8012e98:	683b      	ldr	r3, [r7, #0]
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	2b2f      	cmp	r3, #47	; 0x2f
 8012e9e:	d0f8      	beq.n	8012e92 <follow_path+0x16>
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	2b5c      	cmp	r3, #92	; 0x5c
 8012ea6:	d0f4      	beq.n	8012e92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012ea8:	693b      	ldr	r3, [r7, #16]
 8012eaa:	2200      	movs	r2, #0
 8012eac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	2b1f      	cmp	r3, #31
 8012eb4:	d80a      	bhi.n	8012ecc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2280      	movs	r2, #128	; 0x80
 8012eba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012ebe:	2100      	movs	r1, #0
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f7ff fb9b 	bl	80125fc <dir_sdi>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	75fb      	strb	r3, [r7, #23]
 8012eca:	e043      	b.n	8012f54 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012ecc:	463b      	mov	r3, r7
 8012ece:	4619      	mov	r1, r3
 8012ed0:	6878      	ldr	r0, [r7, #4]
 8012ed2:	f7ff ff3f 	bl	8012d54 <create_name>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012eda:	7dfb      	ldrb	r3, [r7, #23]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d134      	bne.n	8012f4a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f7ff fdae 	bl	8012a42 <dir_find>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012ef0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012ef2:	7dfb      	ldrb	r3, [r7, #23]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d00a      	beq.n	8012f0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012ef8:	7dfb      	ldrb	r3, [r7, #23]
 8012efa:	2b04      	cmp	r3, #4
 8012efc:	d127      	bne.n	8012f4e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012efe:	7afb      	ldrb	r3, [r7, #11]
 8012f00:	f003 0304 	and.w	r3, r3, #4
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d122      	bne.n	8012f4e <follow_path+0xd2>
 8012f08:	2305      	movs	r3, #5
 8012f0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012f0c:	e01f      	b.n	8012f4e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012f0e:	7afb      	ldrb	r3, [r7, #11]
 8012f10:	f003 0304 	and.w	r3, r3, #4
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d11c      	bne.n	8012f52 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	799b      	ldrb	r3, [r3, #6]
 8012f1c:	f003 0310 	and.w	r3, r3, #16
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d102      	bne.n	8012f2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012f24:	2305      	movs	r3, #5
 8012f26:	75fb      	strb	r3, [r7, #23]
 8012f28:	e014      	b.n	8012f54 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	695b      	ldr	r3, [r3, #20]
 8012f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f38:	4413      	add	r3, r2
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	68f8      	ldr	r0, [r7, #12]
 8012f3e:	f7ff fce4 	bl	801290a <ld_clust>
 8012f42:	4602      	mov	r2, r0
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012f48:	e7c0      	b.n	8012ecc <follow_path+0x50>
			if (res != FR_OK) break;
 8012f4a:	bf00      	nop
 8012f4c:	e002      	b.n	8012f54 <follow_path+0xd8>
				break;
 8012f4e:	bf00      	nop
 8012f50:	e000      	b.n	8012f54 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012f52:	bf00      	nop
			}
		}
	}

	return res;
 8012f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f56:	4618      	mov	r0, r3
 8012f58:	3718      	adds	r7, #24
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bd80      	pop	{r7, pc}

08012f5e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012f5e:	b480      	push	{r7}
 8012f60:	b087      	sub	sp, #28
 8012f62:	af00      	add	r7, sp, #0
 8012f64:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012f66:	f04f 33ff 	mov.w	r3, #4294967295
 8012f6a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d031      	beq.n	8012fd8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	617b      	str	r3, [r7, #20]
 8012f7a:	e002      	b.n	8012f82 <get_ldnumber+0x24>
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	3301      	adds	r3, #1
 8012f80:	617b      	str	r3, [r7, #20]
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	2b20      	cmp	r3, #32
 8012f88:	d903      	bls.n	8012f92 <get_ldnumber+0x34>
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	781b      	ldrb	r3, [r3, #0]
 8012f8e:	2b3a      	cmp	r3, #58	; 0x3a
 8012f90:	d1f4      	bne.n	8012f7c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	2b3a      	cmp	r3, #58	; 0x3a
 8012f98:	d11c      	bne.n	8012fd4 <get_ldnumber+0x76>
			tp = *path;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	1c5a      	adds	r2, r3, #1
 8012fa4:	60fa      	str	r2, [r7, #12]
 8012fa6:	781b      	ldrb	r3, [r3, #0]
 8012fa8:	3b30      	subs	r3, #48	; 0x30
 8012faa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	2b09      	cmp	r3, #9
 8012fb0:	d80e      	bhi.n	8012fd0 <get_ldnumber+0x72>
 8012fb2:	68fa      	ldr	r2, [r7, #12]
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d10a      	bne.n	8012fd0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d107      	bne.n	8012fd0 <get_ldnumber+0x72>
					vol = (int)i;
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	3301      	adds	r3, #1
 8012fc8:	617b      	str	r3, [r7, #20]
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	697a      	ldr	r2, [r7, #20]
 8012fce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	e002      	b.n	8012fda <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012fd8:	693b      	ldr	r3, [r7, #16]
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	371c      	adds	r7, #28
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe4:	4770      	bx	lr
	...

08012fe8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
 8012ff0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	70da      	strb	r2, [r3, #3]
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8012ffe:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013000:	6839      	ldr	r1, [r7, #0]
 8013002:	6878      	ldr	r0, [r7, #4]
 8013004:	f7fe ff82 	bl	8011f0c <move_window>
 8013008:	4603      	mov	r3, r0
 801300a:	2b00      	cmp	r3, #0
 801300c:	d001      	beq.n	8013012 <check_fs+0x2a>
 801300e:	2304      	movs	r3, #4
 8013010:	e038      	b.n	8013084 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	3334      	adds	r3, #52	; 0x34
 8013016:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801301a:	4618      	mov	r0, r3
 801301c:	f7fe fc96 	bl	801194c <ld_word>
 8013020:	4603      	mov	r3, r0
 8013022:	461a      	mov	r2, r3
 8013024:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013028:	429a      	cmp	r2, r3
 801302a:	d001      	beq.n	8013030 <check_fs+0x48>
 801302c:	2303      	movs	r3, #3
 801302e:	e029      	b.n	8013084 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013036:	2be9      	cmp	r3, #233	; 0xe9
 8013038:	d009      	beq.n	801304e <check_fs+0x66>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013040:	2beb      	cmp	r3, #235	; 0xeb
 8013042:	d11e      	bne.n	8013082 <check_fs+0x9a>
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801304a:	2b90      	cmp	r3, #144	; 0x90
 801304c:	d119      	bne.n	8013082 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	3334      	adds	r3, #52	; 0x34
 8013052:	3336      	adds	r3, #54	; 0x36
 8013054:	4618      	mov	r0, r3
 8013056:	f7fe fc91 	bl	801197c <ld_dword>
 801305a:	4603      	mov	r3, r0
 801305c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013060:	4a0a      	ldr	r2, [pc, #40]	; (801308c <check_fs+0xa4>)
 8013062:	4293      	cmp	r3, r2
 8013064:	d101      	bne.n	801306a <check_fs+0x82>
 8013066:	2300      	movs	r3, #0
 8013068:	e00c      	b.n	8013084 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	3334      	adds	r3, #52	; 0x34
 801306e:	3352      	adds	r3, #82	; 0x52
 8013070:	4618      	mov	r0, r3
 8013072:	f7fe fc83 	bl	801197c <ld_dword>
 8013076:	4602      	mov	r2, r0
 8013078:	4b05      	ldr	r3, [pc, #20]	; (8013090 <check_fs+0xa8>)
 801307a:	429a      	cmp	r2, r3
 801307c:	d101      	bne.n	8013082 <check_fs+0x9a>
 801307e:	2300      	movs	r3, #0
 8013080:	e000      	b.n	8013084 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013082:	2302      	movs	r3, #2
}
 8013084:	4618      	mov	r0, r3
 8013086:	3708      	adds	r7, #8
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}
 801308c:	00544146 	.word	0x00544146
 8013090:	33544146 	.word	0x33544146

08013094 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b096      	sub	sp, #88	; 0x58
 8013098:	af00      	add	r7, sp, #0
 801309a:	60f8      	str	r0, [r7, #12]
 801309c:	60b9      	str	r1, [r7, #8]
 801309e:	4613      	mov	r3, r2
 80130a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80130a2:	68bb      	ldr	r3, [r7, #8]
 80130a4:	2200      	movs	r2, #0
 80130a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80130a8:	68f8      	ldr	r0, [r7, #12]
 80130aa:	f7ff ff58 	bl	8012f5e <get_ldnumber>
 80130ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80130b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	da01      	bge.n	80130ba <find_volume+0x26>
 80130b6:	230b      	movs	r3, #11
 80130b8:	e236      	b.n	8013528 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80130ba:	4aac      	ldr	r2, [pc, #688]	; (801336c <find_volume+0x2d8>)
 80130bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80130c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d101      	bne.n	80130ce <find_volume+0x3a>
 80130ca:	230c      	movs	r3, #12
 80130cc:	e22c      	b.n	8013528 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80130ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80130d0:	f7fe fd3b 	bl	8011b4a <lock_fs>
 80130d4:	4603      	mov	r3, r0
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d101      	bne.n	80130de <find_volume+0x4a>
 80130da:	230f      	movs	r3, #15
 80130dc:	e224      	b.n	8013528 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80130e4:	79fb      	ldrb	r3, [r7, #7]
 80130e6:	f023 0301 	bic.w	r3, r3, #1
 80130ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80130ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ee:	781b      	ldrb	r3, [r3, #0]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d01a      	beq.n	801312a <find_volume+0x96>
		stat = disk_status(fs->drv);
 80130f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f6:	785b      	ldrb	r3, [r3, #1]
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7fe fb89 	bl	8011810 <disk_status>
 80130fe:	4603      	mov	r3, r0
 8013100:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013104:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013108:	f003 0301 	and.w	r3, r3, #1
 801310c:	2b00      	cmp	r3, #0
 801310e:	d10c      	bne.n	801312a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013110:	79fb      	ldrb	r3, [r7, #7]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d007      	beq.n	8013126 <find_volume+0x92>
 8013116:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801311a:	f003 0304 	and.w	r3, r3, #4
 801311e:	2b00      	cmp	r3, #0
 8013120:	d001      	beq.n	8013126 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8013122:	230a      	movs	r3, #10
 8013124:	e200      	b.n	8013528 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8013126:	2300      	movs	r3, #0
 8013128:	e1fe      	b.n	8013528 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801312a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801312c:	2200      	movs	r2, #0
 801312e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013132:	b2da      	uxtb	r2, r3
 8013134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013136:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801313a:	785b      	ldrb	r3, [r3, #1]
 801313c:	4618      	mov	r0, r3
 801313e:	f7fe fb81 	bl	8011844 <disk_initialize>
 8013142:	4603      	mov	r3, r0
 8013144:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013148:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801314c:	f003 0301 	and.w	r3, r3, #1
 8013150:	2b00      	cmp	r3, #0
 8013152:	d001      	beq.n	8013158 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013154:	2303      	movs	r3, #3
 8013156:	e1e7      	b.n	8013528 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013158:	79fb      	ldrb	r3, [r7, #7]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d007      	beq.n	801316e <find_volume+0xda>
 801315e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013162:	f003 0304 	and.w	r3, r3, #4
 8013166:	2b00      	cmp	r3, #0
 8013168:	d001      	beq.n	801316e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801316a:	230a      	movs	r3, #10
 801316c:	e1dc      	b.n	8013528 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801316e:	2300      	movs	r3, #0
 8013170:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013172:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013174:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013176:	f7ff ff37 	bl	8012fe8 <check_fs>
 801317a:	4603      	mov	r3, r0
 801317c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013180:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013184:	2b02      	cmp	r3, #2
 8013186:	d14b      	bne.n	8013220 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013188:	2300      	movs	r3, #0
 801318a:	643b      	str	r3, [r7, #64]	; 0x40
 801318c:	e01f      	b.n	80131ce <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013190:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013196:	011b      	lsls	r3, r3, #4
 8013198:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801319c:	4413      	add	r3, r2
 801319e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80131a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131a2:	3304      	adds	r3, #4
 80131a4:	781b      	ldrb	r3, [r3, #0]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d006      	beq.n	80131b8 <find_volume+0x124>
 80131aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ac:	3308      	adds	r3, #8
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7fe fbe4 	bl	801197c <ld_dword>
 80131b4:	4602      	mov	r2, r0
 80131b6:	e000      	b.n	80131ba <find_volume+0x126>
 80131b8:	2200      	movs	r2, #0
 80131ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131bc:	009b      	lsls	r3, r3, #2
 80131be:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80131c2:	440b      	add	r3, r1
 80131c4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80131c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131ca:	3301      	adds	r3, #1
 80131cc:	643b      	str	r3, [r7, #64]	; 0x40
 80131ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131d0:	2b03      	cmp	r3, #3
 80131d2:	d9dc      	bls.n	801318e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80131d4:	2300      	movs	r3, #0
 80131d6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80131d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d002      	beq.n	80131e4 <find_volume+0x150>
 80131de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131e0:	3b01      	subs	r3, #1
 80131e2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80131e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131e6:	009b      	lsls	r3, r3, #2
 80131e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80131ec:	4413      	add	r3, r2
 80131ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80131f2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80131f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d005      	beq.n	8013206 <find_volume+0x172>
 80131fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80131fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80131fe:	f7ff fef3 	bl	8012fe8 <check_fs>
 8013202:	4603      	mov	r3, r0
 8013204:	e000      	b.n	8013208 <find_volume+0x174>
 8013206:	2303      	movs	r3, #3
 8013208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801320c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013210:	2b01      	cmp	r3, #1
 8013212:	d905      	bls.n	8013220 <find_volume+0x18c>
 8013214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013216:	3301      	adds	r3, #1
 8013218:	643b      	str	r3, [r7, #64]	; 0x40
 801321a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801321c:	2b03      	cmp	r3, #3
 801321e:	d9e1      	bls.n	80131e4 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013220:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013224:	2b04      	cmp	r3, #4
 8013226:	d101      	bne.n	801322c <find_volume+0x198>
 8013228:	2301      	movs	r3, #1
 801322a:	e17d      	b.n	8013528 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801322c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013230:	2b01      	cmp	r3, #1
 8013232:	d901      	bls.n	8013238 <find_volume+0x1a4>
 8013234:	230d      	movs	r3, #13
 8013236:	e177      	b.n	8013528 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323a:	3334      	adds	r3, #52	; 0x34
 801323c:	330b      	adds	r3, #11
 801323e:	4618      	mov	r0, r3
 8013240:	f7fe fb84 	bl	801194c <ld_word>
 8013244:	4603      	mov	r3, r0
 8013246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801324a:	d001      	beq.n	8013250 <find_volume+0x1bc>
 801324c:	230d      	movs	r3, #13
 801324e:	e16b      	b.n	8013528 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013252:	3334      	adds	r3, #52	; 0x34
 8013254:	3316      	adds	r3, #22
 8013256:	4618      	mov	r0, r3
 8013258:	f7fe fb78 	bl	801194c <ld_word>
 801325c:	4603      	mov	r3, r0
 801325e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013262:	2b00      	cmp	r3, #0
 8013264:	d106      	bne.n	8013274 <find_volume+0x1e0>
 8013266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013268:	3334      	adds	r3, #52	; 0x34
 801326a:	3324      	adds	r3, #36	; 0x24
 801326c:	4618      	mov	r0, r3
 801326e:	f7fe fb85 	bl	801197c <ld_dword>
 8013272:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013276:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013278:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801327a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801327c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8013280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013282:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013286:	789b      	ldrb	r3, [r3, #2]
 8013288:	2b01      	cmp	r3, #1
 801328a:	d005      	beq.n	8013298 <find_volume+0x204>
 801328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801328e:	789b      	ldrb	r3, [r3, #2]
 8013290:	2b02      	cmp	r3, #2
 8013292:	d001      	beq.n	8013298 <find_volume+0x204>
 8013294:	230d      	movs	r3, #13
 8013296:	e147      	b.n	8013528 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801329a:	789b      	ldrb	r3, [r3, #2]
 801329c:	461a      	mov	r2, r3
 801329e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132a0:	fb02 f303 	mul.w	r3, r2, r3
 80132a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80132a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80132ac:	b29a      	uxth	r2, r3
 80132ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80132b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b4:	895b      	ldrh	r3, [r3, #10]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d008      	beq.n	80132cc <find_volume+0x238>
 80132ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132bc:	895b      	ldrh	r3, [r3, #10]
 80132be:	461a      	mov	r2, r3
 80132c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132c2:	895b      	ldrh	r3, [r3, #10]
 80132c4:	3b01      	subs	r3, #1
 80132c6:	4013      	ands	r3, r2
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d001      	beq.n	80132d0 <find_volume+0x23c>
 80132cc:	230d      	movs	r3, #13
 80132ce:	e12b      	b.n	8013528 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80132d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d2:	3334      	adds	r3, #52	; 0x34
 80132d4:	3311      	adds	r3, #17
 80132d6:	4618      	mov	r0, r3
 80132d8:	f7fe fb38 	bl	801194c <ld_word>
 80132dc:	4603      	mov	r3, r0
 80132de:	461a      	mov	r2, r3
 80132e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80132e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e6:	891b      	ldrh	r3, [r3, #8]
 80132e8:	f003 030f 	and.w	r3, r3, #15
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d001      	beq.n	80132f6 <find_volume+0x262>
 80132f2:	230d      	movs	r3, #13
 80132f4:	e118      	b.n	8013528 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80132f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132f8:	3334      	adds	r3, #52	; 0x34
 80132fa:	3313      	adds	r3, #19
 80132fc:	4618      	mov	r0, r3
 80132fe:	f7fe fb25 	bl	801194c <ld_word>
 8013302:	4603      	mov	r3, r0
 8013304:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013308:	2b00      	cmp	r3, #0
 801330a:	d106      	bne.n	801331a <find_volume+0x286>
 801330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801330e:	3334      	adds	r3, #52	; 0x34
 8013310:	3320      	adds	r3, #32
 8013312:	4618      	mov	r0, r3
 8013314:	f7fe fb32 	bl	801197c <ld_dword>
 8013318:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801331c:	3334      	adds	r3, #52	; 0x34
 801331e:	330e      	adds	r3, #14
 8013320:	4618      	mov	r0, r3
 8013322:	f7fe fb13 	bl	801194c <ld_word>
 8013326:	4603      	mov	r3, r0
 8013328:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801332a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801332c:	2b00      	cmp	r3, #0
 801332e:	d101      	bne.n	8013334 <find_volume+0x2a0>
 8013330:	230d      	movs	r3, #13
 8013332:	e0f9      	b.n	8013528 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013334:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013338:	4413      	add	r3, r2
 801333a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801333c:	8912      	ldrh	r2, [r2, #8]
 801333e:	0912      	lsrs	r2, r2, #4
 8013340:	b292      	uxth	r2, r2
 8013342:	4413      	add	r3, r2
 8013344:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801334a:	429a      	cmp	r2, r3
 801334c:	d201      	bcs.n	8013352 <find_volume+0x2be>
 801334e:	230d      	movs	r3, #13
 8013350:	e0ea      	b.n	8013528 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013356:	1ad3      	subs	r3, r2, r3
 8013358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801335a:	8952      	ldrh	r2, [r2, #10]
 801335c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013360:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013364:	2b00      	cmp	r3, #0
 8013366:	d103      	bne.n	8013370 <find_volume+0x2dc>
 8013368:	230d      	movs	r3, #13
 801336a:	e0dd      	b.n	8013528 <find_volume+0x494>
 801336c:	2000037c 	.word	0x2000037c
		fmt = FS_FAT32;
 8013370:	2303      	movs	r3, #3
 8013372:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013378:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801337c:	4293      	cmp	r3, r2
 801337e:	d802      	bhi.n	8013386 <find_volume+0x2f2>
 8013380:	2302      	movs	r3, #2
 8013382:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013388:	f640 72f5 	movw	r2, #4085	; 0xff5
 801338c:	4293      	cmp	r3, r2
 801338e:	d802      	bhi.n	8013396 <find_volume+0x302>
 8013390:	2301      	movs	r3, #1
 8013392:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013398:	1c9a      	adds	r2, r3, #2
 801339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801339c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80133a2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80133a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80133a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133a8:	441a      	add	r2, r3
 80133aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133ac:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80133ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80133b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b2:	441a      	add	r2, r3
 80133b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133b6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80133b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80133bc:	2b03      	cmp	r3, #3
 80133be:	d11e      	bne.n	80133fe <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80133c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c2:	3334      	adds	r3, #52	; 0x34
 80133c4:	332a      	adds	r3, #42	; 0x2a
 80133c6:	4618      	mov	r0, r3
 80133c8:	f7fe fac0 	bl	801194c <ld_word>
 80133cc:	4603      	mov	r3, r0
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d001      	beq.n	80133d6 <find_volume+0x342>
 80133d2:	230d      	movs	r3, #13
 80133d4:	e0a8      	b.n	8013528 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80133d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133d8:	891b      	ldrh	r3, [r3, #8]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d001      	beq.n	80133e2 <find_volume+0x34e>
 80133de:	230d      	movs	r3, #13
 80133e0:	e0a2      	b.n	8013528 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80133e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133e4:	3334      	adds	r3, #52	; 0x34
 80133e6:	332c      	adds	r3, #44	; 0x2c
 80133e8:	4618      	mov	r0, r3
 80133ea:	f7fe fac7 	bl	801197c <ld_dword>
 80133ee:	4602      	mov	r2, r0
 80133f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133f2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80133f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133f6:	699b      	ldr	r3, [r3, #24]
 80133f8:	009b      	lsls	r3, r3, #2
 80133fa:	647b      	str	r3, [r7, #68]	; 0x44
 80133fc:	e01f      	b.n	801343e <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80133fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013400:	891b      	ldrh	r3, [r3, #8]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d101      	bne.n	801340a <find_volume+0x376>
 8013406:	230d      	movs	r3, #13
 8013408:	e08e      	b.n	8013528 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801340c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801340e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013410:	441a      	add	r2, r3
 8013412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013414:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013416:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801341a:	2b02      	cmp	r3, #2
 801341c:	d103      	bne.n	8013426 <find_volume+0x392>
 801341e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013420:	699b      	ldr	r3, [r3, #24]
 8013422:	005b      	lsls	r3, r3, #1
 8013424:	e00a      	b.n	801343c <find_volume+0x3a8>
 8013426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013428:	699a      	ldr	r2, [r3, #24]
 801342a:	4613      	mov	r3, r2
 801342c:	005b      	lsls	r3, r3, #1
 801342e:	4413      	add	r3, r2
 8013430:	085a      	lsrs	r2, r3, #1
 8013432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013434:	699b      	ldr	r3, [r3, #24]
 8013436:	f003 0301 	and.w	r3, r3, #1
 801343a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801343c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801343e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013440:	69da      	ldr	r2, [r3, #28]
 8013442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013444:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013448:	0a5b      	lsrs	r3, r3, #9
 801344a:	429a      	cmp	r2, r3
 801344c:	d201      	bcs.n	8013452 <find_volume+0x3be>
 801344e:	230d      	movs	r3, #13
 8013450:	e06a      	b.n	8013528 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013454:	f04f 32ff 	mov.w	r2, #4294967295
 8013458:	615a      	str	r2, [r3, #20]
 801345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801345c:	695a      	ldr	r2, [r3, #20]
 801345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013460:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013464:	2280      	movs	r2, #128	; 0x80
 8013466:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013468:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801346c:	2b03      	cmp	r3, #3
 801346e:	d149      	bne.n	8013504 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013472:	3334      	adds	r3, #52	; 0x34
 8013474:	3330      	adds	r3, #48	; 0x30
 8013476:	4618      	mov	r0, r3
 8013478:	f7fe fa68 	bl	801194c <ld_word>
 801347c:	4603      	mov	r3, r0
 801347e:	2b01      	cmp	r3, #1
 8013480:	d140      	bne.n	8013504 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013484:	3301      	adds	r3, #1
 8013486:	4619      	mov	r1, r3
 8013488:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801348a:	f7fe fd3f 	bl	8011f0c <move_window>
 801348e:	4603      	mov	r3, r0
 8013490:	2b00      	cmp	r3, #0
 8013492:	d137      	bne.n	8013504 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8013494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013496:	2200      	movs	r2, #0
 8013498:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801349c:	3334      	adds	r3, #52	; 0x34
 801349e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80134a2:	4618      	mov	r0, r3
 80134a4:	f7fe fa52 	bl	801194c <ld_word>
 80134a8:	4603      	mov	r3, r0
 80134aa:	461a      	mov	r2, r3
 80134ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80134b0:	429a      	cmp	r2, r3
 80134b2:	d127      	bne.n	8013504 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80134b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134b6:	3334      	adds	r3, #52	; 0x34
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7fe fa5f 	bl	801197c <ld_dword>
 80134be:	4602      	mov	r2, r0
 80134c0:	4b1b      	ldr	r3, [pc, #108]	; (8013530 <find_volume+0x49c>)
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d11e      	bne.n	8013504 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80134c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134c8:	3334      	adds	r3, #52	; 0x34
 80134ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7fe fa54 	bl	801197c <ld_dword>
 80134d4:	4602      	mov	r2, r0
 80134d6:	4b17      	ldr	r3, [pc, #92]	; (8013534 <find_volume+0x4a0>)
 80134d8:	429a      	cmp	r2, r3
 80134da:	d113      	bne.n	8013504 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80134dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134de:	3334      	adds	r3, #52	; 0x34
 80134e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7fe fa49 	bl	801197c <ld_dword>
 80134ea:	4602      	mov	r2, r0
 80134ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ee:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80134f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f2:	3334      	adds	r3, #52	; 0x34
 80134f4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7fe fa3f 	bl	801197c <ld_dword>
 80134fe:	4602      	mov	r2, r0
 8013500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013502:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013506:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801350a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801350c:	4b0a      	ldr	r3, [pc, #40]	; (8013538 <find_volume+0x4a4>)
 801350e:	881b      	ldrh	r3, [r3, #0]
 8013510:	3301      	adds	r3, #1
 8013512:	b29a      	uxth	r2, r3
 8013514:	4b08      	ldr	r3, [pc, #32]	; (8013538 <find_volume+0x4a4>)
 8013516:	801a      	strh	r2, [r3, #0]
 8013518:	4b07      	ldr	r3, [pc, #28]	; (8013538 <find_volume+0x4a4>)
 801351a:	881a      	ldrh	r2, [r3, #0]
 801351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801351e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013520:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013522:	f7fe fc8b 	bl	8011e3c <clear_lock>
#endif
	return FR_OK;
 8013526:	2300      	movs	r3, #0
}
 8013528:	4618      	mov	r0, r3
 801352a:	3758      	adds	r7, #88	; 0x58
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	41615252 	.word	0x41615252
 8013534:	61417272 	.word	0x61417272
 8013538:	20000380 	.word	0x20000380

0801353c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b084      	sub	sp, #16
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013546:	2309      	movs	r3, #9
 8013548:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d02e      	beq.n	80135ae <validate+0x72>
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d02a      	beq.n	80135ae <validate+0x72>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d025      	beq.n	80135ae <validate+0x72>
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	889a      	ldrh	r2, [r3, #4]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	88db      	ldrh	r3, [r3, #6]
 801356c:	429a      	cmp	r2, r3
 801356e:	d11e      	bne.n	80135ae <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	4618      	mov	r0, r3
 8013576:	f7fe fae8 	bl	8011b4a <lock_fs>
 801357a:	4603      	mov	r3, r0
 801357c:	2b00      	cmp	r3, #0
 801357e:	d014      	beq.n	80135aa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	785b      	ldrb	r3, [r3, #1]
 8013586:	4618      	mov	r0, r3
 8013588:	f7fe f942 	bl	8011810 <disk_status>
 801358c:	4603      	mov	r3, r0
 801358e:	f003 0301 	and.w	r3, r3, #1
 8013592:	2b00      	cmp	r3, #0
 8013594:	d102      	bne.n	801359c <validate+0x60>
				res = FR_OK;
 8013596:	2300      	movs	r3, #0
 8013598:	73fb      	strb	r3, [r7, #15]
 801359a:	e008      	b.n	80135ae <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	2100      	movs	r1, #0
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7fe fae7 	bl	8011b76 <unlock_fs>
 80135a8:	e001      	b.n	80135ae <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80135aa:	230f      	movs	r3, #15
 80135ac:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80135ae:	7bfb      	ldrb	r3, [r7, #15]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d102      	bne.n	80135ba <validate+0x7e>
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	e000      	b.n	80135bc <validate+0x80>
 80135ba:	2300      	movs	r3, #0
 80135bc:	683a      	ldr	r2, [r7, #0]
 80135be:	6013      	str	r3, [r2, #0]
	return res;
 80135c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3710      	adds	r7, #16
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
	...

080135cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b088      	sub	sp, #32
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	60f8      	str	r0, [r7, #12]
 80135d4:	60b9      	str	r1, [r7, #8]
 80135d6:	4613      	mov	r3, r2
 80135d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80135de:	f107 0310 	add.w	r3, r7, #16
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7ff fcbb 	bl	8012f5e <get_ldnumber>
 80135e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	da01      	bge.n	80135f4 <f_mount+0x28>
 80135f0:	230b      	movs	r3, #11
 80135f2:	e048      	b.n	8013686 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80135f4:	4a26      	ldr	r2, [pc, #152]	; (8013690 <f_mount+0xc4>)
 80135f6:	69fb      	ldr	r3, [r7, #28]
 80135f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80135fe:	69bb      	ldr	r3, [r7, #24]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d00f      	beq.n	8013624 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013604:	69b8      	ldr	r0, [r7, #24]
 8013606:	f7fe fc19 	bl	8011e3c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801360a:	69bb      	ldr	r3, [r7, #24]
 801360c:	68db      	ldr	r3, [r3, #12]
 801360e:	4618      	mov	r0, r3
 8013610:	f001 f828 	bl	8014664 <ff_del_syncobj>
 8013614:	4603      	mov	r3, r0
 8013616:	2b00      	cmp	r3, #0
 8013618:	d101      	bne.n	801361e <f_mount+0x52>
 801361a:	2302      	movs	r3, #2
 801361c:	e033      	b.n	8013686 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801361e:	69bb      	ldr	r3, [r7, #24]
 8013620:	2200      	movs	r2, #0
 8013622:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d00f      	beq.n	801364a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	2200      	movs	r2, #0
 801362e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8013630:	69fb      	ldr	r3, [r7, #28]
 8013632:	b2da      	uxtb	r2, r3
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	330c      	adds	r3, #12
 8013638:	4619      	mov	r1, r3
 801363a:	4610      	mov	r0, r2
 801363c:	f000 fff7 	bl	801462e <ff_cre_syncobj>
 8013640:	4603      	mov	r3, r0
 8013642:	2b00      	cmp	r3, #0
 8013644:	d101      	bne.n	801364a <f_mount+0x7e>
 8013646:	2302      	movs	r3, #2
 8013648:	e01d      	b.n	8013686 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801364a:	68fa      	ldr	r2, [r7, #12]
 801364c:	4910      	ldr	r1, [pc, #64]	; (8013690 <f_mount+0xc4>)
 801364e:	69fb      	ldr	r3, [r7, #28]
 8013650:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d002      	beq.n	8013660 <f_mount+0x94>
 801365a:	79fb      	ldrb	r3, [r7, #7]
 801365c:	2b01      	cmp	r3, #1
 801365e:	d001      	beq.n	8013664 <f_mount+0x98>
 8013660:	2300      	movs	r3, #0
 8013662:	e010      	b.n	8013686 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013664:	f107 010c 	add.w	r1, r7, #12
 8013668:	f107 0308 	add.w	r3, r7, #8
 801366c:	2200      	movs	r2, #0
 801366e:	4618      	mov	r0, r3
 8013670:	f7ff fd10 	bl	8013094 <find_volume>
 8013674:	4603      	mov	r3, r0
 8013676:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	7dfa      	ldrb	r2, [r7, #23]
 801367c:	4611      	mov	r1, r2
 801367e:	4618      	mov	r0, r3
 8013680:	f7fe fa79 	bl	8011b76 <unlock_fs>
 8013684:	7dfb      	ldrb	r3, [r7, #23]
}
 8013686:	4618      	mov	r0, r3
 8013688:	3720      	adds	r7, #32
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}
 801368e:	bf00      	nop
 8013690:	2000037c 	.word	0x2000037c

08013694 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b09a      	sub	sp, #104	; 0x68
 8013698:	af00      	add	r7, sp, #0
 801369a:	60f8      	str	r0, [r7, #12]
 801369c:	60b9      	str	r1, [r7, #8]
 801369e:	4613      	mov	r3, r2
 80136a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d101      	bne.n	80136ac <f_open+0x18>
 80136a8:	2309      	movs	r3, #9
 80136aa:	e1b4      	b.n	8013a16 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80136ac:	79fb      	ldrb	r3, [r7, #7]
 80136ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80136b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80136b4:	79fa      	ldrb	r2, [r7, #7]
 80136b6:	f107 0114 	add.w	r1, r7, #20
 80136ba:	f107 0308 	add.w	r3, r7, #8
 80136be:	4618      	mov	r0, r3
 80136c0:	f7ff fce8 	bl	8013094 <find_volume>
 80136c4:	4603      	mov	r3, r0
 80136c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80136ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	f040 8191 	bne.w	80139f6 <f_open+0x362>
		dj.obj.fs = fs;
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80136d8:	68ba      	ldr	r2, [r7, #8]
 80136da:	f107 0318 	add.w	r3, r7, #24
 80136de:	4611      	mov	r1, r2
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7ff fbcb 	bl	8012e7c <follow_path>
 80136e6:	4603      	mov	r3, r0
 80136e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80136ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d11a      	bne.n	801372a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80136f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80136f8:	b25b      	sxtb	r3, r3
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	da03      	bge.n	8013706 <f_open+0x72>
				res = FR_INVALID_NAME;
 80136fe:	2306      	movs	r3, #6
 8013700:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8013704:	e011      	b.n	801372a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013706:	79fb      	ldrb	r3, [r7, #7]
 8013708:	f023 0301 	bic.w	r3, r3, #1
 801370c:	2b00      	cmp	r3, #0
 801370e:	bf14      	ite	ne
 8013710:	2301      	movne	r3, #1
 8013712:	2300      	moveq	r3, #0
 8013714:	b2db      	uxtb	r3, r3
 8013716:	461a      	mov	r2, r3
 8013718:	f107 0318 	add.w	r3, r7, #24
 801371c:	4611      	mov	r1, r2
 801371e:	4618      	mov	r0, r3
 8013720:	f7fe fa44 	bl	8011bac <chk_lock>
 8013724:	4603      	mov	r3, r0
 8013726:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801372a:	79fb      	ldrb	r3, [r7, #7]
 801372c:	f003 031c 	and.w	r3, r3, #28
 8013730:	2b00      	cmp	r3, #0
 8013732:	d07f      	beq.n	8013834 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8013734:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013738:	2b00      	cmp	r3, #0
 801373a:	d017      	beq.n	801376c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801373c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013740:	2b04      	cmp	r3, #4
 8013742:	d10e      	bne.n	8013762 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013744:	f7fe fa8e 	bl	8011c64 <enq_lock>
 8013748:	4603      	mov	r3, r0
 801374a:	2b00      	cmp	r3, #0
 801374c:	d006      	beq.n	801375c <f_open+0xc8>
 801374e:	f107 0318 	add.w	r3, r7, #24
 8013752:	4618      	mov	r0, r3
 8013754:	f7ff f9ca 	bl	8012aec <dir_register>
 8013758:	4603      	mov	r3, r0
 801375a:	e000      	b.n	801375e <f_open+0xca>
 801375c:	2312      	movs	r3, #18
 801375e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013762:	79fb      	ldrb	r3, [r7, #7]
 8013764:	f043 0308 	orr.w	r3, r3, #8
 8013768:	71fb      	strb	r3, [r7, #7]
 801376a:	e010      	b.n	801378e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801376c:	7fbb      	ldrb	r3, [r7, #30]
 801376e:	f003 0311 	and.w	r3, r3, #17
 8013772:	2b00      	cmp	r3, #0
 8013774:	d003      	beq.n	801377e <f_open+0xea>
					res = FR_DENIED;
 8013776:	2307      	movs	r3, #7
 8013778:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801377c:	e007      	b.n	801378e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801377e:	79fb      	ldrb	r3, [r7, #7]
 8013780:	f003 0304 	and.w	r3, r3, #4
 8013784:	2b00      	cmp	r3, #0
 8013786:	d002      	beq.n	801378e <f_open+0xfa>
 8013788:	2308      	movs	r3, #8
 801378a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801378e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013792:	2b00      	cmp	r3, #0
 8013794:	d168      	bne.n	8013868 <f_open+0x1d4>
 8013796:	79fb      	ldrb	r3, [r7, #7]
 8013798:	f003 0308 	and.w	r3, r3, #8
 801379c:	2b00      	cmp	r3, #0
 801379e:	d063      	beq.n	8013868 <f_open+0x1d4>
				dw = GET_FATTIME();
 80137a0:	f7fc f998 	bl	800fad4 <get_fattime>
 80137a4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80137a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137a8:	330e      	adds	r3, #14
 80137aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80137ac:	4618      	mov	r0, r3
 80137ae:	f7fe f923 	bl	80119f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80137b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137b4:	3316      	adds	r3, #22
 80137b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7fe f91d 	bl	80119f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80137be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c0:	330b      	adds	r3, #11
 80137c2:	2220      	movs	r2, #32
 80137c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80137ca:	4611      	mov	r1, r2
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7ff f89c 	bl	801290a <ld_clust>
 80137d2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80137d8:	2200      	movs	r2, #0
 80137da:	4618      	mov	r0, r3
 80137dc:	f7ff f8b4 	bl	8012948 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80137e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e2:	331c      	adds	r3, #28
 80137e4:	2100      	movs	r1, #0
 80137e6:	4618      	mov	r0, r3
 80137e8:	f7fe f906 	bl	80119f8 <st_dword>
					fs->wflag = 1;
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	2201      	movs	r2, #1
 80137f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80137f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d037      	beq.n	8013868 <f_open+0x1d4>
						dw = fs->winsect;
 80137f8:	697b      	ldr	r3, [r7, #20]
 80137fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137fc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80137fe:	f107 0318 	add.w	r3, r7, #24
 8013802:	2200      	movs	r2, #0
 8013804:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013806:	4618      	mov	r0, r3
 8013808:	f7fe fdc7 	bl	801239a <remove_chain>
 801380c:	4603      	mov	r3, r0
 801380e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8013812:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013816:	2b00      	cmp	r3, #0
 8013818:	d126      	bne.n	8013868 <f_open+0x1d4>
							res = move_window(fs, dw);
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801381e:	4618      	mov	r0, r3
 8013820:	f7fe fb74 	bl	8011f0c <move_window>
 8013824:	4603      	mov	r3, r0
 8013826:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801382e:	3a01      	subs	r2, #1
 8013830:	611a      	str	r2, [r3, #16]
 8013832:	e019      	b.n	8013868 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013834:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8013838:	2b00      	cmp	r3, #0
 801383a:	d115      	bne.n	8013868 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801383c:	7fbb      	ldrb	r3, [r7, #30]
 801383e:	f003 0310 	and.w	r3, r3, #16
 8013842:	2b00      	cmp	r3, #0
 8013844:	d003      	beq.n	801384e <f_open+0x1ba>
					res = FR_NO_FILE;
 8013846:	2304      	movs	r3, #4
 8013848:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801384c:	e00c      	b.n	8013868 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801384e:	79fb      	ldrb	r3, [r7, #7]
 8013850:	f003 0302 	and.w	r3, r3, #2
 8013854:	2b00      	cmp	r3, #0
 8013856:	d007      	beq.n	8013868 <f_open+0x1d4>
 8013858:	7fbb      	ldrb	r3, [r7, #30]
 801385a:	f003 0301 	and.w	r3, r3, #1
 801385e:	2b00      	cmp	r3, #0
 8013860:	d002      	beq.n	8013868 <f_open+0x1d4>
						res = FR_DENIED;
 8013862:	2307      	movs	r3, #7
 8013864:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8013868:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801386c:	2b00      	cmp	r3, #0
 801386e:	d128      	bne.n	80138c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013870:	79fb      	ldrb	r3, [r7, #7]
 8013872:	f003 0308 	and.w	r3, r3, #8
 8013876:	2b00      	cmp	r3, #0
 8013878:	d003      	beq.n	8013882 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801387a:	79fb      	ldrb	r3, [r7, #7]
 801387c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013880:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801388a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013890:	79fb      	ldrb	r3, [r7, #7]
 8013892:	f023 0301 	bic.w	r3, r3, #1
 8013896:	2b00      	cmp	r3, #0
 8013898:	bf14      	ite	ne
 801389a:	2301      	movne	r3, #1
 801389c:	2300      	moveq	r3, #0
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	461a      	mov	r2, r3
 80138a2:	f107 0318 	add.w	r3, r7, #24
 80138a6:	4611      	mov	r1, r2
 80138a8:	4618      	mov	r0, r3
 80138aa:	f7fe f9fd 	bl	8011ca8 <inc_lock>
 80138ae:	4602      	mov	r2, r0
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	691b      	ldr	r3, [r3, #16]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d102      	bne.n	80138c2 <f_open+0x22e>
 80138bc:	2302      	movs	r3, #2
 80138be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80138c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	f040 8095 	bne.w	80139f6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80138cc:	697b      	ldr	r3, [r7, #20]
 80138ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138d0:	4611      	mov	r1, r2
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7ff f819 	bl	801290a <ld_clust>
 80138d8:	4602      	mov	r2, r0
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80138de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138e0:	331c      	adds	r3, #28
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7fe f84a 	bl	801197c <ld_dword>
 80138e8:	4602      	mov	r2, r0
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	2200      	movs	r2, #0
 80138f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80138f4:	697a      	ldr	r2, [r7, #20]
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80138fa:	697b      	ldr	r3, [r7, #20]
 80138fc:	88da      	ldrh	r2, [r3, #6]
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	79fa      	ldrb	r2, [r7, #7]
 8013906:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	2200      	movs	r2, #0
 801390c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	2200      	movs	r2, #0
 8013912:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	2200      	movs	r2, #0
 8013918:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	3330      	adds	r3, #48	; 0x30
 801391e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013922:	2100      	movs	r1, #0
 8013924:	4618      	mov	r0, r3
 8013926:	f7fe f8b4 	bl	8011a92 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801392a:	79fb      	ldrb	r3, [r7, #7]
 801392c:	f003 0320 	and.w	r3, r3, #32
 8013930:	2b00      	cmp	r3, #0
 8013932:	d060      	beq.n	80139f6 <f_open+0x362>
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	68db      	ldr	r3, [r3, #12]
 8013938:	2b00      	cmp	r3, #0
 801393a:	d05c      	beq.n	80139f6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	68da      	ldr	r2, [r3, #12]
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013944:	697b      	ldr	r3, [r7, #20]
 8013946:	895b      	ldrh	r3, [r3, #10]
 8013948:	025b      	lsls	r3, r3, #9
 801394a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	689b      	ldr	r3, [r3, #8]
 8013950:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	68db      	ldr	r3, [r3, #12]
 8013956:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013958:	e016      	b.n	8013988 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801395e:	4618      	mov	r0, r3
 8013960:	f7fe fb8f 	bl	8012082 <get_fat>
 8013964:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8013966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013968:	2b01      	cmp	r3, #1
 801396a:	d802      	bhi.n	8013972 <f_open+0x2de>
 801396c:	2302      	movs	r3, #2
 801396e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013978:	d102      	bne.n	8013980 <f_open+0x2ec>
 801397a:	2301      	movs	r3, #1
 801397c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013980:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013984:	1ad3      	subs	r3, r2, r3
 8013986:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013988:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801398c:	2b00      	cmp	r3, #0
 801398e:	d103      	bne.n	8013998 <f_open+0x304>
 8013990:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013994:	429a      	cmp	r2, r3
 8013996:	d8e0      	bhi.n	801395a <f_open+0x2c6>
				}
				fp->clust = clst;
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801399c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801399e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d127      	bne.n	80139f6 <f_open+0x362>
 80139a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80139a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d022      	beq.n	80139f6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80139b0:	697b      	ldr	r3, [r7, #20]
 80139b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7fe fb45 	bl	8012044 <clust2sect>
 80139ba:	64f8      	str	r0, [r7, #76]	; 0x4c
 80139bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d103      	bne.n	80139ca <f_open+0x336>
						res = FR_INT_ERR;
 80139c2:	2302      	movs	r3, #2
 80139c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80139c8:	e015      	b.n	80139f6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80139ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80139cc:	0a5a      	lsrs	r2, r3, #9
 80139ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139d0:	441a      	add	r2, r3
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	7858      	ldrb	r0, [r3, #1]
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	6a1a      	ldr	r2, [r3, #32]
 80139e4:	2301      	movs	r3, #1
 80139e6:	f7fd ff53 	bl	8011890 <disk_read>
 80139ea:	4603      	mov	r3, r0
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d002      	beq.n	80139f6 <f_open+0x362>
 80139f0:	2301      	movs	r3, #1
 80139f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80139f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d002      	beq.n	8013a04 <f_open+0x370>
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	2200      	movs	r2, #0
 8013a02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8013a0a:	4611      	mov	r1, r2
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7fe f8b2 	bl	8011b76 <unlock_fs>
 8013a12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3768      	adds	r7, #104	; 0x68
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}

08013a1e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013a1e:	b580      	push	{r7, lr}
 8013a20:	b08c      	sub	sp, #48	; 0x30
 8013a22:	af00      	add	r7, sp, #0
 8013a24:	60f8      	str	r0, [r7, #12]
 8013a26:	60b9      	str	r1, [r7, #8]
 8013a28:	607a      	str	r2, [r7, #4]
 8013a2a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	2200      	movs	r2, #0
 8013a34:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	f107 0210 	add.w	r2, r7, #16
 8013a3c:	4611      	mov	r1, r2
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f7ff fd7c 	bl	801353c <validate>
 8013a44:	4603      	mov	r3, r0
 8013a46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d107      	bne.n	8013a62 <f_write+0x44>
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	7d5b      	ldrb	r3, [r3, #21]
 8013a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d009      	beq.n	8013a76 <f_write+0x58>
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013a68:	4611      	mov	r1, r2
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7fe f883 	bl	8011b76 <unlock_fs>
 8013a70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a74:	e173      	b.n	8013d5e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	7d1b      	ldrb	r3, [r3, #20]
 8013a7a:	f003 0302 	and.w	r3, r3, #2
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d106      	bne.n	8013a90 <f_write+0x72>
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	2107      	movs	r1, #7
 8013a86:	4618      	mov	r0, r3
 8013a88:	f7fe f875 	bl	8011b76 <unlock_fs>
 8013a8c:	2307      	movs	r3, #7
 8013a8e:	e166      	b.n	8013d5e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	699a      	ldr	r2, [r3, #24]
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	441a      	add	r2, r3
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	699b      	ldr	r3, [r3, #24]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	f080 814b 	bcs.w	8013d38 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	699b      	ldr	r3, [r3, #24]
 8013aa6:	43db      	mvns	r3, r3
 8013aa8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013aaa:	e145      	b.n	8013d38 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	699b      	ldr	r3, [r3, #24]
 8013ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	f040 8101 	bne.w	8013cbc <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	699b      	ldr	r3, [r3, #24]
 8013abe:	0a5b      	lsrs	r3, r3, #9
 8013ac0:	693a      	ldr	r2, [r7, #16]
 8013ac2:	8952      	ldrh	r2, [r2, #10]
 8013ac4:	3a01      	subs	r2, #1
 8013ac6:	4013      	ands	r3, r2
 8013ac8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013aca:	69bb      	ldr	r3, [r7, #24]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d14d      	bne.n	8013b6c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	699b      	ldr	r3, [r3, #24]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d10c      	bne.n	8013af2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	689b      	ldr	r3, [r3, #8]
 8013adc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d11a      	bne.n	8013b1a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2100      	movs	r1, #0
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7fe fcbb 	bl	8012464 <create_chain>
 8013aee:	62b8      	str	r0, [r7, #40]	; 0x28
 8013af0:	e013      	b.n	8013b1a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d007      	beq.n	8013b0a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	699b      	ldr	r3, [r3, #24]
 8013afe:	4619      	mov	r1, r3
 8013b00:	68f8      	ldr	r0, [r7, #12]
 8013b02:	f7fe fd47 	bl	8012594 <clmt_clust>
 8013b06:	62b8      	str	r0, [r7, #40]	; 0x28
 8013b08:	e007      	b.n	8013b1a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013b0a:	68fa      	ldr	r2, [r7, #12]
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	69db      	ldr	r3, [r3, #28]
 8013b10:	4619      	mov	r1, r3
 8013b12:	4610      	mov	r0, r2
 8013b14:	f7fe fca6 	bl	8012464 <create_chain>
 8013b18:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	f000 8110 	beq.w	8013d42 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b24:	2b01      	cmp	r3, #1
 8013b26:	d109      	bne.n	8013b3c <f_write+0x11e>
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2202      	movs	r2, #2
 8013b2c:	755a      	strb	r2, [r3, #21]
 8013b2e:	693b      	ldr	r3, [r7, #16]
 8013b30:	2102      	movs	r1, #2
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fe f81f 	bl	8011b76 <unlock_fs>
 8013b38:	2302      	movs	r3, #2
 8013b3a:	e110      	b.n	8013d5e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b42:	d109      	bne.n	8013b58 <f_write+0x13a>
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	2201      	movs	r2, #1
 8013b48:	755a      	strb	r2, [r3, #21]
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	2101      	movs	r1, #1
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7fe f811 	bl	8011b76 <unlock_fs>
 8013b54:	2301      	movs	r3, #1
 8013b56:	e102      	b.n	8013d5e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b5c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	689b      	ldr	r3, [r3, #8]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d102      	bne.n	8013b6c <f_write+0x14e>
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b6a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	7d1b      	ldrb	r3, [r3, #20]
 8013b70:	b25b      	sxtb	r3, r3
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	da1d      	bge.n	8013bb2 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b76:	693b      	ldr	r3, [r7, #16]
 8013b78:	7858      	ldrb	r0, [r3, #1]
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	6a1a      	ldr	r2, [r3, #32]
 8013b84:	2301      	movs	r3, #1
 8013b86:	f7fd fea3 	bl	80118d0 <disk_write>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d009      	beq.n	8013ba4 <f_write+0x186>
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	2201      	movs	r2, #1
 8013b94:	755a      	strb	r2, [r3, #21]
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	2101      	movs	r1, #1
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f7fd ffeb 	bl	8011b76 <unlock_fs>
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	e0dc      	b.n	8013d5e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	7d1b      	ldrb	r3, [r3, #20]
 8013ba8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bac:	b2da      	uxtb	r2, r3
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013bb2:	693a      	ldr	r2, [r7, #16]
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	69db      	ldr	r3, [r3, #28]
 8013bb8:	4619      	mov	r1, r3
 8013bba:	4610      	mov	r0, r2
 8013bbc:	f7fe fa42 	bl	8012044 <clust2sect>
 8013bc0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d109      	bne.n	8013bdc <f_write+0x1be>
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	2202      	movs	r2, #2
 8013bcc:	755a      	strb	r2, [r3, #21]
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	2102      	movs	r1, #2
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f7fd ffcf 	bl	8011b76 <unlock_fs>
 8013bd8:	2302      	movs	r3, #2
 8013bda:	e0c0      	b.n	8013d5e <f_write+0x340>
			sect += csect;
 8013bdc:	697a      	ldr	r2, [r7, #20]
 8013bde:	69bb      	ldr	r3, [r7, #24]
 8013be0:	4413      	add	r3, r2
 8013be2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	0a5b      	lsrs	r3, r3, #9
 8013be8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013bea:	6a3b      	ldr	r3, [r7, #32]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d041      	beq.n	8013c74 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013bf0:	69ba      	ldr	r2, [r7, #24]
 8013bf2:	6a3b      	ldr	r3, [r7, #32]
 8013bf4:	4413      	add	r3, r2
 8013bf6:	693a      	ldr	r2, [r7, #16]
 8013bf8:	8952      	ldrh	r2, [r2, #10]
 8013bfa:	4293      	cmp	r3, r2
 8013bfc:	d905      	bls.n	8013c0a <f_write+0x1ec>
					cc = fs->csize - csect;
 8013bfe:	693b      	ldr	r3, [r7, #16]
 8013c00:	895b      	ldrh	r3, [r3, #10]
 8013c02:	461a      	mov	r2, r3
 8013c04:	69bb      	ldr	r3, [r7, #24]
 8013c06:	1ad3      	subs	r3, r2, r3
 8013c08:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c0a:	693b      	ldr	r3, [r7, #16]
 8013c0c:	7858      	ldrb	r0, [r3, #1]
 8013c0e:	6a3b      	ldr	r3, [r7, #32]
 8013c10:	697a      	ldr	r2, [r7, #20]
 8013c12:	69f9      	ldr	r1, [r7, #28]
 8013c14:	f7fd fe5c 	bl	80118d0 <disk_write>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d009      	beq.n	8013c32 <f_write+0x214>
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2201      	movs	r2, #1
 8013c22:	755a      	strb	r2, [r3, #21]
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	2101      	movs	r1, #1
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7fd ffa4 	bl	8011b76 <unlock_fs>
 8013c2e:	2301      	movs	r3, #1
 8013c30:	e095      	b.n	8013d5e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	6a1a      	ldr	r2, [r3, #32]
 8013c36:	697b      	ldr	r3, [r7, #20]
 8013c38:	1ad3      	subs	r3, r2, r3
 8013c3a:	6a3a      	ldr	r2, [r7, #32]
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d915      	bls.n	8013c6c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	6a1a      	ldr	r2, [r3, #32]
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	1ad3      	subs	r3, r2, r3
 8013c4e:	025b      	lsls	r3, r3, #9
 8013c50:	69fa      	ldr	r2, [r7, #28]
 8013c52:	4413      	add	r3, r2
 8013c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c58:	4619      	mov	r1, r3
 8013c5a:	f7fd fef9 	bl	8011a50 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	7d1b      	ldrb	r3, [r3, #20]
 8013c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c66:	b2da      	uxtb	r2, r3
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013c6c:	6a3b      	ldr	r3, [r7, #32]
 8013c6e:	025b      	lsls	r3, r3, #9
 8013c70:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013c72:	e044      	b.n	8013cfe <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	6a1b      	ldr	r3, [r3, #32]
 8013c78:	697a      	ldr	r2, [r7, #20]
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d01b      	beq.n	8013cb6 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	699a      	ldr	r2, [r3, #24]
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d215      	bcs.n	8013cb6 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	7858      	ldrb	r0, [r3, #1]
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c94:	2301      	movs	r3, #1
 8013c96:	697a      	ldr	r2, [r7, #20]
 8013c98:	f7fd fdfa 	bl	8011890 <disk_read>
 8013c9c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d009      	beq.n	8013cb6 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	2201      	movs	r2, #1
 8013ca6:	755a      	strb	r2, [r3, #21]
 8013ca8:	693b      	ldr	r3, [r7, #16]
 8013caa:	2101      	movs	r1, #1
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7fd ff62 	bl	8011b76 <unlock_fs>
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	e053      	b.n	8013d5e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	697a      	ldr	r2, [r7, #20]
 8013cba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	699b      	ldr	r3, [r3, #24]
 8013cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cc4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013cc8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d901      	bls.n	8013cd6 <f_write+0x2b8>
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	699b      	ldr	r3, [r3, #24]
 8013ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ce4:	4413      	add	r3, r2
 8013ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ce8:	69f9      	ldr	r1, [r7, #28]
 8013cea:	4618      	mov	r0, r3
 8013cec:	f7fd feb0 	bl	8011a50 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	7d1b      	ldrb	r3, [r3, #20]
 8013cf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013cf8:	b2da      	uxtb	r2, r3
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013cfe:	69fa      	ldr	r2, [r7, #28]
 8013d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d02:	4413      	add	r3, r2
 8013d04:	61fb      	str	r3, [r7, #28]
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	699a      	ldr	r2, [r3, #24]
 8013d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d0c:	441a      	add	r2, r3
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	619a      	str	r2, [r3, #24]
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	68da      	ldr	r2, [r3, #12]
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	699b      	ldr	r3, [r3, #24]
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	bf38      	it	cc
 8013d1e:	461a      	movcc	r2, r3
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	60da      	str	r2, [r3, #12]
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d2a:	441a      	add	r2, r3
 8013d2c:	683b      	ldr	r3, [r7, #0]
 8013d2e:	601a      	str	r2, [r3, #0]
 8013d30:	687a      	ldr	r2, [r7, #4]
 8013d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d34:	1ad3      	subs	r3, r2, r3
 8013d36:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	f47f aeb6 	bne.w	8013aac <f_write+0x8e>
 8013d40:	e000      	b.n	8013d44 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013d42:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	7d1b      	ldrb	r3, [r3, #20]
 8013d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d4c:	b2da      	uxtb	r2, r3
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013d52:	693b      	ldr	r3, [r7, #16]
 8013d54:	2100      	movs	r1, #0
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7fd ff0d 	bl	8011b76 <unlock_fs>
 8013d5c:	2300      	movs	r3, #0
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3730      	adds	r7, #48	; 0x30
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}

08013d66 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013d66:	b580      	push	{r7, lr}
 8013d68:	b086      	sub	sp, #24
 8013d6a:	af00      	add	r7, sp, #0
 8013d6c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f107 0208 	add.w	r2, r7, #8
 8013d74:	4611      	mov	r1, r2
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7ff fbe0 	bl	801353c <validate>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013d80:	7dfb      	ldrb	r3, [r7, #23]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d16d      	bne.n	8013e62 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	7d1b      	ldrb	r3, [r3, #20]
 8013d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d067      	beq.n	8013e62 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	7d1b      	ldrb	r3, [r3, #20]
 8013d96:	b25b      	sxtb	r3, r3
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	da1a      	bge.n	8013dd2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	7858      	ldrb	r0, [r3, #1]
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	6a1a      	ldr	r2, [r3, #32]
 8013daa:	2301      	movs	r3, #1
 8013dac:	f7fd fd90 	bl	80118d0 <disk_write>
 8013db0:	4603      	mov	r3, r0
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d006      	beq.n	8013dc4 <f_sync+0x5e>
 8013db6:	68bb      	ldr	r3, [r7, #8]
 8013db8:	2101      	movs	r1, #1
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f7fd fedb 	bl	8011b76 <unlock_fs>
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	e055      	b.n	8013e70 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	7d1b      	ldrb	r3, [r3, #20]
 8013dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013dcc:	b2da      	uxtb	r2, r3
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013dd2:	f7fb fe7f 	bl	800fad4 <get_fattime>
 8013dd6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013dd8:	68ba      	ldr	r2, [r7, #8]
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dde:	4619      	mov	r1, r3
 8013de0:	4610      	mov	r0, r2
 8013de2:	f7fe f893 	bl	8011f0c <move_window>
 8013de6:	4603      	mov	r3, r0
 8013de8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013dea:	7dfb      	ldrb	r3, [r7, #23]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d138      	bne.n	8013e62 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013df4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	330b      	adds	r3, #11
 8013dfa:	781a      	ldrb	r2, [r3, #0]
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	330b      	adds	r3, #11
 8013e00:	f042 0220 	orr.w	r2, r2, #32
 8013e04:	b2d2      	uxtb	r2, r2
 8013e06:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	6818      	ldr	r0, [r3, #0]
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	689b      	ldr	r3, [r3, #8]
 8013e10:	461a      	mov	r2, r3
 8013e12:	68f9      	ldr	r1, [r7, #12]
 8013e14:	f7fe fd98 	bl	8012948 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	f103 021c 	add.w	r2, r3, #28
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	68db      	ldr	r3, [r3, #12]
 8013e22:	4619      	mov	r1, r3
 8013e24:	4610      	mov	r0, r2
 8013e26:	f7fd fde7 	bl	80119f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	3316      	adds	r3, #22
 8013e2e:	6939      	ldr	r1, [r7, #16]
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7fd fde1 	bl	80119f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	3312      	adds	r3, #18
 8013e3a:	2100      	movs	r1, #0
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	f7fd fdc0 	bl	80119c2 <st_word>
					fs->wflag = 1;
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	2201      	movs	r2, #1
 8013e46:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	f7fe f88c 	bl	8011f68 <sync_fs>
 8013e50:	4603      	mov	r3, r0
 8013e52:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	7d1b      	ldrb	r3, [r3, #20]
 8013e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013e5c:	b2da      	uxtb	r2, r3
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	7dfa      	ldrb	r2, [r7, #23]
 8013e66:	4611      	mov	r1, r2
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7fd fe84 	bl	8011b76 <unlock_fs>
 8013e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3718      	adds	r7, #24
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}

08013e78 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b090      	sub	sp, #64	; 0x40
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f107 0208 	add.w	r2, r7, #8
 8013e88:	4611      	mov	r1, r2
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7ff fb56 	bl	801353c <validate>
 8013e90:	4603      	mov	r3, r0
 8013e92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013e96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d103      	bne.n	8013ea6 <f_lseek+0x2e>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	7d5b      	ldrb	r3, [r3, #21]
 8013ea2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013ea6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d009      	beq.n	8013ec2 <f_lseek+0x4a>
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8013eb4:	4611      	mov	r1, r2
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f7fd fe5d 	bl	8011b76 <unlock_fs>
 8013ebc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ec0:	e229      	b.n	8014316 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	f000 80ea 	beq.w	80140a0 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ed2:	d164      	bne.n	8013f9e <f_lseek+0x126>
			tbl = fp->cltbl;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ed8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013edc:	1d1a      	adds	r2, r3, #4
 8013ede:	627a      	str	r2, [r7, #36]	; 0x24
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	617b      	str	r3, [r7, #20]
 8013ee4:	2302      	movs	r3, #2
 8013ee6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	689b      	ldr	r3, [r3, #8]
 8013eec:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d044      	beq.n	8013f7e <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef6:	613b      	str	r3, [r7, #16]
 8013ef8:	2300      	movs	r3, #0
 8013efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013efe:	3302      	adds	r3, #2
 8013f00:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f04:	60fb      	str	r3, [r7, #12]
 8013f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f08:	3301      	adds	r3, #1
 8013f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fe f8b6 	bl	8012082 <get_fat>
 8013f16:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f1a:	2b01      	cmp	r3, #1
 8013f1c:	d809      	bhi.n	8013f32 <f_lseek+0xba>
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2202      	movs	r2, #2
 8013f22:	755a      	strb	r2, [r3, #21]
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	2102      	movs	r1, #2
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7fd fe24 	bl	8011b76 <unlock_fs>
 8013f2e:	2302      	movs	r3, #2
 8013f30:	e1f1      	b.n	8014316 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f38:	d109      	bne.n	8013f4e <f_lseek+0xd6>
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	2201      	movs	r2, #1
 8013f3e:	755a      	strb	r2, [r3, #21]
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	2101      	movs	r1, #1
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7fd fe16 	bl	8011b76 <unlock_fs>
 8013f4a:	2301      	movs	r3, #1
 8013f4c:	e1e3      	b.n	8014316 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	3301      	adds	r3, #1
 8013f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f54:	429a      	cmp	r2, r3
 8013f56:	d0d4      	beq.n	8013f02 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f5a:	697b      	ldr	r3, [r7, #20]
 8013f5c:	429a      	cmp	r2, r3
 8013f5e:	d809      	bhi.n	8013f74 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8013f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f62:	1d1a      	adds	r2, r3, #4
 8013f64:	627a      	str	r2, [r7, #36]	; 0x24
 8013f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f68:	601a      	str	r2, [r3, #0]
 8013f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6c:	1d1a      	adds	r2, r3, #4
 8013f6e:	627a      	str	r2, [r7, #36]	; 0x24
 8013f70:	693a      	ldr	r2, [r7, #16]
 8013f72:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	699b      	ldr	r3, [r3, #24]
 8013f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d3ba      	bcc.n	8013ef4 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f84:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f88:	697b      	ldr	r3, [r7, #20]
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d803      	bhi.n	8013f96 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8013f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f90:	2200      	movs	r2, #0
 8013f92:	601a      	str	r2, [r3, #0]
 8013f94:	e1b6      	b.n	8014304 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013f96:	2311      	movs	r3, #17
 8013f98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013f9c:	e1b2      	b.n	8014304 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	68db      	ldr	r3, [r3, #12]
 8013fa2:	683a      	ldr	r2, [r7, #0]
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d902      	bls.n	8013fae <f_lseek+0x136>
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	683a      	ldr	r2, [r7, #0]
 8013fb2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	f000 81a4 	beq.w	8014304 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	3b01      	subs	r3, #1
 8013fc0:	4619      	mov	r1, r3
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f7fe fae6 	bl	8012594 <clmt_clust>
 8013fc8:	4602      	mov	r2, r0
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013fce:	68ba      	ldr	r2, [r7, #8]
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	69db      	ldr	r3, [r3, #28]
 8013fd4:	4619      	mov	r1, r3
 8013fd6:	4610      	mov	r0, r2
 8013fd8:	f7fe f834 	bl	8012044 <clust2sect>
 8013fdc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013fde:	69bb      	ldr	r3, [r7, #24]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d109      	bne.n	8013ff8 <f_lseek+0x180>
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2202      	movs	r2, #2
 8013fe8:	755a      	strb	r2, [r3, #21]
 8013fea:	68bb      	ldr	r3, [r7, #8]
 8013fec:	2102      	movs	r1, #2
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f7fd fdc1 	bl	8011b76 <unlock_fs>
 8013ff4:	2302      	movs	r3, #2
 8013ff6:	e18e      	b.n	8014316 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013ff8:	683b      	ldr	r3, [r7, #0]
 8013ffa:	3b01      	subs	r3, #1
 8013ffc:	0a5b      	lsrs	r3, r3, #9
 8013ffe:	68ba      	ldr	r2, [r7, #8]
 8014000:	8952      	ldrh	r2, [r2, #10]
 8014002:	3a01      	subs	r2, #1
 8014004:	4013      	ands	r3, r2
 8014006:	69ba      	ldr	r2, [r7, #24]
 8014008:	4413      	add	r3, r2
 801400a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	699b      	ldr	r3, [r3, #24]
 8014010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014014:	2b00      	cmp	r3, #0
 8014016:	f000 8175 	beq.w	8014304 <f_lseek+0x48c>
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6a1b      	ldr	r3, [r3, #32]
 801401e:	69ba      	ldr	r2, [r7, #24]
 8014020:	429a      	cmp	r2, r3
 8014022:	f000 816f 	beq.w	8014304 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	7d1b      	ldrb	r3, [r3, #20]
 801402a:	b25b      	sxtb	r3, r3
 801402c:	2b00      	cmp	r3, #0
 801402e:	da1d      	bge.n	801406c <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	7858      	ldrb	r0, [r3, #1]
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	6a1a      	ldr	r2, [r3, #32]
 801403e:	2301      	movs	r3, #1
 8014040:	f7fd fc46 	bl	80118d0 <disk_write>
 8014044:	4603      	mov	r3, r0
 8014046:	2b00      	cmp	r3, #0
 8014048:	d009      	beq.n	801405e <f_lseek+0x1e6>
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	2201      	movs	r2, #1
 801404e:	755a      	strb	r2, [r3, #21]
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	2101      	movs	r1, #1
 8014054:	4618      	mov	r0, r3
 8014056:	f7fd fd8e 	bl	8011b76 <unlock_fs>
 801405a:	2301      	movs	r3, #1
 801405c:	e15b      	b.n	8014316 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	7d1b      	ldrb	r3, [r3, #20]
 8014062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014066:	b2da      	uxtb	r2, r3
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	7858      	ldrb	r0, [r3, #1]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014076:	2301      	movs	r3, #1
 8014078:	69ba      	ldr	r2, [r7, #24]
 801407a:	f7fd fc09 	bl	8011890 <disk_read>
 801407e:	4603      	mov	r3, r0
 8014080:	2b00      	cmp	r3, #0
 8014082:	d009      	beq.n	8014098 <f_lseek+0x220>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2201      	movs	r2, #1
 8014088:	755a      	strb	r2, [r3, #21]
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	2101      	movs	r1, #1
 801408e:	4618      	mov	r0, r3
 8014090:	f7fd fd71 	bl	8011b76 <unlock_fs>
 8014094:	2301      	movs	r3, #1
 8014096:	e13e      	b.n	8014316 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	69ba      	ldr	r2, [r7, #24]
 801409c:	621a      	str	r2, [r3, #32]
 801409e:	e131      	b.n	8014304 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	68db      	ldr	r3, [r3, #12]
 80140a4:	683a      	ldr	r2, [r7, #0]
 80140a6:	429a      	cmp	r2, r3
 80140a8:	d908      	bls.n	80140bc <f_lseek+0x244>
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	7d1b      	ldrb	r3, [r3, #20]
 80140ae:	f003 0302 	and.w	r3, r3, #2
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d102      	bne.n	80140bc <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	68db      	ldr	r3, [r3, #12]
 80140ba:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	699b      	ldr	r3, [r3, #24]
 80140c0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80140c2:	2300      	movs	r3, #0
 80140c4:	637b      	str	r3, [r7, #52]	; 0x34
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140ca:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	f000 80c0 	beq.w	8014254 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	895b      	ldrh	r3, [r3, #10]
 80140d8:	025b      	lsls	r3, r3, #9
 80140da:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80140dc:	6a3b      	ldr	r3, [r7, #32]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d01b      	beq.n	801411a <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80140e2:	683b      	ldr	r3, [r7, #0]
 80140e4:	1e5a      	subs	r2, r3, #1
 80140e6:	69fb      	ldr	r3, [r7, #28]
 80140e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80140ec:	6a3b      	ldr	r3, [r7, #32]
 80140ee:	1e59      	subs	r1, r3, #1
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80140f6:	429a      	cmp	r2, r3
 80140f8:	d30f      	bcc.n	801411a <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80140fa:	6a3b      	ldr	r3, [r7, #32]
 80140fc:	1e5a      	subs	r2, r3, #1
 80140fe:	69fb      	ldr	r3, [r7, #28]
 8014100:	425b      	negs	r3, r3
 8014102:	401a      	ands	r2, r3
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	699b      	ldr	r3, [r3, #24]
 801410c:	683a      	ldr	r2, [r7, #0]
 801410e:	1ad3      	subs	r3, r2, r3
 8014110:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	69db      	ldr	r3, [r3, #28]
 8014116:	63bb      	str	r3, [r7, #56]	; 0x38
 8014118:	e02c      	b.n	8014174 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	689b      	ldr	r3, [r3, #8]
 801411e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014122:	2b00      	cmp	r3, #0
 8014124:	d123      	bne.n	801416e <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2100      	movs	r1, #0
 801412a:	4618      	mov	r0, r3
 801412c:	f7fe f99a 	bl	8012464 <create_chain>
 8014130:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014134:	2b01      	cmp	r3, #1
 8014136:	d109      	bne.n	801414c <f_lseek+0x2d4>
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2202      	movs	r2, #2
 801413c:	755a      	strb	r2, [r3, #21]
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	2102      	movs	r1, #2
 8014142:	4618      	mov	r0, r3
 8014144:	f7fd fd17 	bl	8011b76 <unlock_fs>
 8014148:	2302      	movs	r3, #2
 801414a:	e0e4      	b.n	8014316 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014152:	d109      	bne.n	8014168 <f_lseek+0x2f0>
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2201      	movs	r2, #1
 8014158:	755a      	strb	r2, [r3, #21]
 801415a:	68bb      	ldr	r3, [r7, #8]
 801415c:	2101      	movs	r1, #1
 801415e:	4618      	mov	r0, r3
 8014160:	f7fd fd09 	bl	8011b76 <unlock_fs>
 8014164:	2301      	movs	r3, #1
 8014166:	e0d6      	b.n	8014316 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801416c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014172:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014176:	2b00      	cmp	r3, #0
 8014178:	d06c      	beq.n	8014254 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 801417a:	e044      	b.n	8014206 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 801417c:	683a      	ldr	r2, [r7, #0]
 801417e:	69fb      	ldr	r3, [r7, #28]
 8014180:	1ad3      	subs	r3, r2, r3
 8014182:	603b      	str	r3, [r7, #0]
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	699a      	ldr	r2, [r3, #24]
 8014188:	69fb      	ldr	r3, [r7, #28]
 801418a:	441a      	add	r2, r3
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	7d1b      	ldrb	r3, [r3, #20]
 8014194:	f003 0302 	and.w	r3, r3, #2
 8014198:	2b00      	cmp	r3, #0
 801419a:	d00b      	beq.n	80141b4 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80141a0:	4618      	mov	r0, r3
 80141a2:	f7fe f95f 	bl	8012464 <create_chain>
 80141a6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80141a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d108      	bne.n	80141c0 <f_lseek+0x348>
							ofs = 0; break;
 80141ae:	2300      	movs	r3, #0
 80141b0:	603b      	str	r3, [r7, #0]
 80141b2:	e02c      	b.n	801420e <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7fd ff62 	bl	8012082 <get_fat>
 80141be:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80141c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141c6:	d109      	bne.n	80141dc <f_lseek+0x364>
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2201      	movs	r2, #1
 80141cc:	755a      	strb	r2, [r3, #21]
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	2101      	movs	r1, #1
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7fd fccf 	bl	8011b76 <unlock_fs>
 80141d8:	2301      	movs	r3, #1
 80141da:	e09c      	b.n	8014316 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80141dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141de:	2b01      	cmp	r3, #1
 80141e0:	d904      	bls.n	80141ec <f_lseek+0x374>
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	699b      	ldr	r3, [r3, #24]
 80141e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141e8:	429a      	cmp	r2, r3
 80141ea:	d309      	bcc.n	8014200 <f_lseek+0x388>
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	2202      	movs	r2, #2
 80141f0:	755a      	strb	r2, [r3, #21]
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	2102      	movs	r1, #2
 80141f6:	4618      	mov	r0, r3
 80141f8:	f7fd fcbd 	bl	8011b76 <unlock_fs>
 80141fc:	2302      	movs	r3, #2
 80141fe:	e08a      	b.n	8014316 <f_lseek+0x49e>
					fp->clust = clst;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014204:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014206:	683a      	ldr	r2, [r7, #0]
 8014208:	69fb      	ldr	r3, [r7, #28]
 801420a:	429a      	cmp	r2, r3
 801420c:	d8b6      	bhi.n	801417c <f_lseek+0x304>
				}
				fp->fptr += ofs;
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	699a      	ldr	r2, [r3, #24]
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	441a      	add	r2, r3
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801421a:	683b      	ldr	r3, [r7, #0]
 801421c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014220:	2b00      	cmp	r3, #0
 8014222:	d017      	beq.n	8014254 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014228:	4618      	mov	r0, r3
 801422a:	f7fd ff0b 	bl	8012044 <clust2sect>
 801422e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014232:	2b00      	cmp	r3, #0
 8014234:	d109      	bne.n	801424a <f_lseek+0x3d2>
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	2202      	movs	r2, #2
 801423a:	755a      	strb	r2, [r3, #21]
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	2102      	movs	r1, #2
 8014240:	4618      	mov	r0, r3
 8014242:	f7fd fc98 	bl	8011b76 <unlock_fs>
 8014246:	2302      	movs	r3, #2
 8014248:	e065      	b.n	8014316 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 801424a:	683b      	ldr	r3, [r7, #0]
 801424c:	0a5b      	lsrs	r3, r3, #9
 801424e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014250:	4413      	add	r3, r2
 8014252:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	699a      	ldr	r2, [r3, #24]
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	68db      	ldr	r3, [r3, #12]
 801425c:	429a      	cmp	r2, r3
 801425e:	d90a      	bls.n	8014276 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	699a      	ldr	r2, [r3, #24]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	7d1b      	ldrb	r3, [r3, #20]
 801426c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014270:	b2da      	uxtb	r2, r3
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	699b      	ldr	r3, [r3, #24]
 801427a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801427e:	2b00      	cmp	r3, #0
 8014280:	d040      	beq.n	8014304 <f_lseek+0x48c>
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	6a1b      	ldr	r3, [r3, #32]
 8014286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014288:	429a      	cmp	r2, r3
 801428a:	d03b      	beq.n	8014304 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	7d1b      	ldrb	r3, [r3, #20]
 8014290:	b25b      	sxtb	r3, r3
 8014292:	2b00      	cmp	r3, #0
 8014294:	da1d      	bge.n	80142d2 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	7858      	ldrb	r0, [r3, #1]
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	6a1a      	ldr	r2, [r3, #32]
 80142a4:	2301      	movs	r3, #1
 80142a6:	f7fd fb13 	bl	80118d0 <disk_write>
 80142aa:	4603      	mov	r3, r0
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d009      	beq.n	80142c4 <f_lseek+0x44c>
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2201      	movs	r2, #1
 80142b4:	755a      	strb	r2, [r3, #21]
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	2101      	movs	r1, #1
 80142ba:	4618      	mov	r0, r3
 80142bc:	f7fd fc5b 	bl	8011b76 <unlock_fs>
 80142c0:	2301      	movs	r3, #1
 80142c2:	e028      	b.n	8014316 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	7d1b      	ldrb	r3, [r3, #20]
 80142c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80142cc:	b2da      	uxtb	r2, r3
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	7858      	ldrb	r0, [r3, #1]
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142dc:	2301      	movs	r3, #1
 80142de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142e0:	f7fd fad6 	bl	8011890 <disk_read>
 80142e4:	4603      	mov	r3, r0
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d009      	beq.n	80142fe <f_lseek+0x486>
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2201      	movs	r2, #1
 80142ee:	755a      	strb	r2, [r3, #21]
 80142f0:	68bb      	ldr	r3, [r7, #8]
 80142f2:	2101      	movs	r1, #1
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7fd fc3e 	bl	8011b76 <unlock_fs>
 80142fa:	2301      	movs	r3, #1
 80142fc:	e00b      	b.n	8014316 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014302:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801430a:	4611      	mov	r1, r2
 801430c:	4618      	mov	r0, r3
 801430e:	f7fd fc32 	bl	8011b76 <unlock_fs>
 8014312:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014316:	4618      	mov	r0, r3
 8014318:	3740      	adds	r7, #64	; 0x40
 801431a:	46bd      	mov	sp, r7
 801431c:	bd80      	pop	{r7, pc}

0801431e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801431e:	b580      	push	{r7, lr}
 8014320:	b086      	sub	sp, #24
 8014322:	af00      	add	r7, sp, #0
 8014324:	6078      	str	r0, [r7, #4]
 8014326:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d101      	bne.n	8014332 <f_opendir+0x14>
 801432e:	2309      	movs	r3, #9
 8014330:	e06a      	b.n	8014408 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8014336:	f107 010c 	add.w	r1, r7, #12
 801433a:	463b      	mov	r3, r7
 801433c:	2200      	movs	r2, #0
 801433e:	4618      	mov	r0, r3
 8014340:	f7fe fea8 	bl	8013094 <find_volume>
 8014344:	4603      	mov	r3, r0
 8014346:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014348:	7dfb      	ldrb	r3, [r7, #23]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d14f      	bne.n	80143ee <f_opendir+0xd0>
		obj->fs = fs;
 801434e:	68fa      	ldr	r2, [r7, #12]
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	4619      	mov	r1, r3
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f7fe fd8f 	bl	8012e7c <follow_path>
 801435e:	4603      	mov	r3, r0
 8014360:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8014362:	7dfb      	ldrb	r3, [r7, #23]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d13d      	bne.n	80143e4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801436e:	b25b      	sxtb	r3, r3
 8014370:	2b00      	cmp	r3, #0
 8014372:	db12      	blt.n	801439a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	799b      	ldrb	r3, [r3, #6]
 8014378:	f003 0310 	and.w	r3, r3, #16
 801437c:	2b00      	cmp	r3, #0
 801437e:	d00a      	beq.n	8014396 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014380:	68fa      	ldr	r2, [r7, #12]
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	6a1b      	ldr	r3, [r3, #32]
 8014386:	4619      	mov	r1, r3
 8014388:	4610      	mov	r0, r2
 801438a:	f7fe fabe 	bl	801290a <ld_clust>
 801438e:	4602      	mov	r2, r0
 8014390:	693b      	ldr	r3, [r7, #16]
 8014392:	609a      	str	r2, [r3, #8]
 8014394:	e001      	b.n	801439a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014396:	2305      	movs	r3, #5
 8014398:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801439a:	7dfb      	ldrb	r3, [r7, #23]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d121      	bne.n	80143e4 <f_opendir+0xc6>
				obj->id = fs->id;
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	88da      	ldrh	r2, [r3, #6]
 80143a4:	693b      	ldr	r3, [r7, #16]
 80143a6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80143a8:	2100      	movs	r1, #0
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f7fe f926 	bl	80125fc <dir_sdi>
 80143b0:	4603      	mov	r3, r0
 80143b2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80143b4:	7dfb      	ldrb	r3, [r7, #23]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d114      	bne.n	80143e4 <f_opendir+0xc6>
					if (obj->sclust) {
 80143ba:	693b      	ldr	r3, [r7, #16]
 80143bc:	689b      	ldr	r3, [r3, #8]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d00d      	beq.n	80143de <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80143c2:	2100      	movs	r1, #0
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f7fd fc6f 	bl	8011ca8 <inc_lock>
 80143ca:	4602      	mov	r2, r0
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80143d0:	693b      	ldr	r3, [r7, #16]
 80143d2:	691b      	ldr	r3, [r3, #16]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d105      	bne.n	80143e4 <f_opendir+0xc6>
 80143d8:	2312      	movs	r3, #18
 80143da:	75fb      	strb	r3, [r7, #23]
 80143dc:	e002      	b.n	80143e4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80143de:	693b      	ldr	r3, [r7, #16]
 80143e0:	2200      	movs	r2, #0
 80143e2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80143e4:	7dfb      	ldrb	r3, [r7, #23]
 80143e6:	2b04      	cmp	r3, #4
 80143e8:	d101      	bne.n	80143ee <f_opendir+0xd0>
 80143ea:	2305      	movs	r3, #5
 80143ec:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80143ee:	7dfb      	ldrb	r3, [r7, #23]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d002      	beq.n	80143fa <f_opendir+0xdc>
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	2200      	movs	r2, #0
 80143f8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	7dfa      	ldrb	r2, [r7, #23]
 80143fe:	4611      	mov	r1, r2
 8014400:	4618      	mov	r0, r3
 8014402:	f7fd fbb8 	bl	8011b76 <unlock_fs>
 8014406:	7dfb      	ldrb	r3, [r7, #23]
}
 8014408:	4618      	mov	r0, r3
 801440a:	3718      	adds	r7, #24
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}

08014410 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b084      	sub	sp, #16
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f107 0208 	add.w	r2, r7, #8
 801441e:	4611      	mov	r1, r2
 8014420:	4618      	mov	r0, r3
 8014422:	f7ff f88b 	bl	801353c <validate>
 8014426:	4603      	mov	r3, r0
 8014428:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801442a:	7bfb      	ldrb	r3, [r7, #15]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d115      	bne.n	801445c <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	691b      	ldr	r3, [r3, #16]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d006      	beq.n	8014446 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	691b      	ldr	r3, [r3, #16]
 801443c:	4618      	mov	r0, r3
 801443e:	f7fd fcc1 	bl	8011dc4 <dec_lock>
 8014442:	4603      	mov	r3, r0
 8014444:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8014446:	7bfb      	ldrb	r3, [r7, #15]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d102      	bne.n	8014452 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2200      	movs	r2, #0
 8014450:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8014452:	68bb      	ldr	r3, [r7, #8]
 8014454:	2100      	movs	r1, #0
 8014456:	4618      	mov	r0, r3
 8014458:	f7fd fb8d 	bl	8011b76 <unlock_fs>
#endif
	}
	return res;
 801445c:	7bfb      	ldrb	r3, [r7, #15]
}
 801445e:	4618      	mov	r0, r3
 8014460:	3710      	adds	r7, #16
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}

08014466 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014466:	b580      	push	{r7, lr}
 8014468:	b084      	sub	sp, #16
 801446a:	af00      	add	r7, sp, #0
 801446c:	6078      	str	r0, [r7, #4]
 801446e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f107 0208 	add.w	r2, r7, #8
 8014476:	4611      	mov	r1, r2
 8014478:	4618      	mov	r0, r3
 801447a:	f7ff f85f 	bl	801353c <validate>
 801447e:	4603      	mov	r3, r0
 8014480:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014482:	7bfb      	ldrb	r3, [r7, #15]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d126      	bne.n	80144d6 <f_readdir+0x70>
		if (!fno) {
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d106      	bne.n	801449c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801448e:	2100      	movs	r1, #0
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f7fe f8b3 	bl	80125fc <dir_sdi>
 8014496:	4603      	mov	r3, r0
 8014498:	73fb      	strb	r3, [r7, #15]
 801449a:	e01c      	b.n	80144d6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801449c:	2100      	movs	r1, #0
 801449e:	6878      	ldr	r0, [r7, #4]
 80144a0:	f7fe fa72 	bl	8012988 <dir_read>
 80144a4:	4603      	mov	r3, r0
 80144a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80144a8:	7bfb      	ldrb	r3, [r7, #15]
 80144aa:	2b04      	cmp	r3, #4
 80144ac:	d101      	bne.n	80144b2 <f_readdir+0x4c>
 80144ae:	2300      	movs	r3, #0
 80144b0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80144b2:	7bfb      	ldrb	r3, [r7, #15]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d10e      	bne.n	80144d6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80144b8:	6839      	ldr	r1, [r7, #0]
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	f7fe fb48 	bl	8012b50 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80144c0:	2100      	movs	r1, #0
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f7fe f915 	bl	80126f2 <dir_next>
 80144c8:	4603      	mov	r3, r0
 80144ca:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80144cc:	7bfb      	ldrb	r3, [r7, #15]
 80144ce:	2b04      	cmp	r3, #4
 80144d0:	d101      	bne.n	80144d6 <f_readdir+0x70>
 80144d2:	2300      	movs	r3, #0
 80144d4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	7bfa      	ldrb	r2, [r7, #15]
 80144da:	4611      	mov	r1, r2
 80144dc:	4618      	mov	r0, r3
 80144de:	f7fd fb4a 	bl	8011b76 <unlock_fs>
 80144e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80144e4:	4618      	mov	r0, r3
 80144e6:	3710      	adds	r7, #16
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}

080144ec <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b084      	sub	sp, #16
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
 80144f4:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 80144f6:	6839      	ldr	r1, [r7, #0]
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f7ff ffb4 	bl	8014466 <f_readdir>
 80144fe:	4603      	mov	r3, r0
 8014500:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8014502:	7bfb      	ldrb	r3, [r7, #15]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d114      	bne.n	8014532 <f_findnext+0x46>
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d011      	beq.n	8014532 <f_findnext+0x46>
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	7a5b      	ldrb	r3, [r3, #9]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d00d      	beq.n	8014532 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	f103 0109 	add.w	r1, r3, #9
 8014520:	2300      	movs	r3, #0
 8014522:	2200      	movs	r2, #0
 8014524:	f7fe fb9a 	bl	8012c5c <pattern_matching>
 8014528:	4603      	mov	r3, r0
 801452a:	2b00      	cmp	r3, #0
 801452c:	d100      	bne.n	8014530 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 801452e:	e7e2      	b.n	80144f6 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8014530:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8014532:	7bfb      	ldrb	r3, [r7, #15]
}
 8014534:	4618      	mov	r0, r3
 8014536:	3710      	adds	r7, #16
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}

0801453c <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b086      	sub	sp, #24
 8014540:	af00      	add	r7, sp, #0
 8014542:	60f8      	str	r0, [r7, #12]
 8014544:	60b9      	str	r1, [r7, #8]
 8014546:	607a      	str	r2, [r7, #4]
 8014548:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	683a      	ldr	r2, [r7, #0]
 801454e:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 8014550:	6879      	ldr	r1, [r7, #4]
 8014552:	68f8      	ldr	r0, [r7, #12]
 8014554:	f7ff fee3 	bl	801431e <f_opendir>
 8014558:	4603      	mov	r3, r0
 801455a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801455c:	7dfb      	ldrb	r3, [r7, #23]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d105      	bne.n	801456e <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8014562:	68b9      	ldr	r1, [r7, #8]
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f7ff ffc1 	bl	80144ec <f_findnext>
 801456a:	4603      	mov	r3, r0
 801456c:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 801456e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014570:	4618      	mov	r0, r3
 8014572:	3718      	adds	r7, #24
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014578:	b480      	push	{r7}
 801457a:	b087      	sub	sp, #28
 801457c:	af00      	add	r7, sp, #0
 801457e:	60f8      	str	r0, [r7, #12]
 8014580:	60b9      	str	r1, [r7, #8]
 8014582:	4613      	mov	r3, r2
 8014584:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014586:	2301      	movs	r3, #1
 8014588:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801458a:	2300      	movs	r3, #0
 801458c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801458e:	4b1f      	ldr	r3, [pc, #124]	; (801460c <FATFS_LinkDriverEx+0x94>)
 8014590:	7a5b      	ldrb	r3, [r3, #9]
 8014592:	b2db      	uxtb	r3, r3
 8014594:	2b00      	cmp	r3, #0
 8014596:	d131      	bne.n	80145fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014598:	4b1c      	ldr	r3, [pc, #112]	; (801460c <FATFS_LinkDriverEx+0x94>)
 801459a:	7a5b      	ldrb	r3, [r3, #9]
 801459c:	b2db      	uxtb	r3, r3
 801459e:	461a      	mov	r2, r3
 80145a0:	4b1a      	ldr	r3, [pc, #104]	; (801460c <FATFS_LinkDriverEx+0x94>)
 80145a2:	2100      	movs	r1, #0
 80145a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80145a6:	4b19      	ldr	r3, [pc, #100]	; (801460c <FATFS_LinkDriverEx+0x94>)
 80145a8:	7a5b      	ldrb	r3, [r3, #9]
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	4a17      	ldr	r2, [pc, #92]	; (801460c <FATFS_LinkDriverEx+0x94>)
 80145ae:	009b      	lsls	r3, r3, #2
 80145b0:	4413      	add	r3, r2
 80145b2:	68fa      	ldr	r2, [r7, #12]
 80145b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80145b6:	4b15      	ldr	r3, [pc, #84]	; (801460c <FATFS_LinkDriverEx+0x94>)
 80145b8:	7a5b      	ldrb	r3, [r3, #9]
 80145ba:	b2db      	uxtb	r3, r3
 80145bc:	461a      	mov	r2, r3
 80145be:	4b13      	ldr	r3, [pc, #76]	; (801460c <FATFS_LinkDriverEx+0x94>)
 80145c0:	4413      	add	r3, r2
 80145c2:	79fa      	ldrb	r2, [r7, #7]
 80145c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80145c6:	4b11      	ldr	r3, [pc, #68]	; (801460c <FATFS_LinkDriverEx+0x94>)
 80145c8:	7a5b      	ldrb	r3, [r3, #9]
 80145ca:	b2db      	uxtb	r3, r3
 80145cc:	1c5a      	adds	r2, r3, #1
 80145ce:	b2d1      	uxtb	r1, r2
 80145d0:	4a0e      	ldr	r2, [pc, #56]	; (801460c <FATFS_LinkDriverEx+0x94>)
 80145d2:	7251      	strb	r1, [r2, #9]
 80145d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80145d6:	7dbb      	ldrb	r3, [r7, #22]
 80145d8:	3330      	adds	r3, #48	; 0x30
 80145da:	b2da      	uxtb	r2, r3
 80145dc:	68bb      	ldr	r3, [r7, #8]
 80145de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	3301      	adds	r3, #1
 80145e4:	223a      	movs	r2, #58	; 0x3a
 80145e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80145e8:	68bb      	ldr	r3, [r7, #8]
 80145ea:	3302      	adds	r3, #2
 80145ec:	222f      	movs	r2, #47	; 0x2f
 80145ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	3303      	adds	r3, #3
 80145f4:	2200      	movs	r2, #0
 80145f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80145f8:	2300      	movs	r3, #0
 80145fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80145fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80145fe:	4618      	mov	r0, r3
 8014600:	371c      	adds	r7, #28
 8014602:	46bd      	mov	sp, r7
 8014604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014608:	4770      	bx	lr
 801460a:	bf00      	nop
 801460c:	200003a4 	.word	0x200003a4

08014610 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b082      	sub	sp, #8
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
 8014618:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801461a:	2200      	movs	r2, #0
 801461c:	6839      	ldr	r1, [r7, #0]
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f7ff ffaa 	bl	8014578 <FATFS_LinkDriverEx>
 8014624:	4603      	mov	r3, r0
}
 8014626:	4618      	mov	r0, r3
 8014628:	3708      	adds	r7, #8
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}

0801462e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801462e:	b580      	push	{r7, lr}
 8014630:	b084      	sub	sp, #16
 8014632:	af00      	add	r7, sp, #0
 8014634:	4603      	mov	r3, r0
 8014636:	6039      	str	r1, [r7, #0]
 8014638:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801463a:	2200      	movs	r2, #0
 801463c:	2101      	movs	r1, #1
 801463e:	2001      	movs	r0, #1
 8014640:	f000 fb8e 	bl	8014d60 <osSemaphoreNew>
 8014644:	4602      	mov	r2, r0
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	2b00      	cmp	r3, #0
 8014650:	bf14      	ite	ne
 8014652:	2301      	movne	r3, #1
 8014654:	2300      	moveq	r3, #0
 8014656:	b2db      	uxtb	r3, r3
 8014658:	60fb      	str	r3, [r7, #12]

    return ret;
 801465a:	68fb      	ldr	r3, [r7, #12]
}
 801465c:	4618      	mov	r0, r3
 801465e:	3710      	adds	r7, #16
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}

08014664 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b082      	sub	sp, #8
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f000 fcd3 	bl	8015018 <osSemaphoreDelete>
#endif
    return 1;
 8014672:	2301      	movs	r3, #1
}
 8014674:	4618      	mov	r0, r3
 8014676:	3708      	adds	r7, #8
 8014678:	46bd      	mov	sp, r7
 801467a:	bd80      	pop	{r7, pc}

0801467c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b084      	sub	sp, #16
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8014684:	2300      	movs	r3, #0
 8014686:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8014688:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f000 fc05 	bl	8014e9c <osSemaphoreAcquire>
 8014692:	4603      	mov	r3, r0
 8014694:	2b00      	cmp	r3, #0
 8014696:	d101      	bne.n	801469c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8014698:	2301      	movs	r3, #1
 801469a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801469c:	68fb      	ldr	r3, [r7, #12]
}
 801469e:	4618      	mov	r0, r3
 80146a0:	3710      	adds	r7, #16
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}

080146a6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80146a6:	b580      	push	{r7, lr}
 80146a8:	b082      	sub	sp, #8
 80146aa:	af00      	add	r7, sp, #0
 80146ac:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f000 fc5a 	bl	8014f68 <osSemaphoreRelease>
#endif
}
 80146b4:	bf00      	nop
 80146b6:	3708      	adds	r7, #8
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd80      	pop	{r7, pc}

080146bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80146bc:	b480      	push	{r7}
 80146be:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80146c0:	bf00      	nop
 80146c2:	46bd      	mov	sp, r7
 80146c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c8:	4770      	bx	lr
	...

080146cc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80146cc:	b480      	push	{r7}
 80146ce:	b085      	sub	sp, #20
 80146d0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80146d2:	f3ef 8305 	mrs	r3, IPSR
 80146d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80146d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d10f      	bne.n	80146fe <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80146de:	f3ef 8310 	mrs	r3, PRIMASK
 80146e2:	607b      	str	r3, [r7, #4]
  return(result);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d105      	bne.n	80146f6 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80146ea:	f3ef 8311 	mrs	r3, BASEPRI
 80146ee:	603b      	str	r3, [r7, #0]
  return(result);
 80146f0:	683b      	ldr	r3, [r7, #0]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d007      	beq.n	8014706 <osKernelInitialize+0x3a>
 80146f6:	4b0e      	ldr	r3, [pc, #56]	; (8014730 <osKernelInitialize+0x64>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	2b02      	cmp	r3, #2
 80146fc:	d103      	bne.n	8014706 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80146fe:	f06f 0305 	mvn.w	r3, #5
 8014702:	60fb      	str	r3, [r7, #12]
 8014704:	e00c      	b.n	8014720 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014706:	4b0a      	ldr	r3, [pc, #40]	; (8014730 <osKernelInitialize+0x64>)
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d105      	bne.n	801471a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801470e:	4b08      	ldr	r3, [pc, #32]	; (8014730 <osKernelInitialize+0x64>)
 8014710:	2201      	movs	r2, #1
 8014712:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014714:	2300      	movs	r3, #0
 8014716:	60fb      	str	r3, [r7, #12]
 8014718:	e002      	b.n	8014720 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 801471a:	f04f 33ff 	mov.w	r3, #4294967295
 801471e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8014720:	68fb      	ldr	r3, [r7, #12]
}
 8014722:	4618      	mov	r0, r3
 8014724:	3714      	adds	r7, #20
 8014726:	46bd      	mov	sp, r7
 8014728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472c:	4770      	bx	lr
 801472e:	bf00      	nop
 8014730:	200003b0 	.word	0x200003b0

08014734 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 801473a:	f002 fec5 	bl	80174c8 <xTaskGetSchedulerState>
 801473e:	4603      	mov	r3, r0
 8014740:	2b00      	cmp	r3, #0
 8014742:	d004      	beq.n	801474e <osKernelGetState+0x1a>
 8014744:	2b02      	cmp	r3, #2
 8014746:	d105      	bne.n	8014754 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8014748:	2302      	movs	r3, #2
 801474a:	607b      	str	r3, [r7, #4]
      break;
 801474c:	e00c      	b.n	8014768 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 801474e:	2303      	movs	r3, #3
 8014750:	607b      	str	r3, [r7, #4]
      break;
 8014752:	e009      	b.n	8014768 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8014754:	4b07      	ldr	r3, [pc, #28]	; (8014774 <osKernelGetState+0x40>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	2b01      	cmp	r3, #1
 801475a:	d102      	bne.n	8014762 <osKernelGetState+0x2e>
        state = osKernelReady;
 801475c:	2301      	movs	r3, #1
 801475e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8014760:	e001      	b.n	8014766 <osKernelGetState+0x32>
        state = osKernelInactive;
 8014762:	2300      	movs	r3, #0
 8014764:	607b      	str	r3, [r7, #4]
      break;
 8014766:	bf00      	nop
  }

  return (state);
 8014768:	687b      	ldr	r3, [r7, #4]
}
 801476a:	4618      	mov	r0, r3
 801476c:	3708      	adds	r7, #8
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}
 8014772:	bf00      	nop
 8014774:	200003b0 	.word	0x200003b0

08014778 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8014778:	b580      	push	{r7, lr}
 801477a:	b084      	sub	sp, #16
 801477c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801477e:	f3ef 8305 	mrs	r3, IPSR
 8014782:	60bb      	str	r3, [r7, #8]
  return(result);
 8014784:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014786:	2b00      	cmp	r3, #0
 8014788:	d10f      	bne.n	80147aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801478a:	f3ef 8310 	mrs	r3, PRIMASK
 801478e:	607b      	str	r3, [r7, #4]
  return(result);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d105      	bne.n	80147a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014796:	f3ef 8311 	mrs	r3, BASEPRI
 801479a:	603b      	str	r3, [r7, #0]
  return(result);
 801479c:	683b      	ldr	r3, [r7, #0]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d007      	beq.n	80147b2 <osKernelStart+0x3a>
 80147a2:	4b0f      	ldr	r3, [pc, #60]	; (80147e0 <osKernelStart+0x68>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	2b02      	cmp	r3, #2
 80147a8:	d103      	bne.n	80147b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80147aa:	f06f 0305 	mvn.w	r3, #5
 80147ae:	60fb      	str	r3, [r7, #12]
 80147b0:	e010      	b.n	80147d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80147b2:	4b0b      	ldr	r3, [pc, #44]	; (80147e0 <osKernelStart+0x68>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	2b01      	cmp	r3, #1
 80147b8:	d109      	bne.n	80147ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80147ba:	f7ff ff7f 	bl	80146bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80147be:	4b08      	ldr	r3, [pc, #32]	; (80147e0 <osKernelStart+0x68>)
 80147c0:	2202      	movs	r2, #2
 80147c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80147c4:	f002 fa12 	bl	8016bec <vTaskStartScheduler>
      stat = osOK;
 80147c8:	2300      	movs	r3, #0
 80147ca:	60fb      	str	r3, [r7, #12]
 80147cc:	e002      	b.n	80147d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80147ce:	f04f 33ff 	mov.w	r3, #4294967295
 80147d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80147d4:	68fb      	ldr	r3, [r7, #12]
}
 80147d6:	4618      	mov	r0, r3
 80147d8:	3710      	adds	r7, #16
 80147da:	46bd      	mov	sp, r7
 80147dc:	bd80      	pop	{r7, pc}
 80147de:	bf00      	nop
 80147e0:	200003b0 	.word	0x200003b0

080147e4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b084      	sub	sp, #16
 80147e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80147ea:	f3ef 8305 	mrs	r3, IPSR
 80147ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80147f0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d10f      	bne.n	8014816 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80147f6:	f3ef 8310 	mrs	r3, PRIMASK
 80147fa:	607b      	str	r3, [r7, #4]
  return(result);
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d105      	bne.n	801480e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014802:	f3ef 8311 	mrs	r3, BASEPRI
 8014806:	603b      	str	r3, [r7, #0]
  return(result);
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d007      	beq.n	801481e <osKernelGetTickCount+0x3a>
 801480e:	4b08      	ldr	r3, [pc, #32]	; (8014830 <osKernelGetTickCount+0x4c>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	2b02      	cmp	r3, #2
 8014814:	d103      	bne.n	801481e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8014816:	f002 fb0d 	bl	8016e34 <xTaskGetTickCountFromISR>
 801481a:	60f8      	str	r0, [r7, #12]
 801481c:	e002      	b.n	8014824 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 801481e:	f002 faf9 	bl	8016e14 <xTaskGetTickCount>
 8014822:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8014824:	68fb      	ldr	r3, [r7, #12]
}
 8014826:	4618      	mov	r0, r3
 8014828:	3710      	adds	r7, #16
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}
 801482e:	bf00      	nop
 8014830:	200003b0 	.word	0x200003b0

08014834 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8014834:	b480      	push	{r7}
 8014836:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8014838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 801483c:	4618      	mov	r0, r3
 801483e:	46bd      	mov	sp, r7
 8014840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014844:	4770      	bx	lr
	...

08014848 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014848:	b580      	push	{r7, lr}
 801484a:	b090      	sub	sp, #64	; 0x40
 801484c:	af04      	add	r7, sp, #16
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	60b9      	str	r1, [r7, #8]
 8014852:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014854:	2300      	movs	r3, #0
 8014856:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014858:	f3ef 8305 	mrs	r3, IPSR
 801485c:	61fb      	str	r3, [r7, #28]
  return(result);
 801485e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8014860:	2b00      	cmp	r3, #0
 8014862:	f040 808f 	bne.w	8014984 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014866:	f3ef 8310 	mrs	r3, PRIMASK
 801486a:	61bb      	str	r3, [r7, #24]
  return(result);
 801486c:	69bb      	ldr	r3, [r7, #24]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d105      	bne.n	801487e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014872:	f3ef 8311 	mrs	r3, BASEPRI
 8014876:	617b      	str	r3, [r7, #20]
  return(result);
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d003      	beq.n	8014886 <osThreadNew+0x3e>
 801487e:	4b44      	ldr	r3, [pc, #272]	; (8014990 <osThreadNew+0x148>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	2b02      	cmp	r3, #2
 8014884:	d07e      	beq.n	8014984 <osThreadNew+0x13c>
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d07b      	beq.n	8014984 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 801488c:	2380      	movs	r3, #128	; 0x80
 801488e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8014890:	2318      	movs	r3, #24
 8014892:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8014894:	2300      	movs	r3, #0
 8014896:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8014898:	f04f 33ff 	mov.w	r3, #4294967295
 801489c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d045      	beq.n	8014930 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d002      	beq.n	80148b2 <osThreadNew+0x6a>
        name = attr->name;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	699b      	ldr	r3, [r3, #24]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d002      	beq.n	80148c0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	699b      	ldr	r3, [r3, #24]
 80148be:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80148c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d008      	beq.n	80148d8 <osThreadNew+0x90>
 80148c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c8:	2b38      	cmp	r3, #56	; 0x38
 80148ca:	d805      	bhi.n	80148d8 <osThreadNew+0x90>
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	685b      	ldr	r3, [r3, #4]
 80148d0:	f003 0301 	and.w	r3, r3, #1
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d001      	beq.n	80148dc <osThreadNew+0x94>
        return (NULL);
 80148d8:	2300      	movs	r3, #0
 80148da:	e054      	b.n	8014986 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	695b      	ldr	r3, [r3, #20]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d003      	beq.n	80148ec <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	695b      	ldr	r3, [r3, #20]
 80148e8:	089b      	lsrs	r3, r3, #2
 80148ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	689b      	ldr	r3, [r3, #8]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d00e      	beq.n	8014912 <osThreadNew+0xca>
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	68db      	ldr	r3, [r3, #12]
 80148f8:	2b5b      	cmp	r3, #91	; 0x5b
 80148fa:	d90a      	bls.n	8014912 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014900:	2b00      	cmp	r3, #0
 8014902:	d006      	beq.n	8014912 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	695b      	ldr	r3, [r3, #20]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d002      	beq.n	8014912 <osThreadNew+0xca>
        mem = 1;
 801490c:	2301      	movs	r3, #1
 801490e:	623b      	str	r3, [r7, #32]
 8014910:	e010      	b.n	8014934 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	689b      	ldr	r3, [r3, #8]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d10c      	bne.n	8014934 <osThreadNew+0xec>
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	68db      	ldr	r3, [r3, #12]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d108      	bne.n	8014934 <osThreadNew+0xec>
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	691b      	ldr	r3, [r3, #16]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d104      	bne.n	8014934 <osThreadNew+0xec>
          mem = 0;
 801492a:	2300      	movs	r3, #0
 801492c:	623b      	str	r3, [r7, #32]
 801492e:	e001      	b.n	8014934 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8014930:	2300      	movs	r3, #0
 8014932:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8014934:	6a3b      	ldr	r3, [r7, #32]
 8014936:	2b01      	cmp	r3, #1
 8014938:	d110      	bne.n	801495c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 801493e:	687a      	ldr	r2, [r7, #4]
 8014940:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014942:	9202      	str	r2, [sp, #8]
 8014944:	9301      	str	r3, [sp, #4]
 8014946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014948:	9300      	str	r3, [sp, #0]
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801494e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014950:	68f8      	ldr	r0, [r7, #12]
 8014952:	f001 feef 	bl	8016734 <xTaskCreateStatic>
 8014956:	4603      	mov	r3, r0
 8014958:	613b      	str	r3, [r7, #16]
 801495a:	e013      	b.n	8014984 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 801495c:	6a3b      	ldr	r3, [r7, #32]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d110      	bne.n	8014984 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014964:	b29a      	uxth	r2, r3
 8014966:	f107 0310 	add.w	r3, r7, #16
 801496a:	9301      	str	r3, [sp, #4]
 801496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496e:	9300      	str	r3, [sp, #0]
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014974:	68f8      	ldr	r0, [r7, #12]
 8014976:	f001 ff3d 	bl	80167f4 <xTaskCreate>
 801497a:	4603      	mov	r3, r0
 801497c:	2b01      	cmp	r3, #1
 801497e:	d001      	beq.n	8014984 <osThreadNew+0x13c>
          hTask = NULL;
 8014980:	2300      	movs	r3, #0
 8014982:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014984:	693b      	ldr	r3, [r7, #16]
}
 8014986:	4618      	mov	r0, r3
 8014988:	3730      	adds	r7, #48	; 0x30
 801498a:	46bd      	mov	sp, r7
 801498c:	bd80      	pop	{r7, pc}
 801498e:	bf00      	nop
 8014990:	200003b0 	.word	0x200003b0

08014994 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8014994:	b580      	push	{r7, lr}
 8014996:	b086      	sub	sp, #24
 8014998:	af00      	add	r7, sp, #0
 801499a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801499c:	f3ef 8305 	mrs	r3, IPSR
 80149a0:	613b      	str	r3, [r7, #16]
  return(result);
 80149a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d10f      	bne.n	80149c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80149a8:	f3ef 8310 	mrs	r3, PRIMASK
 80149ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d105      	bne.n	80149c0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80149b4:	f3ef 8311 	mrs	r3, BASEPRI
 80149b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d007      	beq.n	80149d0 <osDelay+0x3c>
 80149c0:	4b0a      	ldr	r3, [pc, #40]	; (80149ec <osDelay+0x58>)
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	2b02      	cmp	r3, #2
 80149c6:	d103      	bne.n	80149d0 <osDelay+0x3c>
    stat = osErrorISR;
 80149c8:	f06f 0305 	mvn.w	r3, #5
 80149cc:	617b      	str	r3, [r7, #20]
 80149ce:	e007      	b.n	80149e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80149d0:	2300      	movs	r3, #0
 80149d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d002      	beq.n	80149e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f002 f8d0 	bl	8016b80 <vTaskDelay>
    }
  }

  return (stat);
 80149e0:	697b      	ldr	r3, [r7, #20]
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3718      	adds	r7, #24
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	200003b0 	.word	0x200003b0

080149f0 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b088      	sub	sp, #32
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80149f8:	f3ef 8305 	mrs	r3, IPSR
 80149fc:	617b      	str	r3, [r7, #20]
  return(result);
 80149fe:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d10f      	bne.n	8014a24 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a04:	f3ef 8310 	mrs	r3, PRIMASK
 8014a08:	613b      	str	r3, [r7, #16]
  return(result);
 8014a0a:	693b      	ldr	r3, [r7, #16]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d105      	bne.n	8014a1c <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014a10:	f3ef 8311 	mrs	r3, BASEPRI
 8014a14:	60fb      	str	r3, [r7, #12]
  return(result);
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d007      	beq.n	8014a2c <osDelayUntil+0x3c>
 8014a1c:	4b13      	ldr	r3, [pc, #76]	; (8014a6c <osDelayUntil+0x7c>)
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	2b02      	cmp	r3, #2
 8014a22:	d103      	bne.n	8014a2c <osDelayUntil+0x3c>
    stat = osErrorISR;
 8014a24:	f06f 0305 	mvn.w	r3, #5
 8014a28:	61fb      	str	r3, [r7, #28]
 8014a2a:	e019      	b.n	8014a60 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8014a30:	f002 f9f0 	bl	8016e14 <xTaskGetTickCount>
 8014a34:	4603      	mov	r3, r0
 8014a36:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	687a      	ldr	r2, [r7, #4]
 8014a3c:	1ad3      	subs	r3, r2, r3
 8014a3e:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8014a40:	69bb      	ldr	r3, [r7, #24]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d009      	beq.n	8014a5a <osDelayUntil+0x6a>
 8014a46:	69bb      	ldr	r3, [r7, #24]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	db06      	blt.n	8014a5a <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8014a4c:	f107 0308 	add.w	r3, r7, #8
 8014a50:	69b9      	ldr	r1, [r7, #24]
 8014a52:	4618      	mov	r0, r3
 8014a54:	f002 f814 	bl	8016a80 <vTaskDelayUntil>
 8014a58:	e002      	b.n	8014a60 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8014a5a:	f06f 0303 	mvn.w	r3, #3
 8014a5e:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8014a60:	69fb      	ldr	r3, [r7, #28]
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3720      	adds	r7, #32
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}
 8014a6a:	bf00      	nop
 8014a6c:	200003b0 	.word	0x200003b0

08014a70 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b08a      	sub	sp, #40	; 0x28
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8014a78:	2300      	movs	r3, #0
 8014a7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014a7c:	f3ef 8305 	mrs	r3, IPSR
 8014a80:	613b      	str	r3, [r7, #16]
  return(result);
 8014a82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	f040 8085 	bne.w	8014b94 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8014a8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d105      	bne.n	8014aa2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014a96:	f3ef 8311 	mrs	r3, BASEPRI
 8014a9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d003      	beq.n	8014aaa <osMutexNew+0x3a>
 8014aa2:	4b3f      	ldr	r3, [pc, #252]	; (8014ba0 <osMutexNew+0x130>)
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	2b02      	cmp	r3, #2
 8014aa8:	d074      	beq.n	8014b94 <osMutexNew+0x124>
    if (attr != NULL) {
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d003      	beq.n	8014ab8 <osMutexNew+0x48>
      type = attr->attr_bits;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	685b      	ldr	r3, [r3, #4]
 8014ab4:	623b      	str	r3, [r7, #32]
 8014ab6:	e001      	b.n	8014abc <osMutexNew+0x4c>
    } else {
      type = 0U;
 8014ab8:	2300      	movs	r3, #0
 8014aba:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8014abc:	6a3b      	ldr	r3, [r7, #32]
 8014abe:	f003 0301 	and.w	r3, r3, #1
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d002      	beq.n	8014acc <osMutexNew+0x5c>
      rmtx = 1U;
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	61fb      	str	r3, [r7, #28]
 8014aca:	e001      	b.n	8014ad0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8014acc:	2300      	movs	r3, #0
 8014ace:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8014ad0:	6a3b      	ldr	r3, [r7, #32]
 8014ad2:	f003 0308 	and.w	r3, r3, #8
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d15c      	bne.n	8014b94 <osMutexNew+0x124>
      mem = -1;
 8014ada:	f04f 33ff 	mov.w	r3, #4294967295
 8014ade:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d015      	beq.n	8014b12 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	689b      	ldr	r3, [r3, #8]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d006      	beq.n	8014afc <osMutexNew+0x8c>
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	68db      	ldr	r3, [r3, #12]
 8014af2:	2b4f      	cmp	r3, #79	; 0x4f
 8014af4:	d902      	bls.n	8014afc <osMutexNew+0x8c>
          mem = 1;
 8014af6:	2301      	movs	r3, #1
 8014af8:	61bb      	str	r3, [r7, #24]
 8014afa:	e00c      	b.n	8014b16 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	689b      	ldr	r3, [r3, #8]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d108      	bne.n	8014b16 <osMutexNew+0xa6>
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	68db      	ldr	r3, [r3, #12]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d104      	bne.n	8014b16 <osMutexNew+0xa6>
            mem = 0;
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	61bb      	str	r3, [r7, #24]
 8014b10:	e001      	b.n	8014b16 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8014b12:	2300      	movs	r3, #0
 8014b14:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8014b16:	69bb      	ldr	r3, [r7, #24]
 8014b18:	2b01      	cmp	r3, #1
 8014b1a:	d112      	bne.n	8014b42 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8014b1c:	69fb      	ldr	r3, [r7, #28]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d007      	beq.n	8014b32 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	689b      	ldr	r3, [r3, #8]
 8014b26:	4619      	mov	r1, r3
 8014b28:	2004      	movs	r0, #4
 8014b2a:	f000 fe7c 	bl	8015826 <xQueueCreateMutexStatic>
 8014b2e:	6278      	str	r0, [r7, #36]	; 0x24
 8014b30:	e016      	b.n	8014b60 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	689b      	ldr	r3, [r3, #8]
 8014b36:	4619      	mov	r1, r3
 8014b38:	2001      	movs	r0, #1
 8014b3a:	f000 fe74 	bl	8015826 <xQueueCreateMutexStatic>
 8014b3e:	6278      	str	r0, [r7, #36]	; 0x24
 8014b40:	e00e      	b.n	8014b60 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8014b42:	69bb      	ldr	r3, [r7, #24]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d10b      	bne.n	8014b60 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8014b48:	69fb      	ldr	r3, [r7, #28]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d004      	beq.n	8014b58 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8014b4e:	2004      	movs	r0, #4
 8014b50:	f000 fe51 	bl	80157f6 <xQueueCreateMutex>
 8014b54:	6278      	str	r0, [r7, #36]	; 0x24
 8014b56:	e003      	b.n	8014b60 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8014b58:	2001      	movs	r0, #1
 8014b5a:	f000 fe4c 	bl	80157f6 <xQueueCreateMutex>
 8014b5e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8014b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d00c      	beq.n	8014b80 <osMutexNew+0x110>
        if (attr != NULL) {
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d003      	beq.n	8014b74 <osMutexNew+0x104>
          name = attr->name;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	617b      	str	r3, [r7, #20]
 8014b72:	e001      	b.n	8014b78 <osMutexNew+0x108>
        } else {
          name = NULL;
 8014b74:	2300      	movs	r3, #0
 8014b76:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8014b78:	6979      	ldr	r1, [r7, #20]
 8014b7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b7c:	f001 fd54 	bl	8016628 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8014b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d006      	beq.n	8014b94 <osMutexNew+0x124>
 8014b86:	69fb      	ldr	r3, [r7, #28]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d003      	beq.n	8014b94 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8014b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b8e:	f043 0301 	orr.w	r3, r3, #1
 8014b92:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8014b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3728      	adds	r7, #40	; 0x28
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}
 8014b9e:	bf00      	nop
 8014ba0:	200003b0 	.word	0x200003b0

08014ba4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b088      	sub	sp, #32
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
 8014bac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	f023 0301 	bic.w	r3, r3, #1
 8014bb4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	f003 0301 	and.w	r3, r3, #1
 8014bbc:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014bc2:	f3ef 8305 	mrs	r3, IPSR
 8014bc6:	613b      	str	r3, [r7, #16]
  return(result);
 8014bc8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d10f      	bne.n	8014bee <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014bce:	f3ef 8310 	mrs	r3, PRIMASK
 8014bd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d105      	bne.n	8014be6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014bda:	f3ef 8311 	mrs	r3, BASEPRI
 8014bde:	60bb      	str	r3, [r7, #8]
  return(result);
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d007      	beq.n	8014bf6 <osMutexAcquire+0x52>
 8014be6:	4b1d      	ldr	r3, [pc, #116]	; (8014c5c <osMutexAcquire+0xb8>)
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	2b02      	cmp	r3, #2
 8014bec:	d103      	bne.n	8014bf6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8014bee:	f06f 0305 	mvn.w	r3, #5
 8014bf2:	61fb      	str	r3, [r7, #28]
 8014bf4:	e02c      	b.n	8014c50 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8014bf6:	69bb      	ldr	r3, [r7, #24]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d103      	bne.n	8014c04 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8014bfc:	f06f 0303 	mvn.w	r3, #3
 8014c00:	61fb      	str	r3, [r7, #28]
 8014c02:	e025      	b.n	8014c50 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d011      	beq.n	8014c2e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8014c0a:	6839      	ldr	r1, [r7, #0]
 8014c0c:	69b8      	ldr	r0, [r7, #24]
 8014c0e:	f000 fe73 	bl	80158f8 <xQueueTakeMutexRecursive>
 8014c12:	4603      	mov	r3, r0
 8014c14:	2b01      	cmp	r3, #1
 8014c16:	d01b      	beq.n	8014c50 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d003      	beq.n	8014c26 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8014c1e:	f06f 0301 	mvn.w	r3, #1
 8014c22:	61fb      	str	r3, [r7, #28]
 8014c24:	e014      	b.n	8014c50 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8014c26:	f06f 0302 	mvn.w	r3, #2
 8014c2a:	61fb      	str	r3, [r7, #28]
 8014c2c:	e010      	b.n	8014c50 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8014c2e:	6839      	ldr	r1, [r7, #0]
 8014c30:	69b8      	ldr	r0, [r7, #24]
 8014c32:	f001 fa19 	bl	8016068 <xQueueSemaphoreTake>
 8014c36:	4603      	mov	r3, r0
 8014c38:	2b01      	cmp	r3, #1
 8014c3a:	d009      	beq.n	8014c50 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8014c3c:	683b      	ldr	r3, [r7, #0]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d003      	beq.n	8014c4a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8014c42:	f06f 0301 	mvn.w	r3, #1
 8014c46:	61fb      	str	r3, [r7, #28]
 8014c48:	e002      	b.n	8014c50 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8014c4a:	f06f 0302 	mvn.w	r3, #2
 8014c4e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014c50:	69fb      	ldr	r3, [r7, #28]
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	3720      	adds	r7, #32
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}
 8014c5a:	bf00      	nop
 8014c5c:	200003b0 	.word	0x200003b0

08014c60 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b088      	sub	sp, #32
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	f023 0301 	bic.w	r3, r3, #1
 8014c6e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f003 0301 	and.w	r3, r3, #1
 8014c76:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8014c78:	2300      	movs	r3, #0
 8014c7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c7c:	f3ef 8305 	mrs	r3, IPSR
 8014c80:	613b      	str	r3, [r7, #16]
  return(result);
 8014c82:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d10f      	bne.n	8014ca8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c88:	f3ef 8310 	mrs	r3, PRIMASK
 8014c8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d105      	bne.n	8014ca0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014c94:	f3ef 8311 	mrs	r3, BASEPRI
 8014c98:	60bb      	str	r3, [r7, #8]
  return(result);
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d007      	beq.n	8014cb0 <osMutexRelease+0x50>
 8014ca0:	4b16      	ldr	r3, [pc, #88]	; (8014cfc <osMutexRelease+0x9c>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	2b02      	cmp	r3, #2
 8014ca6:	d103      	bne.n	8014cb0 <osMutexRelease+0x50>
    stat = osErrorISR;
 8014ca8:	f06f 0305 	mvn.w	r3, #5
 8014cac:	61fb      	str	r3, [r7, #28]
 8014cae:	e01f      	b.n	8014cf0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8014cb0:	69bb      	ldr	r3, [r7, #24]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d103      	bne.n	8014cbe <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8014cb6:	f06f 0303 	mvn.w	r3, #3
 8014cba:	61fb      	str	r3, [r7, #28]
 8014cbc:	e018      	b.n	8014cf0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8014cbe:	697b      	ldr	r3, [r7, #20]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d009      	beq.n	8014cd8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8014cc4:	69b8      	ldr	r0, [r7, #24]
 8014cc6:	f000 fde2 	bl	801588e <xQueueGiveMutexRecursive>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	2b01      	cmp	r3, #1
 8014cce:	d00f      	beq.n	8014cf0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8014cd0:	f06f 0302 	mvn.w	r3, #2
 8014cd4:	61fb      	str	r3, [r7, #28]
 8014cd6:	e00b      	b.n	8014cf0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8014cd8:	2300      	movs	r3, #0
 8014cda:	2200      	movs	r2, #0
 8014cdc:	2100      	movs	r1, #0
 8014cde:	69b8      	ldr	r0, [r7, #24]
 8014ce0:	f000 feb0 	bl	8015a44 <xQueueGenericSend>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	2b01      	cmp	r3, #1
 8014ce8:	d002      	beq.n	8014cf0 <osMutexRelease+0x90>
        stat = osErrorResource;
 8014cea:	f06f 0302 	mvn.w	r3, #2
 8014cee:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8014cf0:	69fb      	ldr	r3, [r7, #28]
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3720      	adds	r7, #32
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}
 8014cfa:	bf00      	nop
 8014cfc:	200003b0 	.word	0x200003b0

08014d00 <osMutexGetOwner>:

osThreadId_t osMutexGetOwner (osMutexId_t mutex_id) {
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b088      	sub	sp, #32
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osThreadId_t owner;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f023 0301 	bic.w	r3, r3, #1
 8014d0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d10:	f3ef 8305 	mrs	r3, IPSR
 8014d14:	617b      	str	r3, [r7, #20]
  return(result);
 8014d16:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ() || (hMutex == NULL)) {
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d112      	bne.n	8014d42 <osMutexGetOwner+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8014d20:	613b      	str	r3, [r7, #16]
  return(result);
 8014d22:	693b      	ldr	r3, [r7, #16]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d105      	bne.n	8014d34 <osMutexGetOwner+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014d28:	f3ef 8311 	mrs	r3, BASEPRI
 8014d2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d003      	beq.n	8014d3c <osMutexGetOwner+0x3c>
 8014d34:	4b09      	ldr	r3, [pc, #36]	; (8014d5c <osMutexGetOwner+0x5c>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	2b02      	cmp	r3, #2
 8014d3a:	d002      	beq.n	8014d42 <osMutexGetOwner+0x42>
 8014d3c:	69bb      	ldr	r3, [r7, #24]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d102      	bne.n	8014d48 <osMutexGetOwner+0x48>
    owner = NULL;
 8014d42:	2300      	movs	r3, #0
 8014d44:	61fb      	str	r3, [r7, #28]
 8014d46:	e003      	b.n	8014d50 <osMutexGetOwner+0x50>
  } else {
    owner = (osThreadId_t)xSemaphoreGetMutexHolder (hMutex);
 8014d48:	69b8      	ldr	r0, [r7, #24]
 8014d4a:	f000 fd87 	bl	801585c <xQueueGetMutexHolder>
 8014d4e:	61f8      	str	r0, [r7, #28]
  }

  return (owner);
 8014d50:	69fb      	ldr	r3, [r7, #28]
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	3720      	adds	r7, #32
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}
 8014d5a:	bf00      	nop
 8014d5c:	200003b0 	.word	0x200003b0

08014d60 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b08c      	sub	sp, #48	; 0x30
 8014d64:	af02      	add	r7, sp, #8
 8014d66:	60f8      	str	r0, [r7, #12]
 8014d68:	60b9      	str	r1, [r7, #8]
 8014d6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d70:	f3ef 8305 	mrs	r3, IPSR
 8014d74:	61bb      	str	r3, [r7, #24]
  return(result);
 8014d76:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	f040 8087 	bne.w	8014e8c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8014d82:	617b      	str	r3, [r7, #20]
  return(result);
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d105      	bne.n	8014d96 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014d8a:	f3ef 8311 	mrs	r3, BASEPRI
 8014d8e:	613b      	str	r3, [r7, #16]
  return(result);
 8014d90:	693b      	ldr	r3, [r7, #16]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d003      	beq.n	8014d9e <osSemaphoreNew+0x3e>
 8014d96:	4b40      	ldr	r3, [pc, #256]	; (8014e98 <osSemaphoreNew+0x138>)
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	2b02      	cmp	r3, #2
 8014d9c:	d076      	beq.n	8014e8c <osSemaphoreNew+0x12c>
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d073      	beq.n	8014e8c <osSemaphoreNew+0x12c>
 8014da4:	68ba      	ldr	r2, [r7, #8]
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	429a      	cmp	r2, r3
 8014daa:	d86f      	bhi.n	8014e8c <osSemaphoreNew+0x12c>
    mem = -1;
 8014dac:	f04f 33ff 	mov.w	r3, #4294967295
 8014db0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d015      	beq.n	8014de4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	689b      	ldr	r3, [r3, #8]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d006      	beq.n	8014dce <osSemaphoreNew+0x6e>
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	2b4f      	cmp	r3, #79	; 0x4f
 8014dc6:	d902      	bls.n	8014dce <osSemaphoreNew+0x6e>
        mem = 1;
 8014dc8:	2301      	movs	r3, #1
 8014dca:	623b      	str	r3, [r7, #32]
 8014dcc:	e00c      	b.n	8014de8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	689b      	ldr	r3, [r3, #8]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d108      	bne.n	8014de8 <osSemaphoreNew+0x88>
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	68db      	ldr	r3, [r3, #12]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d104      	bne.n	8014de8 <osSemaphoreNew+0x88>
          mem = 0;
 8014dde:	2300      	movs	r3, #0
 8014de0:	623b      	str	r3, [r7, #32]
 8014de2:	e001      	b.n	8014de8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8014de4:	2300      	movs	r3, #0
 8014de6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8014de8:	6a3b      	ldr	r3, [r7, #32]
 8014dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dee:	d04d      	beq.n	8014e8c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	2b01      	cmp	r3, #1
 8014df4:	d129      	bne.n	8014e4a <osSemaphoreNew+0xea>
        if (mem == 1) {
 8014df6:	6a3b      	ldr	r3, [r7, #32]
 8014df8:	2b01      	cmp	r3, #1
 8014dfa:	d10b      	bne.n	8014e14 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	689a      	ldr	r2, [r3, #8]
 8014e00:	2303      	movs	r3, #3
 8014e02:	9300      	str	r3, [sp, #0]
 8014e04:	4613      	mov	r3, r2
 8014e06:	2200      	movs	r2, #0
 8014e08:	2100      	movs	r1, #0
 8014e0a:	2001      	movs	r0, #1
 8014e0c:	f000 fbf8 	bl	8015600 <xQueueGenericCreateStatic>
 8014e10:	6278      	str	r0, [r7, #36]	; 0x24
 8014e12:	e005      	b.n	8014e20 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8014e14:	2203      	movs	r2, #3
 8014e16:	2100      	movs	r1, #0
 8014e18:	2001      	movs	r0, #1
 8014e1a:	f000 fc6e 	bl	80156fa <xQueueGenericCreate>
 8014e1e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8014e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d022      	beq.n	8014e6c <osSemaphoreNew+0x10c>
 8014e26:	68bb      	ldr	r3, [r7, #8]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d01f      	beq.n	8014e6c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	2200      	movs	r2, #0
 8014e30:	2100      	movs	r1, #0
 8014e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e34:	f000 fe06 	bl	8015a44 <xQueueGenericSend>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	2b01      	cmp	r3, #1
 8014e3c:	d016      	beq.n	8014e6c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8014e3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e40:	f001 faa5 	bl	801638e <vQueueDelete>
            hSemaphore = NULL;
 8014e44:	2300      	movs	r3, #0
 8014e46:	627b      	str	r3, [r7, #36]	; 0x24
 8014e48:	e010      	b.n	8014e6c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8014e4a:	6a3b      	ldr	r3, [r7, #32]
 8014e4c:	2b01      	cmp	r3, #1
 8014e4e:	d108      	bne.n	8014e62 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	689b      	ldr	r3, [r3, #8]
 8014e54:	461a      	mov	r2, r3
 8014e56:	68b9      	ldr	r1, [r7, #8]
 8014e58:	68f8      	ldr	r0, [r7, #12]
 8014e5a:	f000 fd84 	bl	8015966 <xQueueCreateCountingSemaphoreStatic>
 8014e5e:	6278      	str	r0, [r7, #36]	; 0x24
 8014e60:	e004      	b.n	8014e6c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8014e62:	68b9      	ldr	r1, [r7, #8]
 8014e64:	68f8      	ldr	r0, [r7, #12]
 8014e66:	f000 fdb7 	bl	80159d8 <xQueueCreateCountingSemaphore>
 8014e6a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d00c      	beq.n	8014e8c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d003      	beq.n	8014e80 <osSemaphoreNew+0x120>
          name = attr->name;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	61fb      	str	r3, [r7, #28]
 8014e7e:	e001      	b.n	8014e84 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8014e80:	2300      	movs	r3, #0
 8014e82:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8014e84:	69f9      	ldr	r1, [r7, #28]
 8014e86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e88:	f001 fbce 	bl	8016628 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	3728      	adds	r7, #40	; 0x28
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
 8014e96:	bf00      	nop
 8014e98:	200003b0 	.word	0x200003b0

08014e9c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b088      	sub	sp, #32
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
 8014ea4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8014eae:	69bb      	ldr	r3, [r7, #24]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d103      	bne.n	8014ebc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8014eb4:	f06f 0303 	mvn.w	r3, #3
 8014eb8:	61fb      	str	r3, [r7, #28]
 8014eba:	e04b      	b.n	8014f54 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ebc:	f3ef 8305 	mrs	r3, IPSR
 8014ec0:	617b      	str	r3, [r7, #20]
  return(result);
 8014ec2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d10f      	bne.n	8014ee8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8014ecc:	613b      	str	r3, [r7, #16]
  return(result);
 8014ece:	693b      	ldr	r3, [r7, #16]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d105      	bne.n	8014ee0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8014ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d026      	beq.n	8014f2e <osSemaphoreAcquire+0x92>
 8014ee0:	4b1f      	ldr	r3, [pc, #124]	; (8014f60 <osSemaphoreAcquire+0xc4>)
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	2b02      	cmp	r3, #2
 8014ee6:	d122      	bne.n	8014f2e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8014ee8:	683b      	ldr	r3, [r7, #0]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d003      	beq.n	8014ef6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8014eee:	f06f 0303 	mvn.w	r3, #3
 8014ef2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8014ef4:	e02d      	b.n	8014f52 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8014efa:	f107 0308 	add.w	r3, r7, #8
 8014efe:	461a      	mov	r2, r3
 8014f00:	2100      	movs	r1, #0
 8014f02:	69b8      	ldr	r0, [r7, #24]
 8014f04:	f001 f9c0 	bl	8016288 <xQueueReceiveFromISR>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	2b01      	cmp	r3, #1
 8014f0c:	d003      	beq.n	8014f16 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8014f0e:	f06f 0302 	mvn.w	r3, #2
 8014f12:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8014f14:	e01d      	b.n	8014f52 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d01a      	beq.n	8014f52 <osSemaphoreAcquire+0xb6>
 8014f1c:	4b11      	ldr	r3, [pc, #68]	; (8014f64 <osSemaphoreAcquire+0xc8>)
 8014f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014f22:	601a      	str	r2, [r3, #0]
 8014f24:	f3bf 8f4f 	dsb	sy
 8014f28:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8014f2c:	e011      	b.n	8014f52 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8014f2e:	6839      	ldr	r1, [r7, #0]
 8014f30:	69b8      	ldr	r0, [r7, #24]
 8014f32:	f001 f899 	bl	8016068 <xQueueSemaphoreTake>
 8014f36:	4603      	mov	r3, r0
 8014f38:	2b01      	cmp	r3, #1
 8014f3a:	d00b      	beq.n	8014f54 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d003      	beq.n	8014f4a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8014f42:	f06f 0301 	mvn.w	r3, #1
 8014f46:	61fb      	str	r3, [r7, #28]
 8014f48:	e004      	b.n	8014f54 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8014f4a:	f06f 0302 	mvn.w	r3, #2
 8014f4e:	61fb      	str	r3, [r7, #28]
 8014f50:	e000      	b.n	8014f54 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8014f52:	bf00      	nop
      }
    }
  }

  return (stat);
 8014f54:	69fb      	ldr	r3, [r7, #28]
}
 8014f56:	4618      	mov	r0, r3
 8014f58:	3720      	adds	r7, #32
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}
 8014f5e:	bf00      	nop
 8014f60:	200003b0 	.word	0x200003b0
 8014f64:	e000ed04 	.word	0xe000ed04

08014f68 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b088      	sub	sp, #32
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014f74:	2300      	movs	r3, #0
 8014f76:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8014f78:	69bb      	ldr	r3, [r7, #24]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d103      	bne.n	8014f86 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8014f7e:	f06f 0303 	mvn.w	r3, #3
 8014f82:	61fb      	str	r3, [r7, #28]
 8014f84:	e03e      	b.n	8015004 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014f86:	f3ef 8305 	mrs	r3, IPSR
 8014f8a:	617b      	str	r3, [r7, #20]
  return(result);
 8014f8c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d10f      	bne.n	8014fb2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f92:	f3ef 8310 	mrs	r3, PRIMASK
 8014f96:	613b      	str	r3, [r7, #16]
  return(result);
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d105      	bne.n	8014faa <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8014f9e:	f3ef 8311 	mrs	r3, BASEPRI
 8014fa2:	60fb      	str	r3, [r7, #12]
  return(result);
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d01e      	beq.n	8014fe8 <osSemaphoreRelease+0x80>
 8014faa:	4b19      	ldr	r3, [pc, #100]	; (8015010 <osSemaphoreRelease+0xa8>)
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	2b02      	cmp	r3, #2
 8014fb0:	d11a      	bne.n	8014fe8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8014fb6:	f107 0308 	add.w	r3, r7, #8
 8014fba:	4619      	mov	r1, r3
 8014fbc:	69b8      	ldr	r0, [r7, #24]
 8014fbe:	f000 fedf 	bl	8015d80 <xQueueGiveFromISR>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	2b01      	cmp	r3, #1
 8014fc6:	d003      	beq.n	8014fd0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8014fc8:	f06f 0302 	mvn.w	r3, #2
 8014fcc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8014fce:	e018      	b.n	8015002 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8014fd0:	68bb      	ldr	r3, [r7, #8]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d015      	beq.n	8015002 <osSemaphoreRelease+0x9a>
 8014fd6:	4b0f      	ldr	r3, [pc, #60]	; (8015014 <osSemaphoreRelease+0xac>)
 8014fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fdc:	601a      	str	r2, [r3, #0]
 8014fde:	f3bf 8f4f 	dsb	sy
 8014fe2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8014fe6:	e00c      	b.n	8015002 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014fe8:	2300      	movs	r3, #0
 8014fea:	2200      	movs	r2, #0
 8014fec:	2100      	movs	r1, #0
 8014fee:	69b8      	ldr	r0, [r7, #24]
 8014ff0:	f000 fd28 	bl	8015a44 <xQueueGenericSend>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	2b01      	cmp	r3, #1
 8014ff8:	d004      	beq.n	8015004 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8014ffa:	f06f 0302 	mvn.w	r3, #2
 8014ffe:	61fb      	str	r3, [r7, #28]
 8015000:	e000      	b.n	8015004 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015002:	bf00      	nop
    }
  }

  return (stat);
 8015004:	69fb      	ldr	r3, [r7, #28]
}
 8015006:	4618      	mov	r0, r3
 8015008:	3720      	adds	r7, #32
 801500a:	46bd      	mov	sp, r7
 801500c:	bd80      	pop	{r7, pc}
 801500e:	bf00      	nop
 8015010:	200003b0 	.word	0x200003b0
 8015014:	e000ed04 	.word	0xe000ed04

08015018 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8015018:	b580      	push	{r7, lr}
 801501a:	b088      	sub	sp, #32
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015024:	f3ef 8305 	mrs	r3, IPSR
 8015028:	617b      	str	r3, [r7, #20]
  return(result);
 801502a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801502c:	2b00      	cmp	r3, #0
 801502e:	d10f      	bne.n	8015050 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015030:	f3ef 8310 	mrs	r3, PRIMASK
 8015034:	613b      	str	r3, [r7, #16]
  return(result);
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d105      	bne.n	8015048 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801503c:	f3ef 8311 	mrs	r3, BASEPRI
 8015040:	60fb      	str	r3, [r7, #12]
  return(result);
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d007      	beq.n	8015058 <osSemaphoreDelete+0x40>
 8015048:	4b0d      	ldr	r3, [pc, #52]	; (8015080 <osSemaphoreDelete+0x68>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	2b02      	cmp	r3, #2
 801504e:	d103      	bne.n	8015058 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8015050:	f06f 0305 	mvn.w	r3, #5
 8015054:	61fb      	str	r3, [r7, #28]
 8015056:	e00e      	b.n	8015076 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8015058:	69bb      	ldr	r3, [r7, #24]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d103      	bne.n	8015066 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 801505e:	f06f 0303 	mvn.w	r3, #3
 8015062:	61fb      	str	r3, [r7, #28]
 8015064:	e007      	b.n	8015076 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8015066:	69b8      	ldr	r0, [r7, #24]
 8015068:	f001 fb06 	bl	8016678 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 801506c:	2300      	movs	r3, #0
 801506e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8015070:	69b8      	ldr	r0, [r7, #24]
 8015072:	f001 f98c 	bl	801638e <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8015076:	69fb      	ldr	r3, [r7, #28]
}
 8015078:	4618      	mov	r0, r3
 801507a:	3720      	adds	r7, #32
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}
 8015080:	200003b0 	.word	0x200003b0

08015084 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8015084:	b580      	push	{r7, lr}
 8015086:	b08c      	sub	sp, #48	; 0x30
 8015088:	af02      	add	r7, sp, #8
 801508a:	60f8      	str	r0, [r7, #12]
 801508c:	60b9      	str	r1, [r7, #8]
 801508e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8015090:	2300      	movs	r3, #0
 8015092:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015094:	f3ef 8305 	mrs	r3, IPSR
 8015098:	61bb      	str	r3, [r7, #24]
  return(result);
 801509a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801509c:	2b00      	cmp	r3, #0
 801509e:	d170      	bne.n	8015182 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80150a0:	f3ef 8310 	mrs	r3, PRIMASK
 80150a4:	617b      	str	r3, [r7, #20]
  return(result);
 80150a6:	697b      	ldr	r3, [r7, #20]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d105      	bne.n	80150b8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80150ac:	f3ef 8311 	mrs	r3, BASEPRI
 80150b0:	613b      	str	r3, [r7, #16]
  return(result);
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d003      	beq.n	80150c0 <osMessageQueueNew+0x3c>
 80150b8:	4b34      	ldr	r3, [pc, #208]	; (801518c <osMessageQueueNew+0x108>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	2b02      	cmp	r3, #2
 80150be:	d060      	beq.n	8015182 <osMessageQueueNew+0xfe>
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d05d      	beq.n	8015182 <osMessageQueueNew+0xfe>
 80150c6:	68bb      	ldr	r3, [r7, #8]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d05a      	beq.n	8015182 <osMessageQueueNew+0xfe>
    mem = -1;
 80150cc:	f04f 33ff 	mov.w	r3, #4294967295
 80150d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d029      	beq.n	801512c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	689b      	ldr	r3, [r3, #8]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d012      	beq.n	8015106 <osMessageQueueNew+0x82>
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	68db      	ldr	r3, [r3, #12]
 80150e4:	2b4f      	cmp	r3, #79	; 0x4f
 80150e6:	d90e      	bls.n	8015106 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d00a      	beq.n	8015106 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	695a      	ldr	r2, [r3, #20]
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	68b9      	ldr	r1, [r7, #8]
 80150f8:	fb01 f303 	mul.w	r3, r1, r3
 80150fc:	429a      	cmp	r2, r3
 80150fe:	d302      	bcc.n	8015106 <osMessageQueueNew+0x82>
        mem = 1;
 8015100:	2301      	movs	r3, #1
 8015102:	623b      	str	r3, [r7, #32]
 8015104:	e014      	b.n	8015130 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	689b      	ldr	r3, [r3, #8]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d110      	bne.n	8015130 <osMessageQueueNew+0xac>
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	68db      	ldr	r3, [r3, #12]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d10c      	bne.n	8015130 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801511a:	2b00      	cmp	r3, #0
 801511c:	d108      	bne.n	8015130 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	695b      	ldr	r3, [r3, #20]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d104      	bne.n	8015130 <osMessageQueueNew+0xac>
          mem = 0;
 8015126:	2300      	movs	r3, #0
 8015128:	623b      	str	r3, [r7, #32]
 801512a:	e001      	b.n	8015130 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 801512c:	2300      	movs	r3, #0
 801512e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8015130:	6a3b      	ldr	r3, [r7, #32]
 8015132:	2b01      	cmp	r3, #1
 8015134:	d10c      	bne.n	8015150 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	691a      	ldr	r2, [r3, #16]
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	6899      	ldr	r1, [r3, #8]
 801513e:	2300      	movs	r3, #0
 8015140:	9300      	str	r3, [sp, #0]
 8015142:	460b      	mov	r3, r1
 8015144:	68b9      	ldr	r1, [r7, #8]
 8015146:	68f8      	ldr	r0, [r7, #12]
 8015148:	f000 fa5a 	bl	8015600 <xQueueGenericCreateStatic>
 801514c:	6278      	str	r0, [r7, #36]	; 0x24
 801514e:	e008      	b.n	8015162 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8015150:	6a3b      	ldr	r3, [r7, #32]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d105      	bne.n	8015162 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8015156:	2200      	movs	r2, #0
 8015158:	68b9      	ldr	r1, [r7, #8]
 801515a:	68f8      	ldr	r0, [r7, #12]
 801515c:	f000 facd 	bl	80156fa <xQueueGenericCreate>
 8015160:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8015162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015164:	2b00      	cmp	r3, #0
 8015166:	d00c      	beq.n	8015182 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	2b00      	cmp	r3, #0
 801516c:	d003      	beq.n	8015176 <osMessageQueueNew+0xf2>
        name = attr->name;
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	61fb      	str	r3, [r7, #28]
 8015174:	e001      	b.n	801517a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8015176:	2300      	movs	r3, #0
 8015178:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801517a:	69f9      	ldr	r1, [r7, #28]
 801517c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801517e:	f001 fa53 	bl	8016628 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8015182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015184:	4618      	mov	r0, r3
 8015186:	3728      	adds	r7, #40	; 0x28
 8015188:	46bd      	mov	sp, r7
 801518a:	bd80      	pop	{r7, pc}
 801518c:	200003b0 	.word	0x200003b0

08015190 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8015190:	b580      	push	{r7, lr}
 8015192:	b08a      	sub	sp, #40	; 0x28
 8015194:	af00      	add	r7, sp, #0
 8015196:	60f8      	str	r0, [r7, #12]
 8015198:	60b9      	str	r1, [r7, #8]
 801519a:	603b      	str	r3, [r7, #0]
 801519c:	4613      	mov	r3, r2
 801519e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80151a4:	2300      	movs	r3, #0
 80151a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80151a8:	f3ef 8305 	mrs	r3, IPSR
 80151ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80151ae:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d10f      	bne.n	80151d4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80151b4:	f3ef 8310 	mrs	r3, PRIMASK
 80151b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80151ba:	69bb      	ldr	r3, [r7, #24]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d105      	bne.n	80151cc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80151c0:	f3ef 8311 	mrs	r3, BASEPRI
 80151c4:	617b      	str	r3, [r7, #20]
  return(result);
 80151c6:	697b      	ldr	r3, [r7, #20]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d02c      	beq.n	8015226 <osMessageQueuePut+0x96>
 80151cc:	4b28      	ldr	r3, [pc, #160]	; (8015270 <osMessageQueuePut+0xe0>)
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	2b02      	cmp	r3, #2
 80151d2:	d128      	bne.n	8015226 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80151d4:	6a3b      	ldr	r3, [r7, #32]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d005      	beq.n	80151e6 <osMessageQueuePut+0x56>
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d002      	beq.n	80151e6 <osMessageQueuePut+0x56>
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d003      	beq.n	80151ee <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80151e6:	f06f 0303 	mvn.w	r3, #3
 80151ea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80151ec:	e039      	b.n	8015262 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80151ee:	2300      	movs	r3, #0
 80151f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80151f2:	f107 0210 	add.w	r2, r7, #16
 80151f6:	2300      	movs	r3, #0
 80151f8:	68b9      	ldr	r1, [r7, #8]
 80151fa:	6a38      	ldr	r0, [r7, #32]
 80151fc:	f000 fd24 	bl	8015c48 <xQueueGenericSendFromISR>
 8015200:	4603      	mov	r3, r0
 8015202:	2b01      	cmp	r3, #1
 8015204:	d003      	beq.n	801520e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8015206:	f06f 0302 	mvn.w	r3, #2
 801520a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801520c:	e029      	b.n	8015262 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d026      	beq.n	8015262 <osMessageQueuePut+0xd2>
 8015214:	4b17      	ldr	r3, [pc, #92]	; (8015274 <osMessageQueuePut+0xe4>)
 8015216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801521a:	601a      	str	r2, [r3, #0]
 801521c:	f3bf 8f4f 	dsb	sy
 8015220:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015224:	e01d      	b.n	8015262 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015226:	6a3b      	ldr	r3, [r7, #32]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d002      	beq.n	8015232 <osMessageQueuePut+0xa2>
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d103      	bne.n	801523a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8015232:	f06f 0303 	mvn.w	r3, #3
 8015236:	627b      	str	r3, [r7, #36]	; 0x24
 8015238:	e014      	b.n	8015264 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801523a:	2300      	movs	r3, #0
 801523c:	683a      	ldr	r2, [r7, #0]
 801523e:	68b9      	ldr	r1, [r7, #8]
 8015240:	6a38      	ldr	r0, [r7, #32]
 8015242:	f000 fbff 	bl	8015a44 <xQueueGenericSend>
 8015246:	4603      	mov	r3, r0
 8015248:	2b01      	cmp	r3, #1
 801524a:	d00b      	beq.n	8015264 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d003      	beq.n	801525a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8015252:	f06f 0301 	mvn.w	r3, #1
 8015256:	627b      	str	r3, [r7, #36]	; 0x24
 8015258:	e004      	b.n	8015264 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801525a:	f06f 0302 	mvn.w	r3, #2
 801525e:	627b      	str	r3, [r7, #36]	; 0x24
 8015260:	e000      	b.n	8015264 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015262:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8015264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015266:	4618      	mov	r0, r3
 8015268:	3728      	adds	r7, #40	; 0x28
 801526a:	46bd      	mov	sp, r7
 801526c:	bd80      	pop	{r7, pc}
 801526e:	bf00      	nop
 8015270:	200003b0 	.word	0x200003b0
 8015274:	e000ed04 	.word	0xe000ed04

08015278 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8015278:	b580      	push	{r7, lr}
 801527a:	b08a      	sub	sp, #40	; 0x28
 801527c:	af00      	add	r7, sp, #0
 801527e:	60f8      	str	r0, [r7, #12]
 8015280:	60b9      	str	r1, [r7, #8]
 8015282:	607a      	str	r2, [r7, #4]
 8015284:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801528a:	2300      	movs	r3, #0
 801528c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801528e:	f3ef 8305 	mrs	r3, IPSR
 8015292:	61fb      	str	r3, [r7, #28]
  return(result);
 8015294:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8015296:	2b00      	cmp	r3, #0
 8015298:	d10f      	bne.n	80152ba <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801529a:	f3ef 8310 	mrs	r3, PRIMASK
 801529e:	61bb      	str	r3, [r7, #24]
  return(result);
 80152a0:	69bb      	ldr	r3, [r7, #24]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d105      	bne.n	80152b2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80152a6:	f3ef 8311 	mrs	r3, BASEPRI
 80152aa:	617b      	str	r3, [r7, #20]
  return(result);
 80152ac:	697b      	ldr	r3, [r7, #20]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d02c      	beq.n	801530c <osMessageQueueGet+0x94>
 80152b2:	4b28      	ldr	r3, [pc, #160]	; (8015354 <osMessageQueueGet+0xdc>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	2b02      	cmp	r3, #2
 80152b8:	d128      	bne.n	801530c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80152ba:	6a3b      	ldr	r3, [r7, #32]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d005      	beq.n	80152cc <osMessageQueueGet+0x54>
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d002      	beq.n	80152cc <osMessageQueueGet+0x54>
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d003      	beq.n	80152d4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80152cc:	f06f 0303 	mvn.w	r3, #3
 80152d0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80152d2:	e038      	b.n	8015346 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80152d4:	2300      	movs	r3, #0
 80152d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80152d8:	f107 0310 	add.w	r3, r7, #16
 80152dc:	461a      	mov	r2, r3
 80152de:	68b9      	ldr	r1, [r7, #8]
 80152e0:	6a38      	ldr	r0, [r7, #32]
 80152e2:	f000 ffd1 	bl	8016288 <xQueueReceiveFromISR>
 80152e6:	4603      	mov	r3, r0
 80152e8:	2b01      	cmp	r3, #1
 80152ea:	d003      	beq.n	80152f4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80152ec:	f06f 0302 	mvn.w	r3, #2
 80152f0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80152f2:	e028      	b.n	8015346 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80152f4:	693b      	ldr	r3, [r7, #16]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d025      	beq.n	8015346 <osMessageQueueGet+0xce>
 80152fa:	4b17      	ldr	r3, [pc, #92]	; (8015358 <osMessageQueueGet+0xe0>)
 80152fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015300:	601a      	str	r2, [r3, #0]
 8015302:	f3bf 8f4f 	dsb	sy
 8015306:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801530a:	e01c      	b.n	8015346 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801530c:	6a3b      	ldr	r3, [r7, #32]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d002      	beq.n	8015318 <osMessageQueueGet+0xa0>
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d103      	bne.n	8015320 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8015318:	f06f 0303 	mvn.w	r3, #3
 801531c:	627b      	str	r3, [r7, #36]	; 0x24
 801531e:	e013      	b.n	8015348 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015320:	683a      	ldr	r2, [r7, #0]
 8015322:	68b9      	ldr	r1, [r7, #8]
 8015324:	6a38      	ldr	r0, [r7, #32]
 8015326:	f000 fdbd 	bl	8015ea4 <xQueueReceive>
 801532a:	4603      	mov	r3, r0
 801532c:	2b01      	cmp	r3, #1
 801532e:	d00b      	beq.n	8015348 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d003      	beq.n	801533e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8015336:	f06f 0301 	mvn.w	r3, #1
 801533a:	627b      	str	r3, [r7, #36]	; 0x24
 801533c:	e004      	b.n	8015348 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 801533e:	f06f 0302 	mvn.w	r3, #2
 8015342:	627b      	str	r3, [r7, #36]	; 0x24
 8015344:	e000      	b.n	8015348 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015346:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8015348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801534a:	4618      	mov	r0, r3
 801534c:	3728      	adds	r7, #40	; 0x28
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}
 8015352:	bf00      	nop
 8015354:	200003b0 	.word	0x200003b0
 8015358:	e000ed04 	.word	0xe000ed04

0801535c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801535c:	b480      	push	{r7}
 801535e:	b085      	sub	sp, #20
 8015360:	af00      	add	r7, sp, #0
 8015362:	60f8      	str	r0, [r7, #12]
 8015364:	60b9      	str	r1, [r7, #8]
 8015366:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	4a07      	ldr	r2, [pc, #28]	; (8015388 <vApplicationGetIdleTaskMemory+0x2c>)
 801536c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801536e:	68bb      	ldr	r3, [r7, #8]
 8015370:	4a06      	ldr	r2, [pc, #24]	; (801538c <vApplicationGetIdleTaskMemory+0x30>)
 8015372:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	2280      	movs	r2, #128	; 0x80
 8015378:	601a      	str	r2, [r3, #0]
}
 801537a:	bf00      	nop
 801537c:	3714      	adds	r7, #20
 801537e:	46bd      	mov	sp, r7
 8015380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015384:	4770      	bx	lr
 8015386:	bf00      	nop
 8015388:	200003b4 	.word	0x200003b4
 801538c:	20000410 	.word	0x20000410

08015390 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015390:	b480      	push	{r7}
 8015392:	b085      	sub	sp, #20
 8015394:	af00      	add	r7, sp, #0
 8015396:	60f8      	str	r0, [r7, #12]
 8015398:	60b9      	str	r1, [r7, #8]
 801539a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	4a07      	ldr	r2, [pc, #28]	; (80153bc <vApplicationGetTimerTaskMemory+0x2c>)
 80153a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80153a2:	68bb      	ldr	r3, [r7, #8]
 80153a4:	4a06      	ldr	r2, [pc, #24]	; (80153c0 <vApplicationGetTimerTaskMemory+0x30>)
 80153a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80153ae:	601a      	str	r2, [r3, #0]
}
 80153b0:	bf00      	nop
 80153b2:	3714      	adds	r7, #20
 80153b4:	46bd      	mov	sp, r7
 80153b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ba:	4770      	bx	lr
 80153bc:	20000610 	.word	0x20000610
 80153c0:	2000066c 	.word	0x2000066c

080153c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80153c4:	b480      	push	{r7}
 80153c6:	b083      	sub	sp, #12
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f103 0208 	add.w	r2, r3, #8
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	f04f 32ff 	mov.w	r2, #4294967295
 80153dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	f103 0208 	add.w	r2, r3, #8
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f103 0208 	add.w	r2, r3, #8
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	2200      	movs	r2, #0
 80153f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80153f8:	bf00      	nop
 80153fa:	370c      	adds	r7, #12
 80153fc:	46bd      	mov	sp, r7
 80153fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015402:	4770      	bx	lr

08015404 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015404:	b480      	push	{r7}
 8015406:	b083      	sub	sp, #12
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2200      	movs	r2, #0
 8015410:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015412:	bf00      	nop
 8015414:	370c      	adds	r7, #12
 8015416:	46bd      	mov	sp, r7
 8015418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541c:	4770      	bx	lr

0801541e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801541e:	b480      	push	{r7}
 8015420:	b085      	sub	sp, #20
 8015422:	af00      	add	r7, sp, #0
 8015424:	6078      	str	r0, [r7, #4]
 8015426:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	685b      	ldr	r3, [r3, #4]
 801542c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	68fa      	ldr	r2, [r7, #12]
 8015432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	689a      	ldr	r2, [r3, #8]
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	689b      	ldr	r3, [r3, #8]
 8015440:	683a      	ldr	r2, [r7, #0]
 8015442:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	683a      	ldr	r2, [r7, #0]
 8015448:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801544a:	683b      	ldr	r3, [r7, #0]
 801544c:	687a      	ldr	r2, [r7, #4]
 801544e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	1c5a      	adds	r2, r3, #1
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	601a      	str	r2, [r3, #0]
}
 801545a:	bf00      	nop
 801545c:	3714      	adds	r7, #20
 801545e:	46bd      	mov	sp, r7
 8015460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015464:	4770      	bx	lr

08015466 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015466:	b480      	push	{r7}
 8015468:	b085      	sub	sp, #20
 801546a:	af00      	add	r7, sp, #0
 801546c:	6078      	str	r0, [r7, #4]
 801546e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	f1b3 3fff 	cmp.w	r3, #4294967295
 801547c:	d103      	bne.n	8015486 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	691b      	ldr	r3, [r3, #16]
 8015482:	60fb      	str	r3, [r7, #12]
 8015484:	e00c      	b.n	80154a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	3308      	adds	r3, #8
 801548a:	60fb      	str	r3, [r7, #12]
 801548c:	e002      	b.n	8015494 <vListInsert+0x2e>
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	685b      	ldr	r3, [r3, #4]
 8015492:	60fb      	str	r3, [r7, #12]
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	685b      	ldr	r3, [r3, #4]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	68ba      	ldr	r2, [r7, #8]
 801549c:	429a      	cmp	r2, r3
 801549e:	d2f6      	bcs.n	801548e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	685a      	ldr	r2, [r3, #4]
 80154a4:	683b      	ldr	r3, [r7, #0]
 80154a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	685b      	ldr	r3, [r3, #4]
 80154ac:	683a      	ldr	r2, [r7, #0]
 80154ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	68fa      	ldr	r2, [r7, #12]
 80154b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	683a      	ldr	r2, [r7, #0]
 80154ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80154bc:	683b      	ldr	r3, [r7, #0]
 80154be:	687a      	ldr	r2, [r7, #4]
 80154c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	1c5a      	adds	r2, r3, #1
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	601a      	str	r2, [r3, #0]
}
 80154cc:	bf00      	nop
 80154ce:	3714      	adds	r7, #20
 80154d0:	46bd      	mov	sp, r7
 80154d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d6:	4770      	bx	lr

080154d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80154d8:	b480      	push	{r7}
 80154da:	b085      	sub	sp, #20
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	691b      	ldr	r3, [r3, #16]
 80154e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	685b      	ldr	r3, [r3, #4]
 80154ea:	687a      	ldr	r2, [r7, #4]
 80154ec:	6892      	ldr	r2, [r2, #8]
 80154ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	689b      	ldr	r3, [r3, #8]
 80154f4:	687a      	ldr	r2, [r7, #4]
 80154f6:	6852      	ldr	r2, [r2, #4]
 80154f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	685b      	ldr	r3, [r3, #4]
 80154fe:	687a      	ldr	r2, [r7, #4]
 8015500:	429a      	cmp	r2, r3
 8015502:	d103      	bne.n	801550c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	689a      	ldr	r2, [r3, #8]
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2200      	movs	r2, #0
 8015510:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	1e5a      	subs	r2, r3, #1
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	681b      	ldr	r3, [r3, #0]
}
 8015520:	4618      	mov	r0, r3
 8015522:	3714      	adds	r7, #20
 8015524:	46bd      	mov	sp, r7
 8015526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552a:	4770      	bx	lr

0801552c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b084      	sub	sp, #16
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d10b      	bne.n	8015558 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015544:	b672      	cpsid	i
 8015546:	f383 8811 	msr	BASEPRI, r3
 801554a:	f3bf 8f6f 	isb	sy
 801554e:	f3bf 8f4f 	dsb	sy
 8015552:	b662      	cpsie	i
 8015554:	60bb      	str	r3, [r7, #8]
 8015556:	e7fe      	b.n	8015556 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8015558:	f002 fdf6 	bl	8018148 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	681a      	ldr	r2, [r3, #0]
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015564:	68f9      	ldr	r1, [r7, #12]
 8015566:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015568:	fb01 f303 	mul.w	r3, r1, r3
 801556c:	441a      	add	r2, r3
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	2200      	movs	r2, #0
 8015576:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	681a      	ldr	r2, [r3, #0]
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015588:	3b01      	subs	r3, #1
 801558a:	68f9      	ldr	r1, [r7, #12]
 801558c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801558e:	fb01 f303 	mul.w	r3, r1, r3
 8015592:	441a      	add	r2, r3
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	22ff      	movs	r2, #255	; 0xff
 801559c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	22ff      	movs	r2, #255	; 0xff
 80155a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80155a8:	683b      	ldr	r3, [r7, #0]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d114      	bne.n	80155d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	691b      	ldr	r3, [r3, #16]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d01a      	beq.n	80155ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	3310      	adds	r3, #16
 80155ba:	4618      	mov	r0, r3
 80155bc:	f001 fdb6 	bl	801712c <xTaskRemoveFromEventList>
 80155c0:	4603      	mov	r3, r0
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d012      	beq.n	80155ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80155c6:	4b0d      	ldr	r3, [pc, #52]	; (80155fc <xQueueGenericReset+0xd0>)
 80155c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155cc:	601a      	str	r2, [r3, #0]
 80155ce:	f3bf 8f4f 	dsb	sy
 80155d2:	f3bf 8f6f 	isb	sy
 80155d6:	e009      	b.n	80155ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	3310      	adds	r3, #16
 80155dc:	4618      	mov	r0, r3
 80155de:	f7ff fef1 	bl	80153c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	3324      	adds	r3, #36	; 0x24
 80155e6:	4618      	mov	r0, r3
 80155e8:	f7ff feec 	bl	80153c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80155ec:	f002 fdde 	bl	80181ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80155f0:	2301      	movs	r3, #1
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	3710      	adds	r7, #16
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bd80      	pop	{r7, pc}
 80155fa:	bf00      	nop
 80155fc:	e000ed04 	.word	0xe000ed04

08015600 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015600:	b580      	push	{r7, lr}
 8015602:	b08e      	sub	sp, #56	; 0x38
 8015604:	af02      	add	r7, sp, #8
 8015606:	60f8      	str	r0, [r7, #12]
 8015608:	60b9      	str	r1, [r7, #8]
 801560a:	607a      	str	r2, [r7, #4]
 801560c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d10b      	bne.n	801562c <xQueueGenericCreateStatic+0x2c>
 8015614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015618:	b672      	cpsid	i
 801561a:	f383 8811 	msr	BASEPRI, r3
 801561e:	f3bf 8f6f 	isb	sy
 8015622:	f3bf 8f4f 	dsb	sy
 8015626:	b662      	cpsie	i
 8015628:	62bb      	str	r3, [r7, #40]	; 0x28
 801562a:	e7fe      	b.n	801562a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d10b      	bne.n	801564a <xQueueGenericCreateStatic+0x4a>
 8015632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015636:	b672      	cpsid	i
 8015638:	f383 8811 	msr	BASEPRI, r3
 801563c:	f3bf 8f6f 	isb	sy
 8015640:	f3bf 8f4f 	dsb	sy
 8015644:	b662      	cpsie	i
 8015646:	627b      	str	r3, [r7, #36]	; 0x24
 8015648:	e7fe      	b.n	8015648 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d002      	beq.n	8015656 <xQueueGenericCreateStatic+0x56>
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d001      	beq.n	801565a <xQueueGenericCreateStatic+0x5a>
 8015656:	2301      	movs	r3, #1
 8015658:	e000      	b.n	801565c <xQueueGenericCreateStatic+0x5c>
 801565a:	2300      	movs	r3, #0
 801565c:	2b00      	cmp	r3, #0
 801565e:	d10b      	bne.n	8015678 <xQueueGenericCreateStatic+0x78>
 8015660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015664:	b672      	cpsid	i
 8015666:	f383 8811 	msr	BASEPRI, r3
 801566a:	f3bf 8f6f 	isb	sy
 801566e:	f3bf 8f4f 	dsb	sy
 8015672:	b662      	cpsie	i
 8015674:	623b      	str	r3, [r7, #32]
 8015676:	e7fe      	b.n	8015676 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d102      	bne.n	8015684 <xQueueGenericCreateStatic+0x84>
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d101      	bne.n	8015688 <xQueueGenericCreateStatic+0x88>
 8015684:	2301      	movs	r3, #1
 8015686:	e000      	b.n	801568a <xQueueGenericCreateStatic+0x8a>
 8015688:	2300      	movs	r3, #0
 801568a:	2b00      	cmp	r3, #0
 801568c:	d10b      	bne.n	80156a6 <xQueueGenericCreateStatic+0xa6>
 801568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015692:	b672      	cpsid	i
 8015694:	f383 8811 	msr	BASEPRI, r3
 8015698:	f3bf 8f6f 	isb	sy
 801569c:	f3bf 8f4f 	dsb	sy
 80156a0:	b662      	cpsie	i
 80156a2:	61fb      	str	r3, [r7, #28]
 80156a4:	e7fe      	b.n	80156a4 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80156a6:	2350      	movs	r3, #80	; 0x50
 80156a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80156aa:	697b      	ldr	r3, [r7, #20]
 80156ac:	2b50      	cmp	r3, #80	; 0x50
 80156ae:	d00b      	beq.n	80156c8 <xQueueGenericCreateStatic+0xc8>
 80156b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156b4:	b672      	cpsid	i
 80156b6:	f383 8811 	msr	BASEPRI, r3
 80156ba:	f3bf 8f6f 	isb	sy
 80156be:	f3bf 8f4f 	dsb	sy
 80156c2:	b662      	cpsie	i
 80156c4:	61bb      	str	r3, [r7, #24]
 80156c6:	e7fe      	b.n	80156c6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80156c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80156ca:	683b      	ldr	r3, [r7, #0]
 80156cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80156ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d00d      	beq.n	80156f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80156d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156d6:	2201      	movs	r2, #1
 80156d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80156dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80156e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e2:	9300      	str	r3, [sp, #0]
 80156e4:	4613      	mov	r3, r2
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	68b9      	ldr	r1, [r7, #8]
 80156ea:	68f8      	ldr	r0, [r7, #12]
 80156ec:	f000 f846 	bl	801577c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80156f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80156f2:	4618      	mov	r0, r3
 80156f4:	3730      	adds	r7, #48	; 0x30
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd80      	pop	{r7, pc}

080156fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80156fa:	b580      	push	{r7, lr}
 80156fc:	b08a      	sub	sp, #40	; 0x28
 80156fe:	af02      	add	r7, sp, #8
 8015700:	60f8      	str	r0, [r7, #12]
 8015702:	60b9      	str	r1, [r7, #8]
 8015704:	4613      	mov	r3, r2
 8015706:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d10b      	bne.n	8015726 <xQueueGenericCreate+0x2c>
 801570e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015712:	b672      	cpsid	i
 8015714:	f383 8811 	msr	BASEPRI, r3
 8015718:	f3bf 8f6f 	isb	sy
 801571c:	f3bf 8f4f 	dsb	sy
 8015720:	b662      	cpsie	i
 8015722:	613b      	str	r3, [r7, #16]
 8015724:	e7fe      	b.n	8015724 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d102      	bne.n	8015732 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801572c:	2300      	movs	r3, #0
 801572e:	61fb      	str	r3, [r7, #28]
 8015730:	e004      	b.n	801573c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	68ba      	ldr	r2, [r7, #8]
 8015736:	fb02 f303 	mul.w	r3, r2, r3
 801573a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801573c:	69fb      	ldr	r3, [r7, #28]
 801573e:	3350      	adds	r3, #80	; 0x50
 8015740:	4618      	mov	r0, r3
 8015742:	f002 fe23 	bl	801838c <pvPortMalloc>
 8015746:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015748:	69bb      	ldr	r3, [r7, #24]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d011      	beq.n	8015772 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801574e:	69bb      	ldr	r3, [r7, #24]
 8015750:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015752:	697b      	ldr	r3, [r7, #20]
 8015754:	3350      	adds	r3, #80	; 0x50
 8015756:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015758:	69bb      	ldr	r3, [r7, #24]
 801575a:	2200      	movs	r2, #0
 801575c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015760:	79fa      	ldrb	r2, [r7, #7]
 8015762:	69bb      	ldr	r3, [r7, #24]
 8015764:	9300      	str	r3, [sp, #0]
 8015766:	4613      	mov	r3, r2
 8015768:	697a      	ldr	r2, [r7, #20]
 801576a:	68b9      	ldr	r1, [r7, #8]
 801576c:	68f8      	ldr	r0, [r7, #12]
 801576e:	f000 f805 	bl	801577c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015772:	69bb      	ldr	r3, [r7, #24]
	}
 8015774:	4618      	mov	r0, r3
 8015776:	3720      	adds	r7, #32
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}

0801577c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b084      	sub	sp, #16
 8015780:	af00      	add	r7, sp, #0
 8015782:	60f8      	str	r0, [r7, #12]
 8015784:	60b9      	str	r1, [r7, #8]
 8015786:	607a      	str	r2, [r7, #4]
 8015788:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d103      	bne.n	8015798 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015790:	69bb      	ldr	r3, [r7, #24]
 8015792:	69ba      	ldr	r2, [r7, #24]
 8015794:	601a      	str	r2, [r3, #0]
 8015796:	e002      	b.n	801579e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015798:	69bb      	ldr	r3, [r7, #24]
 801579a:	687a      	ldr	r2, [r7, #4]
 801579c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801579e:	69bb      	ldr	r3, [r7, #24]
 80157a0:	68fa      	ldr	r2, [r7, #12]
 80157a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80157a4:	69bb      	ldr	r3, [r7, #24]
 80157a6:	68ba      	ldr	r2, [r7, #8]
 80157a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80157aa:	2101      	movs	r1, #1
 80157ac:	69b8      	ldr	r0, [r7, #24]
 80157ae:	f7ff febd 	bl	801552c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80157b2:	69bb      	ldr	r3, [r7, #24]
 80157b4:	78fa      	ldrb	r2, [r7, #3]
 80157b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80157ba:	bf00      	nop
 80157bc:	3710      	adds	r7, #16
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}

080157c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80157c2:	b580      	push	{r7, lr}
 80157c4:	b082      	sub	sp, #8
 80157c6:	af00      	add	r7, sp, #0
 80157c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d00e      	beq.n	80157ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2200      	movs	r2, #0
 80157d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	2200      	movs	r2, #0
 80157da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	2200      	movs	r2, #0
 80157e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80157e2:	2300      	movs	r3, #0
 80157e4:	2200      	movs	r2, #0
 80157e6:	2100      	movs	r1, #0
 80157e8:	6878      	ldr	r0, [r7, #4]
 80157ea:	f000 f92b 	bl	8015a44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80157ee:	bf00      	nop
 80157f0:	3708      	adds	r7, #8
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bd80      	pop	{r7, pc}

080157f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80157f6:	b580      	push	{r7, lr}
 80157f8:	b086      	sub	sp, #24
 80157fa:	af00      	add	r7, sp, #0
 80157fc:	4603      	mov	r3, r0
 80157fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015800:	2301      	movs	r3, #1
 8015802:	617b      	str	r3, [r7, #20]
 8015804:	2300      	movs	r3, #0
 8015806:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015808:	79fb      	ldrb	r3, [r7, #7]
 801580a:	461a      	mov	r2, r3
 801580c:	6939      	ldr	r1, [r7, #16]
 801580e:	6978      	ldr	r0, [r7, #20]
 8015810:	f7ff ff73 	bl	80156fa <xQueueGenericCreate>
 8015814:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015816:	68f8      	ldr	r0, [r7, #12]
 8015818:	f7ff ffd3 	bl	80157c2 <prvInitialiseMutex>

		return xNewQueue;
 801581c:	68fb      	ldr	r3, [r7, #12]
	}
 801581e:	4618      	mov	r0, r3
 8015820:	3718      	adds	r7, #24
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}

08015826 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8015826:	b580      	push	{r7, lr}
 8015828:	b088      	sub	sp, #32
 801582a:	af02      	add	r7, sp, #8
 801582c:	4603      	mov	r3, r0
 801582e:	6039      	str	r1, [r7, #0]
 8015830:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015832:	2301      	movs	r3, #1
 8015834:	617b      	str	r3, [r7, #20]
 8015836:	2300      	movs	r3, #0
 8015838:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801583a:	79fb      	ldrb	r3, [r7, #7]
 801583c:	9300      	str	r3, [sp, #0]
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	2200      	movs	r2, #0
 8015842:	6939      	ldr	r1, [r7, #16]
 8015844:	6978      	ldr	r0, [r7, #20]
 8015846:	f7ff fedb 	bl	8015600 <xQueueGenericCreateStatic>
 801584a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801584c:	68f8      	ldr	r0, [r7, #12]
 801584e:	f7ff ffb8 	bl	80157c2 <prvInitialiseMutex>

		return xNewQueue;
 8015852:	68fb      	ldr	r3, [r7, #12]
	}
 8015854:	4618      	mov	r0, r3
 8015856:	3718      	adds	r7, #24
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}

0801585c <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
	{
 801585c:	b580      	push	{r7, lr}
 801585e:	b084      	sub	sp, #16
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
	TaskHandle_t pxReturn;
	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	60bb      	str	r3, [r7, #8]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
 8015868:	f002 fc6e 	bl	8018148 <vPortEnterCritical>
		{
			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 801586c:	68bb      	ldr	r3, [r7, #8]
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d103      	bne.n	801587c <xQueueGetMutexHolder+0x20>
			{
				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8015874:	68bb      	ldr	r3, [r7, #8]
 8015876:	689b      	ldr	r3, [r3, #8]
 8015878:	60fb      	str	r3, [r7, #12]
 801587a:	e001      	b.n	8015880 <xQueueGetMutexHolder+0x24>
			}
			else
			{
				pxReturn = NULL;
 801587c:	2300      	movs	r3, #0
 801587e:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8015880:	f002 fc94 	bl	80181ac <vPortExitCritical>

		return pxReturn;
 8015884:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8015886:	4618      	mov	r0, r3
 8015888:	3710      	adds	r7, #16
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}

0801588e <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801588e:	b590      	push	{r4, r7, lr}
 8015890:	b087      	sub	sp, #28
 8015892:	af00      	add	r7, sp, #0
 8015894:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801589a:	693b      	ldr	r3, [r7, #16]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d10b      	bne.n	80158b8 <xQueueGiveMutexRecursive+0x2a>
 80158a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158a4:	b672      	cpsid	i
 80158a6:	f383 8811 	msr	BASEPRI, r3
 80158aa:	f3bf 8f6f 	isb	sy
 80158ae:	f3bf 8f4f 	dsb	sy
 80158b2:	b662      	cpsie	i
 80158b4:	60fb      	str	r3, [r7, #12]
 80158b6:	e7fe      	b.n	80158b6 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80158b8:	693b      	ldr	r3, [r7, #16]
 80158ba:	689c      	ldr	r4, [r3, #8]
 80158bc:	f001 fdf4 	bl	80174a8 <xTaskGetCurrentTaskHandle>
 80158c0:	4603      	mov	r3, r0
 80158c2:	429c      	cmp	r4, r3
 80158c4:	d111      	bne.n	80158ea <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	68db      	ldr	r3, [r3, #12]
 80158ca:	1e5a      	subs	r2, r3, #1
 80158cc:	693b      	ldr	r3, [r7, #16]
 80158ce:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80158d0:	693b      	ldr	r3, [r7, #16]
 80158d2:	68db      	ldr	r3, [r3, #12]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d105      	bne.n	80158e4 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80158d8:	2300      	movs	r3, #0
 80158da:	2200      	movs	r2, #0
 80158dc:	2100      	movs	r1, #0
 80158de:	6938      	ldr	r0, [r7, #16]
 80158e0:	f000 f8b0 	bl	8015a44 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80158e4:	2301      	movs	r3, #1
 80158e6:	617b      	str	r3, [r7, #20]
 80158e8:	e001      	b.n	80158ee <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80158ea:	2300      	movs	r3, #0
 80158ec:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80158ee:	697b      	ldr	r3, [r7, #20]
	}
 80158f0:	4618      	mov	r0, r3
 80158f2:	371c      	adds	r7, #28
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd90      	pop	{r4, r7, pc}

080158f8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80158f8:	b590      	push	{r4, r7, lr}
 80158fa:	b087      	sub	sp, #28
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
 8015900:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015906:	693b      	ldr	r3, [r7, #16]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d10b      	bne.n	8015924 <xQueueTakeMutexRecursive+0x2c>
 801590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015910:	b672      	cpsid	i
 8015912:	f383 8811 	msr	BASEPRI, r3
 8015916:	f3bf 8f6f 	isb	sy
 801591a:	f3bf 8f4f 	dsb	sy
 801591e:	b662      	cpsie	i
 8015920:	60fb      	str	r3, [r7, #12]
 8015922:	e7fe      	b.n	8015922 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015924:	693b      	ldr	r3, [r7, #16]
 8015926:	689c      	ldr	r4, [r3, #8]
 8015928:	f001 fdbe 	bl	80174a8 <xTaskGetCurrentTaskHandle>
 801592c:	4603      	mov	r3, r0
 801592e:	429c      	cmp	r4, r3
 8015930:	d107      	bne.n	8015942 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015932:	693b      	ldr	r3, [r7, #16]
 8015934:	68db      	ldr	r3, [r3, #12]
 8015936:	1c5a      	adds	r2, r3, #1
 8015938:	693b      	ldr	r3, [r7, #16]
 801593a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801593c:	2301      	movs	r3, #1
 801593e:	617b      	str	r3, [r7, #20]
 8015940:	e00c      	b.n	801595c <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8015942:	6839      	ldr	r1, [r7, #0]
 8015944:	6938      	ldr	r0, [r7, #16]
 8015946:	f000 fb8f 	bl	8016068 <xQueueSemaphoreTake>
 801594a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d004      	beq.n	801595c <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015952:	693b      	ldr	r3, [r7, #16]
 8015954:	68db      	ldr	r3, [r3, #12]
 8015956:	1c5a      	adds	r2, r3, #1
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801595c:	697b      	ldr	r3, [r7, #20]
	}
 801595e:	4618      	mov	r0, r3
 8015960:	371c      	adds	r7, #28
 8015962:	46bd      	mov	sp, r7
 8015964:	bd90      	pop	{r4, r7, pc}

08015966 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015966:	b580      	push	{r7, lr}
 8015968:	b08a      	sub	sp, #40	; 0x28
 801596a:	af02      	add	r7, sp, #8
 801596c:	60f8      	str	r0, [r7, #12]
 801596e:	60b9      	str	r1, [r7, #8]
 8015970:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d10b      	bne.n	8015990 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8015978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801597c:	b672      	cpsid	i
 801597e:	f383 8811 	msr	BASEPRI, r3
 8015982:	f3bf 8f6f 	isb	sy
 8015986:	f3bf 8f4f 	dsb	sy
 801598a:	b662      	cpsie	i
 801598c:	61bb      	str	r3, [r7, #24]
 801598e:	e7fe      	b.n	801598e <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015990:	68ba      	ldr	r2, [r7, #8]
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	429a      	cmp	r2, r3
 8015996:	d90b      	bls.n	80159b0 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8015998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801599c:	b672      	cpsid	i
 801599e:	f383 8811 	msr	BASEPRI, r3
 80159a2:	f3bf 8f6f 	isb	sy
 80159a6:	f3bf 8f4f 	dsb	sy
 80159aa:	b662      	cpsie	i
 80159ac:	617b      	str	r3, [r7, #20]
 80159ae:	e7fe      	b.n	80159ae <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80159b0:	2302      	movs	r3, #2
 80159b2:	9300      	str	r3, [sp, #0]
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	2200      	movs	r2, #0
 80159b8:	2100      	movs	r1, #0
 80159ba:	68f8      	ldr	r0, [r7, #12]
 80159bc:	f7ff fe20 	bl	8015600 <xQueueGenericCreateStatic>
 80159c0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80159c2:	69fb      	ldr	r3, [r7, #28]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d002      	beq.n	80159ce <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80159c8:	69fb      	ldr	r3, [r7, #28]
 80159ca:	68ba      	ldr	r2, [r7, #8]
 80159cc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80159ce:	69fb      	ldr	r3, [r7, #28]
	}
 80159d0:	4618      	mov	r0, r3
 80159d2:	3720      	adds	r7, #32
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bd80      	pop	{r7, pc}

080159d8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b086      	sub	sp, #24
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d10b      	bne.n	8015a00 <xQueueCreateCountingSemaphore+0x28>
 80159e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159ec:	b672      	cpsid	i
 80159ee:	f383 8811 	msr	BASEPRI, r3
 80159f2:	f3bf 8f6f 	isb	sy
 80159f6:	f3bf 8f4f 	dsb	sy
 80159fa:	b662      	cpsie	i
 80159fc:	613b      	str	r3, [r7, #16]
 80159fe:	e7fe      	b.n	80159fe <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015a00:	683a      	ldr	r2, [r7, #0]
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	429a      	cmp	r2, r3
 8015a06:	d90b      	bls.n	8015a20 <xQueueCreateCountingSemaphore+0x48>
 8015a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a0c:	b672      	cpsid	i
 8015a0e:	f383 8811 	msr	BASEPRI, r3
 8015a12:	f3bf 8f6f 	isb	sy
 8015a16:	f3bf 8f4f 	dsb	sy
 8015a1a:	b662      	cpsie	i
 8015a1c:	60fb      	str	r3, [r7, #12]
 8015a1e:	e7fe      	b.n	8015a1e <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015a20:	2202      	movs	r2, #2
 8015a22:	2100      	movs	r1, #0
 8015a24:	6878      	ldr	r0, [r7, #4]
 8015a26:	f7ff fe68 	bl	80156fa <xQueueGenericCreate>
 8015a2a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015a2c:	697b      	ldr	r3, [r7, #20]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d002      	beq.n	8015a38 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015a32:	697b      	ldr	r3, [r7, #20]
 8015a34:	683a      	ldr	r2, [r7, #0]
 8015a36:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015a38:	697b      	ldr	r3, [r7, #20]
	}
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	3718      	adds	r7, #24
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}
	...

08015a44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b08e      	sub	sp, #56	; 0x38
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	60f8      	str	r0, [r7, #12]
 8015a4c:	60b9      	str	r1, [r7, #8]
 8015a4e:	607a      	str	r2, [r7, #4]
 8015a50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015a52:	2300      	movs	r3, #0
 8015a54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d10b      	bne.n	8015a78 <xQueueGenericSend+0x34>
 8015a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a64:	b672      	cpsid	i
 8015a66:	f383 8811 	msr	BASEPRI, r3
 8015a6a:	f3bf 8f6f 	isb	sy
 8015a6e:	f3bf 8f4f 	dsb	sy
 8015a72:	b662      	cpsie	i
 8015a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8015a76:	e7fe      	b.n	8015a76 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015a78:	68bb      	ldr	r3, [r7, #8]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d103      	bne.n	8015a86 <xQueueGenericSend+0x42>
 8015a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d101      	bne.n	8015a8a <xQueueGenericSend+0x46>
 8015a86:	2301      	movs	r3, #1
 8015a88:	e000      	b.n	8015a8c <xQueueGenericSend+0x48>
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d10b      	bne.n	8015aa8 <xQueueGenericSend+0x64>
 8015a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a94:	b672      	cpsid	i
 8015a96:	f383 8811 	msr	BASEPRI, r3
 8015a9a:	f3bf 8f6f 	isb	sy
 8015a9e:	f3bf 8f4f 	dsb	sy
 8015aa2:	b662      	cpsie	i
 8015aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8015aa6:	e7fe      	b.n	8015aa6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015aa8:	683b      	ldr	r3, [r7, #0]
 8015aaa:	2b02      	cmp	r3, #2
 8015aac:	d103      	bne.n	8015ab6 <xQueueGenericSend+0x72>
 8015aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ab2:	2b01      	cmp	r3, #1
 8015ab4:	d101      	bne.n	8015aba <xQueueGenericSend+0x76>
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	e000      	b.n	8015abc <xQueueGenericSend+0x78>
 8015aba:	2300      	movs	r3, #0
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d10b      	bne.n	8015ad8 <xQueueGenericSend+0x94>
 8015ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ac4:	b672      	cpsid	i
 8015ac6:	f383 8811 	msr	BASEPRI, r3
 8015aca:	f3bf 8f6f 	isb	sy
 8015ace:	f3bf 8f4f 	dsb	sy
 8015ad2:	b662      	cpsie	i
 8015ad4:	623b      	str	r3, [r7, #32]
 8015ad6:	e7fe      	b.n	8015ad6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015ad8:	f001 fcf6 	bl	80174c8 <xTaskGetSchedulerState>
 8015adc:	4603      	mov	r3, r0
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d102      	bne.n	8015ae8 <xQueueGenericSend+0xa4>
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d101      	bne.n	8015aec <xQueueGenericSend+0xa8>
 8015ae8:	2301      	movs	r3, #1
 8015aea:	e000      	b.n	8015aee <xQueueGenericSend+0xaa>
 8015aec:	2300      	movs	r3, #0
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d10b      	bne.n	8015b0a <xQueueGenericSend+0xc6>
 8015af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af6:	b672      	cpsid	i
 8015af8:	f383 8811 	msr	BASEPRI, r3
 8015afc:	f3bf 8f6f 	isb	sy
 8015b00:	f3bf 8f4f 	dsb	sy
 8015b04:	b662      	cpsie	i
 8015b06:	61fb      	str	r3, [r7, #28]
 8015b08:	e7fe      	b.n	8015b08 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015b0a:	f002 fb1d 	bl	8018148 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d302      	bcc.n	8015b20 <xQueueGenericSend+0xdc>
 8015b1a:	683b      	ldr	r3, [r7, #0]
 8015b1c:	2b02      	cmp	r3, #2
 8015b1e:	d129      	bne.n	8015b74 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015b20:	683a      	ldr	r2, [r7, #0]
 8015b22:	68b9      	ldr	r1, [r7, #8]
 8015b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b26:	f000 fc6e 	bl	8016406 <prvCopyDataToQueue>
 8015b2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d010      	beq.n	8015b56 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b36:	3324      	adds	r3, #36	; 0x24
 8015b38:	4618      	mov	r0, r3
 8015b3a:	f001 faf7 	bl	801712c <xTaskRemoveFromEventList>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d013      	beq.n	8015b6c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015b44:	4b3f      	ldr	r3, [pc, #252]	; (8015c44 <xQueueGenericSend+0x200>)
 8015b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b4a:	601a      	str	r2, [r3, #0]
 8015b4c:	f3bf 8f4f 	dsb	sy
 8015b50:	f3bf 8f6f 	isb	sy
 8015b54:	e00a      	b.n	8015b6c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d007      	beq.n	8015b6c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015b5c:	4b39      	ldr	r3, [pc, #228]	; (8015c44 <xQueueGenericSend+0x200>)
 8015b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b62:	601a      	str	r2, [r3, #0]
 8015b64:	f3bf 8f4f 	dsb	sy
 8015b68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015b6c:	f002 fb1e 	bl	80181ac <vPortExitCritical>
				return pdPASS;
 8015b70:	2301      	movs	r3, #1
 8015b72:	e063      	b.n	8015c3c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d103      	bne.n	8015b82 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015b7a:	f002 fb17 	bl	80181ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	e05c      	b.n	8015c3c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d106      	bne.n	8015b96 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015b88:	f107 0314 	add.w	r3, r7, #20
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f001 fb31 	bl	80171f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015b92:	2301      	movs	r3, #1
 8015b94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015b96:	f002 fb09 	bl	80181ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015b9a:	f001 f88f 	bl	8016cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b9e:	f002 fad3 	bl	8018148 <vPortEnterCritical>
 8015ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015ba8:	b25b      	sxtb	r3, r3
 8015baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bae:	d103      	bne.n	8015bb8 <xQueueGenericSend+0x174>
 8015bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015bbe:	b25b      	sxtb	r3, r3
 8015bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bc4:	d103      	bne.n	8015bce <xQueueGenericSend+0x18a>
 8015bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc8:	2200      	movs	r2, #0
 8015bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015bce:	f002 faed 	bl	80181ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015bd2:	1d3a      	adds	r2, r7, #4
 8015bd4:	f107 0314 	add.w	r3, r7, #20
 8015bd8:	4611      	mov	r1, r2
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f001 fb20 	bl	8017220 <xTaskCheckForTimeOut>
 8015be0:	4603      	mov	r3, r0
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d124      	bne.n	8015c30 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015be6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015be8:	f000 fd05 	bl	80165f6 <prvIsQueueFull>
 8015bec:	4603      	mov	r3, r0
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d018      	beq.n	8015c24 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bf4:	3310      	adds	r3, #16
 8015bf6:	687a      	ldr	r2, [r7, #4]
 8015bf8:	4611      	mov	r1, r2
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f001 fa44 	bl	8017088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c02:	f000 fc90 	bl	8016526 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015c06:	f001 f867 	bl	8016cd8 <xTaskResumeAll>
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	f47f af7c 	bne.w	8015b0a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8015c12:	4b0c      	ldr	r3, [pc, #48]	; (8015c44 <xQueueGenericSend+0x200>)
 8015c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c18:	601a      	str	r2, [r3, #0]
 8015c1a:	f3bf 8f4f 	dsb	sy
 8015c1e:	f3bf 8f6f 	isb	sy
 8015c22:	e772      	b.n	8015b0a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c26:	f000 fc7e 	bl	8016526 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015c2a:	f001 f855 	bl	8016cd8 <xTaskResumeAll>
 8015c2e:	e76c      	b.n	8015b0a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c32:	f000 fc78 	bl	8016526 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015c36:	f001 f84f 	bl	8016cd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015c3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	3738      	adds	r7, #56	; 0x38
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}
 8015c44:	e000ed04 	.word	0xe000ed04

08015c48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b08e      	sub	sp, #56	; 0x38
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	60f8      	str	r0, [r7, #12]
 8015c50:	60b9      	str	r1, [r7, #8]
 8015c52:	607a      	str	r2, [r7, #4]
 8015c54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d10b      	bne.n	8015c78 <xQueueGenericSendFromISR+0x30>
 8015c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c64:	b672      	cpsid	i
 8015c66:	f383 8811 	msr	BASEPRI, r3
 8015c6a:	f3bf 8f6f 	isb	sy
 8015c6e:	f3bf 8f4f 	dsb	sy
 8015c72:	b662      	cpsie	i
 8015c74:	627b      	str	r3, [r7, #36]	; 0x24
 8015c76:	e7fe      	b.n	8015c76 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c78:	68bb      	ldr	r3, [r7, #8]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d103      	bne.n	8015c86 <xQueueGenericSendFromISR+0x3e>
 8015c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d101      	bne.n	8015c8a <xQueueGenericSendFromISR+0x42>
 8015c86:	2301      	movs	r3, #1
 8015c88:	e000      	b.n	8015c8c <xQueueGenericSendFromISR+0x44>
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d10b      	bne.n	8015ca8 <xQueueGenericSendFromISR+0x60>
 8015c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c94:	b672      	cpsid	i
 8015c96:	f383 8811 	msr	BASEPRI, r3
 8015c9a:	f3bf 8f6f 	isb	sy
 8015c9e:	f3bf 8f4f 	dsb	sy
 8015ca2:	b662      	cpsie	i
 8015ca4:	623b      	str	r3, [r7, #32]
 8015ca6:	e7fe      	b.n	8015ca6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	2b02      	cmp	r3, #2
 8015cac:	d103      	bne.n	8015cb6 <xQueueGenericSendFromISR+0x6e>
 8015cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cb2:	2b01      	cmp	r3, #1
 8015cb4:	d101      	bne.n	8015cba <xQueueGenericSendFromISR+0x72>
 8015cb6:	2301      	movs	r3, #1
 8015cb8:	e000      	b.n	8015cbc <xQueueGenericSendFromISR+0x74>
 8015cba:	2300      	movs	r3, #0
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d10b      	bne.n	8015cd8 <xQueueGenericSendFromISR+0x90>
 8015cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cc4:	b672      	cpsid	i
 8015cc6:	f383 8811 	msr	BASEPRI, r3
 8015cca:	f3bf 8f6f 	isb	sy
 8015cce:	f3bf 8f4f 	dsb	sy
 8015cd2:	b662      	cpsie	i
 8015cd4:	61fb      	str	r3, [r7, #28]
 8015cd6:	e7fe      	b.n	8015cd6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015cd8:	f002 fb16 	bl	8018308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015cdc:	f3ef 8211 	mrs	r2, BASEPRI
 8015ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ce4:	b672      	cpsid	i
 8015ce6:	f383 8811 	msr	BASEPRI, r3
 8015cea:	f3bf 8f6f 	isb	sy
 8015cee:	f3bf 8f4f 	dsb	sy
 8015cf2:	b662      	cpsie	i
 8015cf4:	61ba      	str	r2, [r7, #24]
 8015cf6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015cf8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d302      	bcc.n	8015d0e <xQueueGenericSendFromISR+0xc6>
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	2b02      	cmp	r3, #2
 8015d0c:	d12c      	bne.n	8015d68 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d18:	683a      	ldr	r2, [r7, #0]
 8015d1a:	68b9      	ldr	r1, [r7, #8]
 8015d1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d1e:	f000 fb72 	bl	8016406 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015d22:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d2a:	d112      	bne.n	8015d52 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d016      	beq.n	8015d62 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d36:	3324      	adds	r3, #36	; 0x24
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f001 f9f7 	bl	801712c <xTaskRemoveFromEventList>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d00e      	beq.n	8015d62 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d00b      	beq.n	8015d62 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	2201      	movs	r2, #1
 8015d4e:	601a      	str	r2, [r3, #0]
 8015d50:	e007      	b.n	8015d62 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015d52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015d56:	3301      	adds	r3, #1
 8015d58:	b2db      	uxtb	r3, r3
 8015d5a:	b25a      	sxtb	r2, r3
 8015d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015d62:	2301      	movs	r3, #1
 8015d64:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8015d66:	e001      	b.n	8015d6c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8015d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d6e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015d70:	693b      	ldr	r3, [r7, #16]
 8015d72:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015d78:	4618      	mov	r0, r3
 8015d7a:	3738      	adds	r7, #56	; 0x38
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	bd80      	pop	{r7, pc}

08015d80 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b08e      	sub	sp, #56	; 0x38
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
 8015d88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d10b      	bne.n	8015dac <xQueueGiveFromISR+0x2c>
	__asm volatile
 8015d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d98:	b672      	cpsid	i
 8015d9a:	f383 8811 	msr	BASEPRI, r3
 8015d9e:	f3bf 8f6f 	isb	sy
 8015da2:	f3bf 8f4f 	dsb	sy
 8015da6:	b662      	cpsie	i
 8015da8:	623b      	str	r3, [r7, #32]
 8015daa:	e7fe      	b.n	8015daa <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d00b      	beq.n	8015dcc <xQueueGiveFromISR+0x4c>
 8015db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015db8:	b672      	cpsid	i
 8015dba:	f383 8811 	msr	BASEPRI, r3
 8015dbe:	f3bf 8f6f 	isb	sy
 8015dc2:	f3bf 8f4f 	dsb	sy
 8015dc6:	b662      	cpsie	i
 8015dc8:	61fb      	str	r3, [r7, #28]
 8015dca:	e7fe      	b.n	8015dca <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d103      	bne.n	8015ddc <xQueueGiveFromISR+0x5c>
 8015dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd6:	689b      	ldr	r3, [r3, #8]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d101      	bne.n	8015de0 <xQueueGiveFromISR+0x60>
 8015ddc:	2301      	movs	r3, #1
 8015dde:	e000      	b.n	8015de2 <xQueueGiveFromISR+0x62>
 8015de0:	2300      	movs	r3, #0
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d10b      	bne.n	8015dfe <xQueueGiveFromISR+0x7e>
 8015de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dea:	b672      	cpsid	i
 8015dec:	f383 8811 	msr	BASEPRI, r3
 8015df0:	f3bf 8f6f 	isb	sy
 8015df4:	f3bf 8f4f 	dsb	sy
 8015df8:	b662      	cpsie	i
 8015dfa:	61bb      	str	r3, [r7, #24]
 8015dfc:	e7fe      	b.n	8015dfc <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015dfe:	f002 fa83 	bl	8018308 <vPortValidateInterruptPriority>
	__asm volatile
 8015e02:	f3ef 8211 	mrs	r2, BASEPRI
 8015e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e0a:	b672      	cpsid	i
 8015e0c:	f383 8811 	msr	BASEPRI, r3
 8015e10:	f3bf 8f6f 	isb	sy
 8015e14:	f3bf 8f4f 	dsb	sy
 8015e18:	b662      	cpsie	i
 8015e1a:	617a      	str	r2, [r7, #20]
 8015e1c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015e1e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015e20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e2e:	429a      	cmp	r2, r3
 8015e30:	d22b      	bcs.n	8015e8a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e3e:	1c5a      	adds	r2, r3, #1
 8015e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e42:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015e44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e4c:	d112      	bne.n	8015e74 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d016      	beq.n	8015e84 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e58:	3324      	adds	r3, #36	; 0x24
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f001 f966 	bl	801712c <xTaskRemoveFromEventList>
 8015e60:	4603      	mov	r3, r0
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d00e      	beq.n	8015e84 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d00b      	beq.n	8015e84 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	2201      	movs	r2, #1
 8015e70:	601a      	str	r2, [r3, #0]
 8015e72:	e007      	b.n	8015e84 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e78:	3301      	adds	r3, #1
 8015e7a:	b2db      	uxtb	r3, r3
 8015e7c:	b25a      	sxtb	r2, r3
 8015e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015e84:	2301      	movs	r3, #1
 8015e86:	637b      	str	r3, [r7, #52]	; 0x34
 8015e88:	e001      	b.n	8015e8e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8015e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e90:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	3738      	adds	r7, #56	; 0x38
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	bd80      	pop	{r7, pc}
	...

08015ea4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b08c      	sub	sp, #48	; 0x30
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	60f8      	str	r0, [r7, #12]
 8015eac:	60b9      	str	r1, [r7, #8]
 8015eae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d10b      	bne.n	8015ed6 <xQueueReceive+0x32>
	__asm volatile
 8015ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ec2:	b672      	cpsid	i
 8015ec4:	f383 8811 	msr	BASEPRI, r3
 8015ec8:	f3bf 8f6f 	isb	sy
 8015ecc:	f3bf 8f4f 	dsb	sy
 8015ed0:	b662      	cpsie	i
 8015ed2:	623b      	str	r3, [r7, #32]
 8015ed4:	e7fe      	b.n	8015ed4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015ed6:	68bb      	ldr	r3, [r7, #8]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d103      	bne.n	8015ee4 <xQueueReceive+0x40>
 8015edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d101      	bne.n	8015ee8 <xQueueReceive+0x44>
 8015ee4:	2301      	movs	r3, #1
 8015ee6:	e000      	b.n	8015eea <xQueueReceive+0x46>
 8015ee8:	2300      	movs	r3, #0
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d10b      	bne.n	8015f06 <xQueueReceive+0x62>
 8015eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ef2:	b672      	cpsid	i
 8015ef4:	f383 8811 	msr	BASEPRI, r3
 8015ef8:	f3bf 8f6f 	isb	sy
 8015efc:	f3bf 8f4f 	dsb	sy
 8015f00:	b662      	cpsie	i
 8015f02:	61fb      	str	r3, [r7, #28]
 8015f04:	e7fe      	b.n	8015f04 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015f06:	f001 fadf 	bl	80174c8 <xTaskGetSchedulerState>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d102      	bne.n	8015f16 <xQueueReceive+0x72>
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d101      	bne.n	8015f1a <xQueueReceive+0x76>
 8015f16:	2301      	movs	r3, #1
 8015f18:	e000      	b.n	8015f1c <xQueueReceive+0x78>
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d10b      	bne.n	8015f38 <xQueueReceive+0x94>
 8015f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f24:	b672      	cpsid	i
 8015f26:	f383 8811 	msr	BASEPRI, r3
 8015f2a:	f3bf 8f6f 	isb	sy
 8015f2e:	f3bf 8f4f 	dsb	sy
 8015f32:	b662      	cpsie	i
 8015f34:	61bb      	str	r3, [r7, #24]
 8015f36:	e7fe      	b.n	8015f36 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015f38:	f002 f906 	bl	8018148 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f40:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d01f      	beq.n	8015f88 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015f48:	68b9      	ldr	r1, [r7, #8]
 8015f4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f4c:	f000 fac5 	bl	80164da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f52:	1e5a      	subs	r2, r3, #1
 8015f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f56:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f5a:	691b      	ldr	r3, [r3, #16]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d00f      	beq.n	8015f80 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f62:	3310      	adds	r3, #16
 8015f64:	4618      	mov	r0, r3
 8015f66:	f001 f8e1 	bl	801712c <xTaskRemoveFromEventList>
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d007      	beq.n	8015f80 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015f70:	4b3c      	ldr	r3, [pc, #240]	; (8016064 <xQueueReceive+0x1c0>)
 8015f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f76:	601a      	str	r2, [r3, #0]
 8015f78:	f3bf 8f4f 	dsb	sy
 8015f7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015f80:	f002 f914 	bl	80181ac <vPortExitCritical>
				return pdPASS;
 8015f84:	2301      	movs	r3, #1
 8015f86:	e069      	b.n	801605c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d103      	bne.n	8015f96 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015f8e:	f002 f90d 	bl	80181ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015f92:	2300      	movs	r3, #0
 8015f94:	e062      	b.n	801605c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d106      	bne.n	8015faa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015f9c:	f107 0310 	add.w	r3, r7, #16
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f001 f927 	bl	80171f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015fa6:	2301      	movs	r3, #1
 8015fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015faa:	f002 f8ff 	bl	80181ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015fae:	f000 fe85 	bl	8016cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015fb2:	f002 f8c9 	bl	8018148 <vPortEnterCritical>
 8015fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015fbc:	b25b      	sxtb	r3, r3
 8015fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fc2:	d103      	bne.n	8015fcc <xQueueReceive+0x128>
 8015fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015fd2:	b25b      	sxtb	r3, r3
 8015fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fd8:	d103      	bne.n	8015fe2 <xQueueReceive+0x13e>
 8015fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fdc:	2200      	movs	r2, #0
 8015fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015fe2:	f002 f8e3 	bl	80181ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015fe6:	1d3a      	adds	r2, r7, #4
 8015fe8:	f107 0310 	add.w	r3, r7, #16
 8015fec:	4611      	mov	r1, r2
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f001 f916 	bl	8017220 <xTaskCheckForTimeOut>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d123      	bne.n	8016042 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015ffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ffc:	f000 fae5 	bl	80165ca <prvIsQueueEmpty>
 8016000:	4603      	mov	r3, r0
 8016002:	2b00      	cmp	r3, #0
 8016004:	d017      	beq.n	8016036 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016008:	3324      	adds	r3, #36	; 0x24
 801600a:	687a      	ldr	r2, [r7, #4]
 801600c:	4611      	mov	r1, r2
 801600e:	4618      	mov	r0, r3
 8016010:	f001 f83a 	bl	8017088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016016:	f000 fa86 	bl	8016526 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801601a:	f000 fe5d 	bl	8016cd8 <xTaskResumeAll>
 801601e:	4603      	mov	r3, r0
 8016020:	2b00      	cmp	r3, #0
 8016022:	d189      	bne.n	8015f38 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8016024:	4b0f      	ldr	r3, [pc, #60]	; (8016064 <xQueueReceive+0x1c0>)
 8016026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801602a:	601a      	str	r2, [r3, #0]
 801602c:	f3bf 8f4f 	dsb	sy
 8016030:	f3bf 8f6f 	isb	sy
 8016034:	e780      	b.n	8015f38 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8016036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016038:	f000 fa75 	bl	8016526 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801603c:	f000 fe4c 	bl	8016cd8 <xTaskResumeAll>
 8016040:	e77a      	b.n	8015f38 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016044:	f000 fa6f 	bl	8016526 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016048:	f000 fe46 	bl	8016cd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801604c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801604e:	f000 fabc 	bl	80165ca <prvIsQueueEmpty>
 8016052:	4603      	mov	r3, r0
 8016054:	2b00      	cmp	r3, #0
 8016056:	f43f af6f 	beq.w	8015f38 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801605a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801605c:	4618      	mov	r0, r3
 801605e:	3730      	adds	r7, #48	; 0x30
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}
 8016064:	e000ed04 	.word	0xe000ed04

08016068 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b08e      	sub	sp, #56	; 0x38
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
 8016070:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8016072:	2300      	movs	r3, #0
 8016074:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801607a:	2300      	movs	r3, #0
 801607c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016080:	2b00      	cmp	r3, #0
 8016082:	d10b      	bne.n	801609c <xQueueSemaphoreTake+0x34>
 8016084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016088:	b672      	cpsid	i
 801608a:	f383 8811 	msr	BASEPRI, r3
 801608e:	f3bf 8f6f 	isb	sy
 8016092:	f3bf 8f4f 	dsb	sy
 8016096:	b662      	cpsie	i
 8016098:	623b      	str	r3, [r7, #32]
 801609a:	e7fe      	b.n	801609a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d00b      	beq.n	80160bc <xQueueSemaphoreTake+0x54>
 80160a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160a8:	b672      	cpsid	i
 80160aa:	f383 8811 	msr	BASEPRI, r3
 80160ae:	f3bf 8f6f 	isb	sy
 80160b2:	f3bf 8f4f 	dsb	sy
 80160b6:	b662      	cpsie	i
 80160b8:	61fb      	str	r3, [r7, #28]
 80160ba:	e7fe      	b.n	80160ba <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80160bc:	f001 fa04 	bl	80174c8 <xTaskGetSchedulerState>
 80160c0:	4603      	mov	r3, r0
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d102      	bne.n	80160cc <xQueueSemaphoreTake+0x64>
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d101      	bne.n	80160d0 <xQueueSemaphoreTake+0x68>
 80160cc:	2301      	movs	r3, #1
 80160ce:	e000      	b.n	80160d2 <xQueueSemaphoreTake+0x6a>
 80160d0:	2300      	movs	r3, #0
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d10b      	bne.n	80160ee <xQueueSemaphoreTake+0x86>
 80160d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160da:	b672      	cpsid	i
 80160dc:	f383 8811 	msr	BASEPRI, r3
 80160e0:	f3bf 8f6f 	isb	sy
 80160e4:	f3bf 8f4f 	dsb	sy
 80160e8:	b662      	cpsie	i
 80160ea:	61bb      	str	r3, [r7, #24]
 80160ec:	e7fe      	b.n	80160ec <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80160ee:	f002 f82b 	bl	8018148 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80160f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160f6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80160f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d024      	beq.n	8016148 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80160fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016100:	1e5a      	subs	r2, r3, #1
 8016102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016104:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d104      	bne.n	8016118 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801610e:	f001 fb55 	bl	80177bc <pvTaskIncrementMutexHeldCount>
 8016112:	4602      	mov	r2, r0
 8016114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016116:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801611a:	691b      	ldr	r3, [r3, #16]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d00f      	beq.n	8016140 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016122:	3310      	adds	r3, #16
 8016124:	4618      	mov	r0, r3
 8016126:	f001 f801 	bl	801712c <xTaskRemoveFromEventList>
 801612a:	4603      	mov	r3, r0
 801612c:	2b00      	cmp	r3, #0
 801612e:	d007      	beq.n	8016140 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016130:	4b54      	ldr	r3, [pc, #336]	; (8016284 <xQueueSemaphoreTake+0x21c>)
 8016132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016136:	601a      	str	r2, [r3, #0]
 8016138:	f3bf 8f4f 	dsb	sy
 801613c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016140:	f002 f834 	bl	80181ac <vPortExitCritical>
				return pdPASS;
 8016144:	2301      	movs	r3, #1
 8016146:	e098      	b.n	801627a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016148:	683b      	ldr	r3, [r7, #0]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d112      	bne.n	8016174 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016150:	2b00      	cmp	r3, #0
 8016152:	d00b      	beq.n	801616c <xQueueSemaphoreTake+0x104>
 8016154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016158:	b672      	cpsid	i
 801615a:	f383 8811 	msr	BASEPRI, r3
 801615e:	f3bf 8f6f 	isb	sy
 8016162:	f3bf 8f4f 	dsb	sy
 8016166:	b662      	cpsie	i
 8016168:	617b      	str	r3, [r7, #20]
 801616a:	e7fe      	b.n	801616a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801616c:	f002 f81e 	bl	80181ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016170:	2300      	movs	r3, #0
 8016172:	e082      	b.n	801627a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016176:	2b00      	cmp	r3, #0
 8016178:	d106      	bne.n	8016188 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801617a:	f107 030c 	add.w	r3, r7, #12
 801617e:	4618      	mov	r0, r3
 8016180:	f001 f838 	bl	80171f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016184:	2301      	movs	r3, #1
 8016186:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016188:	f002 f810 	bl	80181ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801618c:	f000 fd96 	bl	8016cbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016190:	f001 ffda 	bl	8018148 <vPortEnterCritical>
 8016194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801619a:	b25b      	sxtb	r3, r3
 801619c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161a0:	d103      	bne.n	80161aa <xQueueSemaphoreTake+0x142>
 80161a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161a4:	2200      	movs	r2, #0
 80161a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80161aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161b0:	b25b      	sxtb	r3, r3
 80161b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161b6:	d103      	bne.n	80161c0 <xQueueSemaphoreTake+0x158>
 80161b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ba:	2200      	movs	r2, #0
 80161bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80161c0:	f001 fff4 	bl	80181ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80161c4:	463a      	mov	r2, r7
 80161c6:	f107 030c 	add.w	r3, r7, #12
 80161ca:	4611      	mov	r1, r2
 80161cc:	4618      	mov	r0, r3
 80161ce:	f001 f827 	bl	8017220 <xTaskCheckForTimeOut>
 80161d2:	4603      	mov	r3, r0
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d132      	bne.n	801623e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80161d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80161da:	f000 f9f6 	bl	80165ca <prvIsQueueEmpty>
 80161de:	4603      	mov	r3, r0
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d026      	beq.n	8016232 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80161e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d109      	bne.n	8016200 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80161ec:	f001 ffac 	bl	8018148 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80161f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f2:	689b      	ldr	r3, [r3, #8]
 80161f4:	4618      	mov	r0, r3
 80161f6:	f001 f985 	bl	8017504 <xTaskPriorityInherit>
 80161fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80161fc:	f001 ffd6 	bl	80181ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016202:	3324      	adds	r3, #36	; 0x24
 8016204:	683a      	ldr	r2, [r7, #0]
 8016206:	4611      	mov	r1, r2
 8016208:	4618      	mov	r0, r3
 801620a:	f000 ff3d 	bl	8017088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801620e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016210:	f000 f989 	bl	8016526 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016214:	f000 fd60 	bl	8016cd8 <xTaskResumeAll>
 8016218:	4603      	mov	r3, r0
 801621a:	2b00      	cmp	r3, #0
 801621c:	f47f af67 	bne.w	80160ee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8016220:	4b18      	ldr	r3, [pc, #96]	; (8016284 <xQueueSemaphoreTake+0x21c>)
 8016222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016226:	601a      	str	r2, [r3, #0]
 8016228:	f3bf 8f4f 	dsb	sy
 801622c:	f3bf 8f6f 	isb	sy
 8016230:	e75d      	b.n	80160ee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016234:	f000 f977 	bl	8016526 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016238:	f000 fd4e 	bl	8016cd8 <xTaskResumeAll>
 801623c:	e757      	b.n	80160ee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801623e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016240:	f000 f971 	bl	8016526 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016244:	f000 fd48 	bl	8016cd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801624a:	f000 f9be 	bl	80165ca <prvIsQueueEmpty>
 801624e:	4603      	mov	r3, r0
 8016250:	2b00      	cmp	r3, #0
 8016252:	f43f af4c 	beq.w	80160ee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8016256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016258:	2b00      	cmp	r3, #0
 801625a:	d00d      	beq.n	8016278 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801625c:	f001 ff74 	bl	8018148 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8016260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016262:	f000 f8b8 	bl	80163d6 <prvGetDisinheritPriorityAfterTimeout>
 8016266:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801626a:	689b      	ldr	r3, [r3, #8]
 801626c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801626e:	4618      	mov	r0, r3
 8016270:	f001 fa20 	bl	80176b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016274:	f001 ff9a 	bl	80181ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8016278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801627a:	4618      	mov	r0, r3
 801627c:	3738      	adds	r7, #56	; 0x38
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}
 8016282:	bf00      	nop
 8016284:	e000ed04 	.word	0xe000ed04

08016288 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016288:	b580      	push	{r7, lr}
 801628a:	b08e      	sub	sp, #56	; 0x38
 801628c:	af00      	add	r7, sp, #0
 801628e:	60f8      	str	r0, [r7, #12]
 8016290:	60b9      	str	r1, [r7, #8]
 8016292:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801629a:	2b00      	cmp	r3, #0
 801629c:	d10b      	bne.n	80162b6 <xQueueReceiveFromISR+0x2e>
 801629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162a2:	b672      	cpsid	i
 80162a4:	f383 8811 	msr	BASEPRI, r3
 80162a8:	f3bf 8f6f 	isb	sy
 80162ac:	f3bf 8f4f 	dsb	sy
 80162b0:	b662      	cpsie	i
 80162b2:	623b      	str	r3, [r7, #32]
 80162b4:	e7fe      	b.n	80162b4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80162b6:	68bb      	ldr	r3, [r7, #8]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d103      	bne.n	80162c4 <xQueueReceiveFromISR+0x3c>
 80162bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d101      	bne.n	80162c8 <xQueueReceiveFromISR+0x40>
 80162c4:	2301      	movs	r3, #1
 80162c6:	e000      	b.n	80162ca <xQueueReceiveFromISR+0x42>
 80162c8:	2300      	movs	r3, #0
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d10b      	bne.n	80162e6 <xQueueReceiveFromISR+0x5e>
 80162ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d2:	b672      	cpsid	i
 80162d4:	f383 8811 	msr	BASEPRI, r3
 80162d8:	f3bf 8f6f 	isb	sy
 80162dc:	f3bf 8f4f 	dsb	sy
 80162e0:	b662      	cpsie	i
 80162e2:	61fb      	str	r3, [r7, #28]
 80162e4:	e7fe      	b.n	80162e4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80162e6:	f002 f80f 	bl	8018308 <vPortValidateInterruptPriority>
	__asm volatile
 80162ea:	f3ef 8211 	mrs	r2, BASEPRI
 80162ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162f2:	b672      	cpsid	i
 80162f4:	f383 8811 	msr	BASEPRI, r3
 80162f8:	f3bf 8f6f 	isb	sy
 80162fc:	f3bf 8f4f 	dsb	sy
 8016300:	b662      	cpsie	i
 8016302:	61ba      	str	r2, [r7, #24]
 8016304:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016306:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016308:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801630e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016312:	2b00      	cmp	r3, #0
 8016314:	d02f      	beq.n	8016376 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801631c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016320:	68b9      	ldr	r1, [r7, #8]
 8016322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016324:	f000 f8d9 	bl	80164da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801632a:	1e5a      	subs	r2, r3, #1
 801632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801632e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016330:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016338:	d112      	bne.n	8016360 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801633c:	691b      	ldr	r3, [r3, #16]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d016      	beq.n	8016370 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016344:	3310      	adds	r3, #16
 8016346:	4618      	mov	r0, r3
 8016348:	f000 fef0 	bl	801712c <xTaskRemoveFromEventList>
 801634c:	4603      	mov	r3, r0
 801634e:	2b00      	cmp	r3, #0
 8016350:	d00e      	beq.n	8016370 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d00b      	beq.n	8016370 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	2201      	movs	r2, #1
 801635c:	601a      	str	r2, [r3, #0]
 801635e:	e007      	b.n	8016370 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016364:	3301      	adds	r3, #1
 8016366:	b2db      	uxtb	r3, r3
 8016368:	b25a      	sxtb	r2, r3
 801636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801636c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016370:	2301      	movs	r3, #1
 8016372:	637b      	str	r3, [r7, #52]	; 0x34
 8016374:	e001      	b.n	801637a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8016376:	2300      	movs	r3, #0
 8016378:	637b      	str	r3, [r7, #52]	; 0x34
 801637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801637c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801637e:	693b      	ldr	r3, [r7, #16]
 8016380:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016386:	4618      	mov	r0, r3
 8016388:	3738      	adds	r7, #56	; 0x38
 801638a:	46bd      	mov	sp, r7
 801638c:	bd80      	pop	{r7, pc}

0801638e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801638e:	b580      	push	{r7, lr}
 8016390:	b084      	sub	sp, #16
 8016392:	af00      	add	r7, sp, #0
 8016394:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d10b      	bne.n	80163b8 <vQueueDelete+0x2a>
	__asm volatile
 80163a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163a4:	b672      	cpsid	i
 80163a6:	f383 8811 	msr	BASEPRI, r3
 80163aa:	f3bf 8f6f 	isb	sy
 80163ae:	f3bf 8f4f 	dsb	sy
 80163b2:	b662      	cpsie	i
 80163b4:	60bb      	str	r3, [r7, #8]
 80163b6:	e7fe      	b.n	80163b6 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80163b8:	68f8      	ldr	r0, [r7, #12]
 80163ba:	f000 f95d 	bl	8016678 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d102      	bne.n	80163ce <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80163c8:	68f8      	ldr	r0, [r7, #12]
 80163ca:	f002 f8a7 	bl	801851c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80163ce:	bf00      	nop
 80163d0:	3710      	adds	r7, #16
 80163d2:	46bd      	mov	sp, r7
 80163d4:	bd80      	pop	{r7, pc}

080163d6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80163d6:	b480      	push	{r7}
 80163d8:	b085      	sub	sp, #20
 80163da:	af00      	add	r7, sp, #0
 80163dc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d006      	beq.n	80163f4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80163f0:	60fb      	str	r3, [r7, #12]
 80163f2:	e001      	b.n	80163f8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80163f4:	2300      	movs	r3, #0
 80163f6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80163f8:	68fb      	ldr	r3, [r7, #12]
	}
 80163fa:	4618      	mov	r0, r3
 80163fc:	3714      	adds	r7, #20
 80163fe:	46bd      	mov	sp, r7
 8016400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016404:	4770      	bx	lr

08016406 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016406:	b580      	push	{r7, lr}
 8016408:	b086      	sub	sp, #24
 801640a:	af00      	add	r7, sp, #0
 801640c:	60f8      	str	r0, [r7, #12]
 801640e:	60b9      	str	r1, [r7, #8]
 8016410:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016412:	2300      	movs	r3, #0
 8016414:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801641a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016420:	2b00      	cmp	r3, #0
 8016422:	d10d      	bne.n	8016440 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d14d      	bne.n	80164c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	689b      	ldr	r3, [r3, #8]
 8016430:	4618      	mov	r0, r3
 8016432:	f001 f8cf 	bl	80175d4 <xTaskPriorityDisinherit>
 8016436:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	2200      	movs	r2, #0
 801643c:	609a      	str	r2, [r3, #8]
 801643e:	e043      	b.n	80164c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d119      	bne.n	801647a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	6858      	ldr	r0, [r3, #4]
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801644e:	461a      	mov	r2, r3
 8016450:	68b9      	ldr	r1, [r7, #8]
 8016452:	f002 ff1d 	bl	8019290 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	685a      	ldr	r2, [r3, #4]
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801645e:	441a      	add	r2, r3
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	685a      	ldr	r2, [r3, #4]
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	689b      	ldr	r3, [r3, #8]
 801646c:	429a      	cmp	r2, r3
 801646e:	d32b      	bcc.n	80164c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	681a      	ldr	r2, [r3, #0]
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	605a      	str	r2, [r3, #4]
 8016478:	e026      	b.n	80164c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	68d8      	ldr	r0, [r3, #12]
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016482:	461a      	mov	r2, r3
 8016484:	68b9      	ldr	r1, [r7, #8]
 8016486:	f002 ff03 	bl	8019290 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	68da      	ldr	r2, [r3, #12]
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016492:	425b      	negs	r3, r3
 8016494:	441a      	add	r2, r3
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	68da      	ldr	r2, [r3, #12]
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	429a      	cmp	r2, r3
 80164a4:	d207      	bcs.n	80164b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	689a      	ldr	r2, [r3, #8]
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164ae:	425b      	negs	r3, r3
 80164b0:	441a      	add	r2, r3
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	2b02      	cmp	r3, #2
 80164ba:	d105      	bne.n	80164c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80164bc:	693b      	ldr	r3, [r7, #16]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d002      	beq.n	80164c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80164c2:	693b      	ldr	r3, [r7, #16]
 80164c4:	3b01      	subs	r3, #1
 80164c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80164c8:	693b      	ldr	r3, [r7, #16]
 80164ca:	1c5a      	adds	r2, r3, #1
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80164d0:	697b      	ldr	r3, [r7, #20]
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3718      	adds	r7, #24
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}

080164da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80164da:	b580      	push	{r7, lr}
 80164dc:	b082      	sub	sp, #8
 80164de:	af00      	add	r7, sp, #0
 80164e0:	6078      	str	r0, [r7, #4]
 80164e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d018      	beq.n	801651e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	68da      	ldr	r2, [r3, #12]
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80164f4:	441a      	add	r2, r3
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	68da      	ldr	r2, [r3, #12]
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	689b      	ldr	r3, [r3, #8]
 8016502:	429a      	cmp	r2, r3
 8016504:	d303      	bcc.n	801650e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681a      	ldr	r2, [r3, #0]
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	68d9      	ldr	r1, [r3, #12]
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016516:	461a      	mov	r2, r3
 8016518:	6838      	ldr	r0, [r7, #0]
 801651a:	f002 feb9 	bl	8019290 <memcpy>
	}
}
 801651e:	bf00      	nop
 8016520:	3708      	adds	r7, #8
 8016522:	46bd      	mov	sp, r7
 8016524:	bd80      	pop	{r7, pc}

08016526 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016526:	b580      	push	{r7, lr}
 8016528:	b084      	sub	sp, #16
 801652a:	af00      	add	r7, sp, #0
 801652c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801652e:	f001 fe0b 	bl	8018148 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016538:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801653a:	e011      	b.n	8016560 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016540:	2b00      	cmp	r3, #0
 8016542:	d012      	beq.n	801656a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	3324      	adds	r3, #36	; 0x24
 8016548:	4618      	mov	r0, r3
 801654a:	f000 fdef 	bl	801712c <xTaskRemoveFromEventList>
 801654e:	4603      	mov	r3, r0
 8016550:	2b00      	cmp	r3, #0
 8016552:	d001      	beq.n	8016558 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016554:	f000 fec8 	bl	80172e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016558:	7bfb      	ldrb	r3, [r7, #15]
 801655a:	3b01      	subs	r3, #1
 801655c:	b2db      	uxtb	r3, r3
 801655e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016564:	2b00      	cmp	r3, #0
 8016566:	dce9      	bgt.n	801653c <prvUnlockQueue+0x16>
 8016568:	e000      	b.n	801656c <prvUnlockQueue+0x46>
					break;
 801656a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	22ff      	movs	r2, #255	; 0xff
 8016570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016574:	f001 fe1a 	bl	80181ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016578:	f001 fde6 	bl	8018148 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016582:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016584:	e011      	b.n	80165aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	691b      	ldr	r3, [r3, #16]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d012      	beq.n	80165b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	3310      	adds	r3, #16
 8016592:	4618      	mov	r0, r3
 8016594:	f000 fdca 	bl	801712c <xTaskRemoveFromEventList>
 8016598:	4603      	mov	r3, r0
 801659a:	2b00      	cmp	r3, #0
 801659c:	d001      	beq.n	80165a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801659e:	f000 fea3 	bl	80172e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80165a2:	7bbb      	ldrb	r3, [r7, #14]
 80165a4:	3b01      	subs	r3, #1
 80165a6:	b2db      	uxtb	r3, r3
 80165a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80165aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	dce9      	bgt.n	8016586 <prvUnlockQueue+0x60>
 80165b2:	e000      	b.n	80165b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80165b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	22ff      	movs	r2, #255	; 0xff
 80165ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80165be:	f001 fdf5 	bl	80181ac <vPortExitCritical>
}
 80165c2:	bf00      	nop
 80165c4:	3710      	adds	r7, #16
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}

080165ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80165ca:	b580      	push	{r7, lr}
 80165cc:	b084      	sub	sp, #16
 80165ce:	af00      	add	r7, sp, #0
 80165d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80165d2:	f001 fdb9 	bl	8018148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d102      	bne.n	80165e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80165de:	2301      	movs	r3, #1
 80165e0:	60fb      	str	r3, [r7, #12]
 80165e2:	e001      	b.n	80165e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80165e4:	2300      	movs	r3, #0
 80165e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80165e8:	f001 fde0 	bl	80181ac <vPortExitCritical>

	return xReturn;
 80165ec:	68fb      	ldr	r3, [r7, #12]
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3710      	adds	r7, #16
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}

080165f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80165f6:	b580      	push	{r7, lr}
 80165f8:	b084      	sub	sp, #16
 80165fa:	af00      	add	r7, sp, #0
 80165fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80165fe:	f001 fda3 	bl	8018148 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801660a:	429a      	cmp	r2, r3
 801660c:	d102      	bne.n	8016614 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801660e:	2301      	movs	r3, #1
 8016610:	60fb      	str	r3, [r7, #12]
 8016612:	e001      	b.n	8016618 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016614:	2300      	movs	r3, #0
 8016616:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016618:	f001 fdc8 	bl	80181ac <vPortExitCritical>

	return xReturn;
 801661c:	68fb      	ldr	r3, [r7, #12]
}
 801661e:	4618      	mov	r0, r3
 8016620:	3710      	adds	r7, #16
 8016622:	46bd      	mov	sp, r7
 8016624:	bd80      	pop	{r7, pc}
	...

08016628 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016628:	b480      	push	{r7}
 801662a:	b085      	sub	sp, #20
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
 8016630:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016632:	2300      	movs	r3, #0
 8016634:	60fb      	str	r3, [r7, #12]
 8016636:	e014      	b.n	8016662 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016638:	4a0e      	ldr	r2, [pc, #56]	; (8016674 <vQueueAddToRegistry+0x4c>)
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016640:	2b00      	cmp	r3, #0
 8016642:	d10b      	bne.n	801665c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016644:	490b      	ldr	r1, [pc, #44]	; (8016674 <vQueueAddToRegistry+0x4c>)
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	683a      	ldr	r2, [r7, #0]
 801664a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801664e:	4a09      	ldr	r2, [pc, #36]	; (8016674 <vQueueAddToRegistry+0x4c>)
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	00db      	lsls	r3, r3, #3
 8016654:	4413      	add	r3, r2
 8016656:	687a      	ldr	r2, [r7, #4]
 8016658:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801665a:	e005      	b.n	8016668 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	3301      	adds	r3, #1
 8016660:	60fb      	str	r3, [r7, #12]
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	2b07      	cmp	r3, #7
 8016666:	d9e7      	bls.n	8016638 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016668:	bf00      	nop
 801666a:	3714      	adds	r7, #20
 801666c:	46bd      	mov	sp, r7
 801666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016672:	4770      	bx	lr
 8016674:	2001a90c 	.word	0x2001a90c

08016678 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016678:	b480      	push	{r7}
 801667a:	b085      	sub	sp, #20
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016680:	2300      	movs	r3, #0
 8016682:	60fb      	str	r3, [r7, #12]
 8016684:	e016      	b.n	80166b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016686:	4a10      	ldr	r2, [pc, #64]	; (80166c8 <vQueueUnregisterQueue+0x50>)
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	00db      	lsls	r3, r3, #3
 801668c:	4413      	add	r3, r2
 801668e:	685b      	ldr	r3, [r3, #4]
 8016690:	687a      	ldr	r2, [r7, #4]
 8016692:	429a      	cmp	r2, r3
 8016694:	d10b      	bne.n	80166ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016696:	4a0c      	ldr	r2, [pc, #48]	; (80166c8 <vQueueUnregisterQueue+0x50>)
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	2100      	movs	r1, #0
 801669c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80166a0:	4a09      	ldr	r2, [pc, #36]	; (80166c8 <vQueueUnregisterQueue+0x50>)
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	00db      	lsls	r3, r3, #3
 80166a6:	4413      	add	r3, r2
 80166a8:	2200      	movs	r2, #0
 80166aa:	605a      	str	r2, [r3, #4]
				break;
 80166ac:	e005      	b.n	80166ba <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	3301      	adds	r3, #1
 80166b2:	60fb      	str	r3, [r7, #12]
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	2b07      	cmp	r3, #7
 80166b8:	d9e5      	bls.n	8016686 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80166ba:	bf00      	nop
 80166bc:	3714      	adds	r7, #20
 80166be:	46bd      	mov	sp, r7
 80166c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c4:	4770      	bx	lr
 80166c6:	bf00      	nop
 80166c8:	2001a90c 	.word	0x2001a90c

080166cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b086      	sub	sp, #24
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	60f8      	str	r0, [r7, #12]
 80166d4:	60b9      	str	r1, [r7, #8]
 80166d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80166dc:	f001 fd34 	bl	8018148 <vPortEnterCritical>
 80166e0:	697b      	ldr	r3, [r7, #20]
 80166e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80166e6:	b25b      	sxtb	r3, r3
 80166e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166ec:	d103      	bne.n	80166f6 <vQueueWaitForMessageRestricted+0x2a>
 80166ee:	697b      	ldr	r3, [r7, #20]
 80166f0:	2200      	movs	r2, #0
 80166f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80166f6:	697b      	ldr	r3, [r7, #20]
 80166f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80166fc:	b25b      	sxtb	r3, r3
 80166fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016702:	d103      	bne.n	801670c <vQueueWaitForMessageRestricted+0x40>
 8016704:	697b      	ldr	r3, [r7, #20]
 8016706:	2200      	movs	r2, #0
 8016708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801670c:	f001 fd4e 	bl	80181ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016710:	697b      	ldr	r3, [r7, #20]
 8016712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016714:	2b00      	cmp	r3, #0
 8016716:	d106      	bne.n	8016726 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016718:	697b      	ldr	r3, [r7, #20]
 801671a:	3324      	adds	r3, #36	; 0x24
 801671c:	687a      	ldr	r2, [r7, #4]
 801671e:	68b9      	ldr	r1, [r7, #8]
 8016720:	4618      	mov	r0, r3
 8016722:	f000 fcd7 	bl	80170d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016726:	6978      	ldr	r0, [r7, #20]
 8016728:	f7ff fefd 	bl	8016526 <prvUnlockQueue>
	}
 801672c:	bf00      	nop
 801672e:	3718      	adds	r7, #24
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}

08016734 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016734:	b580      	push	{r7, lr}
 8016736:	b08e      	sub	sp, #56	; 0x38
 8016738:	af04      	add	r7, sp, #16
 801673a:	60f8      	str	r0, [r7, #12]
 801673c:	60b9      	str	r1, [r7, #8]
 801673e:	607a      	str	r2, [r7, #4]
 8016740:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016744:	2b00      	cmp	r3, #0
 8016746:	d10b      	bne.n	8016760 <xTaskCreateStatic+0x2c>
 8016748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801674c:	b672      	cpsid	i
 801674e:	f383 8811 	msr	BASEPRI, r3
 8016752:	f3bf 8f6f 	isb	sy
 8016756:	f3bf 8f4f 	dsb	sy
 801675a:	b662      	cpsie	i
 801675c:	623b      	str	r3, [r7, #32]
 801675e:	e7fe      	b.n	801675e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8016760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016762:	2b00      	cmp	r3, #0
 8016764:	d10b      	bne.n	801677e <xTaskCreateStatic+0x4a>
 8016766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801676a:	b672      	cpsid	i
 801676c:	f383 8811 	msr	BASEPRI, r3
 8016770:	f3bf 8f6f 	isb	sy
 8016774:	f3bf 8f4f 	dsb	sy
 8016778:	b662      	cpsie	i
 801677a:	61fb      	str	r3, [r7, #28]
 801677c:	e7fe      	b.n	801677c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801677e:	235c      	movs	r3, #92	; 0x5c
 8016780:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016782:	693b      	ldr	r3, [r7, #16]
 8016784:	2b5c      	cmp	r3, #92	; 0x5c
 8016786:	d00b      	beq.n	80167a0 <xTaskCreateStatic+0x6c>
 8016788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801678c:	b672      	cpsid	i
 801678e:	f383 8811 	msr	BASEPRI, r3
 8016792:	f3bf 8f6f 	isb	sy
 8016796:	f3bf 8f4f 	dsb	sy
 801679a:	b662      	cpsie	i
 801679c:	61bb      	str	r3, [r7, #24]
 801679e:	e7fe      	b.n	801679e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80167a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80167a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d01e      	beq.n	80167e6 <xTaskCreateStatic+0xb2>
 80167a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d01b      	beq.n	80167e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80167ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167b0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80167b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80167b6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80167b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ba:	2202      	movs	r2, #2
 80167bc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80167c0:	2300      	movs	r3, #0
 80167c2:	9303      	str	r3, [sp, #12]
 80167c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167c6:	9302      	str	r3, [sp, #8]
 80167c8:	f107 0314 	add.w	r3, r7, #20
 80167cc:	9301      	str	r3, [sp, #4]
 80167ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167d0:	9300      	str	r3, [sp, #0]
 80167d2:	683b      	ldr	r3, [r7, #0]
 80167d4:	687a      	ldr	r2, [r7, #4]
 80167d6:	68b9      	ldr	r1, [r7, #8]
 80167d8:	68f8      	ldr	r0, [r7, #12]
 80167da:	f000 f850 	bl	801687e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80167de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167e0:	f000 f8de 	bl	80169a0 <prvAddNewTaskToReadyList>
 80167e4:	e001      	b.n	80167ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80167e6:	2300      	movs	r3, #0
 80167e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80167ea:	697b      	ldr	r3, [r7, #20]
	}
 80167ec:	4618      	mov	r0, r3
 80167ee:	3728      	adds	r7, #40	; 0x28
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}

080167f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b08c      	sub	sp, #48	; 0x30
 80167f8:	af04      	add	r7, sp, #16
 80167fa:	60f8      	str	r0, [r7, #12]
 80167fc:	60b9      	str	r1, [r7, #8]
 80167fe:	603b      	str	r3, [r7, #0]
 8016800:	4613      	mov	r3, r2
 8016802:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016804:	88fb      	ldrh	r3, [r7, #6]
 8016806:	009b      	lsls	r3, r3, #2
 8016808:	4618      	mov	r0, r3
 801680a:	f001 fdbf 	bl	801838c <pvPortMalloc>
 801680e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016810:	697b      	ldr	r3, [r7, #20]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d00e      	beq.n	8016834 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016816:	205c      	movs	r0, #92	; 0x5c
 8016818:	f001 fdb8 	bl	801838c <pvPortMalloc>
 801681c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801681e:	69fb      	ldr	r3, [r7, #28]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d003      	beq.n	801682c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016824:	69fb      	ldr	r3, [r7, #28]
 8016826:	697a      	ldr	r2, [r7, #20]
 8016828:	631a      	str	r2, [r3, #48]	; 0x30
 801682a:	e005      	b.n	8016838 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801682c:	6978      	ldr	r0, [r7, #20]
 801682e:	f001 fe75 	bl	801851c <vPortFree>
 8016832:	e001      	b.n	8016838 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016834:	2300      	movs	r3, #0
 8016836:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016838:	69fb      	ldr	r3, [r7, #28]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d017      	beq.n	801686e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801683e:	69fb      	ldr	r3, [r7, #28]
 8016840:	2200      	movs	r2, #0
 8016842:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016846:	88fa      	ldrh	r2, [r7, #6]
 8016848:	2300      	movs	r3, #0
 801684a:	9303      	str	r3, [sp, #12]
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	9302      	str	r3, [sp, #8]
 8016850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016852:	9301      	str	r3, [sp, #4]
 8016854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016856:	9300      	str	r3, [sp, #0]
 8016858:	683b      	ldr	r3, [r7, #0]
 801685a:	68b9      	ldr	r1, [r7, #8]
 801685c:	68f8      	ldr	r0, [r7, #12]
 801685e:	f000 f80e 	bl	801687e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016862:	69f8      	ldr	r0, [r7, #28]
 8016864:	f000 f89c 	bl	80169a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016868:	2301      	movs	r3, #1
 801686a:	61bb      	str	r3, [r7, #24]
 801686c:	e002      	b.n	8016874 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801686e:	f04f 33ff 	mov.w	r3, #4294967295
 8016872:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016874:	69bb      	ldr	r3, [r7, #24]
	}
 8016876:	4618      	mov	r0, r3
 8016878:	3720      	adds	r7, #32
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}

0801687e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801687e:	b580      	push	{r7, lr}
 8016880:	b088      	sub	sp, #32
 8016882:	af00      	add	r7, sp, #0
 8016884:	60f8      	str	r0, [r7, #12]
 8016886:	60b9      	str	r1, [r7, #8]
 8016888:	607a      	str	r2, [r7, #4]
 801688a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801688e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	009b      	lsls	r3, r3, #2
 8016894:	461a      	mov	r2, r3
 8016896:	21a5      	movs	r1, #165	; 0xa5
 8016898:	f002 fd05 	bl	80192a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801689e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80168a0:	6879      	ldr	r1, [r7, #4]
 80168a2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80168a6:	440b      	add	r3, r1
 80168a8:	009b      	lsls	r3, r3, #2
 80168aa:	4413      	add	r3, r2
 80168ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80168ae:	69bb      	ldr	r3, [r7, #24]
 80168b0:	f023 0307 	bic.w	r3, r3, #7
 80168b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80168b6:	69bb      	ldr	r3, [r7, #24]
 80168b8:	f003 0307 	and.w	r3, r3, #7
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d00b      	beq.n	80168d8 <prvInitialiseNewTask+0x5a>
 80168c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168c4:	b672      	cpsid	i
 80168c6:	f383 8811 	msr	BASEPRI, r3
 80168ca:	f3bf 8f6f 	isb	sy
 80168ce:	f3bf 8f4f 	dsb	sy
 80168d2:	b662      	cpsie	i
 80168d4:	617b      	str	r3, [r7, #20]
 80168d6:	e7fe      	b.n	80168d6 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80168d8:	68bb      	ldr	r3, [r7, #8]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d01f      	beq.n	801691e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80168de:	2300      	movs	r3, #0
 80168e0:	61fb      	str	r3, [r7, #28]
 80168e2:	e012      	b.n	801690a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80168e4:	68ba      	ldr	r2, [r7, #8]
 80168e6:	69fb      	ldr	r3, [r7, #28]
 80168e8:	4413      	add	r3, r2
 80168ea:	7819      	ldrb	r1, [r3, #0]
 80168ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168ee:	69fb      	ldr	r3, [r7, #28]
 80168f0:	4413      	add	r3, r2
 80168f2:	3334      	adds	r3, #52	; 0x34
 80168f4:	460a      	mov	r2, r1
 80168f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80168f8:	68ba      	ldr	r2, [r7, #8]
 80168fa:	69fb      	ldr	r3, [r7, #28]
 80168fc:	4413      	add	r3, r2
 80168fe:	781b      	ldrb	r3, [r3, #0]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d006      	beq.n	8016912 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016904:	69fb      	ldr	r3, [r7, #28]
 8016906:	3301      	adds	r3, #1
 8016908:	61fb      	str	r3, [r7, #28]
 801690a:	69fb      	ldr	r3, [r7, #28]
 801690c:	2b0f      	cmp	r3, #15
 801690e:	d9e9      	bls.n	80168e4 <prvInitialiseNewTask+0x66>
 8016910:	e000      	b.n	8016914 <prvInitialiseNewTask+0x96>
			{
				break;
 8016912:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016916:	2200      	movs	r2, #0
 8016918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801691c:	e003      	b.n	8016926 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016920:	2200      	movs	r2, #0
 8016922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016928:	2b37      	cmp	r3, #55	; 0x37
 801692a:	d901      	bls.n	8016930 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801692c:	2337      	movs	r3, #55	; 0x37
 801692e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016934:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801693a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801693e:	2200      	movs	r2, #0
 8016940:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016944:	3304      	adds	r3, #4
 8016946:	4618      	mov	r0, r3
 8016948:	f7fe fd5c 	bl	8015404 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801694e:	3318      	adds	r3, #24
 8016950:	4618      	mov	r0, r3
 8016952:	f7fe fd57 	bl	8015404 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801695a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801695e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016964:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801696a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801696e:	2200      	movs	r2, #0
 8016970:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016974:	2200      	movs	r2, #0
 8016976:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801697a:	683a      	ldr	r2, [r7, #0]
 801697c:	68f9      	ldr	r1, [r7, #12]
 801697e:	69b8      	ldr	r0, [r7, #24]
 8016980:	f001 fad8 	bl	8017f34 <pxPortInitialiseStack>
 8016984:	4602      	mov	r2, r0
 8016986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016988:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801698c:	2b00      	cmp	r3, #0
 801698e:	d002      	beq.n	8016996 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016996:	bf00      	nop
 8016998:	3720      	adds	r7, #32
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
	...

080169a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b082      	sub	sp, #8
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80169a8:	f001 fbce 	bl	8018148 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80169ac:	4b2d      	ldr	r3, [pc, #180]	; (8016a64 <prvAddNewTaskToReadyList+0xc4>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	3301      	adds	r3, #1
 80169b2:	4a2c      	ldr	r2, [pc, #176]	; (8016a64 <prvAddNewTaskToReadyList+0xc4>)
 80169b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80169b6:	4b2c      	ldr	r3, [pc, #176]	; (8016a68 <prvAddNewTaskToReadyList+0xc8>)
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d109      	bne.n	80169d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80169be:	4a2a      	ldr	r2, [pc, #168]	; (8016a68 <prvAddNewTaskToReadyList+0xc8>)
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80169c4:	4b27      	ldr	r3, [pc, #156]	; (8016a64 <prvAddNewTaskToReadyList+0xc4>)
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	2b01      	cmp	r3, #1
 80169ca:	d110      	bne.n	80169ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80169cc:	f000 fcb0 	bl	8017330 <prvInitialiseTaskLists>
 80169d0:	e00d      	b.n	80169ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80169d2:	4b26      	ldr	r3, [pc, #152]	; (8016a6c <prvAddNewTaskToReadyList+0xcc>)
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d109      	bne.n	80169ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80169da:	4b23      	ldr	r3, [pc, #140]	; (8016a68 <prvAddNewTaskToReadyList+0xc8>)
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169e4:	429a      	cmp	r2, r3
 80169e6:	d802      	bhi.n	80169ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80169e8:	4a1f      	ldr	r2, [pc, #124]	; (8016a68 <prvAddNewTaskToReadyList+0xc8>)
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80169ee:	4b20      	ldr	r3, [pc, #128]	; (8016a70 <prvAddNewTaskToReadyList+0xd0>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	3301      	adds	r3, #1
 80169f4:	4a1e      	ldr	r2, [pc, #120]	; (8016a70 <prvAddNewTaskToReadyList+0xd0>)
 80169f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80169f8:	4b1d      	ldr	r3, [pc, #116]	; (8016a70 <prvAddNewTaskToReadyList+0xd0>)
 80169fa:	681a      	ldr	r2, [r3, #0]
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a04:	4b1b      	ldr	r3, [pc, #108]	; (8016a74 <prvAddNewTaskToReadyList+0xd4>)
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d903      	bls.n	8016a14 <prvAddNewTaskToReadyList+0x74>
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a10:	4a18      	ldr	r2, [pc, #96]	; (8016a74 <prvAddNewTaskToReadyList+0xd4>)
 8016a12:	6013      	str	r3, [r2, #0]
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a18:	4613      	mov	r3, r2
 8016a1a:	009b      	lsls	r3, r3, #2
 8016a1c:	4413      	add	r3, r2
 8016a1e:	009b      	lsls	r3, r3, #2
 8016a20:	4a15      	ldr	r2, [pc, #84]	; (8016a78 <prvAddNewTaskToReadyList+0xd8>)
 8016a22:	441a      	add	r2, r3
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	3304      	adds	r3, #4
 8016a28:	4619      	mov	r1, r3
 8016a2a:	4610      	mov	r0, r2
 8016a2c:	f7fe fcf7 	bl	801541e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016a30:	f001 fbbc 	bl	80181ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016a34:	4b0d      	ldr	r3, [pc, #52]	; (8016a6c <prvAddNewTaskToReadyList+0xcc>)
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d00e      	beq.n	8016a5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016a3c:	4b0a      	ldr	r3, [pc, #40]	; (8016a68 <prvAddNewTaskToReadyList+0xc8>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a46:	429a      	cmp	r2, r3
 8016a48:	d207      	bcs.n	8016a5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016a4a:	4b0c      	ldr	r3, [pc, #48]	; (8016a7c <prvAddNewTaskToReadyList+0xdc>)
 8016a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a50:	601a      	str	r2, [r3, #0]
 8016a52:	f3bf 8f4f 	dsb	sy
 8016a56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016a5a:	bf00      	nop
 8016a5c:	3708      	adds	r7, #8
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	bd80      	pop	{r7, pc}
 8016a62:	bf00      	nop
 8016a64:	20000f40 	.word	0x20000f40
 8016a68:	20000a6c 	.word	0x20000a6c
 8016a6c:	20000f4c 	.word	0x20000f4c
 8016a70:	20000f5c 	.word	0x20000f5c
 8016a74:	20000f48 	.word	0x20000f48
 8016a78:	20000a70 	.word	0x20000a70
 8016a7c:	e000ed04 	.word	0xe000ed04

08016a80 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8016a80:	b580      	push	{r7, lr}
 8016a82:	b08a      	sub	sp, #40	; 0x28
 8016a84:	af00      	add	r7, sp, #0
 8016a86:	6078      	str	r0, [r7, #4]
 8016a88:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d10b      	bne.n	8016aac <vTaskDelayUntil+0x2c>
 8016a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a98:	b672      	cpsid	i
 8016a9a:	f383 8811 	msr	BASEPRI, r3
 8016a9e:	f3bf 8f6f 	isb	sy
 8016aa2:	f3bf 8f4f 	dsb	sy
 8016aa6:	b662      	cpsie	i
 8016aa8:	617b      	str	r3, [r7, #20]
 8016aaa:	e7fe      	b.n	8016aaa <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8016aac:	683b      	ldr	r3, [r7, #0]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d10b      	bne.n	8016aca <vTaskDelayUntil+0x4a>
 8016ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ab6:	b672      	cpsid	i
 8016ab8:	f383 8811 	msr	BASEPRI, r3
 8016abc:	f3bf 8f6f 	isb	sy
 8016ac0:	f3bf 8f4f 	dsb	sy
 8016ac4:	b662      	cpsie	i
 8016ac6:	613b      	str	r3, [r7, #16]
 8016ac8:	e7fe      	b.n	8016ac8 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8016aca:	4b2a      	ldr	r3, [pc, #168]	; (8016b74 <vTaskDelayUntil+0xf4>)
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d00b      	beq.n	8016aea <vTaskDelayUntil+0x6a>
 8016ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ad6:	b672      	cpsid	i
 8016ad8:	f383 8811 	msr	BASEPRI, r3
 8016adc:	f3bf 8f6f 	isb	sy
 8016ae0:	f3bf 8f4f 	dsb	sy
 8016ae4:	b662      	cpsie	i
 8016ae6:	60fb      	str	r3, [r7, #12]
 8016ae8:	e7fe      	b.n	8016ae8 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8016aea:	f000 f8e7 	bl	8016cbc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8016aee:	4b22      	ldr	r3, [pc, #136]	; (8016b78 <vTaskDelayUntil+0xf8>)
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	683a      	ldr	r2, [r7, #0]
 8016afa:	4413      	add	r3, r2
 8016afc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	6a3a      	ldr	r2, [r7, #32]
 8016b04:	429a      	cmp	r2, r3
 8016b06:	d20b      	bcs.n	8016b20 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	69fa      	ldr	r2, [r7, #28]
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d211      	bcs.n	8016b36 <vTaskDelayUntil+0xb6>
 8016b12:	69fa      	ldr	r2, [r7, #28]
 8016b14:	6a3b      	ldr	r3, [r7, #32]
 8016b16:	429a      	cmp	r2, r3
 8016b18:	d90d      	bls.n	8016b36 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8016b1e:	e00a      	b.n	8016b36 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	69fa      	ldr	r2, [r7, #28]
 8016b26:	429a      	cmp	r2, r3
 8016b28:	d303      	bcc.n	8016b32 <vTaskDelayUntil+0xb2>
 8016b2a:	69fa      	ldr	r2, [r7, #28]
 8016b2c:	6a3b      	ldr	r3, [r7, #32]
 8016b2e:	429a      	cmp	r2, r3
 8016b30:	d901      	bls.n	8016b36 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8016b32:	2301      	movs	r3, #1
 8016b34:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	69fa      	ldr	r2, [r7, #28]
 8016b3a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8016b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d006      	beq.n	8016b50 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8016b42:	69fa      	ldr	r2, [r7, #28]
 8016b44:	6a3b      	ldr	r3, [r7, #32]
 8016b46:	1ad3      	subs	r3, r2, r3
 8016b48:	2100      	movs	r1, #0
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	f000 fe4a 	bl	80177e4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8016b50:	f000 f8c2 	bl	8016cd8 <xTaskResumeAll>
 8016b54:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016b56:	69bb      	ldr	r3, [r7, #24]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d107      	bne.n	8016b6c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8016b5c:	4b07      	ldr	r3, [pc, #28]	; (8016b7c <vTaskDelayUntil+0xfc>)
 8016b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b62:	601a      	str	r2, [r3, #0]
 8016b64:	f3bf 8f4f 	dsb	sy
 8016b68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016b6c:	bf00      	nop
 8016b6e:	3728      	adds	r7, #40	; 0x28
 8016b70:	46bd      	mov	sp, r7
 8016b72:	bd80      	pop	{r7, pc}
 8016b74:	20000f68 	.word	0x20000f68
 8016b78:	20000f44 	.word	0x20000f44
 8016b7c:	e000ed04 	.word	0xe000ed04

08016b80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b084      	sub	sp, #16
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8016b88:	2300      	movs	r3, #0
 8016b8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d018      	beq.n	8016bc4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016b92:	4b14      	ldr	r3, [pc, #80]	; (8016be4 <vTaskDelay+0x64>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d00b      	beq.n	8016bb2 <vTaskDelay+0x32>
 8016b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b9e:	b672      	cpsid	i
 8016ba0:	f383 8811 	msr	BASEPRI, r3
 8016ba4:	f3bf 8f6f 	isb	sy
 8016ba8:	f3bf 8f4f 	dsb	sy
 8016bac:	b662      	cpsie	i
 8016bae:	60bb      	str	r3, [r7, #8]
 8016bb0:	e7fe      	b.n	8016bb0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8016bb2:	f000 f883 	bl	8016cbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016bb6:	2100      	movs	r1, #0
 8016bb8:	6878      	ldr	r0, [r7, #4]
 8016bba:	f000 fe13 	bl	80177e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8016bbe:	f000 f88b 	bl	8016cd8 <xTaskResumeAll>
 8016bc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d107      	bne.n	8016bda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8016bca:	4b07      	ldr	r3, [pc, #28]	; (8016be8 <vTaskDelay+0x68>)
 8016bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016bd0:	601a      	str	r2, [r3, #0]
 8016bd2:	f3bf 8f4f 	dsb	sy
 8016bd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016bda:	bf00      	nop
 8016bdc:	3710      	adds	r7, #16
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}
 8016be2:	bf00      	nop
 8016be4:	20000f68 	.word	0x20000f68
 8016be8:	e000ed04 	.word	0xe000ed04

08016bec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b08a      	sub	sp, #40	; 0x28
 8016bf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016bfa:	463a      	mov	r2, r7
 8016bfc:	1d39      	adds	r1, r7, #4
 8016bfe:	f107 0308 	add.w	r3, r7, #8
 8016c02:	4618      	mov	r0, r3
 8016c04:	f7fe fbaa 	bl	801535c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016c08:	6839      	ldr	r1, [r7, #0]
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	68ba      	ldr	r2, [r7, #8]
 8016c0e:	9202      	str	r2, [sp, #8]
 8016c10:	9301      	str	r3, [sp, #4]
 8016c12:	2300      	movs	r3, #0
 8016c14:	9300      	str	r3, [sp, #0]
 8016c16:	2300      	movs	r3, #0
 8016c18:	460a      	mov	r2, r1
 8016c1a:	4922      	ldr	r1, [pc, #136]	; (8016ca4 <vTaskStartScheduler+0xb8>)
 8016c1c:	4822      	ldr	r0, [pc, #136]	; (8016ca8 <vTaskStartScheduler+0xbc>)
 8016c1e:	f7ff fd89 	bl	8016734 <xTaskCreateStatic>
 8016c22:	4602      	mov	r2, r0
 8016c24:	4b21      	ldr	r3, [pc, #132]	; (8016cac <vTaskStartScheduler+0xc0>)
 8016c26:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016c28:	4b20      	ldr	r3, [pc, #128]	; (8016cac <vTaskStartScheduler+0xc0>)
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d002      	beq.n	8016c36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016c30:	2301      	movs	r3, #1
 8016c32:	617b      	str	r3, [r7, #20]
 8016c34:	e001      	b.n	8016c3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016c36:	2300      	movs	r3, #0
 8016c38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8016c3a:	697b      	ldr	r3, [r7, #20]
 8016c3c:	2b01      	cmp	r3, #1
 8016c3e:	d102      	bne.n	8016c46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016c40:	f000 fe24 	bl	801788c <xTimerCreateTimerTask>
 8016c44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016c46:	697b      	ldr	r3, [r7, #20]
 8016c48:	2b01      	cmp	r3, #1
 8016c4a:	d117      	bne.n	8016c7c <vTaskStartScheduler+0x90>
 8016c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c50:	b672      	cpsid	i
 8016c52:	f383 8811 	msr	BASEPRI, r3
 8016c56:	f3bf 8f6f 	isb	sy
 8016c5a:	f3bf 8f4f 	dsb	sy
 8016c5e:	b662      	cpsie	i
 8016c60:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016c62:	4b13      	ldr	r3, [pc, #76]	; (8016cb0 <vTaskStartScheduler+0xc4>)
 8016c64:	f04f 32ff 	mov.w	r2, #4294967295
 8016c68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8016c6a:	4b12      	ldr	r3, [pc, #72]	; (8016cb4 <vTaskStartScheduler+0xc8>)
 8016c6c:	2201      	movs	r2, #1
 8016c6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016c70:	4b11      	ldr	r3, [pc, #68]	; (8016cb8 <vTaskStartScheduler+0xcc>)
 8016c72:	2200      	movs	r2, #0
 8016c74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016c76:	f001 f9eb 	bl	8018050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8016c7a:	e00f      	b.n	8016c9c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8016c7c:	697b      	ldr	r3, [r7, #20]
 8016c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c82:	d10b      	bne.n	8016c9c <vTaskStartScheduler+0xb0>
 8016c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c88:	b672      	cpsid	i
 8016c8a:	f383 8811 	msr	BASEPRI, r3
 8016c8e:	f3bf 8f6f 	isb	sy
 8016c92:	f3bf 8f4f 	dsb	sy
 8016c96:	b662      	cpsie	i
 8016c98:	60fb      	str	r3, [r7, #12]
 8016c9a:	e7fe      	b.n	8016c9a <vTaskStartScheduler+0xae>
}
 8016c9c:	bf00      	nop
 8016c9e:	3718      	adds	r7, #24
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	bd80      	pop	{r7, pc}
 8016ca4:	0801c1fc 	.word	0x0801c1fc
 8016ca8:	08017301 	.word	0x08017301
 8016cac:	20000f64 	.word	0x20000f64
 8016cb0:	20000f60 	.word	0x20000f60
 8016cb4:	20000f4c 	.word	0x20000f4c
 8016cb8:	20000f44 	.word	0x20000f44

08016cbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016cbc:	b480      	push	{r7}
 8016cbe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016cc0:	4b04      	ldr	r3, [pc, #16]	; (8016cd4 <vTaskSuspendAll+0x18>)
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	3301      	adds	r3, #1
 8016cc6:	4a03      	ldr	r2, [pc, #12]	; (8016cd4 <vTaskSuspendAll+0x18>)
 8016cc8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8016cca:	bf00      	nop
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd2:	4770      	bx	lr
 8016cd4:	20000f68 	.word	0x20000f68

08016cd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b084      	sub	sp, #16
 8016cdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016cde:	2300      	movs	r3, #0
 8016ce0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8016ce6:	4b42      	ldr	r3, [pc, #264]	; (8016df0 <xTaskResumeAll+0x118>)
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d10b      	bne.n	8016d06 <xTaskResumeAll+0x2e>
 8016cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cf2:	b672      	cpsid	i
 8016cf4:	f383 8811 	msr	BASEPRI, r3
 8016cf8:	f3bf 8f6f 	isb	sy
 8016cfc:	f3bf 8f4f 	dsb	sy
 8016d00:	b662      	cpsie	i
 8016d02:	603b      	str	r3, [r7, #0]
 8016d04:	e7fe      	b.n	8016d04 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016d06:	f001 fa1f 	bl	8018148 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016d0a:	4b39      	ldr	r3, [pc, #228]	; (8016df0 <xTaskResumeAll+0x118>)
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	3b01      	subs	r3, #1
 8016d10:	4a37      	ldr	r2, [pc, #220]	; (8016df0 <xTaskResumeAll+0x118>)
 8016d12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d14:	4b36      	ldr	r3, [pc, #216]	; (8016df0 <xTaskResumeAll+0x118>)
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d162      	bne.n	8016de2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016d1c:	4b35      	ldr	r3, [pc, #212]	; (8016df4 <xTaskResumeAll+0x11c>)
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d05e      	beq.n	8016de2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016d24:	e02f      	b.n	8016d86 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d26:	4b34      	ldr	r3, [pc, #208]	; (8016df8 <xTaskResumeAll+0x120>)
 8016d28:	68db      	ldr	r3, [r3, #12]
 8016d2a:	68db      	ldr	r3, [r3, #12]
 8016d2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	3318      	adds	r3, #24
 8016d32:	4618      	mov	r0, r3
 8016d34:	f7fe fbd0 	bl	80154d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	3304      	adds	r3, #4
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	f7fe fbcb 	bl	80154d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d46:	4b2d      	ldr	r3, [pc, #180]	; (8016dfc <xTaskResumeAll+0x124>)
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d903      	bls.n	8016d56 <xTaskResumeAll+0x7e>
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d52:	4a2a      	ldr	r2, [pc, #168]	; (8016dfc <xTaskResumeAll+0x124>)
 8016d54:	6013      	str	r3, [r2, #0]
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d5a:	4613      	mov	r3, r2
 8016d5c:	009b      	lsls	r3, r3, #2
 8016d5e:	4413      	add	r3, r2
 8016d60:	009b      	lsls	r3, r3, #2
 8016d62:	4a27      	ldr	r2, [pc, #156]	; (8016e00 <xTaskResumeAll+0x128>)
 8016d64:	441a      	add	r2, r3
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	3304      	adds	r3, #4
 8016d6a:	4619      	mov	r1, r3
 8016d6c:	4610      	mov	r0, r2
 8016d6e:	f7fe fb56 	bl	801541e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016d76:	4b23      	ldr	r3, [pc, #140]	; (8016e04 <xTaskResumeAll+0x12c>)
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d7c:	429a      	cmp	r2, r3
 8016d7e:	d302      	bcc.n	8016d86 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8016d80:	4b21      	ldr	r3, [pc, #132]	; (8016e08 <xTaskResumeAll+0x130>)
 8016d82:	2201      	movs	r2, #1
 8016d84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016d86:	4b1c      	ldr	r3, [pc, #112]	; (8016df8 <xTaskResumeAll+0x120>)
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d1cb      	bne.n	8016d26 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d001      	beq.n	8016d98 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016d94:	f000 fb68 	bl	8017468 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016d98:	4b1c      	ldr	r3, [pc, #112]	; (8016e0c <xTaskResumeAll+0x134>)
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d010      	beq.n	8016dc6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016da4:	f000 f858 	bl	8016e58 <xTaskIncrementTick>
 8016da8:	4603      	mov	r3, r0
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d002      	beq.n	8016db4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8016dae:	4b16      	ldr	r3, [pc, #88]	; (8016e08 <xTaskResumeAll+0x130>)
 8016db0:	2201      	movs	r2, #1
 8016db2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	3b01      	subs	r3, #1
 8016db8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d1f1      	bne.n	8016da4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8016dc0:	4b12      	ldr	r3, [pc, #72]	; (8016e0c <xTaskResumeAll+0x134>)
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016dc6:	4b10      	ldr	r3, [pc, #64]	; (8016e08 <xTaskResumeAll+0x130>)
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d009      	beq.n	8016de2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016dce:	2301      	movs	r3, #1
 8016dd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8016dd2:	4b0f      	ldr	r3, [pc, #60]	; (8016e10 <xTaskResumeAll+0x138>)
 8016dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016dd8:	601a      	str	r2, [r3, #0]
 8016dda:	f3bf 8f4f 	dsb	sy
 8016dde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016de2:	f001 f9e3 	bl	80181ac <vPortExitCritical>

	return xAlreadyYielded;
 8016de6:	68bb      	ldr	r3, [r7, #8]
}
 8016de8:	4618      	mov	r0, r3
 8016dea:	3710      	adds	r7, #16
 8016dec:	46bd      	mov	sp, r7
 8016dee:	bd80      	pop	{r7, pc}
 8016df0:	20000f68 	.word	0x20000f68
 8016df4:	20000f40 	.word	0x20000f40
 8016df8:	20000f00 	.word	0x20000f00
 8016dfc:	20000f48 	.word	0x20000f48
 8016e00:	20000a70 	.word	0x20000a70
 8016e04:	20000a6c 	.word	0x20000a6c
 8016e08:	20000f54 	.word	0x20000f54
 8016e0c:	20000f50 	.word	0x20000f50
 8016e10:	e000ed04 	.word	0xe000ed04

08016e14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016e14:	b480      	push	{r7}
 8016e16:	b083      	sub	sp, #12
 8016e18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016e1a:	4b05      	ldr	r3, [pc, #20]	; (8016e30 <xTaskGetTickCount+0x1c>)
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016e20:	687b      	ldr	r3, [r7, #4]
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	370c      	adds	r7, #12
 8016e26:	46bd      	mov	sp, r7
 8016e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2c:	4770      	bx	lr
 8016e2e:	bf00      	nop
 8016e30:	20000f44 	.word	0x20000f44

08016e34 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b082      	sub	sp, #8
 8016e38:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016e3a:	f001 fa65 	bl	8018308 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8016e3e:	2300      	movs	r3, #0
 8016e40:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8016e42:	4b04      	ldr	r3, [pc, #16]	; (8016e54 <xTaskGetTickCountFromISR+0x20>)
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016e48:	683b      	ldr	r3, [r7, #0]
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3708      	adds	r7, #8
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
 8016e52:	bf00      	nop
 8016e54:	20000f44 	.word	0x20000f44

08016e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b086      	sub	sp, #24
 8016e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016e62:	4b4f      	ldr	r3, [pc, #316]	; (8016fa0 <xTaskIncrementTick+0x148>)
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	f040 808a 	bne.w	8016f80 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016e6c:	4b4d      	ldr	r3, [pc, #308]	; (8016fa4 <xTaskIncrementTick+0x14c>)
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	3301      	adds	r3, #1
 8016e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016e74:	4a4b      	ldr	r2, [pc, #300]	; (8016fa4 <xTaskIncrementTick+0x14c>)
 8016e76:	693b      	ldr	r3, [r7, #16]
 8016e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016e7a:	693b      	ldr	r3, [r7, #16]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d121      	bne.n	8016ec4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8016e80:	4b49      	ldr	r3, [pc, #292]	; (8016fa8 <xTaskIncrementTick+0x150>)
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d00b      	beq.n	8016ea2 <xTaskIncrementTick+0x4a>
 8016e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e8e:	b672      	cpsid	i
 8016e90:	f383 8811 	msr	BASEPRI, r3
 8016e94:	f3bf 8f6f 	isb	sy
 8016e98:	f3bf 8f4f 	dsb	sy
 8016e9c:	b662      	cpsie	i
 8016e9e:	603b      	str	r3, [r7, #0]
 8016ea0:	e7fe      	b.n	8016ea0 <xTaskIncrementTick+0x48>
 8016ea2:	4b41      	ldr	r3, [pc, #260]	; (8016fa8 <xTaskIncrementTick+0x150>)
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	60fb      	str	r3, [r7, #12]
 8016ea8:	4b40      	ldr	r3, [pc, #256]	; (8016fac <xTaskIncrementTick+0x154>)
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	4a3e      	ldr	r2, [pc, #248]	; (8016fa8 <xTaskIncrementTick+0x150>)
 8016eae:	6013      	str	r3, [r2, #0]
 8016eb0:	4a3e      	ldr	r2, [pc, #248]	; (8016fac <xTaskIncrementTick+0x154>)
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	6013      	str	r3, [r2, #0]
 8016eb6:	4b3e      	ldr	r3, [pc, #248]	; (8016fb0 <xTaskIncrementTick+0x158>)
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	3301      	adds	r3, #1
 8016ebc:	4a3c      	ldr	r2, [pc, #240]	; (8016fb0 <xTaskIncrementTick+0x158>)
 8016ebe:	6013      	str	r3, [r2, #0]
 8016ec0:	f000 fad2 	bl	8017468 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016ec4:	4b3b      	ldr	r3, [pc, #236]	; (8016fb4 <xTaskIncrementTick+0x15c>)
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	693a      	ldr	r2, [r7, #16]
 8016eca:	429a      	cmp	r2, r3
 8016ecc:	d349      	bcc.n	8016f62 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016ece:	4b36      	ldr	r3, [pc, #216]	; (8016fa8 <xTaskIncrementTick+0x150>)
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d104      	bne.n	8016ee2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ed8:	4b36      	ldr	r3, [pc, #216]	; (8016fb4 <xTaskIncrementTick+0x15c>)
 8016eda:	f04f 32ff 	mov.w	r2, #4294967295
 8016ede:	601a      	str	r2, [r3, #0]
					break;
 8016ee0:	e03f      	b.n	8016f62 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ee2:	4b31      	ldr	r3, [pc, #196]	; (8016fa8 <xTaskIncrementTick+0x150>)
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	68db      	ldr	r3, [r3, #12]
 8016ee8:	68db      	ldr	r3, [r3, #12]
 8016eea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016eec:	68bb      	ldr	r3, [r7, #8]
 8016eee:	685b      	ldr	r3, [r3, #4]
 8016ef0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016ef2:	693a      	ldr	r2, [r7, #16]
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	429a      	cmp	r2, r3
 8016ef8:	d203      	bcs.n	8016f02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016efa:	4a2e      	ldr	r2, [pc, #184]	; (8016fb4 <xTaskIncrementTick+0x15c>)
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016f00:	e02f      	b.n	8016f62 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016f02:	68bb      	ldr	r3, [r7, #8]
 8016f04:	3304      	adds	r3, #4
 8016f06:	4618      	mov	r0, r3
 8016f08:	f7fe fae6 	bl	80154d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016f0c:	68bb      	ldr	r3, [r7, #8]
 8016f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d004      	beq.n	8016f1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016f14:	68bb      	ldr	r3, [r7, #8]
 8016f16:	3318      	adds	r3, #24
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f7fe fadd 	bl	80154d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016f1e:	68bb      	ldr	r3, [r7, #8]
 8016f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f22:	4b25      	ldr	r3, [pc, #148]	; (8016fb8 <xTaskIncrementTick+0x160>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	429a      	cmp	r2, r3
 8016f28:	d903      	bls.n	8016f32 <xTaskIncrementTick+0xda>
 8016f2a:	68bb      	ldr	r3, [r7, #8]
 8016f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f2e:	4a22      	ldr	r2, [pc, #136]	; (8016fb8 <xTaskIncrementTick+0x160>)
 8016f30:	6013      	str	r3, [r2, #0]
 8016f32:	68bb      	ldr	r3, [r7, #8]
 8016f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f36:	4613      	mov	r3, r2
 8016f38:	009b      	lsls	r3, r3, #2
 8016f3a:	4413      	add	r3, r2
 8016f3c:	009b      	lsls	r3, r3, #2
 8016f3e:	4a1f      	ldr	r2, [pc, #124]	; (8016fbc <xTaskIncrementTick+0x164>)
 8016f40:	441a      	add	r2, r3
 8016f42:	68bb      	ldr	r3, [r7, #8]
 8016f44:	3304      	adds	r3, #4
 8016f46:	4619      	mov	r1, r3
 8016f48:	4610      	mov	r0, r2
 8016f4a:	f7fe fa68 	bl	801541e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016f4e:	68bb      	ldr	r3, [r7, #8]
 8016f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f52:	4b1b      	ldr	r3, [pc, #108]	; (8016fc0 <xTaskIncrementTick+0x168>)
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f58:	429a      	cmp	r2, r3
 8016f5a:	d3b8      	bcc.n	8016ece <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8016f5c:	2301      	movs	r3, #1
 8016f5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016f60:	e7b5      	b.n	8016ece <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016f62:	4b17      	ldr	r3, [pc, #92]	; (8016fc0 <xTaskIncrementTick+0x168>)
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f68:	4914      	ldr	r1, [pc, #80]	; (8016fbc <xTaskIncrementTick+0x164>)
 8016f6a:	4613      	mov	r3, r2
 8016f6c:	009b      	lsls	r3, r3, #2
 8016f6e:	4413      	add	r3, r2
 8016f70:	009b      	lsls	r3, r3, #2
 8016f72:	440b      	add	r3, r1
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	2b01      	cmp	r3, #1
 8016f78:	d907      	bls.n	8016f8a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8016f7a:	2301      	movs	r3, #1
 8016f7c:	617b      	str	r3, [r7, #20]
 8016f7e:	e004      	b.n	8016f8a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8016f80:	4b10      	ldr	r3, [pc, #64]	; (8016fc4 <xTaskIncrementTick+0x16c>)
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	3301      	adds	r3, #1
 8016f86:	4a0f      	ldr	r2, [pc, #60]	; (8016fc4 <xTaskIncrementTick+0x16c>)
 8016f88:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8016f8a:	4b0f      	ldr	r3, [pc, #60]	; (8016fc8 <xTaskIncrementTick+0x170>)
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d001      	beq.n	8016f96 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8016f92:	2301      	movs	r3, #1
 8016f94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8016f96:	697b      	ldr	r3, [r7, #20]
}
 8016f98:	4618      	mov	r0, r3
 8016f9a:	3718      	adds	r7, #24
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd80      	pop	{r7, pc}
 8016fa0:	20000f68 	.word	0x20000f68
 8016fa4:	20000f44 	.word	0x20000f44
 8016fa8:	20000ef8 	.word	0x20000ef8
 8016fac:	20000efc 	.word	0x20000efc
 8016fb0:	20000f58 	.word	0x20000f58
 8016fb4:	20000f60 	.word	0x20000f60
 8016fb8:	20000f48 	.word	0x20000f48
 8016fbc:	20000a70 	.word	0x20000a70
 8016fc0:	20000a6c 	.word	0x20000a6c
 8016fc4:	20000f50 	.word	0x20000f50
 8016fc8:	20000f54 	.word	0x20000f54

08016fcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016fcc:	b480      	push	{r7}
 8016fce:	b085      	sub	sp, #20
 8016fd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016fd2:	4b28      	ldr	r3, [pc, #160]	; (8017074 <vTaskSwitchContext+0xa8>)
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d003      	beq.n	8016fe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016fda:	4b27      	ldr	r3, [pc, #156]	; (8017078 <vTaskSwitchContext+0xac>)
 8016fdc:	2201      	movs	r2, #1
 8016fde:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016fe0:	e042      	b.n	8017068 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8016fe2:	4b25      	ldr	r3, [pc, #148]	; (8017078 <vTaskSwitchContext+0xac>)
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016fe8:	4b24      	ldr	r3, [pc, #144]	; (801707c <vTaskSwitchContext+0xb0>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	60fb      	str	r3, [r7, #12]
 8016fee:	e011      	b.n	8017014 <vTaskSwitchContext+0x48>
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d10b      	bne.n	801700e <vTaskSwitchContext+0x42>
 8016ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ffa:	b672      	cpsid	i
 8016ffc:	f383 8811 	msr	BASEPRI, r3
 8017000:	f3bf 8f6f 	isb	sy
 8017004:	f3bf 8f4f 	dsb	sy
 8017008:	b662      	cpsie	i
 801700a:	607b      	str	r3, [r7, #4]
 801700c:	e7fe      	b.n	801700c <vTaskSwitchContext+0x40>
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	3b01      	subs	r3, #1
 8017012:	60fb      	str	r3, [r7, #12]
 8017014:	491a      	ldr	r1, [pc, #104]	; (8017080 <vTaskSwitchContext+0xb4>)
 8017016:	68fa      	ldr	r2, [r7, #12]
 8017018:	4613      	mov	r3, r2
 801701a:	009b      	lsls	r3, r3, #2
 801701c:	4413      	add	r3, r2
 801701e:	009b      	lsls	r3, r3, #2
 8017020:	440b      	add	r3, r1
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d0e3      	beq.n	8016ff0 <vTaskSwitchContext+0x24>
 8017028:	68fa      	ldr	r2, [r7, #12]
 801702a:	4613      	mov	r3, r2
 801702c:	009b      	lsls	r3, r3, #2
 801702e:	4413      	add	r3, r2
 8017030:	009b      	lsls	r3, r3, #2
 8017032:	4a13      	ldr	r2, [pc, #76]	; (8017080 <vTaskSwitchContext+0xb4>)
 8017034:	4413      	add	r3, r2
 8017036:	60bb      	str	r3, [r7, #8]
 8017038:	68bb      	ldr	r3, [r7, #8]
 801703a:	685b      	ldr	r3, [r3, #4]
 801703c:	685a      	ldr	r2, [r3, #4]
 801703e:	68bb      	ldr	r3, [r7, #8]
 8017040:	605a      	str	r2, [r3, #4]
 8017042:	68bb      	ldr	r3, [r7, #8]
 8017044:	685a      	ldr	r2, [r3, #4]
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	3308      	adds	r3, #8
 801704a:	429a      	cmp	r2, r3
 801704c:	d104      	bne.n	8017058 <vTaskSwitchContext+0x8c>
 801704e:	68bb      	ldr	r3, [r7, #8]
 8017050:	685b      	ldr	r3, [r3, #4]
 8017052:	685a      	ldr	r2, [r3, #4]
 8017054:	68bb      	ldr	r3, [r7, #8]
 8017056:	605a      	str	r2, [r3, #4]
 8017058:	68bb      	ldr	r3, [r7, #8]
 801705a:	685b      	ldr	r3, [r3, #4]
 801705c:	68db      	ldr	r3, [r3, #12]
 801705e:	4a09      	ldr	r2, [pc, #36]	; (8017084 <vTaskSwitchContext+0xb8>)
 8017060:	6013      	str	r3, [r2, #0]
 8017062:	4a06      	ldr	r2, [pc, #24]	; (801707c <vTaskSwitchContext+0xb0>)
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	6013      	str	r3, [r2, #0]
}
 8017068:	bf00      	nop
 801706a:	3714      	adds	r7, #20
 801706c:	46bd      	mov	sp, r7
 801706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017072:	4770      	bx	lr
 8017074:	20000f68 	.word	0x20000f68
 8017078:	20000f54 	.word	0x20000f54
 801707c:	20000f48 	.word	0x20000f48
 8017080:	20000a70 	.word	0x20000a70
 8017084:	20000a6c 	.word	0x20000a6c

08017088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b084      	sub	sp, #16
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]
 8017090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d10b      	bne.n	80170b0 <vTaskPlaceOnEventList+0x28>
 8017098:	f04f 0350 	mov.w	r3, #80	; 0x50
 801709c:	b672      	cpsid	i
 801709e:	f383 8811 	msr	BASEPRI, r3
 80170a2:	f3bf 8f6f 	isb	sy
 80170a6:	f3bf 8f4f 	dsb	sy
 80170aa:	b662      	cpsie	i
 80170ac:	60fb      	str	r3, [r7, #12]
 80170ae:	e7fe      	b.n	80170ae <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80170b0:	4b07      	ldr	r3, [pc, #28]	; (80170d0 <vTaskPlaceOnEventList+0x48>)
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	3318      	adds	r3, #24
 80170b6:	4619      	mov	r1, r3
 80170b8:	6878      	ldr	r0, [r7, #4]
 80170ba:	f7fe f9d4 	bl	8015466 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80170be:	2101      	movs	r1, #1
 80170c0:	6838      	ldr	r0, [r7, #0]
 80170c2:	f000 fb8f 	bl	80177e4 <prvAddCurrentTaskToDelayedList>
}
 80170c6:	bf00      	nop
 80170c8:	3710      	adds	r7, #16
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
 80170ce:	bf00      	nop
 80170d0:	20000a6c 	.word	0x20000a6c

080170d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b086      	sub	sp, #24
 80170d8:	af00      	add	r7, sp, #0
 80170da:	60f8      	str	r0, [r7, #12]
 80170dc:	60b9      	str	r1, [r7, #8]
 80170de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d10b      	bne.n	80170fe <vTaskPlaceOnEventListRestricted+0x2a>
 80170e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170ea:	b672      	cpsid	i
 80170ec:	f383 8811 	msr	BASEPRI, r3
 80170f0:	f3bf 8f6f 	isb	sy
 80170f4:	f3bf 8f4f 	dsb	sy
 80170f8:	b662      	cpsie	i
 80170fa:	617b      	str	r3, [r7, #20]
 80170fc:	e7fe      	b.n	80170fc <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80170fe:	4b0a      	ldr	r3, [pc, #40]	; (8017128 <vTaskPlaceOnEventListRestricted+0x54>)
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	3318      	adds	r3, #24
 8017104:	4619      	mov	r1, r3
 8017106:	68f8      	ldr	r0, [r7, #12]
 8017108:	f7fe f989 	bl	801541e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d002      	beq.n	8017118 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8017112:	f04f 33ff 	mov.w	r3, #4294967295
 8017116:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017118:	6879      	ldr	r1, [r7, #4]
 801711a:	68b8      	ldr	r0, [r7, #8]
 801711c:	f000 fb62 	bl	80177e4 <prvAddCurrentTaskToDelayedList>
	}
 8017120:	bf00      	nop
 8017122:	3718      	adds	r7, #24
 8017124:	46bd      	mov	sp, r7
 8017126:	bd80      	pop	{r7, pc}
 8017128:	20000a6c 	.word	0x20000a6c

0801712c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b086      	sub	sp, #24
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	68db      	ldr	r3, [r3, #12]
 8017138:	68db      	ldr	r3, [r3, #12]
 801713a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801713c:	693b      	ldr	r3, [r7, #16]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d10b      	bne.n	801715a <xTaskRemoveFromEventList+0x2e>
 8017142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017146:	b672      	cpsid	i
 8017148:	f383 8811 	msr	BASEPRI, r3
 801714c:	f3bf 8f6f 	isb	sy
 8017150:	f3bf 8f4f 	dsb	sy
 8017154:	b662      	cpsie	i
 8017156:	60fb      	str	r3, [r7, #12]
 8017158:	e7fe      	b.n	8017158 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801715a:	693b      	ldr	r3, [r7, #16]
 801715c:	3318      	adds	r3, #24
 801715e:	4618      	mov	r0, r3
 8017160:	f7fe f9ba 	bl	80154d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017164:	4b1d      	ldr	r3, [pc, #116]	; (80171dc <xTaskRemoveFromEventList+0xb0>)
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d11d      	bne.n	80171a8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801716c:	693b      	ldr	r3, [r7, #16]
 801716e:	3304      	adds	r3, #4
 8017170:	4618      	mov	r0, r3
 8017172:	f7fe f9b1 	bl	80154d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017176:	693b      	ldr	r3, [r7, #16]
 8017178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801717a:	4b19      	ldr	r3, [pc, #100]	; (80171e0 <xTaskRemoveFromEventList+0xb4>)
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	429a      	cmp	r2, r3
 8017180:	d903      	bls.n	801718a <xTaskRemoveFromEventList+0x5e>
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017186:	4a16      	ldr	r2, [pc, #88]	; (80171e0 <xTaskRemoveFromEventList+0xb4>)
 8017188:	6013      	str	r3, [r2, #0]
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801718e:	4613      	mov	r3, r2
 8017190:	009b      	lsls	r3, r3, #2
 8017192:	4413      	add	r3, r2
 8017194:	009b      	lsls	r3, r3, #2
 8017196:	4a13      	ldr	r2, [pc, #76]	; (80171e4 <xTaskRemoveFromEventList+0xb8>)
 8017198:	441a      	add	r2, r3
 801719a:	693b      	ldr	r3, [r7, #16]
 801719c:	3304      	adds	r3, #4
 801719e:	4619      	mov	r1, r3
 80171a0:	4610      	mov	r0, r2
 80171a2:	f7fe f93c 	bl	801541e <vListInsertEnd>
 80171a6:	e005      	b.n	80171b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80171a8:	693b      	ldr	r3, [r7, #16]
 80171aa:	3318      	adds	r3, #24
 80171ac:	4619      	mov	r1, r3
 80171ae:	480e      	ldr	r0, [pc, #56]	; (80171e8 <xTaskRemoveFromEventList+0xbc>)
 80171b0:	f7fe f935 	bl	801541e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80171b4:	693b      	ldr	r3, [r7, #16]
 80171b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171b8:	4b0c      	ldr	r3, [pc, #48]	; (80171ec <xTaskRemoveFromEventList+0xc0>)
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171be:	429a      	cmp	r2, r3
 80171c0:	d905      	bls.n	80171ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80171c2:	2301      	movs	r3, #1
 80171c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80171c6:	4b0a      	ldr	r3, [pc, #40]	; (80171f0 <xTaskRemoveFromEventList+0xc4>)
 80171c8:	2201      	movs	r2, #1
 80171ca:	601a      	str	r2, [r3, #0]
 80171cc:	e001      	b.n	80171d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80171ce:	2300      	movs	r3, #0
 80171d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80171d2:	697b      	ldr	r3, [r7, #20]
}
 80171d4:	4618      	mov	r0, r3
 80171d6:	3718      	adds	r7, #24
 80171d8:	46bd      	mov	sp, r7
 80171da:	bd80      	pop	{r7, pc}
 80171dc:	20000f68 	.word	0x20000f68
 80171e0:	20000f48 	.word	0x20000f48
 80171e4:	20000a70 	.word	0x20000a70
 80171e8:	20000f00 	.word	0x20000f00
 80171ec:	20000a6c 	.word	0x20000a6c
 80171f0:	20000f54 	.word	0x20000f54

080171f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80171f4:	b480      	push	{r7}
 80171f6:	b083      	sub	sp, #12
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80171fc:	4b06      	ldr	r3, [pc, #24]	; (8017218 <vTaskInternalSetTimeOutState+0x24>)
 80171fe:	681a      	ldr	r2, [r3, #0]
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017204:	4b05      	ldr	r3, [pc, #20]	; (801721c <vTaskInternalSetTimeOutState+0x28>)
 8017206:	681a      	ldr	r2, [r3, #0]
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	605a      	str	r2, [r3, #4]
}
 801720c:	bf00      	nop
 801720e:	370c      	adds	r7, #12
 8017210:	46bd      	mov	sp, r7
 8017212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017216:	4770      	bx	lr
 8017218:	20000f58 	.word	0x20000f58
 801721c:	20000f44 	.word	0x20000f44

08017220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b088      	sub	sp, #32
 8017224:	af00      	add	r7, sp, #0
 8017226:	6078      	str	r0, [r7, #4]
 8017228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d10b      	bne.n	8017248 <xTaskCheckForTimeOut+0x28>
 8017230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017234:	b672      	cpsid	i
 8017236:	f383 8811 	msr	BASEPRI, r3
 801723a:	f3bf 8f6f 	isb	sy
 801723e:	f3bf 8f4f 	dsb	sy
 8017242:	b662      	cpsie	i
 8017244:	613b      	str	r3, [r7, #16]
 8017246:	e7fe      	b.n	8017246 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8017248:	683b      	ldr	r3, [r7, #0]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d10b      	bne.n	8017266 <xTaskCheckForTimeOut+0x46>
 801724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017252:	b672      	cpsid	i
 8017254:	f383 8811 	msr	BASEPRI, r3
 8017258:	f3bf 8f6f 	isb	sy
 801725c:	f3bf 8f4f 	dsb	sy
 8017260:	b662      	cpsie	i
 8017262:	60fb      	str	r3, [r7, #12]
 8017264:	e7fe      	b.n	8017264 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8017266:	f000 ff6f 	bl	8018148 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801726a:	4b1d      	ldr	r3, [pc, #116]	; (80172e0 <xTaskCheckForTimeOut+0xc0>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	685b      	ldr	r3, [r3, #4]
 8017274:	69ba      	ldr	r2, [r7, #24]
 8017276:	1ad3      	subs	r3, r2, r3
 8017278:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801727a:	683b      	ldr	r3, [r7, #0]
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017282:	d102      	bne.n	801728a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017284:	2300      	movs	r3, #0
 8017286:	61fb      	str	r3, [r7, #28]
 8017288:	e023      	b.n	80172d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	681a      	ldr	r2, [r3, #0]
 801728e:	4b15      	ldr	r3, [pc, #84]	; (80172e4 <xTaskCheckForTimeOut+0xc4>)
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	429a      	cmp	r2, r3
 8017294:	d007      	beq.n	80172a6 <xTaskCheckForTimeOut+0x86>
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	685b      	ldr	r3, [r3, #4]
 801729a:	69ba      	ldr	r2, [r7, #24]
 801729c:	429a      	cmp	r2, r3
 801729e:	d302      	bcc.n	80172a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80172a0:	2301      	movs	r3, #1
 80172a2:	61fb      	str	r3, [r7, #28]
 80172a4:	e015      	b.n	80172d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80172a6:	683b      	ldr	r3, [r7, #0]
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	697a      	ldr	r2, [r7, #20]
 80172ac:	429a      	cmp	r2, r3
 80172ae:	d20b      	bcs.n	80172c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80172b0:	683b      	ldr	r3, [r7, #0]
 80172b2:	681a      	ldr	r2, [r3, #0]
 80172b4:	697b      	ldr	r3, [r7, #20]
 80172b6:	1ad2      	subs	r2, r2, r3
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80172bc:	6878      	ldr	r0, [r7, #4]
 80172be:	f7ff ff99 	bl	80171f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80172c2:	2300      	movs	r3, #0
 80172c4:	61fb      	str	r3, [r7, #28]
 80172c6:	e004      	b.n	80172d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80172c8:	683b      	ldr	r3, [r7, #0]
 80172ca:	2200      	movs	r2, #0
 80172cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80172ce:	2301      	movs	r3, #1
 80172d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80172d2:	f000 ff6b 	bl	80181ac <vPortExitCritical>

	return xReturn;
 80172d6:	69fb      	ldr	r3, [r7, #28]
}
 80172d8:	4618      	mov	r0, r3
 80172da:	3720      	adds	r7, #32
 80172dc:	46bd      	mov	sp, r7
 80172de:	bd80      	pop	{r7, pc}
 80172e0:	20000f44 	.word	0x20000f44
 80172e4:	20000f58 	.word	0x20000f58

080172e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80172e8:	b480      	push	{r7}
 80172ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80172ec:	4b03      	ldr	r3, [pc, #12]	; (80172fc <vTaskMissedYield+0x14>)
 80172ee:	2201      	movs	r2, #1
 80172f0:	601a      	str	r2, [r3, #0]
}
 80172f2:	bf00      	nop
 80172f4:	46bd      	mov	sp, r7
 80172f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fa:	4770      	bx	lr
 80172fc:	20000f54 	.word	0x20000f54

08017300 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017300:	b580      	push	{r7, lr}
 8017302:	b082      	sub	sp, #8
 8017304:	af00      	add	r7, sp, #0
 8017306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017308:	f000 f852 	bl	80173b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801730c:	4b06      	ldr	r3, [pc, #24]	; (8017328 <prvIdleTask+0x28>)
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	2b01      	cmp	r3, #1
 8017312:	d9f9      	bls.n	8017308 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017314:	4b05      	ldr	r3, [pc, #20]	; (801732c <prvIdleTask+0x2c>)
 8017316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801731a:	601a      	str	r2, [r3, #0]
 801731c:	f3bf 8f4f 	dsb	sy
 8017320:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017324:	e7f0      	b.n	8017308 <prvIdleTask+0x8>
 8017326:	bf00      	nop
 8017328:	20000a70 	.word	0x20000a70
 801732c:	e000ed04 	.word	0xe000ed04

08017330 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b082      	sub	sp, #8
 8017334:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017336:	2300      	movs	r3, #0
 8017338:	607b      	str	r3, [r7, #4]
 801733a:	e00c      	b.n	8017356 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801733c:	687a      	ldr	r2, [r7, #4]
 801733e:	4613      	mov	r3, r2
 8017340:	009b      	lsls	r3, r3, #2
 8017342:	4413      	add	r3, r2
 8017344:	009b      	lsls	r3, r3, #2
 8017346:	4a12      	ldr	r2, [pc, #72]	; (8017390 <prvInitialiseTaskLists+0x60>)
 8017348:	4413      	add	r3, r2
 801734a:	4618      	mov	r0, r3
 801734c:	f7fe f83a 	bl	80153c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	3301      	adds	r3, #1
 8017354:	607b      	str	r3, [r7, #4]
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	2b37      	cmp	r3, #55	; 0x37
 801735a:	d9ef      	bls.n	801733c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801735c:	480d      	ldr	r0, [pc, #52]	; (8017394 <prvInitialiseTaskLists+0x64>)
 801735e:	f7fe f831 	bl	80153c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017362:	480d      	ldr	r0, [pc, #52]	; (8017398 <prvInitialiseTaskLists+0x68>)
 8017364:	f7fe f82e 	bl	80153c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017368:	480c      	ldr	r0, [pc, #48]	; (801739c <prvInitialiseTaskLists+0x6c>)
 801736a:	f7fe f82b 	bl	80153c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801736e:	480c      	ldr	r0, [pc, #48]	; (80173a0 <prvInitialiseTaskLists+0x70>)
 8017370:	f7fe f828 	bl	80153c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017374:	480b      	ldr	r0, [pc, #44]	; (80173a4 <prvInitialiseTaskLists+0x74>)
 8017376:	f7fe f825 	bl	80153c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801737a:	4b0b      	ldr	r3, [pc, #44]	; (80173a8 <prvInitialiseTaskLists+0x78>)
 801737c:	4a05      	ldr	r2, [pc, #20]	; (8017394 <prvInitialiseTaskLists+0x64>)
 801737e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017380:	4b0a      	ldr	r3, [pc, #40]	; (80173ac <prvInitialiseTaskLists+0x7c>)
 8017382:	4a05      	ldr	r2, [pc, #20]	; (8017398 <prvInitialiseTaskLists+0x68>)
 8017384:	601a      	str	r2, [r3, #0]
}
 8017386:	bf00      	nop
 8017388:	3708      	adds	r7, #8
 801738a:	46bd      	mov	sp, r7
 801738c:	bd80      	pop	{r7, pc}
 801738e:	bf00      	nop
 8017390:	20000a70 	.word	0x20000a70
 8017394:	20000ed0 	.word	0x20000ed0
 8017398:	20000ee4 	.word	0x20000ee4
 801739c:	20000f00 	.word	0x20000f00
 80173a0:	20000f14 	.word	0x20000f14
 80173a4:	20000f2c 	.word	0x20000f2c
 80173a8:	20000ef8 	.word	0x20000ef8
 80173ac:	20000efc 	.word	0x20000efc

080173b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80173b6:	e019      	b.n	80173ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80173b8:	f000 fec6 	bl	8018148 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80173bc:	4b0f      	ldr	r3, [pc, #60]	; (80173fc <prvCheckTasksWaitingTermination+0x4c>)
 80173be:	68db      	ldr	r3, [r3, #12]
 80173c0:	68db      	ldr	r3, [r3, #12]
 80173c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	3304      	adds	r3, #4
 80173c8:	4618      	mov	r0, r3
 80173ca:	f7fe f885 	bl	80154d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80173ce:	4b0c      	ldr	r3, [pc, #48]	; (8017400 <prvCheckTasksWaitingTermination+0x50>)
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	3b01      	subs	r3, #1
 80173d4:	4a0a      	ldr	r2, [pc, #40]	; (8017400 <prvCheckTasksWaitingTermination+0x50>)
 80173d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80173d8:	4b0a      	ldr	r3, [pc, #40]	; (8017404 <prvCheckTasksWaitingTermination+0x54>)
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	3b01      	subs	r3, #1
 80173de:	4a09      	ldr	r2, [pc, #36]	; (8017404 <prvCheckTasksWaitingTermination+0x54>)
 80173e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80173e2:	f000 fee3 	bl	80181ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80173e6:	6878      	ldr	r0, [r7, #4]
 80173e8:	f000 f80e 	bl	8017408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80173ec:	4b05      	ldr	r3, [pc, #20]	; (8017404 <prvCheckTasksWaitingTermination+0x54>)
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d1e1      	bne.n	80173b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80173f4:	bf00      	nop
 80173f6:	3708      	adds	r7, #8
 80173f8:	46bd      	mov	sp, r7
 80173fa:	bd80      	pop	{r7, pc}
 80173fc:	20000f14 	.word	0x20000f14
 8017400:	20000f40 	.word	0x20000f40
 8017404:	20000f28 	.word	0x20000f28

08017408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017408:	b580      	push	{r7, lr}
 801740a:	b084      	sub	sp, #16
 801740c:	af00      	add	r7, sp, #0
 801740e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017416:	2b00      	cmp	r3, #0
 8017418:	d108      	bne.n	801742c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801741e:	4618      	mov	r0, r3
 8017420:	f001 f87c 	bl	801851c <vPortFree>
				vPortFree( pxTCB );
 8017424:	6878      	ldr	r0, [r7, #4]
 8017426:	f001 f879 	bl	801851c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801742a:	e019      	b.n	8017460 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017432:	2b01      	cmp	r3, #1
 8017434:	d103      	bne.n	801743e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8017436:	6878      	ldr	r0, [r7, #4]
 8017438:	f001 f870 	bl	801851c <vPortFree>
	}
 801743c:	e010      	b.n	8017460 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8017444:	2b02      	cmp	r3, #2
 8017446:	d00b      	beq.n	8017460 <prvDeleteTCB+0x58>
 8017448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801744c:	b672      	cpsid	i
 801744e:	f383 8811 	msr	BASEPRI, r3
 8017452:	f3bf 8f6f 	isb	sy
 8017456:	f3bf 8f4f 	dsb	sy
 801745a:	b662      	cpsie	i
 801745c:	60fb      	str	r3, [r7, #12]
 801745e:	e7fe      	b.n	801745e <prvDeleteTCB+0x56>
	}
 8017460:	bf00      	nop
 8017462:	3710      	adds	r7, #16
 8017464:	46bd      	mov	sp, r7
 8017466:	bd80      	pop	{r7, pc}

08017468 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017468:	b480      	push	{r7}
 801746a:	b083      	sub	sp, #12
 801746c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801746e:	4b0c      	ldr	r3, [pc, #48]	; (80174a0 <prvResetNextTaskUnblockTime+0x38>)
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d104      	bne.n	8017482 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017478:	4b0a      	ldr	r3, [pc, #40]	; (80174a4 <prvResetNextTaskUnblockTime+0x3c>)
 801747a:	f04f 32ff 	mov.w	r2, #4294967295
 801747e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017480:	e008      	b.n	8017494 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017482:	4b07      	ldr	r3, [pc, #28]	; (80174a0 <prvResetNextTaskUnblockTime+0x38>)
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	68db      	ldr	r3, [r3, #12]
 8017488:	68db      	ldr	r3, [r3, #12]
 801748a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	685b      	ldr	r3, [r3, #4]
 8017490:	4a04      	ldr	r2, [pc, #16]	; (80174a4 <prvResetNextTaskUnblockTime+0x3c>)
 8017492:	6013      	str	r3, [r2, #0]
}
 8017494:	bf00      	nop
 8017496:	370c      	adds	r7, #12
 8017498:	46bd      	mov	sp, r7
 801749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801749e:	4770      	bx	lr
 80174a0:	20000ef8 	.word	0x20000ef8
 80174a4:	20000f60 	.word	0x20000f60

080174a8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80174a8:	b480      	push	{r7}
 80174aa:	b083      	sub	sp, #12
 80174ac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80174ae:	4b05      	ldr	r3, [pc, #20]	; (80174c4 <xTaskGetCurrentTaskHandle+0x1c>)
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80174b4:	687b      	ldr	r3, [r7, #4]
	}
 80174b6:	4618      	mov	r0, r3
 80174b8:	370c      	adds	r7, #12
 80174ba:	46bd      	mov	sp, r7
 80174bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c0:	4770      	bx	lr
 80174c2:	bf00      	nop
 80174c4:	20000a6c 	.word	0x20000a6c

080174c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80174c8:	b480      	push	{r7}
 80174ca:	b083      	sub	sp, #12
 80174cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80174ce:	4b0b      	ldr	r3, [pc, #44]	; (80174fc <xTaskGetSchedulerState+0x34>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d102      	bne.n	80174dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80174d6:	2301      	movs	r3, #1
 80174d8:	607b      	str	r3, [r7, #4]
 80174da:	e008      	b.n	80174ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80174dc:	4b08      	ldr	r3, [pc, #32]	; (8017500 <xTaskGetSchedulerState+0x38>)
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d102      	bne.n	80174ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80174e4:	2302      	movs	r3, #2
 80174e6:	607b      	str	r3, [r7, #4]
 80174e8:	e001      	b.n	80174ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80174ea:	2300      	movs	r3, #0
 80174ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80174ee:	687b      	ldr	r3, [r7, #4]
	}
 80174f0:	4618      	mov	r0, r3
 80174f2:	370c      	adds	r7, #12
 80174f4:	46bd      	mov	sp, r7
 80174f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174fa:	4770      	bx	lr
 80174fc:	20000f4c 	.word	0x20000f4c
 8017500:	20000f68 	.word	0x20000f68

08017504 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017504:	b580      	push	{r7, lr}
 8017506:	b084      	sub	sp, #16
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017510:	2300      	movs	r3, #0
 8017512:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	2b00      	cmp	r3, #0
 8017518:	d051      	beq.n	80175be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801751a:	68bb      	ldr	r3, [r7, #8]
 801751c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801751e:	4b2a      	ldr	r3, [pc, #168]	; (80175c8 <xTaskPriorityInherit+0xc4>)
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017524:	429a      	cmp	r2, r3
 8017526:	d241      	bcs.n	80175ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017528:	68bb      	ldr	r3, [r7, #8]
 801752a:	699b      	ldr	r3, [r3, #24]
 801752c:	2b00      	cmp	r3, #0
 801752e:	db06      	blt.n	801753e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017530:	4b25      	ldr	r3, [pc, #148]	; (80175c8 <xTaskPriorityInherit+0xc4>)
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017536:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801753a:	68bb      	ldr	r3, [r7, #8]
 801753c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801753e:	68bb      	ldr	r3, [r7, #8]
 8017540:	6959      	ldr	r1, [r3, #20]
 8017542:	68bb      	ldr	r3, [r7, #8]
 8017544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017546:	4613      	mov	r3, r2
 8017548:	009b      	lsls	r3, r3, #2
 801754a:	4413      	add	r3, r2
 801754c:	009b      	lsls	r3, r3, #2
 801754e:	4a1f      	ldr	r2, [pc, #124]	; (80175cc <xTaskPriorityInherit+0xc8>)
 8017550:	4413      	add	r3, r2
 8017552:	4299      	cmp	r1, r3
 8017554:	d122      	bne.n	801759c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017556:	68bb      	ldr	r3, [r7, #8]
 8017558:	3304      	adds	r3, #4
 801755a:	4618      	mov	r0, r3
 801755c:	f7fd ffbc 	bl	80154d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017560:	4b19      	ldr	r3, [pc, #100]	; (80175c8 <xTaskPriorityInherit+0xc4>)
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017566:	68bb      	ldr	r3, [r7, #8]
 8017568:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801756a:	68bb      	ldr	r3, [r7, #8]
 801756c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801756e:	4b18      	ldr	r3, [pc, #96]	; (80175d0 <xTaskPriorityInherit+0xcc>)
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	429a      	cmp	r2, r3
 8017574:	d903      	bls.n	801757e <xTaskPriorityInherit+0x7a>
 8017576:	68bb      	ldr	r3, [r7, #8]
 8017578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801757a:	4a15      	ldr	r2, [pc, #84]	; (80175d0 <xTaskPriorityInherit+0xcc>)
 801757c:	6013      	str	r3, [r2, #0]
 801757e:	68bb      	ldr	r3, [r7, #8]
 8017580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017582:	4613      	mov	r3, r2
 8017584:	009b      	lsls	r3, r3, #2
 8017586:	4413      	add	r3, r2
 8017588:	009b      	lsls	r3, r3, #2
 801758a:	4a10      	ldr	r2, [pc, #64]	; (80175cc <xTaskPriorityInherit+0xc8>)
 801758c:	441a      	add	r2, r3
 801758e:	68bb      	ldr	r3, [r7, #8]
 8017590:	3304      	adds	r3, #4
 8017592:	4619      	mov	r1, r3
 8017594:	4610      	mov	r0, r2
 8017596:	f7fd ff42 	bl	801541e <vListInsertEnd>
 801759a:	e004      	b.n	80175a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801759c:	4b0a      	ldr	r3, [pc, #40]	; (80175c8 <xTaskPriorityInherit+0xc4>)
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80175a2:	68bb      	ldr	r3, [r7, #8]
 80175a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80175a6:	2301      	movs	r3, #1
 80175a8:	60fb      	str	r3, [r7, #12]
 80175aa:	e008      	b.n	80175be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80175ac:	68bb      	ldr	r3, [r7, #8]
 80175ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80175b0:	4b05      	ldr	r3, [pc, #20]	; (80175c8 <xTaskPriorityInherit+0xc4>)
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175b6:	429a      	cmp	r2, r3
 80175b8:	d201      	bcs.n	80175be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80175ba:	2301      	movs	r3, #1
 80175bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80175be:	68fb      	ldr	r3, [r7, #12]
	}
 80175c0:	4618      	mov	r0, r3
 80175c2:	3710      	adds	r7, #16
 80175c4:	46bd      	mov	sp, r7
 80175c6:	bd80      	pop	{r7, pc}
 80175c8:	20000a6c 	.word	0x20000a6c
 80175cc:	20000a70 	.word	0x20000a70
 80175d0:	20000f48 	.word	0x20000f48

080175d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b086      	sub	sp, #24
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80175e0:	2300      	movs	r3, #0
 80175e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d058      	beq.n	801769c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80175ea:	4b2f      	ldr	r3, [pc, #188]	; (80176a8 <xTaskPriorityDisinherit+0xd4>)
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	693a      	ldr	r2, [r7, #16]
 80175f0:	429a      	cmp	r2, r3
 80175f2:	d00b      	beq.n	801760c <xTaskPriorityDisinherit+0x38>
 80175f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175f8:	b672      	cpsid	i
 80175fa:	f383 8811 	msr	BASEPRI, r3
 80175fe:	f3bf 8f6f 	isb	sy
 8017602:	f3bf 8f4f 	dsb	sy
 8017606:	b662      	cpsie	i
 8017608:	60fb      	str	r3, [r7, #12]
 801760a:	e7fe      	b.n	801760a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 801760c:	693b      	ldr	r3, [r7, #16]
 801760e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017610:	2b00      	cmp	r3, #0
 8017612:	d10b      	bne.n	801762c <xTaskPriorityDisinherit+0x58>
 8017614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017618:	b672      	cpsid	i
 801761a:	f383 8811 	msr	BASEPRI, r3
 801761e:	f3bf 8f6f 	isb	sy
 8017622:	f3bf 8f4f 	dsb	sy
 8017626:	b662      	cpsie	i
 8017628:	60bb      	str	r3, [r7, #8]
 801762a:	e7fe      	b.n	801762a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 801762c:	693b      	ldr	r3, [r7, #16]
 801762e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017630:	1e5a      	subs	r2, r3, #1
 8017632:	693b      	ldr	r3, [r7, #16]
 8017634:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017636:	693b      	ldr	r3, [r7, #16]
 8017638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801763e:	429a      	cmp	r2, r3
 8017640:	d02c      	beq.n	801769c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017642:	693b      	ldr	r3, [r7, #16]
 8017644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017646:	2b00      	cmp	r3, #0
 8017648:	d128      	bne.n	801769c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801764a:	693b      	ldr	r3, [r7, #16]
 801764c:	3304      	adds	r3, #4
 801764e:	4618      	mov	r0, r3
 8017650:	f7fd ff42 	bl	80154d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017654:	693b      	ldr	r3, [r7, #16]
 8017656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017658:	693b      	ldr	r3, [r7, #16]
 801765a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801765c:	693b      	ldr	r3, [r7, #16]
 801765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017660:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017664:	693b      	ldr	r3, [r7, #16]
 8017666:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017668:	693b      	ldr	r3, [r7, #16]
 801766a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801766c:	4b0f      	ldr	r3, [pc, #60]	; (80176ac <xTaskPriorityDisinherit+0xd8>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	429a      	cmp	r2, r3
 8017672:	d903      	bls.n	801767c <xTaskPriorityDisinherit+0xa8>
 8017674:	693b      	ldr	r3, [r7, #16]
 8017676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017678:	4a0c      	ldr	r2, [pc, #48]	; (80176ac <xTaskPriorityDisinherit+0xd8>)
 801767a:	6013      	str	r3, [r2, #0]
 801767c:	693b      	ldr	r3, [r7, #16]
 801767e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017680:	4613      	mov	r3, r2
 8017682:	009b      	lsls	r3, r3, #2
 8017684:	4413      	add	r3, r2
 8017686:	009b      	lsls	r3, r3, #2
 8017688:	4a09      	ldr	r2, [pc, #36]	; (80176b0 <xTaskPriorityDisinherit+0xdc>)
 801768a:	441a      	add	r2, r3
 801768c:	693b      	ldr	r3, [r7, #16]
 801768e:	3304      	adds	r3, #4
 8017690:	4619      	mov	r1, r3
 8017692:	4610      	mov	r0, r2
 8017694:	f7fd fec3 	bl	801541e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017698:	2301      	movs	r3, #1
 801769a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801769c:	697b      	ldr	r3, [r7, #20]
	}
 801769e:	4618      	mov	r0, r3
 80176a0:	3718      	adds	r7, #24
 80176a2:	46bd      	mov	sp, r7
 80176a4:	bd80      	pop	{r7, pc}
 80176a6:	bf00      	nop
 80176a8:	20000a6c 	.word	0x20000a6c
 80176ac:	20000f48 	.word	0x20000f48
 80176b0:	20000a70 	.word	0x20000a70

080176b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b088      	sub	sp, #32
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
 80176bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80176c2:	2301      	movs	r3, #1
 80176c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d06c      	beq.n	80177a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80176cc:	69bb      	ldr	r3, [r7, #24]
 80176ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d10b      	bne.n	80176ec <vTaskPriorityDisinheritAfterTimeout+0x38>
 80176d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176d8:	b672      	cpsid	i
 80176da:	f383 8811 	msr	BASEPRI, r3
 80176de:	f3bf 8f6f 	isb	sy
 80176e2:	f3bf 8f4f 	dsb	sy
 80176e6:	b662      	cpsie	i
 80176e8:	60fb      	str	r3, [r7, #12]
 80176ea:	e7fe      	b.n	80176ea <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80176ec:	69bb      	ldr	r3, [r7, #24]
 80176ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176f0:	683a      	ldr	r2, [r7, #0]
 80176f2:	429a      	cmp	r2, r3
 80176f4:	d902      	bls.n	80176fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80176f6:	683b      	ldr	r3, [r7, #0]
 80176f8:	61fb      	str	r3, [r7, #28]
 80176fa:	e002      	b.n	8017702 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80176fc:	69bb      	ldr	r3, [r7, #24]
 80176fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017700:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017702:	69bb      	ldr	r3, [r7, #24]
 8017704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017706:	69fa      	ldr	r2, [r7, #28]
 8017708:	429a      	cmp	r2, r3
 801770a:	d04c      	beq.n	80177a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801770c:	69bb      	ldr	r3, [r7, #24]
 801770e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017710:	697a      	ldr	r2, [r7, #20]
 8017712:	429a      	cmp	r2, r3
 8017714:	d147      	bne.n	80177a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017716:	4b26      	ldr	r3, [pc, #152]	; (80177b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	69ba      	ldr	r2, [r7, #24]
 801771c:	429a      	cmp	r2, r3
 801771e:	d10b      	bne.n	8017738 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8017720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017724:	b672      	cpsid	i
 8017726:	f383 8811 	msr	BASEPRI, r3
 801772a:	f3bf 8f6f 	isb	sy
 801772e:	f3bf 8f4f 	dsb	sy
 8017732:	b662      	cpsie	i
 8017734:	60bb      	str	r3, [r7, #8]
 8017736:	e7fe      	b.n	8017736 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017738:	69bb      	ldr	r3, [r7, #24]
 801773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801773c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801773e:	69bb      	ldr	r3, [r7, #24]
 8017740:	69fa      	ldr	r2, [r7, #28]
 8017742:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017744:	69bb      	ldr	r3, [r7, #24]
 8017746:	699b      	ldr	r3, [r3, #24]
 8017748:	2b00      	cmp	r3, #0
 801774a:	db04      	blt.n	8017756 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801774c:	69fb      	ldr	r3, [r7, #28]
 801774e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017752:	69bb      	ldr	r3, [r7, #24]
 8017754:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017756:	69bb      	ldr	r3, [r7, #24]
 8017758:	6959      	ldr	r1, [r3, #20]
 801775a:	693a      	ldr	r2, [r7, #16]
 801775c:	4613      	mov	r3, r2
 801775e:	009b      	lsls	r3, r3, #2
 8017760:	4413      	add	r3, r2
 8017762:	009b      	lsls	r3, r3, #2
 8017764:	4a13      	ldr	r2, [pc, #76]	; (80177b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017766:	4413      	add	r3, r2
 8017768:	4299      	cmp	r1, r3
 801776a:	d11c      	bne.n	80177a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801776c:	69bb      	ldr	r3, [r7, #24]
 801776e:	3304      	adds	r3, #4
 8017770:	4618      	mov	r0, r3
 8017772:	f7fd feb1 	bl	80154d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017776:	69bb      	ldr	r3, [r7, #24]
 8017778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801777a:	4b0f      	ldr	r3, [pc, #60]	; (80177b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	429a      	cmp	r2, r3
 8017780:	d903      	bls.n	801778a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8017782:	69bb      	ldr	r3, [r7, #24]
 8017784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017786:	4a0c      	ldr	r2, [pc, #48]	; (80177b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8017788:	6013      	str	r3, [r2, #0]
 801778a:	69bb      	ldr	r3, [r7, #24]
 801778c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801778e:	4613      	mov	r3, r2
 8017790:	009b      	lsls	r3, r3, #2
 8017792:	4413      	add	r3, r2
 8017794:	009b      	lsls	r3, r3, #2
 8017796:	4a07      	ldr	r2, [pc, #28]	; (80177b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017798:	441a      	add	r2, r3
 801779a:	69bb      	ldr	r3, [r7, #24]
 801779c:	3304      	adds	r3, #4
 801779e:	4619      	mov	r1, r3
 80177a0:	4610      	mov	r0, r2
 80177a2:	f7fd fe3c 	bl	801541e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80177a6:	bf00      	nop
 80177a8:	3720      	adds	r7, #32
 80177aa:	46bd      	mov	sp, r7
 80177ac:	bd80      	pop	{r7, pc}
 80177ae:	bf00      	nop
 80177b0:	20000a6c 	.word	0x20000a6c
 80177b4:	20000a70 	.word	0x20000a70
 80177b8:	20000f48 	.word	0x20000f48

080177bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80177bc:	b480      	push	{r7}
 80177be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80177c0:	4b07      	ldr	r3, [pc, #28]	; (80177e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d004      	beq.n	80177d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80177c8:	4b05      	ldr	r3, [pc, #20]	; (80177e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80177ce:	3201      	adds	r2, #1
 80177d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80177d2:	4b03      	ldr	r3, [pc, #12]	; (80177e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80177d4:	681b      	ldr	r3, [r3, #0]
	}
 80177d6:	4618      	mov	r0, r3
 80177d8:	46bd      	mov	sp, r7
 80177da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177de:	4770      	bx	lr
 80177e0:	20000a6c 	.word	0x20000a6c

080177e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b084      	sub	sp, #16
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
 80177ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80177ee:	4b21      	ldr	r3, [pc, #132]	; (8017874 <prvAddCurrentTaskToDelayedList+0x90>)
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80177f4:	4b20      	ldr	r3, [pc, #128]	; (8017878 <prvAddCurrentTaskToDelayedList+0x94>)
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	3304      	adds	r3, #4
 80177fa:	4618      	mov	r0, r3
 80177fc:	f7fd fe6c 	bl	80154d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017806:	d10a      	bne.n	801781e <prvAddCurrentTaskToDelayedList+0x3a>
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d007      	beq.n	801781e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801780e:	4b1a      	ldr	r3, [pc, #104]	; (8017878 <prvAddCurrentTaskToDelayedList+0x94>)
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	3304      	adds	r3, #4
 8017814:	4619      	mov	r1, r3
 8017816:	4819      	ldr	r0, [pc, #100]	; (801787c <prvAddCurrentTaskToDelayedList+0x98>)
 8017818:	f7fd fe01 	bl	801541e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801781c:	e026      	b.n	801786c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801781e:	68fa      	ldr	r2, [r7, #12]
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	4413      	add	r3, r2
 8017824:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017826:	4b14      	ldr	r3, [pc, #80]	; (8017878 <prvAddCurrentTaskToDelayedList+0x94>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	68ba      	ldr	r2, [r7, #8]
 801782c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801782e:	68ba      	ldr	r2, [r7, #8]
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	429a      	cmp	r2, r3
 8017834:	d209      	bcs.n	801784a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017836:	4b12      	ldr	r3, [pc, #72]	; (8017880 <prvAddCurrentTaskToDelayedList+0x9c>)
 8017838:	681a      	ldr	r2, [r3, #0]
 801783a:	4b0f      	ldr	r3, [pc, #60]	; (8017878 <prvAddCurrentTaskToDelayedList+0x94>)
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	3304      	adds	r3, #4
 8017840:	4619      	mov	r1, r3
 8017842:	4610      	mov	r0, r2
 8017844:	f7fd fe0f 	bl	8015466 <vListInsert>
}
 8017848:	e010      	b.n	801786c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801784a:	4b0e      	ldr	r3, [pc, #56]	; (8017884 <prvAddCurrentTaskToDelayedList+0xa0>)
 801784c:	681a      	ldr	r2, [r3, #0]
 801784e:	4b0a      	ldr	r3, [pc, #40]	; (8017878 <prvAddCurrentTaskToDelayedList+0x94>)
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	3304      	adds	r3, #4
 8017854:	4619      	mov	r1, r3
 8017856:	4610      	mov	r0, r2
 8017858:	f7fd fe05 	bl	8015466 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801785c:	4b0a      	ldr	r3, [pc, #40]	; (8017888 <prvAddCurrentTaskToDelayedList+0xa4>)
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	68ba      	ldr	r2, [r7, #8]
 8017862:	429a      	cmp	r2, r3
 8017864:	d202      	bcs.n	801786c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017866:	4a08      	ldr	r2, [pc, #32]	; (8017888 <prvAddCurrentTaskToDelayedList+0xa4>)
 8017868:	68bb      	ldr	r3, [r7, #8]
 801786a:	6013      	str	r3, [r2, #0]
}
 801786c:	bf00      	nop
 801786e:	3710      	adds	r7, #16
 8017870:	46bd      	mov	sp, r7
 8017872:	bd80      	pop	{r7, pc}
 8017874:	20000f44 	.word	0x20000f44
 8017878:	20000a6c 	.word	0x20000a6c
 801787c:	20000f2c 	.word	0x20000f2c
 8017880:	20000efc 	.word	0x20000efc
 8017884:	20000ef8 	.word	0x20000ef8
 8017888:	20000f60 	.word	0x20000f60

0801788c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b08a      	sub	sp, #40	; 0x28
 8017890:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017892:	2300      	movs	r3, #0
 8017894:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017896:	f000 fb0d 	bl	8017eb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801789a:	4b1d      	ldr	r3, [pc, #116]	; (8017910 <xTimerCreateTimerTask+0x84>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d021      	beq.n	80178e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80178a2:	2300      	movs	r3, #0
 80178a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80178a6:	2300      	movs	r3, #0
 80178a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80178aa:	1d3a      	adds	r2, r7, #4
 80178ac:	f107 0108 	add.w	r1, r7, #8
 80178b0:	f107 030c 	add.w	r3, r7, #12
 80178b4:	4618      	mov	r0, r3
 80178b6:	f7fd fd6b 	bl	8015390 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80178ba:	6879      	ldr	r1, [r7, #4]
 80178bc:	68bb      	ldr	r3, [r7, #8]
 80178be:	68fa      	ldr	r2, [r7, #12]
 80178c0:	9202      	str	r2, [sp, #8]
 80178c2:	9301      	str	r3, [sp, #4]
 80178c4:	2302      	movs	r3, #2
 80178c6:	9300      	str	r3, [sp, #0]
 80178c8:	2300      	movs	r3, #0
 80178ca:	460a      	mov	r2, r1
 80178cc:	4911      	ldr	r1, [pc, #68]	; (8017914 <xTimerCreateTimerTask+0x88>)
 80178ce:	4812      	ldr	r0, [pc, #72]	; (8017918 <xTimerCreateTimerTask+0x8c>)
 80178d0:	f7fe ff30 	bl	8016734 <xTaskCreateStatic>
 80178d4:	4602      	mov	r2, r0
 80178d6:	4b11      	ldr	r3, [pc, #68]	; (801791c <xTimerCreateTimerTask+0x90>)
 80178d8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80178da:	4b10      	ldr	r3, [pc, #64]	; (801791c <xTimerCreateTimerTask+0x90>)
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d001      	beq.n	80178e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80178e2:	2301      	movs	r3, #1
 80178e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80178e6:	697b      	ldr	r3, [r7, #20]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d10b      	bne.n	8017904 <xTimerCreateTimerTask+0x78>
 80178ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178f0:	b672      	cpsid	i
 80178f2:	f383 8811 	msr	BASEPRI, r3
 80178f6:	f3bf 8f6f 	isb	sy
 80178fa:	f3bf 8f4f 	dsb	sy
 80178fe:	b662      	cpsie	i
 8017900:	613b      	str	r3, [r7, #16]
 8017902:	e7fe      	b.n	8017902 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8017904:	697b      	ldr	r3, [r7, #20]
}
 8017906:	4618      	mov	r0, r3
 8017908:	3718      	adds	r7, #24
 801790a:	46bd      	mov	sp, r7
 801790c:	bd80      	pop	{r7, pc}
 801790e:	bf00      	nop
 8017910:	20000f9c 	.word	0x20000f9c
 8017914:	0801c204 	.word	0x0801c204
 8017918:	08017a59 	.word	0x08017a59
 801791c:	20000fa0 	.word	0x20000fa0

08017920 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b08a      	sub	sp, #40	; 0x28
 8017924:	af00      	add	r7, sp, #0
 8017926:	60f8      	str	r0, [r7, #12]
 8017928:	60b9      	str	r1, [r7, #8]
 801792a:	607a      	str	r2, [r7, #4]
 801792c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801792e:	2300      	movs	r3, #0
 8017930:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d10b      	bne.n	8017950 <xTimerGenericCommand+0x30>
 8017938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801793c:	b672      	cpsid	i
 801793e:	f383 8811 	msr	BASEPRI, r3
 8017942:	f3bf 8f6f 	isb	sy
 8017946:	f3bf 8f4f 	dsb	sy
 801794a:	b662      	cpsie	i
 801794c:	623b      	str	r3, [r7, #32]
 801794e:	e7fe      	b.n	801794e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017950:	4b19      	ldr	r3, [pc, #100]	; (80179b8 <xTimerGenericCommand+0x98>)
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d02a      	beq.n	80179ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017958:	68bb      	ldr	r3, [r7, #8]
 801795a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017964:	68bb      	ldr	r3, [r7, #8]
 8017966:	2b05      	cmp	r3, #5
 8017968:	dc18      	bgt.n	801799c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801796a:	f7ff fdad 	bl	80174c8 <xTaskGetSchedulerState>
 801796e:	4603      	mov	r3, r0
 8017970:	2b02      	cmp	r3, #2
 8017972:	d109      	bne.n	8017988 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017974:	4b10      	ldr	r3, [pc, #64]	; (80179b8 <xTimerGenericCommand+0x98>)
 8017976:	6818      	ldr	r0, [r3, #0]
 8017978:	f107 0110 	add.w	r1, r7, #16
 801797c:	2300      	movs	r3, #0
 801797e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017980:	f7fe f860 	bl	8015a44 <xQueueGenericSend>
 8017984:	6278      	str	r0, [r7, #36]	; 0x24
 8017986:	e012      	b.n	80179ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017988:	4b0b      	ldr	r3, [pc, #44]	; (80179b8 <xTimerGenericCommand+0x98>)
 801798a:	6818      	ldr	r0, [r3, #0]
 801798c:	f107 0110 	add.w	r1, r7, #16
 8017990:	2300      	movs	r3, #0
 8017992:	2200      	movs	r2, #0
 8017994:	f7fe f856 	bl	8015a44 <xQueueGenericSend>
 8017998:	6278      	str	r0, [r7, #36]	; 0x24
 801799a:	e008      	b.n	80179ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801799c:	4b06      	ldr	r3, [pc, #24]	; (80179b8 <xTimerGenericCommand+0x98>)
 801799e:	6818      	ldr	r0, [r3, #0]
 80179a0:	f107 0110 	add.w	r1, r7, #16
 80179a4:	2300      	movs	r3, #0
 80179a6:	683a      	ldr	r2, [r7, #0]
 80179a8:	f7fe f94e 	bl	8015c48 <xQueueGenericSendFromISR>
 80179ac:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80179ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80179b0:	4618      	mov	r0, r3
 80179b2:	3728      	adds	r7, #40	; 0x28
 80179b4:	46bd      	mov	sp, r7
 80179b6:	bd80      	pop	{r7, pc}
 80179b8:	20000f9c 	.word	0x20000f9c

080179bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b088      	sub	sp, #32
 80179c0:	af02      	add	r7, sp, #8
 80179c2:	6078      	str	r0, [r7, #4]
 80179c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80179c6:	4b23      	ldr	r3, [pc, #140]	; (8017a54 <prvProcessExpiredTimer+0x98>)
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	68db      	ldr	r3, [r3, #12]
 80179cc:	68db      	ldr	r3, [r3, #12]
 80179ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80179d0:	697b      	ldr	r3, [r7, #20]
 80179d2:	3304      	adds	r3, #4
 80179d4:	4618      	mov	r0, r3
 80179d6:	f7fd fd7f 	bl	80154d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80179da:	697b      	ldr	r3, [r7, #20]
 80179dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179e0:	f003 0304 	and.w	r3, r3, #4
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d023      	beq.n	8017a30 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80179e8:	697b      	ldr	r3, [r7, #20]
 80179ea:	699a      	ldr	r2, [r3, #24]
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	18d1      	adds	r1, r2, r3
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	683a      	ldr	r2, [r7, #0]
 80179f4:	6978      	ldr	r0, [r7, #20]
 80179f6:	f000 f8d3 	bl	8017ba0 <prvInsertTimerInActiveList>
 80179fa:	4603      	mov	r3, r0
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d020      	beq.n	8017a42 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017a00:	2300      	movs	r3, #0
 8017a02:	9300      	str	r3, [sp, #0]
 8017a04:	2300      	movs	r3, #0
 8017a06:	687a      	ldr	r2, [r7, #4]
 8017a08:	2100      	movs	r1, #0
 8017a0a:	6978      	ldr	r0, [r7, #20]
 8017a0c:	f7ff ff88 	bl	8017920 <xTimerGenericCommand>
 8017a10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017a12:	693b      	ldr	r3, [r7, #16]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d114      	bne.n	8017a42 <prvProcessExpiredTimer+0x86>
 8017a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a1c:	b672      	cpsid	i
 8017a1e:	f383 8811 	msr	BASEPRI, r3
 8017a22:	f3bf 8f6f 	isb	sy
 8017a26:	f3bf 8f4f 	dsb	sy
 8017a2a:	b662      	cpsie	i
 8017a2c:	60fb      	str	r3, [r7, #12]
 8017a2e:	e7fe      	b.n	8017a2e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017a30:	697b      	ldr	r3, [r7, #20]
 8017a32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017a36:	f023 0301 	bic.w	r3, r3, #1
 8017a3a:	b2da      	uxtb	r2, r3
 8017a3c:	697b      	ldr	r3, [r7, #20]
 8017a3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017a42:	697b      	ldr	r3, [r7, #20]
 8017a44:	6a1b      	ldr	r3, [r3, #32]
 8017a46:	6978      	ldr	r0, [r7, #20]
 8017a48:	4798      	blx	r3
}
 8017a4a:	bf00      	nop
 8017a4c:	3718      	adds	r7, #24
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	bd80      	pop	{r7, pc}
 8017a52:	bf00      	nop
 8017a54:	20000f94 	.word	0x20000f94

08017a58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b084      	sub	sp, #16
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017a60:	f107 0308 	add.w	r3, r7, #8
 8017a64:	4618      	mov	r0, r3
 8017a66:	f000 f857 	bl	8017b18 <prvGetNextExpireTime>
 8017a6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017a6c:	68bb      	ldr	r3, [r7, #8]
 8017a6e:	4619      	mov	r1, r3
 8017a70:	68f8      	ldr	r0, [r7, #12]
 8017a72:	f000 f803 	bl	8017a7c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017a76:	f000 f8d5 	bl	8017c24 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017a7a:	e7f1      	b.n	8017a60 <prvTimerTask+0x8>

08017a7c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b084      	sub	sp, #16
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
 8017a84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017a86:	f7ff f919 	bl	8016cbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017a8a:	f107 0308 	add.w	r3, r7, #8
 8017a8e:	4618      	mov	r0, r3
 8017a90:	f000 f866 	bl	8017b60 <prvSampleTimeNow>
 8017a94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017a96:	68bb      	ldr	r3, [r7, #8]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d130      	bne.n	8017afe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017a9c:	683b      	ldr	r3, [r7, #0]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d10a      	bne.n	8017ab8 <prvProcessTimerOrBlockTask+0x3c>
 8017aa2:	687a      	ldr	r2, [r7, #4]
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	429a      	cmp	r2, r3
 8017aa8:	d806      	bhi.n	8017ab8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017aaa:	f7ff f915 	bl	8016cd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017aae:	68f9      	ldr	r1, [r7, #12]
 8017ab0:	6878      	ldr	r0, [r7, #4]
 8017ab2:	f7ff ff83 	bl	80179bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017ab6:	e024      	b.n	8017b02 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017ab8:	683b      	ldr	r3, [r7, #0]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d008      	beq.n	8017ad0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017abe:	4b13      	ldr	r3, [pc, #76]	; (8017b0c <prvProcessTimerOrBlockTask+0x90>)
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d101      	bne.n	8017acc <prvProcessTimerOrBlockTask+0x50>
 8017ac8:	2301      	movs	r3, #1
 8017aca:	e000      	b.n	8017ace <prvProcessTimerOrBlockTask+0x52>
 8017acc:	2300      	movs	r3, #0
 8017ace:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017ad0:	4b0f      	ldr	r3, [pc, #60]	; (8017b10 <prvProcessTimerOrBlockTask+0x94>)
 8017ad2:	6818      	ldr	r0, [r3, #0]
 8017ad4:	687a      	ldr	r2, [r7, #4]
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	1ad3      	subs	r3, r2, r3
 8017ada:	683a      	ldr	r2, [r7, #0]
 8017adc:	4619      	mov	r1, r3
 8017ade:	f7fe fdf5 	bl	80166cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017ae2:	f7ff f8f9 	bl	8016cd8 <xTaskResumeAll>
 8017ae6:	4603      	mov	r3, r0
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d10a      	bne.n	8017b02 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017aec:	4b09      	ldr	r3, [pc, #36]	; (8017b14 <prvProcessTimerOrBlockTask+0x98>)
 8017aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017af2:	601a      	str	r2, [r3, #0]
 8017af4:	f3bf 8f4f 	dsb	sy
 8017af8:	f3bf 8f6f 	isb	sy
}
 8017afc:	e001      	b.n	8017b02 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017afe:	f7ff f8eb 	bl	8016cd8 <xTaskResumeAll>
}
 8017b02:	bf00      	nop
 8017b04:	3710      	adds	r7, #16
 8017b06:	46bd      	mov	sp, r7
 8017b08:	bd80      	pop	{r7, pc}
 8017b0a:	bf00      	nop
 8017b0c:	20000f98 	.word	0x20000f98
 8017b10:	20000f9c 	.word	0x20000f9c
 8017b14:	e000ed04 	.word	0xe000ed04

08017b18 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017b18:	b480      	push	{r7}
 8017b1a:	b085      	sub	sp, #20
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017b20:	4b0e      	ldr	r3, [pc, #56]	; (8017b5c <prvGetNextExpireTime+0x44>)
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d101      	bne.n	8017b2e <prvGetNextExpireTime+0x16>
 8017b2a:	2201      	movs	r2, #1
 8017b2c:	e000      	b.n	8017b30 <prvGetNextExpireTime+0x18>
 8017b2e:	2200      	movs	r2, #0
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d105      	bne.n	8017b48 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017b3c:	4b07      	ldr	r3, [pc, #28]	; (8017b5c <prvGetNextExpireTime+0x44>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	68db      	ldr	r3, [r3, #12]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	60fb      	str	r3, [r7, #12]
 8017b46:	e001      	b.n	8017b4c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017b48:	2300      	movs	r3, #0
 8017b4a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017b4c:	68fb      	ldr	r3, [r7, #12]
}
 8017b4e:	4618      	mov	r0, r3
 8017b50:	3714      	adds	r7, #20
 8017b52:	46bd      	mov	sp, r7
 8017b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b58:	4770      	bx	lr
 8017b5a:	bf00      	nop
 8017b5c:	20000f94 	.word	0x20000f94

08017b60 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b084      	sub	sp, #16
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017b68:	f7ff f954 	bl	8016e14 <xTaskGetTickCount>
 8017b6c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017b6e:	4b0b      	ldr	r3, [pc, #44]	; (8017b9c <prvSampleTimeNow+0x3c>)
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	68fa      	ldr	r2, [r7, #12]
 8017b74:	429a      	cmp	r2, r3
 8017b76:	d205      	bcs.n	8017b84 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017b78:	f000 f936 	bl	8017de8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	2201      	movs	r2, #1
 8017b80:	601a      	str	r2, [r3, #0]
 8017b82:	e002      	b.n	8017b8a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	2200      	movs	r2, #0
 8017b88:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8017b8a:	4a04      	ldr	r2, [pc, #16]	; (8017b9c <prvSampleTimeNow+0x3c>)
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8017b90:	68fb      	ldr	r3, [r7, #12]
}
 8017b92:	4618      	mov	r0, r3
 8017b94:	3710      	adds	r7, #16
 8017b96:	46bd      	mov	sp, r7
 8017b98:	bd80      	pop	{r7, pc}
 8017b9a:	bf00      	nop
 8017b9c:	20000fa4 	.word	0x20000fa4

08017ba0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b086      	sub	sp, #24
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	60f8      	str	r0, [r7, #12]
 8017ba8:	60b9      	str	r1, [r7, #8]
 8017baa:	607a      	str	r2, [r7, #4]
 8017bac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8017bae:	2300      	movs	r3, #0
 8017bb0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	68ba      	ldr	r2, [r7, #8]
 8017bb6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	68fa      	ldr	r2, [r7, #12]
 8017bbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8017bbe:	68ba      	ldr	r2, [r7, #8]
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	429a      	cmp	r2, r3
 8017bc4:	d812      	bhi.n	8017bec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017bc6:	687a      	ldr	r2, [r7, #4]
 8017bc8:	683b      	ldr	r3, [r7, #0]
 8017bca:	1ad2      	subs	r2, r2, r3
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	699b      	ldr	r3, [r3, #24]
 8017bd0:	429a      	cmp	r2, r3
 8017bd2:	d302      	bcc.n	8017bda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017bd4:	2301      	movs	r3, #1
 8017bd6:	617b      	str	r3, [r7, #20]
 8017bd8:	e01b      	b.n	8017c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017bda:	4b10      	ldr	r3, [pc, #64]	; (8017c1c <prvInsertTimerInActiveList+0x7c>)
 8017bdc:	681a      	ldr	r2, [r3, #0]
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	3304      	adds	r3, #4
 8017be2:	4619      	mov	r1, r3
 8017be4:	4610      	mov	r0, r2
 8017be6:	f7fd fc3e 	bl	8015466 <vListInsert>
 8017bea:	e012      	b.n	8017c12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017bec:	687a      	ldr	r2, [r7, #4]
 8017bee:	683b      	ldr	r3, [r7, #0]
 8017bf0:	429a      	cmp	r2, r3
 8017bf2:	d206      	bcs.n	8017c02 <prvInsertTimerInActiveList+0x62>
 8017bf4:	68ba      	ldr	r2, [r7, #8]
 8017bf6:	683b      	ldr	r3, [r7, #0]
 8017bf8:	429a      	cmp	r2, r3
 8017bfa:	d302      	bcc.n	8017c02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017bfc:	2301      	movs	r3, #1
 8017bfe:	617b      	str	r3, [r7, #20]
 8017c00:	e007      	b.n	8017c12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017c02:	4b07      	ldr	r3, [pc, #28]	; (8017c20 <prvInsertTimerInActiveList+0x80>)
 8017c04:	681a      	ldr	r2, [r3, #0]
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	3304      	adds	r3, #4
 8017c0a:	4619      	mov	r1, r3
 8017c0c:	4610      	mov	r0, r2
 8017c0e:	f7fd fc2a 	bl	8015466 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8017c12:	697b      	ldr	r3, [r7, #20]
}
 8017c14:	4618      	mov	r0, r3
 8017c16:	3718      	adds	r7, #24
 8017c18:	46bd      	mov	sp, r7
 8017c1a:	bd80      	pop	{r7, pc}
 8017c1c:	20000f98 	.word	0x20000f98
 8017c20:	20000f94 	.word	0x20000f94

08017c24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b08e      	sub	sp, #56	; 0x38
 8017c28:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017c2a:	e0cc      	b.n	8017dc6 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	da19      	bge.n	8017c66 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8017c32:	1d3b      	adds	r3, r7, #4
 8017c34:	3304      	adds	r3, #4
 8017c36:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d10b      	bne.n	8017c56 <prvProcessReceivedCommands+0x32>
 8017c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c42:	b672      	cpsid	i
 8017c44:	f383 8811 	msr	BASEPRI, r3
 8017c48:	f3bf 8f6f 	isb	sy
 8017c4c:	f3bf 8f4f 	dsb	sy
 8017c50:	b662      	cpsie	i
 8017c52:	61fb      	str	r3, [r7, #28]
 8017c54:	e7fe      	b.n	8017c54 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c5c:	6850      	ldr	r0, [r2, #4]
 8017c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c60:	6892      	ldr	r2, [r2, #8]
 8017c62:	4611      	mov	r1, r2
 8017c64:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	f2c0 80ab 	blt.w	8017dc4 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c74:	695b      	ldr	r3, [r3, #20]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d004      	beq.n	8017c84 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c7c:	3304      	adds	r3, #4
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f7fd fc2a 	bl	80154d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017c84:	463b      	mov	r3, r7
 8017c86:	4618      	mov	r0, r3
 8017c88:	f7ff ff6a 	bl	8017b60 <prvSampleTimeNow>
 8017c8c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	2b09      	cmp	r3, #9
 8017c92:	f200 8098 	bhi.w	8017dc6 <prvProcessReceivedCommands+0x1a2>
 8017c96:	a201      	add	r2, pc, #4	; (adr r2, 8017c9c <prvProcessReceivedCommands+0x78>)
 8017c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c9c:	08017cc5 	.word	0x08017cc5
 8017ca0:	08017cc5 	.word	0x08017cc5
 8017ca4:	08017cc5 	.word	0x08017cc5
 8017ca8:	08017d3b 	.word	0x08017d3b
 8017cac:	08017d4f 	.word	0x08017d4f
 8017cb0:	08017d9b 	.word	0x08017d9b
 8017cb4:	08017cc5 	.word	0x08017cc5
 8017cb8:	08017cc5 	.word	0x08017cc5
 8017cbc:	08017d3b 	.word	0x08017d3b
 8017cc0:	08017d4f 	.word	0x08017d4f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017cca:	f043 0301 	orr.w	r3, r3, #1
 8017cce:	b2da      	uxtb	r2, r3
 8017cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017cd6:	68ba      	ldr	r2, [r7, #8]
 8017cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cda:	699b      	ldr	r3, [r3, #24]
 8017cdc:	18d1      	adds	r1, r2, r3
 8017cde:	68bb      	ldr	r3, [r7, #8]
 8017ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ce4:	f7ff ff5c 	bl	8017ba0 <prvInsertTimerInActiveList>
 8017ce8:	4603      	mov	r3, r0
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d06b      	beq.n	8017dc6 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf0:	6a1b      	ldr	r3, [r3, #32]
 8017cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017cfc:	f003 0304 	and.w	r3, r3, #4
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d060      	beq.n	8017dc6 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017d04:	68ba      	ldr	r2, [r7, #8]
 8017d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d08:	699b      	ldr	r3, [r3, #24]
 8017d0a:	441a      	add	r2, r3
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	9300      	str	r3, [sp, #0]
 8017d10:	2300      	movs	r3, #0
 8017d12:	2100      	movs	r1, #0
 8017d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d16:	f7ff fe03 	bl	8017920 <xTimerGenericCommand>
 8017d1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017d1c:	6a3b      	ldr	r3, [r7, #32]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d151      	bne.n	8017dc6 <prvProcessReceivedCommands+0x1a2>
 8017d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d26:	b672      	cpsid	i
 8017d28:	f383 8811 	msr	BASEPRI, r3
 8017d2c:	f3bf 8f6f 	isb	sy
 8017d30:	f3bf 8f4f 	dsb	sy
 8017d34:	b662      	cpsie	i
 8017d36:	61bb      	str	r3, [r7, #24]
 8017d38:	e7fe      	b.n	8017d38 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d40:	f023 0301 	bic.w	r3, r3, #1
 8017d44:	b2da      	uxtb	r2, r3
 8017d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017d4c:	e03b      	b.n	8017dc6 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017d54:	f043 0301 	orr.w	r3, r3, #1
 8017d58:	b2da      	uxtb	r2, r3
 8017d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017d60:	68ba      	ldr	r2, [r7, #8]
 8017d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d64:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d68:	699b      	ldr	r3, [r3, #24]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d10b      	bne.n	8017d86 <prvProcessReceivedCommands+0x162>
 8017d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d72:	b672      	cpsid	i
 8017d74:	f383 8811 	msr	BASEPRI, r3
 8017d78:	f3bf 8f6f 	isb	sy
 8017d7c:	f3bf 8f4f 	dsb	sy
 8017d80:	b662      	cpsie	i
 8017d82:	617b      	str	r3, [r7, #20]
 8017d84:	e7fe      	b.n	8017d84 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8017d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d88:	699a      	ldr	r2, [r3, #24]
 8017d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d8c:	18d1      	adds	r1, r2, r3
 8017d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d94:	f7ff ff04 	bl	8017ba0 <prvInsertTimerInActiveList>
					break;
 8017d98:	e015      	b.n	8017dc6 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017da0:	f003 0302 	and.w	r3, r3, #2
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d103      	bne.n	8017db0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8017da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017daa:	f000 fbb7 	bl	801851c <vPortFree>
 8017dae:	e00a      	b.n	8017dc6 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017db2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017db6:	f023 0301 	bic.w	r3, r3, #1
 8017dba:	b2da      	uxtb	r2, r3
 8017dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017dc2:	e000      	b.n	8017dc6 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8017dc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017dc6:	4b07      	ldr	r3, [pc, #28]	; (8017de4 <prvProcessReceivedCommands+0x1c0>)
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	1d39      	adds	r1, r7, #4
 8017dcc:	2200      	movs	r2, #0
 8017dce:	4618      	mov	r0, r3
 8017dd0:	f7fe f868 	bl	8015ea4 <xQueueReceive>
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	f47f af28 	bne.w	8017c2c <prvProcessReceivedCommands+0x8>
	}
}
 8017ddc:	bf00      	nop
 8017dde:	3730      	adds	r7, #48	; 0x30
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}
 8017de4:	20000f9c 	.word	0x20000f9c

08017de8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017de8:	b580      	push	{r7, lr}
 8017dea:	b088      	sub	sp, #32
 8017dec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017dee:	e049      	b.n	8017e84 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017df0:	4b2e      	ldr	r3, [pc, #184]	; (8017eac <prvSwitchTimerLists+0xc4>)
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	68db      	ldr	r3, [r3, #12]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017dfa:	4b2c      	ldr	r3, [pc, #176]	; (8017eac <prvSwitchTimerLists+0xc4>)
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	68db      	ldr	r3, [r3, #12]
 8017e00:	68db      	ldr	r3, [r3, #12]
 8017e02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	3304      	adds	r3, #4
 8017e08:	4618      	mov	r0, r3
 8017e0a:	f7fd fb65 	bl	80154d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	6a1b      	ldr	r3, [r3, #32]
 8017e12:	68f8      	ldr	r0, [r7, #12]
 8017e14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e1c:	f003 0304 	and.w	r3, r3, #4
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d02f      	beq.n	8017e84 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	699b      	ldr	r3, [r3, #24]
 8017e28:	693a      	ldr	r2, [r7, #16]
 8017e2a:	4413      	add	r3, r2
 8017e2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8017e2e:	68ba      	ldr	r2, [r7, #8]
 8017e30:	693b      	ldr	r3, [r7, #16]
 8017e32:	429a      	cmp	r2, r3
 8017e34:	d90e      	bls.n	8017e54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	68ba      	ldr	r2, [r7, #8]
 8017e3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	68fa      	ldr	r2, [r7, #12]
 8017e40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8017e42:	4b1a      	ldr	r3, [pc, #104]	; (8017eac <prvSwitchTimerLists+0xc4>)
 8017e44:	681a      	ldr	r2, [r3, #0]
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	3304      	adds	r3, #4
 8017e4a:	4619      	mov	r1, r3
 8017e4c:	4610      	mov	r0, r2
 8017e4e:	f7fd fb0a 	bl	8015466 <vListInsert>
 8017e52:	e017      	b.n	8017e84 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017e54:	2300      	movs	r3, #0
 8017e56:	9300      	str	r3, [sp, #0]
 8017e58:	2300      	movs	r3, #0
 8017e5a:	693a      	ldr	r2, [r7, #16]
 8017e5c:	2100      	movs	r1, #0
 8017e5e:	68f8      	ldr	r0, [r7, #12]
 8017e60:	f7ff fd5e 	bl	8017920 <xTimerGenericCommand>
 8017e64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d10b      	bne.n	8017e84 <prvSwitchTimerLists+0x9c>
 8017e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e70:	b672      	cpsid	i
 8017e72:	f383 8811 	msr	BASEPRI, r3
 8017e76:	f3bf 8f6f 	isb	sy
 8017e7a:	f3bf 8f4f 	dsb	sy
 8017e7e:	b662      	cpsie	i
 8017e80:	603b      	str	r3, [r7, #0]
 8017e82:	e7fe      	b.n	8017e82 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017e84:	4b09      	ldr	r3, [pc, #36]	; (8017eac <prvSwitchTimerLists+0xc4>)
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d1b0      	bne.n	8017df0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8017e8e:	4b07      	ldr	r3, [pc, #28]	; (8017eac <prvSwitchTimerLists+0xc4>)
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017e94:	4b06      	ldr	r3, [pc, #24]	; (8017eb0 <prvSwitchTimerLists+0xc8>)
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	4a04      	ldr	r2, [pc, #16]	; (8017eac <prvSwitchTimerLists+0xc4>)
 8017e9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017e9c:	4a04      	ldr	r2, [pc, #16]	; (8017eb0 <prvSwitchTimerLists+0xc8>)
 8017e9e:	697b      	ldr	r3, [r7, #20]
 8017ea0:	6013      	str	r3, [r2, #0]
}
 8017ea2:	bf00      	nop
 8017ea4:	3718      	adds	r7, #24
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}
 8017eaa:	bf00      	nop
 8017eac:	20000f94 	.word	0x20000f94
 8017eb0:	20000f98 	.word	0x20000f98

08017eb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b082      	sub	sp, #8
 8017eb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017eba:	f000 f945 	bl	8018148 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8017ebe:	4b15      	ldr	r3, [pc, #84]	; (8017f14 <prvCheckForValidListAndQueue+0x60>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d120      	bne.n	8017f08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017ec6:	4814      	ldr	r0, [pc, #80]	; (8017f18 <prvCheckForValidListAndQueue+0x64>)
 8017ec8:	f7fd fa7c 	bl	80153c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017ecc:	4813      	ldr	r0, [pc, #76]	; (8017f1c <prvCheckForValidListAndQueue+0x68>)
 8017ece:	f7fd fa79 	bl	80153c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017ed2:	4b13      	ldr	r3, [pc, #76]	; (8017f20 <prvCheckForValidListAndQueue+0x6c>)
 8017ed4:	4a10      	ldr	r2, [pc, #64]	; (8017f18 <prvCheckForValidListAndQueue+0x64>)
 8017ed6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017ed8:	4b12      	ldr	r3, [pc, #72]	; (8017f24 <prvCheckForValidListAndQueue+0x70>)
 8017eda:	4a10      	ldr	r2, [pc, #64]	; (8017f1c <prvCheckForValidListAndQueue+0x68>)
 8017edc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017ede:	2300      	movs	r3, #0
 8017ee0:	9300      	str	r3, [sp, #0]
 8017ee2:	4b11      	ldr	r3, [pc, #68]	; (8017f28 <prvCheckForValidListAndQueue+0x74>)
 8017ee4:	4a11      	ldr	r2, [pc, #68]	; (8017f2c <prvCheckForValidListAndQueue+0x78>)
 8017ee6:	2110      	movs	r1, #16
 8017ee8:	200a      	movs	r0, #10
 8017eea:	f7fd fb89 	bl	8015600 <xQueueGenericCreateStatic>
 8017eee:	4602      	mov	r2, r0
 8017ef0:	4b08      	ldr	r3, [pc, #32]	; (8017f14 <prvCheckForValidListAndQueue+0x60>)
 8017ef2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017ef4:	4b07      	ldr	r3, [pc, #28]	; (8017f14 <prvCheckForValidListAndQueue+0x60>)
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d005      	beq.n	8017f08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017efc:	4b05      	ldr	r3, [pc, #20]	; (8017f14 <prvCheckForValidListAndQueue+0x60>)
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	490b      	ldr	r1, [pc, #44]	; (8017f30 <prvCheckForValidListAndQueue+0x7c>)
 8017f02:	4618      	mov	r0, r3
 8017f04:	f7fe fb90 	bl	8016628 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017f08:	f000 f950 	bl	80181ac <vPortExitCritical>
}
 8017f0c:	bf00      	nop
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}
 8017f12:	bf00      	nop
 8017f14:	20000f9c 	.word	0x20000f9c
 8017f18:	20000f6c 	.word	0x20000f6c
 8017f1c:	20000f80 	.word	0x20000f80
 8017f20:	20000f94 	.word	0x20000f94
 8017f24:	20000f98 	.word	0x20000f98
 8017f28:	20001048 	.word	0x20001048
 8017f2c:	20000fa8 	.word	0x20000fa8
 8017f30:	0801c20c 	.word	0x0801c20c

08017f34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8017f34:	b480      	push	{r7}
 8017f36:	b085      	sub	sp, #20
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	60f8      	str	r0, [r7, #12]
 8017f3c:	60b9      	str	r1, [r7, #8]
 8017f3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	3b04      	subs	r3, #4
 8017f44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017f46:	68fb      	ldr	r3, [r7, #12]
 8017f48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017f4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	3b04      	subs	r3, #4
 8017f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017f54:	68bb      	ldr	r3, [r7, #8]
 8017f56:	f023 0201 	bic.w	r2, r3, #1
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	3b04      	subs	r3, #4
 8017f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017f64:	4a0c      	ldr	r2, [pc, #48]	; (8017f98 <pxPortInitialiseStack+0x64>)
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	3b14      	subs	r3, #20
 8017f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017f70:	687a      	ldr	r2, [r7, #4]
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	3b04      	subs	r3, #4
 8017f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	f06f 0202 	mvn.w	r2, #2
 8017f82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	3b20      	subs	r3, #32
 8017f88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017f8a:	68fb      	ldr	r3, [r7, #12]
}
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	3714      	adds	r7, #20
 8017f90:	46bd      	mov	sp, r7
 8017f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f96:	4770      	bx	lr
 8017f98:	08017f9d 	.word	0x08017f9d

08017f9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017f9c:	b480      	push	{r7}
 8017f9e:	b085      	sub	sp, #20
 8017fa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017fa6:	4b13      	ldr	r3, [pc, #76]	; (8017ff4 <prvTaskExitError+0x58>)
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fae:	d00b      	beq.n	8017fc8 <prvTaskExitError+0x2c>
 8017fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fb4:	b672      	cpsid	i
 8017fb6:	f383 8811 	msr	BASEPRI, r3
 8017fba:	f3bf 8f6f 	isb	sy
 8017fbe:	f3bf 8f4f 	dsb	sy
 8017fc2:	b662      	cpsie	i
 8017fc4:	60fb      	str	r3, [r7, #12]
 8017fc6:	e7fe      	b.n	8017fc6 <prvTaskExitError+0x2a>
 8017fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fcc:	b672      	cpsid	i
 8017fce:	f383 8811 	msr	BASEPRI, r3
 8017fd2:	f3bf 8f6f 	isb	sy
 8017fd6:	f3bf 8f4f 	dsb	sy
 8017fda:	b662      	cpsie	i
 8017fdc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017fde:	bf00      	nop
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d0fc      	beq.n	8017fe0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017fe6:	bf00      	nop
 8017fe8:	3714      	adds	r7, #20
 8017fea:	46bd      	mov	sp, r7
 8017fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff0:	4770      	bx	lr
 8017ff2:	bf00      	nop
 8017ff4:	200001a4 	.word	0x200001a4
	...

08018000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018000:	4b07      	ldr	r3, [pc, #28]	; (8018020 <pxCurrentTCBConst2>)
 8018002:	6819      	ldr	r1, [r3, #0]
 8018004:	6808      	ldr	r0, [r1, #0]
 8018006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801800a:	f380 8809 	msr	PSP, r0
 801800e:	f3bf 8f6f 	isb	sy
 8018012:	f04f 0000 	mov.w	r0, #0
 8018016:	f380 8811 	msr	BASEPRI, r0
 801801a:	4770      	bx	lr
 801801c:	f3af 8000 	nop.w

08018020 <pxCurrentTCBConst2>:
 8018020:	20000a6c 	.word	0x20000a6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018024:	bf00      	nop
 8018026:	bf00      	nop

08018028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018028:	4808      	ldr	r0, [pc, #32]	; (801804c <prvPortStartFirstTask+0x24>)
 801802a:	6800      	ldr	r0, [r0, #0]
 801802c:	6800      	ldr	r0, [r0, #0]
 801802e:	f380 8808 	msr	MSP, r0
 8018032:	f04f 0000 	mov.w	r0, #0
 8018036:	f380 8814 	msr	CONTROL, r0
 801803a:	b662      	cpsie	i
 801803c:	b661      	cpsie	f
 801803e:	f3bf 8f4f 	dsb	sy
 8018042:	f3bf 8f6f 	isb	sy
 8018046:	df00      	svc	0
 8018048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801804a:	bf00      	nop
 801804c:	e000ed08 	.word	0xe000ed08

08018050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b084      	sub	sp, #16
 8018054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018056:	4b36      	ldr	r3, [pc, #216]	; (8018130 <xPortStartScheduler+0xe0>)
 8018058:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	781b      	ldrb	r3, [r3, #0]
 801805e:	b2db      	uxtb	r3, r3
 8018060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	22ff      	movs	r2, #255	; 0xff
 8018066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	781b      	ldrb	r3, [r3, #0]
 801806c:	b2db      	uxtb	r3, r3
 801806e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018070:	78fb      	ldrb	r3, [r7, #3]
 8018072:	b2db      	uxtb	r3, r3
 8018074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018078:	b2da      	uxtb	r2, r3
 801807a:	4b2e      	ldr	r3, [pc, #184]	; (8018134 <xPortStartScheduler+0xe4>)
 801807c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801807e:	4b2e      	ldr	r3, [pc, #184]	; (8018138 <xPortStartScheduler+0xe8>)
 8018080:	2207      	movs	r2, #7
 8018082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018084:	e009      	b.n	801809a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8018086:	4b2c      	ldr	r3, [pc, #176]	; (8018138 <xPortStartScheduler+0xe8>)
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	3b01      	subs	r3, #1
 801808c:	4a2a      	ldr	r2, [pc, #168]	; (8018138 <xPortStartScheduler+0xe8>)
 801808e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018090:	78fb      	ldrb	r3, [r7, #3]
 8018092:	b2db      	uxtb	r3, r3
 8018094:	005b      	lsls	r3, r3, #1
 8018096:	b2db      	uxtb	r3, r3
 8018098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801809a:	78fb      	ldrb	r3, [r7, #3]
 801809c:	b2db      	uxtb	r3, r3
 801809e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80180a2:	2b80      	cmp	r3, #128	; 0x80
 80180a4:	d0ef      	beq.n	8018086 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80180a6:	4b24      	ldr	r3, [pc, #144]	; (8018138 <xPortStartScheduler+0xe8>)
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	f1c3 0307 	rsb	r3, r3, #7
 80180ae:	2b04      	cmp	r3, #4
 80180b0:	d00b      	beq.n	80180ca <xPortStartScheduler+0x7a>
 80180b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180b6:	b672      	cpsid	i
 80180b8:	f383 8811 	msr	BASEPRI, r3
 80180bc:	f3bf 8f6f 	isb	sy
 80180c0:	f3bf 8f4f 	dsb	sy
 80180c4:	b662      	cpsie	i
 80180c6:	60bb      	str	r3, [r7, #8]
 80180c8:	e7fe      	b.n	80180c8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80180ca:	4b1b      	ldr	r3, [pc, #108]	; (8018138 <xPortStartScheduler+0xe8>)
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	021b      	lsls	r3, r3, #8
 80180d0:	4a19      	ldr	r2, [pc, #100]	; (8018138 <xPortStartScheduler+0xe8>)
 80180d2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80180d4:	4b18      	ldr	r3, [pc, #96]	; (8018138 <xPortStartScheduler+0xe8>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80180dc:	4a16      	ldr	r2, [pc, #88]	; (8018138 <xPortStartScheduler+0xe8>)
 80180de:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	b2da      	uxtb	r2, r3
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80180e8:	4b14      	ldr	r3, [pc, #80]	; (801813c <xPortStartScheduler+0xec>)
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	4a13      	ldr	r2, [pc, #76]	; (801813c <xPortStartScheduler+0xec>)
 80180ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80180f2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80180f4:	4b11      	ldr	r3, [pc, #68]	; (801813c <xPortStartScheduler+0xec>)
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	4a10      	ldr	r2, [pc, #64]	; (801813c <xPortStartScheduler+0xec>)
 80180fa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80180fe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018100:	f000 f8d4 	bl	80182ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018104:	4b0e      	ldr	r3, [pc, #56]	; (8018140 <xPortStartScheduler+0xf0>)
 8018106:	2200      	movs	r2, #0
 8018108:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801810a:	f000 f8f3 	bl	80182f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801810e:	4b0d      	ldr	r3, [pc, #52]	; (8018144 <xPortStartScheduler+0xf4>)
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	4a0c      	ldr	r2, [pc, #48]	; (8018144 <xPortStartScheduler+0xf4>)
 8018114:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018118:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801811a:	f7ff ff85 	bl	8018028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801811e:	f7fe ff55 	bl	8016fcc <vTaskSwitchContext>
	prvTaskExitError();
 8018122:	f7ff ff3b 	bl	8017f9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018126:	2300      	movs	r3, #0
}
 8018128:	4618      	mov	r0, r3
 801812a:	3710      	adds	r7, #16
 801812c:	46bd      	mov	sp, r7
 801812e:	bd80      	pop	{r7, pc}
 8018130:	e000e400 	.word	0xe000e400
 8018134:	20001098 	.word	0x20001098
 8018138:	2000109c 	.word	0x2000109c
 801813c:	e000ed20 	.word	0xe000ed20
 8018140:	200001a4 	.word	0x200001a4
 8018144:	e000ef34 	.word	0xe000ef34

08018148 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018148:	b480      	push	{r7}
 801814a:	b083      	sub	sp, #12
 801814c:	af00      	add	r7, sp, #0
 801814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018152:	b672      	cpsid	i
 8018154:	f383 8811 	msr	BASEPRI, r3
 8018158:	f3bf 8f6f 	isb	sy
 801815c:	f3bf 8f4f 	dsb	sy
 8018160:	b662      	cpsie	i
 8018162:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018164:	4b0f      	ldr	r3, [pc, #60]	; (80181a4 <vPortEnterCritical+0x5c>)
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	3301      	adds	r3, #1
 801816a:	4a0e      	ldr	r2, [pc, #56]	; (80181a4 <vPortEnterCritical+0x5c>)
 801816c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801816e:	4b0d      	ldr	r3, [pc, #52]	; (80181a4 <vPortEnterCritical+0x5c>)
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	2b01      	cmp	r3, #1
 8018174:	d110      	bne.n	8018198 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018176:	4b0c      	ldr	r3, [pc, #48]	; (80181a8 <vPortEnterCritical+0x60>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	b2db      	uxtb	r3, r3
 801817c:	2b00      	cmp	r3, #0
 801817e:	d00b      	beq.n	8018198 <vPortEnterCritical+0x50>
 8018180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018184:	b672      	cpsid	i
 8018186:	f383 8811 	msr	BASEPRI, r3
 801818a:	f3bf 8f6f 	isb	sy
 801818e:	f3bf 8f4f 	dsb	sy
 8018192:	b662      	cpsie	i
 8018194:	603b      	str	r3, [r7, #0]
 8018196:	e7fe      	b.n	8018196 <vPortEnterCritical+0x4e>
	}
}
 8018198:	bf00      	nop
 801819a:	370c      	adds	r7, #12
 801819c:	46bd      	mov	sp, r7
 801819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181a2:	4770      	bx	lr
 80181a4:	200001a4 	.word	0x200001a4
 80181a8:	e000ed04 	.word	0xe000ed04

080181ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80181ac:	b480      	push	{r7}
 80181ae:	b083      	sub	sp, #12
 80181b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80181b2:	4b12      	ldr	r3, [pc, #72]	; (80181fc <vPortExitCritical+0x50>)
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d10b      	bne.n	80181d2 <vPortExitCritical+0x26>
 80181ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181be:	b672      	cpsid	i
 80181c0:	f383 8811 	msr	BASEPRI, r3
 80181c4:	f3bf 8f6f 	isb	sy
 80181c8:	f3bf 8f4f 	dsb	sy
 80181cc:	b662      	cpsie	i
 80181ce:	607b      	str	r3, [r7, #4]
 80181d0:	e7fe      	b.n	80181d0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80181d2:	4b0a      	ldr	r3, [pc, #40]	; (80181fc <vPortExitCritical+0x50>)
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	3b01      	subs	r3, #1
 80181d8:	4a08      	ldr	r2, [pc, #32]	; (80181fc <vPortExitCritical+0x50>)
 80181da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80181dc:	4b07      	ldr	r3, [pc, #28]	; (80181fc <vPortExitCritical+0x50>)
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d104      	bne.n	80181ee <vPortExitCritical+0x42>
 80181e4:	2300      	movs	r3, #0
 80181e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80181e8:	683b      	ldr	r3, [r7, #0]
 80181ea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80181ee:	bf00      	nop
 80181f0:	370c      	adds	r7, #12
 80181f2:	46bd      	mov	sp, r7
 80181f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f8:	4770      	bx	lr
 80181fa:	bf00      	nop
 80181fc:	200001a4 	.word	0x200001a4

08018200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018200:	f3ef 8009 	mrs	r0, PSP
 8018204:	f3bf 8f6f 	isb	sy
 8018208:	4b15      	ldr	r3, [pc, #84]	; (8018260 <pxCurrentTCBConst>)
 801820a:	681a      	ldr	r2, [r3, #0]
 801820c:	f01e 0f10 	tst.w	lr, #16
 8018210:	bf08      	it	eq
 8018212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801821a:	6010      	str	r0, [r2, #0]
 801821c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018224:	b672      	cpsid	i
 8018226:	f380 8811 	msr	BASEPRI, r0
 801822a:	f3bf 8f4f 	dsb	sy
 801822e:	f3bf 8f6f 	isb	sy
 8018232:	b662      	cpsie	i
 8018234:	f7fe feca 	bl	8016fcc <vTaskSwitchContext>
 8018238:	f04f 0000 	mov.w	r0, #0
 801823c:	f380 8811 	msr	BASEPRI, r0
 8018240:	bc09      	pop	{r0, r3}
 8018242:	6819      	ldr	r1, [r3, #0]
 8018244:	6808      	ldr	r0, [r1, #0]
 8018246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801824a:	f01e 0f10 	tst.w	lr, #16
 801824e:	bf08      	it	eq
 8018250:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018254:	f380 8809 	msr	PSP, r0
 8018258:	f3bf 8f6f 	isb	sy
 801825c:	4770      	bx	lr
 801825e:	bf00      	nop

08018260 <pxCurrentTCBConst>:
 8018260:	20000a6c 	.word	0x20000a6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018264:	bf00      	nop
 8018266:	bf00      	nop

08018268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018268:	b580      	push	{r7, lr}
 801826a:	b082      	sub	sp, #8
 801826c:	af00      	add	r7, sp, #0
	__asm volatile
 801826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018272:	b672      	cpsid	i
 8018274:	f383 8811 	msr	BASEPRI, r3
 8018278:	f3bf 8f6f 	isb	sy
 801827c:	f3bf 8f4f 	dsb	sy
 8018280:	b662      	cpsie	i
 8018282:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018284:	f7fe fde8 	bl	8016e58 <xTaskIncrementTick>
 8018288:	4603      	mov	r3, r0
 801828a:	2b00      	cmp	r3, #0
 801828c:	d003      	beq.n	8018296 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801828e:	4b06      	ldr	r3, [pc, #24]	; (80182a8 <SysTick_Handler+0x40>)
 8018290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018294:	601a      	str	r2, [r3, #0]
 8018296:	2300      	movs	r3, #0
 8018298:	603b      	str	r3, [r7, #0]
	__asm volatile
 801829a:	683b      	ldr	r3, [r7, #0]
 801829c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80182a0:	bf00      	nop
 80182a2:	3708      	adds	r7, #8
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd80      	pop	{r7, pc}
 80182a8:	e000ed04 	.word	0xe000ed04

080182ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80182ac:	b480      	push	{r7}
 80182ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80182b0:	4b0b      	ldr	r3, [pc, #44]	; (80182e0 <vPortSetupTimerInterrupt+0x34>)
 80182b2:	2200      	movs	r2, #0
 80182b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80182b6:	4b0b      	ldr	r3, [pc, #44]	; (80182e4 <vPortSetupTimerInterrupt+0x38>)
 80182b8:	2200      	movs	r2, #0
 80182ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80182bc:	4b0a      	ldr	r3, [pc, #40]	; (80182e8 <vPortSetupTimerInterrupt+0x3c>)
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	4a0a      	ldr	r2, [pc, #40]	; (80182ec <vPortSetupTimerInterrupt+0x40>)
 80182c2:	fba2 2303 	umull	r2, r3, r2, r3
 80182c6:	099b      	lsrs	r3, r3, #6
 80182c8:	4a09      	ldr	r2, [pc, #36]	; (80182f0 <vPortSetupTimerInterrupt+0x44>)
 80182ca:	3b01      	subs	r3, #1
 80182cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80182ce:	4b04      	ldr	r3, [pc, #16]	; (80182e0 <vPortSetupTimerInterrupt+0x34>)
 80182d0:	2207      	movs	r2, #7
 80182d2:	601a      	str	r2, [r3, #0]
}
 80182d4:	bf00      	nop
 80182d6:	46bd      	mov	sp, r7
 80182d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182dc:	4770      	bx	lr
 80182de:	bf00      	nop
 80182e0:	e000e010 	.word	0xe000e010
 80182e4:	e000e018 	.word	0xe000e018
 80182e8:	20000000 	.word	0x20000000
 80182ec:	10624dd3 	.word	0x10624dd3
 80182f0:	e000e014 	.word	0xe000e014

080182f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80182f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018304 <vPortEnableVFP+0x10>
 80182f8:	6801      	ldr	r1, [r0, #0]
 80182fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80182fe:	6001      	str	r1, [r0, #0]
 8018300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018302:	bf00      	nop
 8018304:	e000ed88 	.word	0xe000ed88

08018308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018308:	b480      	push	{r7}
 801830a:	b085      	sub	sp, #20
 801830c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801830e:	f3ef 8305 	mrs	r3, IPSR
 8018312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	2b0f      	cmp	r3, #15
 8018318:	d915      	bls.n	8018346 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801831a:	4a18      	ldr	r2, [pc, #96]	; (801837c <vPortValidateInterruptPriority+0x74>)
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	4413      	add	r3, r2
 8018320:	781b      	ldrb	r3, [r3, #0]
 8018322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8018324:	4b16      	ldr	r3, [pc, #88]	; (8018380 <vPortValidateInterruptPriority+0x78>)
 8018326:	781b      	ldrb	r3, [r3, #0]
 8018328:	7afa      	ldrb	r2, [r7, #11]
 801832a:	429a      	cmp	r2, r3
 801832c:	d20b      	bcs.n	8018346 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018332:	b672      	cpsid	i
 8018334:	f383 8811 	msr	BASEPRI, r3
 8018338:	f3bf 8f6f 	isb	sy
 801833c:	f3bf 8f4f 	dsb	sy
 8018340:	b662      	cpsie	i
 8018342:	607b      	str	r3, [r7, #4]
 8018344:	e7fe      	b.n	8018344 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018346:	4b0f      	ldr	r3, [pc, #60]	; (8018384 <vPortValidateInterruptPriority+0x7c>)
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801834e:	4b0e      	ldr	r3, [pc, #56]	; (8018388 <vPortValidateInterruptPriority+0x80>)
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	429a      	cmp	r2, r3
 8018354:	d90b      	bls.n	801836e <vPortValidateInterruptPriority+0x66>
 8018356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801835a:	b672      	cpsid	i
 801835c:	f383 8811 	msr	BASEPRI, r3
 8018360:	f3bf 8f6f 	isb	sy
 8018364:	f3bf 8f4f 	dsb	sy
 8018368:	b662      	cpsie	i
 801836a:	603b      	str	r3, [r7, #0]
 801836c:	e7fe      	b.n	801836c <vPortValidateInterruptPriority+0x64>
	}
 801836e:	bf00      	nop
 8018370:	3714      	adds	r7, #20
 8018372:	46bd      	mov	sp, r7
 8018374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018378:	4770      	bx	lr
 801837a:	bf00      	nop
 801837c:	e000e3f0 	.word	0xe000e3f0
 8018380:	20001098 	.word	0x20001098
 8018384:	e000ed0c 	.word	0xe000ed0c
 8018388:	2000109c 	.word	0x2000109c

0801838c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b08a      	sub	sp, #40	; 0x28
 8018390:	af00      	add	r7, sp, #0
 8018392:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018394:	2300      	movs	r3, #0
 8018396:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018398:	f7fe fc90 	bl	8016cbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801839c:	4b5a      	ldr	r3, [pc, #360]	; (8018508 <pvPortMalloc+0x17c>)
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d101      	bne.n	80183a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80183a4:	f000 f916 	bl	80185d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80183a8:	4b58      	ldr	r3, [pc, #352]	; (801850c <pvPortMalloc+0x180>)
 80183aa:	681a      	ldr	r2, [r3, #0]
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	4013      	ands	r3, r2
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	f040 8090 	bne.w	80184d6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d01e      	beq.n	80183fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80183bc:	2208      	movs	r2, #8
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	4413      	add	r3, r2
 80183c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	f003 0307 	and.w	r3, r3, #7
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d015      	beq.n	80183fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	f023 0307 	bic.w	r3, r3, #7
 80183d4:	3308      	adds	r3, #8
 80183d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	f003 0307 	and.w	r3, r3, #7
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d00b      	beq.n	80183fa <pvPortMalloc+0x6e>
 80183e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183e6:	b672      	cpsid	i
 80183e8:	f383 8811 	msr	BASEPRI, r3
 80183ec:	f3bf 8f6f 	isb	sy
 80183f0:	f3bf 8f4f 	dsb	sy
 80183f4:	b662      	cpsie	i
 80183f6:	617b      	str	r3, [r7, #20]
 80183f8:	e7fe      	b.n	80183f8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d06a      	beq.n	80184d6 <pvPortMalloc+0x14a>
 8018400:	4b43      	ldr	r3, [pc, #268]	; (8018510 <pvPortMalloc+0x184>)
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	687a      	ldr	r2, [r7, #4]
 8018406:	429a      	cmp	r2, r3
 8018408:	d865      	bhi.n	80184d6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801840a:	4b42      	ldr	r3, [pc, #264]	; (8018514 <pvPortMalloc+0x188>)
 801840c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801840e:	4b41      	ldr	r3, [pc, #260]	; (8018514 <pvPortMalloc+0x188>)
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018414:	e004      	b.n	8018420 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8018416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018418:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8018420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018422:	685b      	ldr	r3, [r3, #4]
 8018424:	687a      	ldr	r2, [r7, #4]
 8018426:	429a      	cmp	r2, r3
 8018428:	d903      	bls.n	8018432 <pvPortMalloc+0xa6>
 801842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d1f1      	bne.n	8018416 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8018432:	4b35      	ldr	r3, [pc, #212]	; (8018508 <pvPortMalloc+0x17c>)
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018438:	429a      	cmp	r2, r3
 801843a:	d04c      	beq.n	80184d6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801843c:	6a3b      	ldr	r3, [r7, #32]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	2208      	movs	r2, #8
 8018442:	4413      	add	r3, r2
 8018444:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018448:	681a      	ldr	r2, [r3, #0]
 801844a:	6a3b      	ldr	r3, [r7, #32]
 801844c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018450:	685a      	ldr	r2, [r3, #4]
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	1ad2      	subs	r2, r2, r3
 8018456:	2308      	movs	r3, #8
 8018458:	005b      	lsls	r3, r3, #1
 801845a:	429a      	cmp	r2, r3
 801845c:	d920      	bls.n	80184a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801845e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	4413      	add	r3, r2
 8018464:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018466:	69bb      	ldr	r3, [r7, #24]
 8018468:	f003 0307 	and.w	r3, r3, #7
 801846c:	2b00      	cmp	r3, #0
 801846e:	d00b      	beq.n	8018488 <pvPortMalloc+0xfc>
 8018470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018474:	b672      	cpsid	i
 8018476:	f383 8811 	msr	BASEPRI, r3
 801847a:	f3bf 8f6f 	isb	sy
 801847e:	f3bf 8f4f 	dsb	sy
 8018482:	b662      	cpsie	i
 8018484:	613b      	str	r3, [r7, #16]
 8018486:	e7fe      	b.n	8018486 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801848a:	685a      	ldr	r2, [r3, #4]
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	1ad2      	subs	r2, r2, r3
 8018490:	69bb      	ldr	r3, [r7, #24]
 8018492:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8018494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018496:	687a      	ldr	r2, [r7, #4]
 8018498:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801849a:	69b8      	ldr	r0, [r7, #24]
 801849c:	f000 f8fc 	bl	8018698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80184a0:	4b1b      	ldr	r3, [pc, #108]	; (8018510 <pvPortMalloc+0x184>)
 80184a2:	681a      	ldr	r2, [r3, #0]
 80184a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184a6:	685b      	ldr	r3, [r3, #4]
 80184a8:	1ad3      	subs	r3, r2, r3
 80184aa:	4a19      	ldr	r2, [pc, #100]	; (8018510 <pvPortMalloc+0x184>)
 80184ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80184ae:	4b18      	ldr	r3, [pc, #96]	; (8018510 <pvPortMalloc+0x184>)
 80184b0:	681a      	ldr	r2, [r3, #0]
 80184b2:	4b19      	ldr	r3, [pc, #100]	; (8018518 <pvPortMalloc+0x18c>)
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	429a      	cmp	r2, r3
 80184b8:	d203      	bcs.n	80184c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80184ba:	4b15      	ldr	r3, [pc, #84]	; (8018510 <pvPortMalloc+0x184>)
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	4a16      	ldr	r2, [pc, #88]	; (8018518 <pvPortMalloc+0x18c>)
 80184c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80184c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c4:	685a      	ldr	r2, [r3, #4]
 80184c6:	4b11      	ldr	r3, [pc, #68]	; (801850c <pvPortMalloc+0x180>)
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	431a      	orrs	r2, r3
 80184cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80184d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184d2:	2200      	movs	r2, #0
 80184d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80184d6:	f7fe fbff 	bl	8016cd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80184da:	69fb      	ldr	r3, [r7, #28]
 80184dc:	f003 0307 	and.w	r3, r3, #7
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d00b      	beq.n	80184fc <pvPortMalloc+0x170>
 80184e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184e8:	b672      	cpsid	i
 80184ea:	f383 8811 	msr	BASEPRI, r3
 80184ee:	f3bf 8f6f 	isb	sy
 80184f2:	f3bf 8f4f 	dsb	sy
 80184f6:	b662      	cpsie	i
 80184f8:	60fb      	str	r3, [r7, #12]
 80184fa:	e7fe      	b.n	80184fa <pvPortMalloc+0x16e>
	return pvReturn;
 80184fc:	69fb      	ldr	r3, [r7, #28]
}
 80184fe:	4618      	mov	r0, r3
 8018500:	3728      	adds	r7, #40	; 0x28
 8018502:	46bd      	mov	sp, r7
 8018504:	bd80      	pop	{r7, pc}
 8018506:	bf00      	nop
 8018508:	200088a8 	.word	0x200088a8
 801850c:	200088b4 	.word	0x200088b4
 8018510:	200088ac 	.word	0x200088ac
 8018514:	200088a0 	.word	0x200088a0
 8018518:	200088b0 	.word	0x200088b0

0801851c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801851c:	b580      	push	{r7, lr}
 801851e:	b086      	sub	sp, #24
 8018520:	af00      	add	r7, sp, #0
 8018522:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d04a      	beq.n	80185c4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801852e:	2308      	movs	r3, #8
 8018530:	425b      	negs	r3, r3
 8018532:	697a      	ldr	r2, [r7, #20]
 8018534:	4413      	add	r3, r2
 8018536:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8018538:	697b      	ldr	r3, [r7, #20]
 801853a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801853c:	693b      	ldr	r3, [r7, #16]
 801853e:	685a      	ldr	r2, [r3, #4]
 8018540:	4b22      	ldr	r3, [pc, #136]	; (80185cc <vPortFree+0xb0>)
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	4013      	ands	r3, r2
 8018546:	2b00      	cmp	r3, #0
 8018548:	d10b      	bne.n	8018562 <vPortFree+0x46>
 801854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801854e:	b672      	cpsid	i
 8018550:	f383 8811 	msr	BASEPRI, r3
 8018554:	f3bf 8f6f 	isb	sy
 8018558:	f3bf 8f4f 	dsb	sy
 801855c:	b662      	cpsie	i
 801855e:	60fb      	str	r3, [r7, #12]
 8018560:	e7fe      	b.n	8018560 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018562:	693b      	ldr	r3, [r7, #16]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d00b      	beq.n	8018582 <vPortFree+0x66>
 801856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801856e:	b672      	cpsid	i
 8018570:	f383 8811 	msr	BASEPRI, r3
 8018574:	f3bf 8f6f 	isb	sy
 8018578:	f3bf 8f4f 	dsb	sy
 801857c:	b662      	cpsie	i
 801857e:	60bb      	str	r3, [r7, #8]
 8018580:	e7fe      	b.n	8018580 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018582:	693b      	ldr	r3, [r7, #16]
 8018584:	685a      	ldr	r2, [r3, #4]
 8018586:	4b11      	ldr	r3, [pc, #68]	; (80185cc <vPortFree+0xb0>)
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	4013      	ands	r3, r2
 801858c:	2b00      	cmp	r3, #0
 801858e:	d019      	beq.n	80185c4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018590:	693b      	ldr	r3, [r7, #16]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	2b00      	cmp	r3, #0
 8018596:	d115      	bne.n	80185c4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018598:	693b      	ldr	r3, [r7, #16]
 801859a:	685a      	ldr	r2, [r3, #4]
 801859c:	4b0b      	ldr	r3, [pc, #44]	; (80185cc <vPortFree+0xb0>)
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	43db      	mvns	r3, r3
 80185a2:	401a      	ands	r2, r3
 80185a4:	693b      	ldr	r3, [r7, #16]
 80185a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80185a8:	f7fe fb88 	bl	8016cbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80185ac:	693b      	ldr	r3, [r7, #16]
 80185ae:	685a      	ldr	r2, [r3, #4]
 80185b0:	4b07      	ldr	r3, [pc, #28]	; (80185d0 <vPortFree+0xb4>)
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	4413      	add	r3, r2
 80185b6:	4a06      	ldr	r2, [pc, #24]	; (80185d0 <vPortFree+0xb4>)
 80185b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80185ba:	6938      	ldr	r0, [r7, #16]
 80185bc:	f000 f86c 	bl	8018698 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80185c0:	f7fe fb8a 	bl	8016cd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80185c4:	bf00      	nop
 80185c6:	3718      	adds	r7, #24
 80185c8:	46bd      	mov	sp, r7
 80185ca:	bd80      	pop	{r7, pc}
 80185cc:	200088b4 	.word	0x200088b4
 80185d0:	200088ac 	.word	0x200088ac

080185d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80185d4:	b480      	push	{r7}
 80185d6:	b085      	sub	sp, #20
 80185d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80185da:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80185de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80185e0:	4b27      	ldr	r3, [pc, #156]	; (8018680 <prvHeapInit+0xac>)
 80185e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	f003 0307 	and.w	r3, r3, #7
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d00c      	beq.n	8018608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	3307      	adds	r3, #7
 80185f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	f023 0307 	bic.w	r3, r3, #7
 80185fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80185fc:	68ba      	ldr	r2, [r7, #8]
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	1ad3      	subs	r3, r2, r3
 8018602:	4a1f      	ldr	r2, [pc, #124]	; (8018680 <prvHeapInit+0xac>)
 8018604:	4413      	add	r3, r2
 8018606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801860c:	4a1d      	ldr	r2, [pc, #116]	; (8018684 <prvHeapInit+0xb0>)
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018612:	4b1c      	ldr	r3, [pc, #112]	; (8018684 <prvHeapInit+0xb0>)
 8018614:	2200      	movs	r2, #0
 8018616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	68ba      	ldr	r2, [r7, #8]
 801861c:	4413      	add	r3, r2
 801861e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018620:	2208      	movs	r2, #8
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	1a9b      	subs	r3, r3, r2
 8018626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	f023 0307 	bic.w	r3, r3, #7
 801862e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	4a15      	ldr	r2, [pc, #84]	; (8018688 <prvHeapInit+0xb4>)
 8018634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018636:	4b14      	ldr	r3, [pc, #80]	; (8018688 <prvHeapInit+0xb4>)
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	2200      	movs	r2, #0
 801863c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801863e:	4b12      	ldr	r3, [pc, #72]	; (8018688 <prvHeapInit+0xb4>)
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	2200      	movs	r2, #0
 8018644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801864a:	683b      	ldr	r3, [r7, #0]
 801864c:	68fa      	ldr	r2, [r7, #12]
 801864e:	1ad2      	subs	r2, r2, r3
 8018650:	683b      	ldr	r3, [r7, #0]
 8018652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018654:	4b0c      	ldr	r3, [pc, #48]	; (8018688 <prvHeapInit+0xb4>)
 8018656:	681a      	ldr	r2, [r3, #0]
 8018658:	683b      	ldr	r3, [r7, #0]
 801865a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801865c:	683b      	ldr	r3, [r7, #0]
 801865e:	685b      	ldr	r3, [r3, #4]
 8018660:	4a0a      	ldr	r2, [pc, #40]	; (801868c <prvHeapInit+0xb8>)
 8018662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018664:	683b      	ldr	r3, [r7, #0]
 8018666:	685b      	ldr	r3, [r3, #4]
 8018668:	4a09      	ldr	r2, [pc, #36]	; (8018690 <prvHeapInit+0xbc>)
 801866a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801866c:	4b09      	ldr	r3, [pc, #36]	; (8018694 <prvHeapInit+0xc0>)
 801866e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018672:	601a      	str	r2, [r3, #0]
}
 8018674:	bf00      	nop
 8018676:	3714      	adds	r7, #20
 8018678:	46bd      	mov	sp, r7
 801867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867e:	4770      	bx	lr
 8018680:	200010a0 	.word	0x200010a0
 8018684:	200088a0 	.word	0x200088a0
 8018688:	200088a8 	.word	0x200088a8
 801868c:	200088b0 	.word	0x200088b0
 8018690:	200088ac 	.word	0x200088ac
 8018694:	200088b4 	.word	0x200088b4

08018698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018698:	b480      	push	{r7}
 801869a:	b085      	sub	sp, #20
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80186a0:	4b28      	ldr	r3, [pc, #160]	; (8018744 <prvInsertBlockIntoFreeList+0xac>)
 80186a2:	60fb      	str	r3, [r7, #12]
 80186a4:	e002      	b.n	80186ac <prvInsertBlockIntoFreeList+0x14>
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	60fb      	str	r3, [r7, #12]
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	687a      	ldr	r2, [r7, #4]
 80186b2:	429a      	cmp	r2, r3
 80186b4:	d8f7      	bhi.n	80186a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	685b      	ldr	r3, [r3, #4]
 80186be:	68ba      	ldr	r2, [r7, #8]
 80186c0:	4413      	add	r3, r2
 80186c2:	687a      	ldr	r2, [r7, #4]
 80186c4:	429a      	cmp	r2, r3
 80186c6:	d108      	bne.n	80186da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	685a      	ldr	r2, [r3, #4]
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	685b      	ldr	r3, [r3, #4]
 80186d0:	441a      	add	r2, r3
 80186d2:	68fb      	ldr	r3, [r7, #12]
 80186d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	685b      	ldr	r3, [r3, #4]
 80186e2:	68ba      	ldr	r2, [r7, #8]
 80186e4:	441a      	add	r2, r3
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	429a      	cmp	r2, r3
 80186ec:	d118      	bne.n	8018720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	681a      	ldr	r2, [r3, #0]
 80186f2:	4b15      	ldr	r3, [pc, #84]	; (8018748 <prvInsertBlockIntoFreeList+0xb0>)
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	429a      	cmp	r2, r3
 80186f8:	d00d      	beq.n	8018716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	685a      	ldr	r2, [r3, #4]
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	685b      	ldr	r3, [r3, #4]
 8018704:	441a      	add	r2, r3
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	681a      	ldr	r2, [r3, #0]
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	601a      	str	r2, [r3, #0]
 8018714:	e008      	b.n	8018728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018716:	4b0c      	ldr	r3, [pc, #48]	; (8018748 <prvInsertBlockIntoFreeList+0xb0>)
 8018718:	681a      	ldr	r2, [r3, #0]
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	601a      	str	r2, [r3, #0]
 801871e:	e003      	b.n	8018728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	681a      	ldr	r2, [r3, #0]
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018728:	68fa      	ldr	r2, [r7, #12]
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	429a      	cmp	r2, r3
 801872e:	d002      	beq.n	8018736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	687a      	ldr	r2, [r7, #4]
 8018734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018736:	bf00      	nop
 8018738:	3714      	adds	r7, #20
 801873a:	46bd      	mov	sp, r7
 801873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018740:	4770      	bx	lr
 8018742:	bf00      	nop
 8018744:	200088a0 	.word	0x200088a0
 8018748:	200088a8 	.word	0x200088a8

0801874c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801874c:	b580      	push	{r7, lr}
 801874e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018750:	2200      	movs	r2, #0
 8018752:	4912      	ldr	r1, [pc, #72]	; (801879c <MX_USB_DEVICE_Init+0x50>)
 8018754:	4812      	ldr	r0, [pc, #72]	; (80187a0 <MX_USB_DEVICE_Init+0x54>)
 8018756:	f7f7 ff2b 	bl	80105b0 <USBD_Init>
 801875a:	4603      	mov	r3, r0
 801875c:	2b00      	cmp	r3, #0
 801875e:	d001      	beq.n	8018764 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018760:	f7eb feec 	bl	800453c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018764:	490f      	ldr	r1, [pc, #60]	; (80187a4 <MX_USB_DEVICE_Init+0x58>)
 8018766:	480e      	ldr	r0, [pc, #56]	; (80187a0 <MX_USB_DEVICE_Init+0x54>)
 8018768:	f7f7 ff58 	bl	801061c <USBD_RegisterClass>
 801876c:	4603      	mov	r3, r0
 801876e:	2b00      	cmp	r3, #0
 8018770:	d001      	beq.n	8018776 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018772:	f7eb fee3 	bl	800453c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8018776:	490c      	ldr	r1, [pc, #48]	; (80187a8 <MX_USB_DEVICE_Init+0x5c>)
 8018778:	4809      	ldr	r0, [pc, #36]	; (80187a0 <MX_USB_DEVICE_Init+0x54>)
 801877a:	f7f7 fe7d 	bl	8010478 <USBD_CDC_RegisterInterface>
 801877e:	4603      	mov	r3, r0
 8018780:	2b00      	cmp	r3, #0
 8018782:	d001      	beq.n	8018788 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018784:	f7eb feda 	bl	800453c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018788:	4805      	ldr	r0, [pc, #20]	; (80187a0 <MX_USB_DEVICE_Init+0x54>)
 801878a:	f7f7 ff68 	bl	801065e <USBD_Start>
 801878e:	4603      	mov	r3, r0
 8018790:	2b00      	cmp	r3, #0
 8018792:	d001      	beq.n	8018798 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018794:	f7eb fed2 	bl	800453c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018798:	bf00      	nop
 801879a:	bd80      	pop	{r7, pc}
 801879c:	200001bc 	.word	0x200001bc
 80187a0:	2001a94c 	.word	0x2001a94c
 80187a4:	200000a0 	.word	0x200000a0
 80187a8:	200001a8 	.word	0x200001a8

080187ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80187b0:	2200      	movs	r2, #0
 80187b2:	4905      	ldr	r1, [pc, #20]	; (80187c8 <CDC_Init_FS+0x1c>)
 80187b4:	4805      	ldr	r0, [pc, #20]	; (80187cc <CDC_Init_FS+0x20>)
 80187b6:	f7f7 fe74 	bl	80104a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80187ba:	4905      	ldr	r1, [pc, #20]	; (80187d0 <CDC_Init_FS+0x24>)
 80187bc:	4803      	ldr	r0, [pc, #12]	; (80187cc <CDC_Init_FS+0x20>)
 80187be:	f7f7 fe89 	bl	80104d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80187c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80187c4:	4618      	mov	r0, r3
 80187c6:	bd80      	pop	{r7, pc}
 80187c8:	2001b41c 	.word	0x2001b41c
 80187cc:	2001a94c 	.word	0x2001a94c
 80187d0:	2001ac1c 	.word	0x2001ac1c

080187d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80187d4:	b480      	push	{r7}
 80187d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80187d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80187da:	4618      	mov	r0, r3
 80187dc:	46bd      	mov	sp, r7
 80187de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e2:	4770      	bx	lr

080187e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80187e4:	b480      	push	{r7}
 80187e6:	b083      	sub	sp, #12
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	4603      	mov	r3, r0
 80187ec:	6039      	str	r1, [r7, #0]
 80187ee:	71fb      	strb	r3, [r7, #7]
 80187f0:	4613      	mov	r3, r2
 80187f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80187f4:	79fb      	ldrb	r3, [r7, #7]
 80187f6:	2b23      	cmp	r3, #35	; 0x23
 80187f8:	d84a      	bhi.n	8018890 <CDC_Control_FS+0xac>
 80187fa:	a201      	add	r2, pc, #4	; (adr r2, 8018800 <CDC_Control_FS+0x1c>)
 80187fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018800:	08018891 	.word	0x08018891
 8018804:	08018891 	.word	0x08018891
 8018808:	08018891 	.word	0x08018891
 801880c:	08018891 	.word	0x08018891
 8018810:	08018891 	.word	0x08018891
 8018814:	08018891 	.word	0x08018891
 8018818:	08018891 	.word	0x08018891
 801881c:	08018891 	.word	0x08018891
 8018820:	08018891 	.word	0x08018891
 8018824:	08018891 	.word	0x08018891
 8018828:	08018891 	.word	0x08018891
 801882c:	08018891 	.word	0x08018891
 8018830:	08018891 	.word	0x08018891
 8018834:	08018891 	.word	0x08018891
 8018838:	08018891 	.word	0x08018891
 801883c:	08018891 	.word	0x08018891
 8018840:	08018891 	.word	0x08018891
 8018844:	08018891 	.word	0x08018891
 8018848:	08018891 	.word	0x08018891
 801884c:	08018891 	.word	0x08018891
 8018850:	08018891 	.word	0x08018891
 8018854:	08018891 	.word	0x08018891
 8018858:	08018891 	.word	0x08018891
 801885c:	08018891 	.word	0x08018891
 8018860:	08018891 	.word	0x08018891
 8018864:	08018891 	.word	0x08018891
 8018868:	08018891 	.word	0x08018891
 801886c:	08018891 	.word	0x08018891
 8018870:	08018891 	.word	0x08018891
 8018874:	08018891 	.word	0x08018891
 8018878:	08018891 	.word	0x08018891
 801887c:	08018891 	.word	0x08018891
 8018880:	08018891 	.word	0x08018891
 8018884:	08018891 	.word	0x08018891
 8018888:	08018891 	.word	0x08018891
 801888c:	08018891 	.word	0x08018891
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018890:	bf00      	nop
  }

  return (USBD_OK);
 8018892:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018894:	4618      	mov	r0, r3
 8018896:	370c      	adds	r7, #12
 8018898:	46bd      	mov	sp, r7
 801889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801889e:	4770      	bx	lr

080188a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b082      	sub	sp, #8
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	6078      	str	r0, [r7, #4]
 80188a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80188aa:	6879      	ldr	r1, [r7, #4]
 80188ac:	4805      	ldr	r0, [pc, #20]	; (80188c4 <CDC_Receive_FS+0x24>)
 80188ae:	f7f7 fe11 	bl	80104d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80188b2:	4804      	ldr	r0, [pc, #16]	; (80188c4 <CDC_Receive_FS+0x24>)
 80188b4:	f7f7 fe52 	bl	801055c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80188b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80188ba:	4618      	mov	r0, r3
 80188bc:	3708      	adds	r7, #8
 80188be:	46bd      	mov	sp, r7
 80188c0:	bd80      	pop	{r7, pc}
 80188c2:	bf00      	nop
 80188c4:	2001a94c 	.word	0x2001a94c

080188c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80188c8:	b580      	push	{r7, lr}
 80188ca:	b084      	sub	sp, #16
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	6078      	str	r0, [r7, #4]
 80188d0:	460b      	mov	r3, r1
 80188d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80188d4:	2300      	movs	r3, #0
 80188d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80188d8:	4b0d      	ldr	r3, [pc, #52]	; (8018910 <CDC_Transmit_FS+0x48>)
 80188da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80188de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80188e0:	68bb      	ldr	r3, [r7, #8]
 80188e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d001      	beq.n	80188ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80188ea:	2301      	movs	r3, #1
 80188ec:	e00b      	b.n	8018906 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80188ee:	887b      	ldrh	r3, [r7, #2]
 80188f0:	461a      	mov	r2, r3
 80188f2:	6879      	ldr	r1, [r7, #4]
 80188f4:	4806      	ldr	r0, [pc, #24]	; (8018910 <CDC_Transmit_FS+0x48>)
 80188f6:	f7f7 fdd4 	bl	80104a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80188fa:	4805      	ldr	r0, [pc, #20]	; (8018910 <CDC_Transmit_FS+0x48>)
 80188fc:	f7f7 fdfe 	bl	80104fc <USBD_CDC_TransmitPacket>
 8018900:	4603      	mov	r3, r0
 8018902:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8018904:	7bfb      	ldrb	r3, [r7, #15]
}
 8018906:	4618      	mov	r0, r3
 8018908:	3710      	adds	r7, #16
 801890a:	46bd      	mov	sp, r7
 801890c:	bd80      	pop	{r7, pc}
 801890e:	bf00      	nop
 8018910:	2001a94c 	.word	0x2001a94c

08018914 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018914:	b480      	push	{r7}
 8018916:	b087      	sub	sp, #28
 8018918:	af00      	add	r7, sp, #0
 801891a:	60f8      	str	r0, [r7, #12]
 801891c:	60b9      	str	r1, [r7, #8]
 801891e:	4613      	mov	r3, r2
 8018920:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018922:	2300      	movs	r3, #0
 8018924:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018926:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801892a:	4618      	mov	r0, r3
 801892c:	371c      	adds	r7, #28
 801892e:	46bd      	mov	sp, r7
 8018930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018934:	4770      	bx	lr
	...

08018938 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018938:	b480      	push	{r7}
 801893a:	b083      	sub	sp, #12
 801893c:	af00      	add	r7, sp, #0
 801893e:	4603      	mov	r3, r0
 8018940:	6039      	str	r1, [r7, #0]
 8018942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018944:	683b      	ldr	r3, [r7, #0]
 8018946:	2212      	movs	r2, #18
 8018948:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801894a:	4b03      	ldr	r3, [pc, #12]	; (8018958 <USBD_FS_DeviceDescriptor+0x20>)
}
 801894c:	4618      	mov	r0, r3
 801894e:	370c      	adds	r7, #12
 8018950:	46bd      	mov	sp, r7
 8018952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018956:	4770      	bx	lr
 8018958:	200001dc 	.word	0x200001dc

0801895c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801895c:	b480      	push	{r7}
 801895e:	b083      	sub	sp, #12
 8018960:	af00      	add	r7, sp, #0
 8018962:	4603      	mov	r3, r0
 8018964:	6039      	str	r1, [r7, #0]
 8018966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018968:	683b      	ldr	r3, [r7, #0]
 801896a:	2204      	movs	r2, #4
 801896c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801896e:	4b03      	ldr	r3, [pc, #12]	; (801897c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018970:	4618      	mov	r0, r3
 8018972:	370c      	adds	r7, #12
 8018974:	46bd      	mov	sp, r7
 8018976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897a:	4770      	bx	lr
 801897c:	200001fc 	.word	0x200001fc

08018980 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018980:	b580      	push	{r7, lr}
 8018982:	b082      	sub	sp, #8
 8018984:	af00      	add	r7, sp, #0
 8018986:	4603      	mov	r3, r0
 8018988:	6039      	str	r1, [r7, #0]
 801898a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801898c:	79fb      	ldrb	r3, [r7, #7]
 801898e:	2b00      	cmp	r3, #0
 8018990:	d105      	bne.n	801899e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018992:	683a      	ldr	r2, [r7, #0]
 8018994:	4907      	ldr	r1, [pc, #28]	; (80189b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8018996:	4808      	ldr	r0, [pc, #32]	; (80189b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8018998:	f7f8 fe59 	bl	801164e <USBD_GetString>
 801899c:	e004      	b.n	80189a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801899e:	683a      	ldr	r2, [r7, #0]
 80189a0:	4904      	ldr	r1, [pc, #16]	; (80189b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80189a2:	4805      	ldr	r0, [pc, #20]	; (80189b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80189a4:	f7f8 fe53 	bl	801164e <USBD_GetString>
  }
  return USBD_StrDesc;
 80189a8:	4b02      	ldr	r3, [pc, #8]	; (80189b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80189aa:	4618      	mov	r0, r3
 80189ac:	3708      	adds	r7, #8
 80189ae:	46bd      	mov	sp, r7
 80189b0:	bd80      	pop	{r7, pc}
 80189b2:	bf00      	nop
 80189b4:	2001bc1c 	.word	0x2001bc1c
 80189b8:	0801c214 	.word	0x0801c214

080189bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b082      	sub	sp, #8
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	4603      	mov	r3, r0
 80189c4:	6039      	str	r1, [r7, #0]
 80189c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80189c8:	683a      	ldr	r2, [r7, #0]
 80189ca:	4904      	ldr	r1, [pc, #16]	; (80189dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80189cc:	4804      	ldr	r0, [pc, #16]	; (80189e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80189ce:	f7f8 fe3e 	bl	801164e <USBD_GetString>
  return USBD_StrDesc;
 80189d2:	4b02      	ldr	r3, [pc, #8]	; (80189dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80189d4:	4618      	mov	r0, r3
 80189d6:	3708      	adds	r7, #8
 80189d8:	46bd      	mov	sp, r7
 80189da:	bd80      	pop	{r7, pc}
 80189dc:	2001bc1c 	.word	0x2001bc1c
 80189e0:	0801c22c 	.word	0x0801c22c

080189e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b082      	sub	sp, #8
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	4603      	mov	r3, r0
 80189ec:	6039      	str	r1, [r7, #0]
 80189ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80189f0:	683b      	ldr	r3, [r7, #0]
 80189f2:	221a      	movs	r2, #26
 80189f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80189f6:	f000 f855 	bl	8018aa4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80189fa:	4b02      	ldr	r3, [pc, #8]	; (8018a04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80189fc:	4618      	mov	r0, r3
 80189fe:	3708      	adds	r7, #8
 8018a00:	46bd      	mov	sp, r7
 8018a02:	bd80      	pop	{r7, pc}
 8018a04:	20000200 	.word	0x20000200

08018a08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	b082      	sub	sp, #8
 8018a0c:	af00      	add	r7, sp, #0
 8018a0e:	4603      	mov	r3, r0
 8018a10:	6039      	str	r1, [r7, #0]
 8018a12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018a14:	79fb      	ldrb	r3, [r7, #7]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d105      	bne.n	8018a26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018a1a:	683a      	ldr	r2, [r7, #0]
 8018a1c:	4907      	ldr	r1, [pc, #28]	; (8018a3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8018a1e:	4808      	ldr	r0, [pc, #32]	; (8018a40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018a20:	f7f8 fe15 	bl	801164e <USBD_GetString>
 8018a24:	e004      	b.n	8018a30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018a26:	683a      	ldr	r2, [r7, #0]
 8018a28:	4904      	ldr	r1, [pc, #16]	; (8018a3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8018a2a:	4805      	ldr	r0, [pc, #20]	; (8018a40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018a2c:	f7f8 fe0f 	bl	801164e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a30:	4b02      	ldr	r3, [pc, #8]	; (8018a3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018a32:	4618      	mov	r0, r3
 8018a34:	3708      	adds	r7, #8
 8018a36:	46bd      	mov	sp, r7
 8018a38:	bd80      	pop	{r7, pc}
 8018a3a:	bf00      	nop
 8018a3c:	2001bc1c 	.word	0x2001bc1c
 8018a40:	0801c240 	.word	0x0801c240

08018a44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b082      	sub	sp, #8
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	6039      	str	r1, [r7, #0]
 8018a4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018a50:	79fb      	ldrb	r3, [r7, #7]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d105      	bne.n	8018a62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018a56:	683a      	ldr	r2, [r7, #0]
 8018a58:	4907      	ldr	r1, [pc, #28]	; (8018a78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018a5a:	4808      	ldr	r0, [pc, #32]	; (8018a7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018a5c:	f7f8 fdf7 	bl	801164e <USBD_GetString>
 8018a60:	e004      	b.n	8018a6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018a62:	683a      	ldr	r2, [r7, #0]
 8018a64:	4904      	ldr	r1, [pc, #16]	; (8018a78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018a66:	4805      	ldr	r0, [pc, #20]	; (8018a7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018a68:	f7f8 fdf1 	bl	801164e <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a6c:	4b02      	ldr	r3, [pc, #8]	; (8018a78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018a6e:	4618      	mov	r0, r3
 8018a70:	3708      	adds	r7, #8
 8018a72:	46bd      	mov	sp, r7
 8018a74:	bd80      	pop	{r7, pc}
 8018a76:	bf00      	nop
 8018a78:	2001bc1c 	.word	0x2001bc1c
 8018a7c:	0801c24c 	.word	0x0801c24c

08018a80 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a80:	b480      	push	{r7}
 8018a82:	b083      	sub	sp, #12
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	4603      	mov	r3, r0
 8018a88:	6039      	str	r1, [r7, #0]
 8018a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8018a8c:	683b      	ldr	r3, [r7, #0]
 8018a8e:	220c      	movs	r2, #12
 8018a90:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8018a92:	4b03      	ldr	r3, [pc, #12]	; (8018aa0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8018a94:	4618      	mov	r0, r3
 8018a96:	370c      	adds	r7, #12
 8018a98:	46bd      	mov	sp, r7
 8018a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9e:	4770      	bx	lr
 8018aa0:	200001f0 	.word	0x200001f0

08018aa4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	b084      	sub	sp, #16
 8018aa8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018aaa:	4b0f      	ldr	r3, [pc, #60]	; (8018ae8 <Get_SerialNum+0x44>)
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018ab0:	4b0e      	ldr	r3, [pc, #56]	; (8018aec <Get_SerialNum+0x48>)
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018ab6:	4b0e      	ldr	r3, [pc, #56]	; (8018af0 <Get_SerialNum+0x4c>)
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018abc:	68fa      	ldr	r2, [r7, #12]
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	4413      	add	r3, r2
 8018ac2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d009      	beq.n	8018ade <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018aca:	2208      	movs	r2, #8
 8018acc:	4909      	ldr	r1, [pc, #36]	; (8018af4 <Get_SerialNum+0x50>)
 8018ace:	68f8      	ldr	r0, [r7, #12]
 8018ad0:	f000 f814 	bl	8018afc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018ad4:	2204      	movs	r2, #4
 8018ad6:	4908      	ldr	r1, [pc, #32]	; (8018af8 <Get_SerialNum+0x54>)
 8018ad8:	68b8      	ldr	r0, [r7, #8]
 8018ada:	f000 f80f 	bl	8018afc <IntToUnicode>
  }
}
 8018ade:	bf00      	nop
 8018ae0:	3710      	adds	r7, #16
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bd80      	pop	{r7, pc}
 8018ae6:	bf00      	nop
 8018ae8:	1ff0f420 	.word	0x1ff0f420
 8018aec:	1ff0f424 	.word	0x1ff0f424
 8018af0:	1ff0f428 	.word	0x1ff0f428
 8018af4:	20000202 	.word	0x20000202
 8018af8:	20000212 	.word	0x20000212

08018afc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018afc:	b480      	push	{r7}
 8018afe:	b087      	sub	sp, #28
 8018b00:	af00      	add	r7, sp, #0
 8018b02:	60f8      	str	r0, [r7, #12]
 8018b04:	60b9      	str	r1, [r7, #8]
 8018b06:	4613      	mov	r3, r2
 8018b08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018b0e:	2300      	movs	r3, #0
 8018b10:	75fb      	strb	r3, [r7, #23]
 8018b12:	e027      	b.n	8018b64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	0f1b      	lsrs	r3, r3, #28
 8018b18:	2b09      	cmp	r3, #9
 8018b1a:	d80b      	bhi.n	8018b34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	0f1b      	lsrs	r3, r3, #28
 8018b20:	b2da      	uxtb	r2, r3
 8018b22:	7dfb      	ldrb	r3, [r7, #23]
 8018b24:	005b      	lsls	r3, r3, #1
 8018b26:	4619      	mov	r1, r3
 8018b28:	68bb      	ldr	r3, [r7, #8]
 8018b2a:	440b      	add	r3, r1
 8018b2c:	3230      	adds	r2, #48	; 0x30
 8018b2e:	b2d2      	uxtb	r2, r2
 8018b30:	701a      	strb	r2, [r3, #0]
 8018b32:	e00a      	b.n	8018b4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	0f1b      	lsrs	r3, r3, #28
 8018b38:	b2da      	uxtb	r2, r3
 8018b3a:	7dfb      	ldrb	r3, [r7, #23]
 8018b3c:	005b      	lsls	r3, r3, #1
 8018b3e:	4619      	mov	r1, r3
 8018b40:	68bb      	ldr	r3, [r7, #8]
 8018b42:	440b      	add	r3, r1
 8018b44:	3237      	adds	r2, #55	; 0x37
 8018b46:	b2d2      	uxtb	r2, r2
 8018b48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	011b      	lsls	r3, r3, #4
 8018b4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018b50:	7dfb      	ldrb	r3, [r7, #23]
 8018b52:	005b      	lsls	r3, r3, #1
 8018b54:	3301      	adds	r3, #1
 8018b56:	68ba      	ldr	r2, [r7, #8]
 8018b58:	4413      	add	r3, r2
 8018b5a:	2200      	movs	r2, #0
 8018b5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018b5e:	7dfb      	ldrb	r3, [r7, #23]
 8018b60:	3301      	adds	r3, #1
 8018b62:	75fb      	strb	r3, [r7, #23]
 8018b64:	7dfa      	ldrb	r2, [r7, #23]
 8018b66:	79fb      	ldrb	r3, [r7, #7]
 8018b68:	429a      	cmp	r2, r3
 8018b6a:	d3d3      	bcc.n	8018b14 <IntToUnicode+0x18>
  }
}
 8018b6c:	bf00      	nop
 8018b6e:	371c      	adds	r7, #28
 8018b70:	46bd      	mov	sp, r7
 8018b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b76:	4770      	bx	lr

08018b78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b08a      	sub	sp, #40	; 0x28
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018b80:	f107 0314 	add.w	r3, r7, #20
 8018b84:	2200      	movs	r2, #0
 8018b86:	601a      	str	r2, [r3, #0]
 8018b88:	605a      	str	r2, [r3, #4]
 8018b8a:	609a      	str	r2, [r3, #8]
 8018b8c:	60da      	str	r2, [r3, #12]
 8018b8e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018b98:	d13c      	bne.n	8018c14 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018b9a:	4b20      	ldr	r3, [pc, #128]	; (8018c1c <HAL_PCD_MspInit+0xa4>)
 8018b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b9e:	4a1f      	ldr	r2, [pc, #124]	; (8018c1c <HAL_PCD_MspInit+0xa4>)
 8018ba0:	f043 0301 	orr.w	r3, r3, #1
 8018ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8018ba6:	4b1d      	ldr	r3, [pc, #116]	; (8018c1c <HAL_PCD_MspInit+0xa4>)
 8018ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018baa:	f003 0301 	and.w	r3, r3, #1
 8018bae:	613b      	str	r3, [r7, #16]
 8018bb0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018bb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018bb8:	2302      	movs	r3, #2
 8018bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018bc0:	2303      	movs	r3, #3
 8018bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018bc4:	230a      	movs	r3, #10
 8018bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018bc8:	f107 0314 	add.w	r3, r7, #20
 8018bcc:	4619      	mov	r1, r3
 8018bce:	4814      	ldr	r0, [pc, #80]	; (8018c20 <HAL_PCD_MspInit+0xa8>)
 8018bd0:	f7ee fd98 	bl	8007704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018bd4:	4b11      	ldr	r3, [pc, #68]	; (8018c1c <HAL_PCD_MspInit+0xa4>)
 8018bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018bd8:	4a10      	ldr	r2, [pc, #64]	; (8018c1c <HAL_PCD_MspInit+0xa4>)
 8018bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018bde:	6353      	str	r3, [r2, #52]	; 0x34
 8018be0:	4b0e      	ldr	r3, [pc, #56]	; (8018c1c <HAL_PCD_MspInit+0xa4>)
 8018be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018be8:	60fb      	str	r3, [r7, #12]
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	4b0b      	ldr	r3, [pc, #44]	; (8018c1c <HAL_PCD_MspInit+0xa4>)
 8018bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bf0:	4a0a      	ldr	r2, [pc, #40]	; (8018c1c <HAL_PCD_MspInit+0xa4>)
 8018bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018bf6:	6453      	str	r3, [r2, #68]	; 0x44
 8018bf8:	4b08      	ldr	r3, [pc, #32]	; (8018c1c <HAL_PCD_MspInit+0xa4>)
 8018bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018c00:	60bb      	str	r3, [r7, #8]
 8018c02:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018c04:	2200      	movs	r2, #0
 8018c06:	2105      	movs	r1, #5
 8018c08:	2043      	movs	r0, #67	; 0x43
 8018c0a:	f7ee f93d 	bl	8006e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018c0e:	2043      	movs	r0, #67	; 0x43
 8018c10:	f7ee f956 	bl	8006ec0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018c14:	bf00      	nop
 8018c16:	3728      	adds	r7, #40	; 0x28
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	bd80      	pop	{r7, pc}
 8018c1c:	40023800 	.word	0x40023800
 8018c20:	40020000 	.word	0x40020000

08018c24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b082      	sub	sp, #8
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018c38:	4619      	mov	r1, r3
 8018c3a:	4610      	mov	r0, r2
 8018c3c:	f7f7 fd5a 	bl	80106f4 <USBD_LL_SetupStage>
}
 8018c40:	bf00      	nop
 8018c42:	3708      	adds	r7, #8
 8018c44:	46bd      	mov	sp, r7
 8018c46:	bd80      	pop	{r7, pc}

08018c48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b082      	sub	sp, #8
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
 8018c50:	460b      	mov	r3, r1
 8018c52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8018c5a:	78fa      	ldrb	r2, [r7, #3]
 8018c5c:	6879      	ldr	r1, [r7, #4]
 8018c5e:	4613      	mov	r3, r2
 8018c60:	00db      	lsls	r3, r3, #3
 8018c62:	1a9b      	subs	r3, r3, r2
 8018c64:	009b      	lsls	r3, r3, #2
 8018c66:	440b      	add	r3, r1
 8018c68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018c6c:	681a      	ldr	r2, [r3, #0]
 8018c6e:	78fb      	ldrb	r3, [r7, #3]
 8018c70:	4619      	mov	r1, r3
 8018c72:	f7f7 fd92 	bl	801079a <USBD_LL_DataOutStage>
}
 8018c76:	bf00      	nop
 8018c78:	3708      	adds	r7, #8
 8018c7a:	46bd      	mov	sp, r7
 8018c7c:	bd80      	pop	{r7, pc}

08018c7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c7e:	b580      	push	{r7, lr}
 8018c80:	b082      	sub	sp, #8
 8018c82:	af00      	add	r7, sp, #0
 8018c84:	6078      	str	r0, [r7, #4]
 8018c86:	460b      	mov	r3, r1
 8018c88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8018c90:	78fa      	ldrb	r2, [r7, #3]
 8018c92:	6879      	ldr	r1, [r7, #4]
 8018c94:	4613      	mov	r3, r2
 8018c96:	00db      	lsls	r3, r3, #3
 8018c98:	1a9b      	subs	r3, r3, r2
 8018c9a:	009b      	lsls	r3, r3, #2
 8018c9c:	440b      	add	r3, r1
 8018c9e:	3348      	adds	r3, #72	; 0x48
 8018ca0:	681a      	ldr	r2, [r3, #0]
 8018ca2:	78fb      	ldrb	r3, [r7, #3]
 8018ca4:	4619      	mov	r1, r3
 8018ca6:	f7f7 fddb 	bl	8010860 <USBD_LL_DataInStage>
}
 8018caa:	bf00      	nop
 8018cac:	3708      	adds	r7, #8
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	bd80      	pop	{r7, pc}

08018cb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cb2:	b580      	push	{r7, lr}
 8018cb4:	b082      	sub	sp, #8
 8018cb6:	af00      	add	r7, sp, #0
 8018cb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f7f7 fedf 	bl	8010a84 <USBD_LL_SOF>
}
 8018cc6:	bf00      	nop
 8018cc8:	3708      	adds	r7, #8
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	bd80      	pop	{r7, pc}

08018cce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8018cce:	b580      	push	{r7, lr}
 8018cd0:	b084      	sub	sp, #16
 8018cd2:	af00      	add	r7, sp, #0
 8018cd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018cd6:	2301      	movs	r3, #1
 8018cd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	68db      	ldr	r3, [r3, #12]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d102      	bne.n	8018ce8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018ce2:	2300      	movs	r3, #0
 8018ce4:	73fb      	strb	r3, [r7, #15]
 8018ce6:	e008      	b.n	8018cfa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	68db      	ldr	r3, [r3, #12]
 8018cec:	2b02      	cmp	r3, #2
 8018cee:	d102      	bne.n	8018cf6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018cf0:	2301      	movs	r3, #1
 8018cf2:	73fb      	strb	r3, [r7, #15]
 8018cf4:	e001      	b.n	8018cfa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018cf6:	f7eb fc21 	bl	800453c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8018d00:	7bfa      	ldrb	r2, [r7, #15]
 8018d02:	4611      	mov	r1, r2
 8018d04:	4618      	mov	r0, r3
 8018d06:	f7f7 fe82 	bl	8010a0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8018d10:	4618      	mov	r0, r3
 8018d12:	f7f7 fe3b 	bl	801098c <USBD_LL_Reset>
}
 8018d16:	bf00      	nop
 8018d18:	3710      	adds	r7, #16
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	bd80      	pop	{r7, pc}
	...

08018d20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b082      	sub	sp, #8
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8018d2e:	4618      	mov	r0, r3
 8018d30:	f7f7 fe7d 	bl	8010a2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	687a      	ldr	r2, [r7, #4]
 8018d40:	6812      	ldr	r2, [r2, #0]
 8018d42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018d46:	f043 0301 	orr.w	r3, r3, #1
 8018d4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	6a1b      	ldr	r3, [r3, #32]
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d005      	beq.n	8018d60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018d54:	4b04      	ldr	r3, [pc, #16]	; (8018d68 <HAL_PCD_SuspendCallback+0x48>)
 8018d56:	691b      	ldr	r3, [r3, #16]
 8018d58:	4a03      	ldr	r2, [pc, #12]	; (8018d68 <HAL_PCD_SuspendCallback+0x48>)
 8018d5a:	f043 0306 	orr.w	r3, r3, #6
 8018d5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018d60:	bf00      	nop
 8018d62:	3708      	adds	r7, #8
 8018d64:	46bd      	mov	sp, r7
 8018d66:	bd80      	pop	{r7, pc}
 8018d68:	e000ed00 	.word	0xe000ed00

08018d6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	b082      	sub	sp, #8
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	f7f7 fe6c 	bl	8010a58 <USBD_LL_Resume>
}
 8018d80:	bf00      	nop
 8018d82:	3708      	adds	r7, #8
 8018d84:	46bd      	mov	sp, r7
 8018d86:	bd80      	pop	{r7, pc}

08018d88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d88:	b580      	push	{r7, lr}
 8018d8a:	b082      	sub	sp, #8
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	6078      	str	r0, [r7, #4]
 8018d90:	460b      	mov	r3, r1
 8018d92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8018d9a:	78fa      	ldrb	r2, [r7, #3]
 8018d9c:	4611      	mov	r1, r2
 8018d9e:	4618      	mov	r0, r3
 8018da0:	f7f7 fe97 	bl	8010ad2 <USBD_LL_IsoOUTIncomplete>
}
 8018da4:	bf00      	nop
 8018da6:	3708      	adds	r7, #8
 8018da8:	46bd      	mov	sp, r7
 8018daa:	bd80      	pop	{r7, pc}

08018dac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b082      	sub	sp, #8
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
 8018db4:	460b      	mov	r3, r1
 8018db6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8018dbe:	78fa      	ldrb	r2, [r7, #3]
 8018dc0:	4611      	mov	r1, r2
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	f7f7 fe78 	bl	8010ab8 <USBD_LL_IsoINIncomplete>
}
 8018dc8:	bf00      	nop
 8018dca:	3708      	adds	r7, #8
 8018dcc:	46bd      	mov	sp, r7
 8018dce:	bd80      	pop	{r7, pc}

08018dd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b082      	sub	sp, #8
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8018dde:	4618      	mov	r0, r3
 8018de0:	f7f7 fe84 	bl	8010aec <USBD_LL_DevConnected>
}
 8018de4:	bf00      	nop
 8018de6:	3708      	adds	r7, #8
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd80      	pop	{r7, pc}

08018dec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b082      	sub	sp, #8
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f7f7 fe81 	bl	8010b02 <USBD_LL_DevDisconnected>
}
 8018e00:	bf00      	nop
 8018e02:	3708      	adds	r7, #8
 8018e04:	46bd      	mov	sp, r7
 8018e06:	bd80      	pop	{r7, pc}

08018e08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018e08:	b580      	push	{r7, lr}
 8018e0a:	b082      	sub	sp, #8
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	781b      	ldrb	r3, [r3, #0]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d13c      	bne.n	8018e92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018e18:	4a20      	ldr	r2, [pc, #128]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	4a1e      	ldr	r2, [pc, #120]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018e28:	4b1c      	ldr	r3, [pc, #112]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018e2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8018e30:	4b1a      	ldr	r3, [pc, #104]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e32:	2206      	movs	r2, #6
 8018e34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018e36:	4b19      	ldr	r3, [pc, #100]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e38:	2202      	movs	r2, #2
 8018e3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018e3c:	4b17      	ldr	r3, [pc, #92]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e3e:	2200      	movs	r2, #0
 8018e40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018e42:	4b16      	ldr	r3, [pc, #88]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e44:	2202      	movs	r2, #2
 8018e46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018e48:	4b14      	ldr	r3, [pc, #80]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e4a:	2200      	movs	r2, #0
 8018e4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018e4e:	4b13      	ldr	r3, [pc, #76]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e50:	2200      	movs	r2, #0
 8018e52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018e54:	4b11      	ldr	r3, [pc, #68]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e56:	2200      	movs	r2, #0
 8018e58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018e5a:	4b10      	ldr	r3, [pc, #64]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e5c:	2200      	movs	r2, #0
 8018e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018e60:	4b0e      	ldr	r3, [pc, #56]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e62:	2200      	movs	r2, #0
 8018e64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018e66:	480d      	ldr	r0, [pc, #52]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e68:	f7ee fe41 	bl	8007aee <HAL_PCD_Init>
 8018e6c:	4603      	mov	r3, r0
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d001      	beq.n	8018e76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018e72:	f7eb fb63 	bl	800453c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018e76:	2180      	movs	r1, #128	; 0x80
 8018e78:	4808      	ldr	r0, [pc, #32]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e7a:	f7ef ffc2 	bl	8008e02 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018e7e:	2240      	movs	r2, #64	; 0x40
 8018e80:	2100      	movs	r1, #0
 8018e82:	4806      	ldr	r0, [pc, #24]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e84:	f7ef ff76 	bl	8008d74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018e88:	2280      	movs	r2, #128	; 0x80
 8018e8a:	2101      	movs	r1, #1
 8018e8c:	4803      	ldr	r0, [pc, #12]	; (8018e9c <USBD_LL_Init+0x94>)
 8018e8e:	f7ef ff71 	bl	8008d74 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018e92:	2300      	movs	r3, #0
}
 8018e94:	4618      	mov	r0, r3
 8018e96:	3708      	adds	r7, #8
 8018e98:	46bd      	mov	sp, r7
 8018e9a:	bd80      	pop	{r7, pc}
 8018e9c:	2001be1c 	.word	0x2001be1c

08018ea0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018ea0:	b580      	push	{r7, lr}
 8018ea2:	b084      	sub	sp, #16
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018eac:	2300      	movs	r3, #0
 8018eae:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	f7ee ff3d 	bl	8007d36 <HAL_PCD_Start>
 8018ebc:	4603      	mov	r3, r0
 8018ebe:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8018ec0:	7bfb      	ldrb	r3, [r7, #15]
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f000 f97e 	bl	80191c4 <USBD_Get_USB_Status>
 8018ec8:	4603      	mov	r3, r0
 8018eca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ece:	4618      	mov	r0, r3
 8018ed0:	3710      	adds	r7, #16
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	bd80      	pop	{r7, pc}

08018ed6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018ed6:	b580      	push	{r7, lr}
 8018ed8:	b084      	sub	sp, #16
 8018eda:	af00      	add	r7, sp, #0
 8018edc:	6078      	str	r0, [r7, #4]
 8018ede:	4608      	mov	r0, r1
 8018ee0:	4611      	mov	r1, r2
 8018ee2:	461a      	mov	r2, r3
 8018ee4:	4603      	mov	r3, r0
 8018ee6:	70fb      	strb	r3, [r7, #3]
 8018ee8:	460b      	mov	r3, r1
 8018eea:	70bb      	strb	r3, [r7, #2]
 8018eec:	4613      	mov	r3, r2
 8018eee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018efe:	78bb      	ldrb	r3, [r7, #2]
 8018f00:	883a      	ldrh	r2, [r7, #0]
 8018f02:	78f9      	ldrb	r1, [r7, #3]
 8018f04:	f7ef fb3d 	bl	8008582 <HAL_PCD_EP_Open>
 8018f08:	4603      	mov	r3, r0
 8018f0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f0c:	7bfb      	ldrb	r3, [r7, #15]
 8018f0e:	4618      	mov	r0, r3
 8018f10:	f000 f958 	bl	80191c4 <USBD_Get_USB_Status>
 8018f14:	4603      	mov	r3, r0
 8018f16:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8018f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	3710      	adds	r7, #16
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}

08018f22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f22:	b580      	push	{r7, lr}
 8018f24:	b084      	sub	sp, #16
 8018f26:	af00      	add	r7, sp, #0
 8018f28:	6078      	str	r0, [r7, #4]
 8018f2a:	460b      	mov	r3, r1
 8018f2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f2e:	2300      	movs	r3, #0
 8018f30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f32:	2300      	movs	r3, #0
 8018f34:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018f3c:	78fa      	ldrb	r2, [r7, #3]
 8018f3e:	4611      	mov	r1, r2
 8018f40:	4618      	mov	r0, r3
 8018f42:	f7ef fb86 	bl	8008652 <HAL_PCD_EP_Close>
 8018f46:	4603      	mov	r3, r0
 8018f48:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8018f4a:	7bfb      	ldrb	r3, [r7, #15]
 8018f4c:	4618      	mov	r0, r3
 8018f4e:	f000 f939 	bl	80191c4 <USBD_Get_USB_Status>
 8018f52:	4603      	mov	r3, r0
 8018f54:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8018f56:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f58:	4618      	mov	r0, r3
 8018f5a:	3710      	adds	r7, #16
 8018f5c:	46bd      	mov	sp, r7
 8018f5e:	bd80      	pop	{r7, pc}

08018f60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b084      	sub	sp, #16
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	6078      	str	r0, [r7, #4]
 8018f68:	460b      	mov	r3, r1
 8018f6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f6c:	2300      	movs	r3, #0
 8018f6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f70:	2300      	movs	r3, #0
 8018f72:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018f7a:	78fa      	ldrb	r2, [r7, #3]
 8018f7c:	4611      	mov	r1, r2
 8018f7e:	4618      	mov	r0, r3
 8018f80:	f7ef fc5e 	bl	8008840 <HAL_PCD_EP_SetStall>
 8018f84:	4603      	mov	r3, r0
 8018f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f88:	7bfb      	ldrb	r3, [r7, #15]
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f000 f91a 	bl	80191c4 <USBD_Get_USB_Status>
 8018f90:	4603      	mov	r3, r0
 8018f92:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8018f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f96:	4618      	mov	r0, r3
 8018f98:	3710      	adds	r7, #16
 8018f9a:	46bd      	mov	sp, r7
 8018f9c:	bd80      	pop	{r7, pc}

08018f9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f9e:	b580      	push	{r7, lr}
 8018fa0:	b084      	sub	sp, #16
 8018fa2:	af00      	add	r7, sp, #0
 8018fa4:	6078      	str	r0, [r7, #4]
 8018fa6:	460b      	mov	r3, r1
 8018fa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018faa:	2300      	movs	r3, #0
 8018fac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018fae:	2300      	movs	r3, #0
 8018fb0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018fb8:	78fa      	ldrb	r2, [r7, #3]
 8018fba:	4611      	mov	r1, r2
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	f7ef fca3 	bl	8008908 <HAL_PCD_EP_ClrStall>
 8018fc2:	4603      	mov	r3, r0
 8018fc4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8018fc6:	7bfb      	ldrb	r3, [r7, #15]
 8018fc8:	4618      	mov	r0, r3
 8018fca:	f000 f8fb 	bl	80191c4 <USBD_Get_USB_Status>
 8018fce:	4603      	mov	r3, r0
 8018fd0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8018fd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	3710      	adds	r7, #16
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	bd80      	pop	{r7, pc}

08018fdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018fdc:	b480      	push	{r7}
 8018fde:	b085      	sub	sp, #20
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
 8018fe4:	460b      	mov	r3, r1
 8018fe6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018fee:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8018ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	da0b      	bge.n	8019010 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8018ff8:	78fb      	ldrb	r3, [r7, #3]
 8018ffa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018ffe:	68f9      	ldr	r1, [r7, #12]
 8019000:	4613      	mov	r3, r2
 8019002:	00db      	lsls	r3, r3, #3
 8019004:	1a9b      	subs	r3, r3, r2
 8019006:	009b      	lsls	r3, r3, #2
 8019008:	440b      	add	r3, r1
 801900a:	333e      	adds	r3, #62	; 0x3e
 801900c:	781b      	ldrb	r3, [r3, #0]
 801900e:	e00b      	b.n	8019028 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8019010:	78fb      	ldrb	r3, [r7, #3]
 8019012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019016:	68f9      	ldr	r1, [r7, #12]
 8019018:	4613      	mov	r3, r2
 801901a:	00db      	lsls	r3, r3, #3
 801901c:	1a9b      	subs	r3, r3, r2
 801901e:	009b      	lsls	r3, r3, #2
 8019020:	440b      	add	r3, r1
 8019022:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019026:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019028:	4618      	mov	r0, r3
 801902a:	3714      	adds	r7, #20
 801902c:	46bd      	mov	sp, r7
 801902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019032:	4770      	bx	lr

08019034 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b084      	sub	sp, #16
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
 801903c:	460b      	mov	r3, r1
 801903e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019040:	2300      	movs	r3, #0
 8019042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019044:	2300      	movs	r3, #0
 8019046:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801904e:	78fa      	ldrb	r2, [r7, #3]
 8019050:	4611      	mov	r1, r2
 8019052:	4618      	mov	r0, r3
 8019054:	f7ef fa70 	bl	8008538 <HAL_PCD_SetAddress>
 8019058:	4603      	mov	r3, r0
 801905a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801905c:	7bfb      	ldrb	r3, [r7, #15]
 801905e:	4618      	mov	r0, r3
 8019060:	f000 f8b0 	bl	80191c4 <USBD_Get_USB_Status>
 8019064:	4603      	mov	r3, r0
 8019066:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8019068:	7bbb      	ldrb	r3, [r7, #14]
}
 801906a:	4618      	mov	r0, r3
 801906c:	3710      	adds	r7, #16
 801906e:	46bd      	mov	sp, r7
 8019070:	bd80      	pop	{r7, pc}

08019072 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019072:	b580      	push	{r7, lr}
 8019074:	b086      	sub	sp, #24
 8019076:	af00      	add	r7, sp, #0
 8019078:	60f8      	str	r0, [r7, #12]
 801907a:	607a      	str	r2, [r7, #4]
 801907c:	603b      	str	r3, [r7, #0]
 801907e:	460b      	mov	r3, r1
 8019080:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019082:	2300      	movs	r3, #0
 8019084:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019086:	2300      	movs	r3, #0
 8019088:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801908a:	68fb      	ldr	r3, [r7, #12]
 801908c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019090:	7af9      	ldrb	r1, [r7, #11]
 8019092:	683b      	ldr	r3, [r7, #0]
 8019094:	687a      	ldr	r2, [r7, #4]
 8019096:	f7ef fb89 	bl	80087ac <HAL_PCD_EP_Transmit>
 801909a:	4603      	mov	r3, r0
 801909c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801909e:	7dfb      	ldrb	r3, [r7, #23]
 80190a0:	4618      	mov	r0, r3
 80190a2:	f000 f88f 	bl	80191c4 <USBD_Get_USB_Status>
 80190a6:	4603      	mov	r3, r0
 80190a8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80190aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80190ac:	4618      	mov	r0, r3
 80190ae:	3718      	adds	r7, #24
 80190b0:	46bd      	mov	sp, r7
 80190b2:	bd80      	pop	{r7, pc}

080190b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80190b4:	b580      	push	{r7, lr}
 80190b6:	b086      	sub	sp, #24
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	60f8      	str	r0, [r7, #12]
 80190bc:	607a      	str	r2, [r7, #4]
 80190be:	603b      	str	r3, [r7, #0]
 80190c0:	460b      	mov	r3, r1
 80190c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190c4:	2300      	movs	r3, #0
 80190c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190c8:	2300      	movs	r3, #0
 80190ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80190d2:	7af9      	ldrb	r1, [r7, #11]
 80190d4:	683b      	ldr	r3, [r7, #0]
 80190d6:	687a      	ldr	r2, [r7, #4]
 80190d8:	f7ef fb05 	bl	80086e6 <HAL_PCD_EP_Receive>
 80190dc:	4603      	mov	r3, r0
 80190de:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80190e0:	7dfb      	ldrb	r3, [r7, #23]
 80190e2:	4618      	mov	r0, r3
 80190e4:	f000 f86e 	bl	80191c4 <USBD_Get_USB_Status>
 80190e8:	4603      	mov	r3, r0
 80190ea:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80190ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80190ee:	4618      	mov	r0, r3
 80190f0:	3718      	adds	r7, #24
 80190f2:	46bd      	mov	sp, r7
 80190f4:	bd80      	pop	{r7, pc}

080190f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80190f6:	b580      	push	{r7, lr}
 80190f8:	b082      	sub	sp, #8
 80190fa:	af00      	add	r7, sp, #0
 80190fc:	6078      	str	r0, [r7, #4]
 80190fe:	460b      	mov	r3, r1
 8019100:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019108:	78fa      	ldrb	r2, [r7, #3]
 801910a:	4611      	mov	r1, r2
 801910c:	4618      	mov	r0, r3
 801910e:	f7ef fb35 	bl	800877c <HAL_PCD_EP_GetRxCount>
 8019112:	4603      	mov	r3, r0
}
 8019114:	4618      	mov	r0, r3
 8019116:	3708      	adds	r7, #8
 8019118:	46bd      	mov	sp, r7
 801911a:	bd80      	pop	{r7, pc}

0801911c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b082      	sub	sp, #8
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
 8019124:	460b      	mov	r3, r1
 8019126:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8019128:	78fb      	ldrb	r3, [r7, #3]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d002      	beq.n	8019134 <HAL_PCDEx_LPM_Callback+0x18>
 801912e:	2b01      	cmp	r3, #1
 8019130:	d01f      	beq.n	8019172 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8019132:	e03b      	b.n	80191ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	6a1b      	ldr	r3, [r3, #32]
 8019138:	2b00      	cmp	r3, #0
 801913a:	d007      	beq.n	801914c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801913c:	f000 f83c 	bl	80191b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019140:	4b1c      	ldr	r3, [pc, #112]	; (80191b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8019142:	691b      	ldr	r3, [r3, #16]
 8019144:	4a1b      	ldr	r2, [pc, #108]	; (80191b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8019146:	f023 0306 	bic.w	r3, r3, #6
 801914a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	687a      	ldr	r2, [r7, #4]
 8019158:	6812      	ldr	r2, [r2, #0]
 801915a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801915e:	f023 0301 	bic.w	r3, r3, #1
 8019162:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801916a:	4618      	mov	r0, r3
 801916c:	f7f7 fc74 	bl	8010a58 <USBD_LL_Resume>
    break;
 8019170:	e01c      	b.n	80191ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	687a      	ldr	r2, [r7, #4]
 801917e:	6812      	ldr	r2, [r2, #0]
 8019180:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019184:	f043 0301 	orr.w	r3, r3, #1
 8019188:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8019190:	4618      	mov	r0, r3
 8019192:	f7f7 fc4c 	bl	8010a2e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	6a1b      	ldr	r3, [r3, #32]
 801919a:	2b00      	cmp	r3, #0
 801919c:	d005      	beq.n	80191aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801919e:	4b05      	ldr	r3, [pc, #20]	; (80191b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80191a0:	691b      	ldr	r3, [r3, #16]
 80191a2:	4a04      	ldr	r2, [pc, #16]	; (80191b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80191a4:	f043 0306 	orr.w	r3, r3, #6
 80191a8:	6113      	str	r3, [r2, #16]
    break;   
 80191aa:	bf00      	nop
}
 80191ac:	bf00      	nop
 80191ae:	3708      	adds	r7, #8
 80191b0:	46bd      	mov	sp, r7
 80191b2:	bd80      	pop	{r7, pc}
 80191b4:	e000ed00 	.word	0xe000ed00

080191b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80191b8:	b580      	push	{r7, lr}
 80191ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80191bc:	f7ea fde4 	bl	8003d88 <SystemClock_Config>
}
 80191c0:	bf00      	nop
 80191c2:	bd80      	pop	{r7, pc}

080191c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80191c4:	b480      	push	{r7}
 80191c6:	b085      	sub	sp, #20
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	4603      	mov	r3, r0
 80191cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191ce:	2300      	movs	r3, #0
 80191d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80191d2:	79fb      	ldrb	r3, [r7, #7]
 80191d4:	2b03      	cmp	r3, #3
 80191d6:	d817      	bhi.n	8019208 <USBD_Get_USB_Status+0x44>
 80191d8:	a201      	add	r2, pc, #4	; (adr r2, 80191e0 <USBD_Get_USB_Status+0x1c>)
 80191da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80191de:	bf00      	nop
 80191e0:	080191f1 	.word	0x080191f1
 80191e4:	080191f7 	.word	0x080191f7
 80191e8:	080191fd 	.word	0x080191fd
 80191ec:	08019203 	.word	0x08019203
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80191f0:	2300      	movs	r3, #0
 80191f2:	73fb      	strb	r3, [r7, #15]
    break;
 80191f4:	e00b      	b.n	801920e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80191f6:	2303      	movs	r3, #3
 80191f8:	73fb      	strb	r3, [r7, #15]
    break;
 80191fa:	e008      	b.n	801920e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80191fc:	2301      	movs	r3, #1
 80191fe:	73fb      	strb	r3, [r7, #15]
    break;
 8019200:	e005      	b.n	801920e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019202:	2303      	movs	r3, #3
 8019204:	73fb      	strb	r3, [r7, #15]
    break;
 8019206:	e002      	b.n	801920e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019208:	2303      	movs	r3, #3
 801920a:	73fb      	strb	r3, [r7, #15]
    break;
 801920c:	bf00      	nop
  }
  return usb_status;
 801920e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019210:	4618      	mov	r0, r3
 8019212:	3714      	adds	r7, #20
 8019214:	46bd      	mov	sp, r7
 8019216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801921a:	4770      	bx	lr

0801921c <__errno>:
 801921c:	4b01      	ldr	r3, [pc, #4]	; (8019224 <__errno+0x8>)
 801921e:	6818      	ldr	r0, [r3, #0]
 8019220:	4770      	bx	lr
 8019222:	bf00      	nop
 8019224:	2000021c 	.word	0x2000021c

08019228 <__libc_init_array>:
 8019228:	b570      	push	{r4, r5, r6, lr}
 801922a:	4e0d      	ldr	r6, [pc, #52]	; (8019260 <__libc_init_array+0x38>)
 801922c:	4c0d      	ldr	r4, [pc, #52]	; (8019264 <__libc_init_array+0x3c>)
 801922e:	1ba4      	subs	r4, r4, r6
 8019230:	10a4      	asrs	r4, r4, #2
 8019232:	2500      	movs	r5, #0
 8019234:	42a5      	cmp	r5, r4
 8019236:	d109      	bne.n	801924c <__libc_init_array+0x24>
 8019238:	4e0b      	ldr	r6, [pc, #44]	; (8019268 <__libc_init_array+0x40>)
 801923a:	4c0c      	ldr	r4, [pc, #48]	; (801926c <__libc_init_array+0x44>)
 801923c:	f002 fadc 	bl	801b7f8 <_init>
 8019240:	1ba4      	subs	r4, r4, r6
 8019242:	10a4      	asrs	r4, r4, #2
 8019244:	2500      	movs	r5, #0
 8019246:	42a5      	cmp	r5, r4
 8019248:	d105      	bne.n	8019256 <__libc_init_array+0x2e>
 801924a:	bd70      	pop	{r4, r5, r6, pc}
 801924c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019250:	4798      	blx	r3
 8019252:	3501      	adds	r5, #1
 8019254:	e7ee      	b.n	8019234 <__libc_init_array+0xc>
 8019256:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801925a:	4798      	blx	r3
 801925c:	3501      	adds	r5, #1
 801925e:	e7f2      	b.n	8019246 <__libc_init_array+0x1e>
 8019260:	0801c508 	.word	0x0801c508
 8019264:	0801c508 	.word	0x0801c508
 8019268:	0801c508 	.word	0x0801c508
 801926c:	0801c50c 	.word	0x0801c50c

08019270 <malloc>:
 8019270:	4b02      	ldr	r3, [pc, #8]	; (801927c <malloc+0xc>)
 8019272:	4601      	mov	r1, r0
 8019274:	6818      	ldr	r0, [r3, #0]
 8019276:	f000 b86d 	b.w	8019354 <_malloc_r>
 801927a:	bf00      	nop
 801927c:	2000021c 	.word	0x2000021c

08019280 <free>:
 8019280:	4b02      	ldr	r3, [pc, #8]	; (801928c <free+0xc>)
 8019282:	4601      	mov	r1, r0
 8019284:	6818      	ldr	r0, [r3, #0]
 8019286:	f000 b817 	b.w	80192b8 <_free_r>
 801928a:	bf00      	nop
 801928c:	2000021c 	.word	0x2000021c

08019290 <memcpy>:
 8019290:	b510      	push	{r4, lr}
 8019292:	1e43      	subs	r3, r0, #1
 8019294:	440a      	add	r2, r1
 8019296:	4291      	cmp	r1, r2
 8019298:	d100      	bne.n	801929c <memcpy+0xc>
 801929a:	bd10      	pop	{r4, pc}
 801929c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80192a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80192a4:	e7f7      	b.n	8019296 <memcpy+0x6>

080192a6 <memset>:
 80192a6:	4402      	add	r2, r0
 80192a8:	4603      	mov	r3, r0
 80192aa:	4293      	cmp	r3, r2
 80192ac:	d100      	bne.n	80192b0 <memset+0xa>
 80192ae:	4770      	bx	lr
 80192b0:	f803 1b01 	strb.w	r1, [r3], #1
 80192b4:	e7f9      	b.n	80192aa <memset+0x4>
	...

080192b8 <_free_r>:
 80192b8:	b538      	push	{r3, r4, r5, lr}
 80192ba:	4605      	mov	r5, r0
 80192bc:	2900      	cmp	r1, #0
 80192be:	d045      	beq.n	801934c <_free_r+0x94>
 80192c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80192c4:	1f0c      	subs	r4, r1, #4
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	bfb8      	it	lt
 80192ca:	18e4      	addlt	r4, r4, r3
 80192cc:	f000 f91a 	bl	8019504 <__malloc_lock>
 80192d0:	4a1f      	ldr	r2, [pc, #124]	; (8019350 <_free_r+0x98>)
 80192d2:	6813      	ldr	r3, [r2, #0]
 80192d4:	4610      	mov	r0, r2
 80192d6:	b933      	cbnz	r3, 80192e6 <_free_r+0x2e>
 80192d8:	6063      	str	r3, [r4, #4]
 80192da:	6014      	str	r4, [r2, #0]
 80192dc:	4628      	mov	r0, r5
 80192de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80192e2:	f000 b910 	b.w	8019506 <__malloc_unlock>
 80192e6:	42a3      	cmp	r3, r4
 80192e8:	d90c      	bls.n	8019304 <_free_r+0x4c>
 80192ea:	6821      	ldr	r1, [r4, #0]
 80192ec:	1862      	adds	r2, r4, r1
 80192ee:	4293      	cmp	r3, r2
 80192f0:	bf04      	itt	eq
 80192f2:	681a      	ldreq	r2, [r3, #0]
 80192f4:	685b      	ldreq	r3, [r3, #4]
 80192f6:	6063      	str	r3, [r4, #4]
 80192f8:	bf04      	itt	eq
 80192fa:	1852      	addeq	r2, r2, r1
 80192fc:	6022      	streq	r2, [r4, #0]
 80192fe:	6004      	str	r4, [r0, #0]
 8019300:	e7ec      	b.n	80192dc <_free_r+0x24>
 8019302:	4613      	mov	r3, r2
 8019304:	685a      	ldr	r2, [r3, #4]
 8019306:	b10a      	cbz	r2, 801930c <_free_r+0x54>
 8019308:	42a2      	cmp	r2, r4
 801930a:	d9fa      	bls.n	8019302 <_free_r+0x4a>
 801930c:	6819      	ldr	r1, [r3, #0]
 801930e:	1858      	adds	r0, r3, r1
 8019310:	42a0      	cmp	r0, r4
 8019312:	d10b      	bne.n	801932c <_free_r+0x74>
 8019314:	6820      	ldr	r0, [r4, #0]
 8019316:	4401      	add	r1, r0
 8019318:	1858      	adds	r0, r3, r1
 801931a:	4282      	cmp	r2, r0
 801931c:	6019      	str	r1, [r3, #0]
 801931e:	d1dd      	bne.n	80192dc <_free_r+0x24>
 8019320:	6810      	ldr	r0, [r2, #0]
 8019322:	6852      	ldr	r2, [r2, #4]
 8019324:	605a      	str	r2, [r3, #4]
 8019326:	4401      	add	r1, r0
 8019328:	6019      	str	r1, [r3, #0]
 801932a:	e7d7      	b.n	80192dc <_free_r+0x24>
 801932c:	d902      	bls.n	8019334 <_free_r+0x7c>
 801932e:	230c      	movs	r3, #12
 8019330:	602b      	str	r3, [r5, #0]
 8019332:	e7d3      	b.n	80192dc <_free_r+0x24>
 8019334:	6820      	ldr	r0, [r4, #0]
 8019336:	1821      	adds	r1, r4, r0
 8019338:	428a      	cmp	r2, r1
 801933a:	bf04      	itt	eq
 801933c:	6811      	ldreq	r1, [r2, #0]
 801933e:	6852      	ldreq	r2, [r2, #4]
 8019340:	6062      	str	r2, [r4, #4]
 8019342:	bf04      	itt	eq
 8019344:	1809      	addeq	r1, r1, r0
 8019346:	6021      	streq	r1, [r4, #0]
 8019348:	605c      	str	r4, [r3, #4]
 801934a:	e7c7      	b.n	80192dc <_free_r+0x24>
 801934c:	bd38      	pop	{r3, r4, r5, pc}
 801934e:	bf00      	nop
 8019350:	200088b8 	.word	0x200088b8

08019354 <_malloc_r>:
 8019354:	b570      	push	{r4, r5, r6, lr}
 8019356:	1ccd      	adds	r5, r1, #3
 8019358:	f025 0503 	bic.w	r5, r5, #3
 801935c:	3508      	adds	r5, #8
 801935e:	2d0c      	cmp	r5, #12
 8019360:	bf38      	it	cc
 8019362:	250c      	movcc	r5, #12
 8019364:	2d00      	cmp	r5, #0
 8019366:	4606      	mov	r6, r0
 8019368:	db01      	blt.n	801936e <_malloc_r+0x1a>
 801936a:	42a9      	cmp	r1, r5
 801936c:	d903      	bls.n	8019376 <_malloc_r+0x22>
 801936e:	230c      	movs	r3, #12
 8019370:	6033      	str	r3, [r6, #0]
 8019372:	2000      	movs	r0, #0
 8019374:	bd70      	pop	{r4, r5, r6, pc}
 8019376:	f000 f8c5 	bl	8019504 <__malloc_lock>
 801937a:	4a21      	ldr	r2, [pc, #132]	; (8019400 <_malloc_r+0xac>)
 801937c:	6814      	ldr	r4, [r2, #0]
 801937e:	4621      	mov	r1, r4
 8019380:	b991      	cbnz	r1, 80193a8 <_malloc_r+0x54>
 8019382:	4c20      	ldr	r4, [pc, #128]	; (8019404 <_malloc_r+0xb0>)
 8019384:	6823      	ldr	r3, [r4, #0]
 8019386:	b91b      	cbnz	r3, 8019390 <_malloc_r+0x3c>
 8019388:	4630      	mov	r0, r6
 801938a:	f000 f83d 	bl	8019408 <_sbrk_r>
 801938e:	6020      	str	r0, [r4, #0]
 8019390:	4629      	mov	r1, r5
 8019392:	4630      	mov	r0, r6
 8019394:	f000 f838 	bl	8019408 <_sbrk_r>
 8019398:	1c43      	adds	r3, r0, #1
 801939a:	d124      	bne.n	80193e6 <_malloc_r+0x92>
 801939c:	230c      	movs	r3, #12
 801939e:	6033      	str	r3, [r6, #0]
 80193a0:	4630      	mov	r0, r6
 80193a2:	f000 f8b0 	bl	8019506 <__malloc_unlock>
 80193a6:	e7e4      	b.n	8019372 <_malloc_r+0x1e>
 80193a8:	680b      	ldr	r3, [r1, #0]
 80193aa:	1b5b      	subs	r3, r3, r5
 80193ac:	d418      	bmi.n	80193e0 <_malloc_r+0x8c>
 80193ae:	2b0b      	cmp	r3, #11
 80193b0:	d90f      	bls.n	80193d2 <_malloc_r+0x7e>
 80193b2:	600b      	str	r3, [r1, #0]
 80193b4:	50cd      	str	r5, [r1, r3]
 80193b6:	18cc      	adds	r4, r1, r3
 80193b8:	4630      	mov	r0, r6
 80193ba:	f000 f8a4 	bl	8019506 <__malloc_unlock>
 80193be:	f104 000b 	add.w	r0, r4, #11
 80193c2:	1d23      	adds	r3, r4, #4
 80193c4:	f020 0007 	bic.w	r0, r0, #7
 80193c8:	1ac3      	subs	r3, r0, r3
 80193ca:	d0d3      	beq.n	8019374 <_malloc_r+0x20>
 80193cc:	425a      	negs	r2, r3
 80193ce:	50e2      	str	r2, [r4, r3]
 80193d0:	e7d0      	b.n	8019374 <_malloc_r+0x20>
 80193d2:	428c      	cmp	r4, r1
 80193d4:	684b      	ldr	r3, [r1, #4]
 80193d6:	bf16      	itet	ne
 80193d8:	6063      	strne	r3, [r4, #4]
 80193da:	6013      	streq	r3, [r2, #0]
 80193dc:	460c      	movne	r4, r1
 80193de:	e7eb      	b.n	80193b8 <_malloc_r+0x64>
 80193e0:	460c      	mov	r4, r1
 80193e2:	6849      	ldr	r1, [r1, #4]
 80193e4:	e7cc      	b.n	8019380 <_malloc_r+0x2c>
 80193e6:	1cc4      	adds	r4, r0, #3
 80193e8:	f024 0403 	bic.w	r4, r4, #3
 80193ec:	42a0      	cmp	r0, r4
 80193ee:	d005      	beq.n	80193fc <_malloc_r+0xa8>
 80193f0:	1a21      	subs	r1, r4, r0
 80193f2:	4630      	mov	r0, r6
 80193f4:	f000 f808 	bl	8019408 <_sbrk_r>
 80193f8:	3001      	adds	r0, #1
 80193fa:	d0cf      	beq.n	801939c <_malloc_r+0x48>
 80193fc:	6025      	str	r5, [r4, #0]
 80193fe:	e7db      	b.n	80193b8 <_malloc_r+0x64>
 8019400:	200088b8 	.word	0x200088b8
 8019404:	200088bc 	.word	0x200088bc

08019408 <_sbrk_r>:
 8019408:	b538      	push	{r3, r4, r5, lr}
 801940a:	4c06      	ldr	r4, [pc, #24]	; (8019424 <_sbrk_r+0x1c>)
 801940c:	2300      	movs	r3, #0
 801940e:	4605      	mov	r5, r0
 8019410:	4608      	mov	r0, r1
 8019412:	6023      	str	r3, [r4, #0]
 8019414:	f7eb fdca 	bl	8004fac <_sbrk>
 8019418:	1c43      	adds	r3, r0, #1
 801941a:	d102      	bne.n	8019422 <_sbrk_r+0x1a>
 801941c:	6823      	ldr	r3, [r4, #0]
 801941e:	b103      	cbz	r3, 8019422 <_sbrk_r+0x1a>
 8019420:	602b      	str	r3, [r5, #0]
 8019422:	bd38      	pop	{r3, r4, r5, pc}
 8019424:	2001c220 	.word	0x2001c220

08019428 <sniprintf>:
 8019428:	b40c      	push	{r2, r3}
 801942a:	b530      	push	{r4, r5, lr}
 801942c:	4b17      	ldr	r3, [pc, #92]	; (801948c <sniprintf+0x64>)
 801942e:	1e0c      	subs	r4, r1, #0
 8019430:	b09d      	sub	sp, #116	; 0x74
 8019432:	681d      	ldr	r5, [r3, #0]
 8019434:	da08      	bge.n	8019448 <sniprintf+0x20>
 8019436:	238b      	movs	r3, #139	; 0x8b
 8019438:	602b      	str	r3, [r5, #0]
 801943a:	f04f 30ff 	mov.w	r0, #4294967295
 801943e:	b01d      	add	sp, #116	; 0x74
 8019440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019444:	b002      	add	sp, #8
 8019446:	4770      	bx	lr
 8019448:	f44f 7302 	mov.w	r3, #520	; 0x208
 801944c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019450:	bf14      	ite	ne
 8019452:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019456:	4623      	moveq	r3, r4
 8019458:	9304      	str	r3, [sp, #16]
 801945a:	9307      	str	r3, [sp, #28]
 801945c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019460:	9002      	str	r0, [sp, #8]
 8019462:	9006      	str	r0, [sp, #24]
 8019464:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019468:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801946a:	ab21      	add	r3, sp, #132	; 0x84
 801946c:	a902      	add	r1, sp, #8
 801946e:	4628      	mov	r0, r5
 8019470:	9301      	str	r3, [sp, #4]
 8019472:	f000 f8a3 	bl	80195bc <_svfiprintf_r>
 8019476:	1c43      	adds	r3, r0, #1
 8019478:	bfbc      	itt	lt
 801947a:	238b      	movlt	r3, #139	; 0x8b
 801947c:	602b      	strlt	r3, [r5, #0]
 801947e:	2c00      	cmp	r4, #0
 8019480:	d0dd      	beq.n	801943e <sniprintf+0x16>
 8019482:	9b02      	ldr	r3, [sp, #8]
 8019484:	2200      	movs	r2, #0
 8019486:	701a      	strb	r2, [r3, #0]
 8019488:	e7d9      	b.n	801943e <sniprintf+0x16>
 801948a:	bf00      	nop
 801948c:	2000021c 	.word	0x2000021c

08019490 <_vsniprintf_r>:
 8019490:	b530      	push	{r4, r5, lr}
 8019492:	1e14      	subs	r4, r2, #0
 8019494:	4605      	mov	r5, r0
 8019496:	b09b      	sub	sp, #108	; 0x6c
 8019498:	4618      	mov	r0, r3
 801949a:	da05      	bge.n	80194a8 <_vsniprintf_r+0x18>
 801949c:	238b      	movs	r3, #139	; 0x8b
 801949e:	602b      	str	r3, [r5, #0]
 80194a0:	f04f 30ff 	mov.w	r0, #4294967295
 80194a4:	b01b      	add	sp, #108	; 0x6c
 80194a6:	bd30      	pop	{r4, r5, pc}
 80194a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80194ac:	f8ad 300c 	strh.w	r3, [sp, #12]
 80194b0:	bf14      	ite	ne
 80194b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80194b6:	4623      	moveq	r3, r4
 80194b8:	9302      	str	r3, [sp, #8]
 80194ba:	9305      	str	r3, [sp, #20]
 80194bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80194c0:	9100      	str	r1, [sp, #0]
 80194c2:	9104      	str	r1, [sp, #16]
 80194c4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80194c8:	4602      	mov	r2, r0
 80194ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80194cc:	4669      	mov	r1, sp
 80194ce:	4628      	mov	r0, r5
 80194d0:	f000 f874 	bl	80195bc <_svfiprintf_r>
 80194d4:	1c43      	adds	r3, r0, #1
 80194d6:	bfbc      	itt	lt
 80194d8:	238b      	movlt	r3, #139	; 0x8b
 80194da:	602b      	strlt	r3, [r5, #0]
 80194dc:	2c00      	cmp	r4, #0
 80194de:	d0e1      	beq.n	80194a4 <_vsniprintf_r+0x14>
 80194e0:	9b00      	ldr	r3, [sp, #0]
 80194e2:	2200      	movs	r2, #0
 80194e4:	701a      	strb	r2, [r3, #0]
 80194e6:	e7dd      	b.n	80194a4 <_vsniprintf_r+0x14>

080194e8 <vsniprintf>:
 80194e8:	b507      	push	{r0, r1, r2, lr}
 80194ea:	9300      	str	r3, [sp, #0]
 80194ec:	4613      	mov	r3, r2
 80194ee:	460a      	mov	r2, r1
 80194f0:	4601      	mov	r1, r0
 80194f2:	4803      	ldr	r0, [pc, #12]	; (8019500 <vsniprintf+0x18>)
 80194f4:	6800      	ldr	r0, [r0, #0]
 80194f6:	f7ff ffcb 	bl	8019490 <_vsniprintf_r>
 80194fa:	b003      	add	sp, #12
 80194fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8019500:	2000021c 	.word	0x2000021c

08019504 <__malloc_lock>:
 8019504:	4770      	bx	lr

08019506 <__malloc_unlock>:
 8019506:	4770      	bx	lr

08019508 <__ssputs_r>:
 8019508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801950c:	688e      	ldr	r6, [r1, #8]
 801950e:	429e      	cmp	r6, r3
 8019510:	4682      	mov	sl, r0
 8019512:	460c      	mov	r4, r1
 8019514:	4690      	mov	r8, r2
 8019516:	4699      	mov	r9, r3
 8019518:	d837      	bhi.n	801958a <__ssputs_r+0x82>
 801951a:	898a      	ldrh	r2, [r1, #12]
 801951c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019520:	d031      	beq.n	8019586 <__ssputs_r+0x7e>
 8019522:	6825      	ldr	r5, [r4, #0]
 8019524:	6909      	ldr	r1, [r1, #16]
 8019526:	1a6f      	subs	r7, r5, r1
 8019528:	6965      	ldr	r5, [r4, #20]
 801952a:	2302      	movs	r3, #2
 801952c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019530:	fb95 f5f3 	sdiv	r5, r5, r3
 8019534:	f109 0301 	add.w	r3, r9, #1
 8019538:	443b      	add	r3, r7
 801953a:	429d      	cmp	r5, r3
 801953c:	bf38      	it	cc
 801953e:	461d      	movcc	r5, r3
 8019540:	0553      	lsls	r3, r2, #21
 8019542:	d530      	bpl.n	80195a6 <__ssputs_r+0x9e>
 8019544:	4629      	mov	r1, r5
 8019546:	f7ff ff05 	bl	8019354 <_malloc_r>
 801954a:	4606      	mov	r6, r0
 801954c:	b950      	cbnz	r0, 8019564 <__ssputs_r+0x5c>
 801954e:	230c      	movs	r3, #12
 8019550:	f8ca 3000 	str.w	r3, [sl]
 8019554:	89a3      	ldrh	r3, [r4, #12]
 8019556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801955a:	81a3      	strh	r3, [r4, #12]
 801955c:	f04f 30ff 	mov.w	r0, #4294967295
 8019560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019564:	463a      	mov	r2, r7
 8019566:	6921      	ldr	r1, [r4, #16]
 8019568:	f7ff fe92 	bl	8019290 <memcpy>
 801956c:	89a3      	ldrh	r3, [r4, #12]
 801956e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019576:	81a3      	strh	r3, [r4, #12]
 8019578:	6126      	str	r6, [r4, #16]
 801957a:	6165      	str	r5, [r4, #20]
 801957c:	443e      	add	r6, r7
 801957e:	1bed      	subs	r5, r5, r7
 8019580:	6026      	str	r6, [r4, #0]
 8019582:	60a5      	str	r5, [r4, #8]
 8019584:	464e      	mov	r6, r9
 8019586:	454e      	cmp	r6, r9
 8019588:	d900      	bls.n	801958c <__ssputs_r+0x84>
 801958a:	464e      	mov	r6, r9
 801958c:	4632      	mov	r2, r6
 801958e:	4641      	mov	r1, r8
 8019590:	6820      	ldr	r0, [r4, #0]
 8019592:	f000 fa93 	bl	8019abc <memmove>
 8019596:	68a3      	ldr	r3, [r4, #8]
 8019598:	1b9b      	subs	r3, r3, r6
 801959a:	60a3      	str	r3, [r4, #8]
 801959c:	6823      	ldr	r3, [r4, #0]
 801959e:	441e      	add	r6, r3
 80195a0:	6026      	str	r6, [r4, #0]
 80195a2:	2000      	movs	r0, #0
 80195a4:	e7dc      	b.n	8019560 <__ssputs_r+0x58>
 80195a6:	462a      	mov	r2, r5
 80195a8:	f000 faa1 	bl	8019aee <_realloc_r>
 80195ac:	4606      	mov	r6, r0
 80195ae:	2800      	cmp	r0, #0
 80195b0:	d1e2      	bne.n	8019578 <__ssputs_r+0x70>
 80195b2:	6921      	ldr	r1, [r4, #16]
 80195b4:	4650      	mov	r0, sl
 80195b6:	f7ff fe7f 	bl	80192b8 <_free_r>
 80195ba:	e7c8      	b.n	801954e <__ssputs_r+0x46>

080195bc <_svfiprintf_r>:
 80195bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195c0:	461d      	mov	r5, r3
 80195c2:	898b      	ldrh	r3, [r1, #12]
 80195c4:	061f      	lsls	r7, r3, #24
 80195c6:	b09d      	sub	sp, #116	; 0x74
 80195c8:	4680      	mov	r8, r0
 80195ca:	460c      	mov	r4, r1
 80195cc:	4616      	mov	r6, r2
 80195ce:	d50f      	bpl.n	80195f0 <_svfiprintf_r+0x34>
 80195d0:	690b      	ldr	r3, [r1, #16]
 80195d2:	b96b      	cbnz	r3, 80195f0 <_svfiprintf_r+0x34>
 80195d4:	2140      	movs	r1, #64	; 0x40
 80195d6:	f7ff febd 	bl	8019354 <_malloc_r>
 80195da:	6020      	str	r0, [r4, #0]
 80195dc:	6120      	str	r0, [r4, #16]
 80195de:	b928      	cbnz	r0, 80195ec <_svfiprintf_r+0x30>
 80195e0:	230c      	movs	r3, #12
 80195e2:	f8c8 3000 	str.w	r3, [r8]
 80195e6:	f04f 30ff 	mov.w	r0, #4294967295
 80195ea:	e0c8      	b.n	801977e <_svfiprintf_r+0x1c2>
 80195ec:	2340      	movs	r3, #64	; 0x40
 80195ee:	6163      	str	r3, [r4, #20]
 80195f0:	2300      	movs	r3, #0
 80195f2:	9309      	str	r3, [sp, #36]	; 0x24
 80195f4:	2320      	movs	r3, #32
 80195f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80195fa:	2330      	movs	r3, #48	; 0x30
 80195fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019600:	9503      	str	r5, [sp, #12]
 8019602:	f04f 0b01 	mov.w	fp, #1
 8019606:	4637      	mov	r7, r6
 8019608:	463d      	mov	r5, r7
 801960a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801960e:	b10b      	cbz	r3, 8019614 <_svfiprintf_r+0x58>
 8019610:	2b25      	cmp	r3, #37	; 0x25
 8019612:	d13e      	bne.n	8019692 <_svfiprintf_r+0xd6>
 8019614:	ebb7 0a06 	subs.w	sl, r7, r6
 8019618:	d00b      	beq.n	8019632 <_svfiprintf_r+0x76>
 801961a:	4653      	mov	r3, sl
 801961c:	4632      	mov	r2, r6
 801961e:	4621      	mov	r1, r4
 8019620:	4640      	mov	r0, r8
 8019622:	f7ff ff71 	bl	8019508 <__ssputs_r>
 8019626:	3001      	adds	r0, #1
 8019628:	f000 80a4 	beq.w	8019774 <_svfiprintf_r+0x1b8>
 801962c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801962e:	4453      	add	r3, sl
 8019630:	9309      	str	r3, [sp, #36]	; 0x24
 8019632:	783b      	ldrb	r3, [r7, #0]
 8019634:	2b00      	cmp	r3, #0
 8019636:	f000 809d 	beq.w	8019774 <_svfiprintf_r+0x1b8>
 801963a:	2300      	movs	r3, #0
 801963c:	f04f 32ff 	mov.w	r2, #4294967295
 8019640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019644:	9304      	str	r3, [sp, #16]
 8019646:	9307      	str	r3, [sp, #28]
 8019648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801964c:	931a      	str	r3, [sp, #104]	; 0x68
 801964e:	462f      	mov	r7, r5
 8019650:	2205      	movs	r2, #5
 8019652:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019656:	4850      	ldr	r0, [pc, #320]	; (8019798 <_svfiprintf_r+0x1dc>)
 8019658:	f7e6 fde2 	bl	8000220 <memchr>
 801965c:	9b04      	ldr	r3, [sp, #16]
 801965e:	b9d0      	cbnz	r0, 8019696 <_svfiprintf_r+0xda>
 8019660:	06d9      	lsls	r1, r3, #27
 8019662:	bf44      	itt	mi
 8019664:	2220      	movmi	r2, #32
 8019666:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801966a:	071a      	lsls	r2, r3, #28
 801966c:	bf44      	itt	mi
 801966e:	222b      	movmi	r2, #43	; 0x2b
 8019670:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019674:	782a      	ldrb	r2, [r5, #0]
 8019676:	2a2a      	cmp	r2, #42	; 0x2a
 8019678:	d015      	beq.n	80196a6 <_svfiprintf_r+0xea>
 801967a:	9a07      	ldr	r2, [sp, #28]
 801967c:	462f      	mov	r7, r5
 801967e:	2000      	movs	r0, #0
 8019680:	250a      	movs	r5, #10
 8019682:	4639      	mov	r1, r7
 8019684:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019688:	3b30      	subs	r3, #48	; 0x30
 801968a:	2b09      	cmp	r3, #9
 801968c:	d94d      	bls.n	801972a <_svfiprintf_r+0x16e>
 801968e:	b1b8      	cbz	r0, 80196c0 <_svfiprintf_r+0x104>
 8019690:	e00f      	b.n	80196b2 <_svfiprintf_r+0xf6>
 8019692:	462f      	mov	r7, r5
 8019694:	e7b8      	b.n	8019608 <_svfiprintf_r+0x4c>
 8019696:	4a40      	ldr	r2, [pc, #256]	; (8019798 <_svfiprintf_r+0x1dc>)
 8019698:	1a80      	subs	r0, r0, r2
 801969a:	fa0b f000 	lsl.w	r0, fp, r0
 801969e:	4318      	orrs	r0, r3
 80196a0:	9004      	str	r0, [sp, #16]
 80196a2:	463d      	mov	r5, r7
 80196a4:	e7d3      	b.n	801964e <_svfiprintf_r+0x92>
 80196a6:	9a03      	ldr	r2, [sp, #12]
 80196a8:	1d11      	adds	r1, r2, #4
 80196aa:	6812      	ldr	r2, [r2, #0]
 80196ac:	9103      	str	r1, [sp, #12]
 80196ae:	2a00      	cmp	r2, #0
 80196b0:	db01      	blt.n	80196b6 <_svfiprintf_r+0xfa>
 80196b2:	9207      	str	r2, [sp, #28]
 80196b4:	e004      	b.n	80196c0 <_svfiprintf_r+0x104>
 80196b6:	4252      	negs	r2, r2
 80196b8:	f043 0302 	orr.w	r3, r3, #2
 80196bc:	9207      	str	r2, [sp, #28]
 80196be:	9304      	str	r3, [sp, #16]
 80196c0:	783b      	ldrb	r3, [r7, #0]
 80196c2:	2b2e      	cmp	r3, #46	; 0x2e
 80196c4:	d10c      	bne.n	80196e0 <_svfiprintf_r+0x124>
 80196c6:	787b      	ldrb	r3, [r7, #1]
 80196c8:	2b2a      	cmp	r3, #42	; 0x2a
 80196ca:	d133      	bne.n	8019734 <_svfiprintf_r+0x178>
 80196cc:	9b03      	ldr	r3, [sp, #12]
 80196ce:	1d1a      	adds	r2, r3, #4
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	9203      	str	r2, [sp, #12]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	bfb8      	it	lt
 80196d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80196dc:	3702      	adds	r7, #2
 80196de:	9305      	str	r3, [sp, #20]
 80196e0:	4d2e      	ldr	r5, [pc, #184]	; (801979c <_svfiprintf_r+0x1e0>)
 80196e2:	7839      	ldrb	r1, [r7, #0]
 80196e4:	2203      	movs	r2, #3
 80196e6:	4628      	mov	r0, r5
 80196e8:	f7e6 fd9a 	bl	8000220 <memchr>
 80196ec:	b138      	cbz	r0, 80196fe <_svfiprintf_r+0x142>
 80196ee:	2340      	movs	r3, #64	; 0x40
 80196f0:	1b40      	subs	r0, r0, r5
 80196f2:	fa03 f000 	lsl.w	r0, r3, r0
 80196f6:	9b04      	ldr	r3, [sp, #16]
 80196f8:	4303      	orrs	r3, r0
 80196fa:	3701      	adds	r7, #1
 80196fc:	9304      	str	r3, [sp, #16]
 80196fe:	7839      	ldrb	r1, [r7, #0]
 8019700:	4827      	ldr	r0, [pc, #156]	; (80197a0 <_svfiprintf_r+0x1e4>)
 8019702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019706:	2206      	movs	r2, #6
 8019708:	1c7e      	adds	r6, r7, #1
 801970a:	f7e6 fd89 	bl	8000220 <memchr>
 801970e:	2800      	cmp	r0, #0
 8019710:	d038      	beq.n	8019784 <_svfiprintf_r+0x1c8>
 8019712:	4b24      	ldr	r3, [pc, #144]	; (80197a4 <_svfiprintf_r+0x1e8>)
 8019714:	bb13      	cbnz	r3, 801975c <_svfiprintf_r+0x1a0>
 8019716:	9b03      	ldr	r3, [sp, #12]
 8019718:	3307      	adds	r3, #7
 801971a:	f023 0307 	bic.w	r3, r3, #7
 801971e:	3308      	adds	r3, #8
 8019720:	9303      	str	r3, [sp, #12]
 8019722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019724:	444b      	add	r3, r9
 8019726:	9309      	str	r3, [sp, #36]	; 0x24
 8019728:	e76d      	b.n	8019606 <_svfiprintf_r+0x4a>
 801972a:	fb05 3202 	mla	r2, r5, r2, r3
 801972e:	2001      	movs	r0, #1
 8019730:	460f      	mov	r7, r1
 8019732:	e7a6      	b.n	8019682 <_svfiprintf_r+0xc6>
 8019734:	2300      	movs	r3, #0
 8019736:	3701      	adds	r7, #1
 8019738:	9305      	str	r3, [sp, #20]
 801973a:	4619      	mov	r1, r3
 801973c:	250a      	movs	r5, #10
 801973e:	4638      	mov	r0, r7
 8019740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019744:	3a30      	subs	r2, #48	; 0x30
 8019746:	2a09      	cmp	r2, #9
 8019748:	d903      	bls.n	8019752 <_svfiprintf_r+0x196>
 801974a:	2b00      	cmp	r3, #0
 801974c:	d0c8      	beq.n	80196e0 <_svfiprintf_r+0x124>
 801974e:	9105      	str	r1, [sp, #20]
 8019750:	e7c6      	b.n	80196e0 <_svfiprintf_r+0x124>
 8019752:	fb05 2101 	mla	r1, r5, r1, r2
 8019756:	2301      	movs	r3, #1
 8019758:	4607      	mov	r7, r0
 801975a:	e7f0      	b.n	801973e <_svfiprintf_r+0x182>
 801975c:	ab03      	add	r3, sp, #12
 801975e:	9300      	str	r3, [sp, #0]
 8019760:	4622      	mov	r2, r4
 8019762:	4b11      	ldr	r3, [pc, #68]	; (80197a8 <_svfiprintf_r+0x1ec>)
 8019764:	a904      	add	r1, sp, #16
 8019766:	4640      	mov	r0, r8
 8019768:	f3af 8000 	nop.w
 801976c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019770:	4681      	mov	r9, r0
 8019772:	d1d6      	bne.n	8019722 <_svfiprintf_r+0x166>
 8019774:	89a3      	ldrh	r3, [r4, #12]
 8019776:	065b      	lsls	r3, r3, #25
 8019778:	f53f af35 	bmi.w	80195e6 <_svfiprintf_r+0x2a>
 801977c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801977e:	b01d      	add	sp, #116	; 0x74
 8019780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019784:	ab03      	add	r3, sp, #12
 8019786:	9300      	str	r3, [sp, #0]
 8019788:	4622      	mov	r2, r4
 801978a:	4b07      	ldr	r3, [pc, #28]	; (80197a8 <_svfiprintf_r+0x1ec>)
 801978c:	a904      	add	r1, sp, #16
 801978e:	4640      	mov	r0, r8
 8019790:	f000 f882 	bl	8019898 <_printf_i>
 8019794:	e7ea      	b.n	801976c <_svfiprintf_r+0x1b0>
 8019796:	bf00      	nop
 8019798:	0801c454 	.word	0x0801c454
 801979c:	0801c45a 	.word	0x0801c45a
 80197a0:	0801c45e 	.word	0x0801c45e
 80197a4:	00000000 	.word	0x00000000
 80197a8:	08019509 	.word	0x08019509

080197ac <_printf_common>:
 80197ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197b0:	4691      	mov	r9, r2
 80197b2:	461f      	mov	r7, r3
 80197b4:	688a      	ldr	r2, [r1, #8]
 80197b6:	690b      	ldr	r3, [r1, #16]
 80197b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80197bc:	4293      	cmp	r3, r2
 80197be:	bfb8      	it	lt
 80197c0:	4613      	movlt	r3, r2
 80197c2:	f8c9 3000 	str.w	r3, [r9]
 80197c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80197ca:	4606      	mov	r6, r0
 80197cc:	460c      	mov	r4, r1
 80197ce:	b112      	cbz	r2, 80197d6 <_printf_common+0x2a>
 80197d0:	3301      	adds	r3, #1
 80197d2:	f8c9 3000 	str.w	r3, [r9]
 80197d6:	6823      	ldr	r3, [r4, #0]
 80197d8:	0699      	lsls	r1, r3, #26
 80197da:	bf42      	ittt	mi
 80197dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80197e0:	3302      	addmi	r3, #2
 80197e2:	f8c9 3000 	strmi.w	r3, [r9]
 80197e6:	6825      	ldr	r5, [r4, #0]
 80197e8:	f015 0506 	ands.w	r5, r5, #6
 80197ec:	d107      	bne.n	80197fe <_printf_common+0x52>
 80197ee:	f104 0a19 	add.w	sl, r4, #25
 80197f2:	68e3      	ldr	r3, [r4, #12]
 80197f4:	f8d9 2000 	ldr.w	r2, [r9]
 80197f8:	1a9b      	subs	r3, r3, r2
 80197fa:	42ab      	cmp	r3, r5
 80197fc:	dc28      	bgt.n	8019850 <_printf_common+0xa4>
 80197fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019802:	6822      	ldr	r2, [r4, #0]
 8019804:	3300      	adds	r3, #0
 8019806:	bf18      	it	ne
 8019808:	2301      	movne	r3, #1
 801980a:	0692      	lsls	r2, r2, #26
 801980c:	d42d      	bmi.n	801986a <_printf_common+0xbe>
 801980e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019812:	4639      	mov	r1, r7
 8019814:	4630      	mov	r0, r6
 8019816:	47c0      	blx	r8
 8019818:	3001      	adds	r0, #1
 801981a:	d020      	beq.n	801985e <_printf_common+0xb2>
 801981c:	6823      	ldr	r3, [r4, #0]
 801981e:	68e5      	ldr	r5, [r4, #12]
 8019820:	f8d9 2000 	ldr.w	r2, [r9]
 8019824:	f003 0306 	and.w	r3, r3, #6
 8019828:	2b04      	cmp	r3, #4
 801982a:	bf08      	it	eq
 801982c:	1aad      	subeq	r5, r5, r2
 801982e:	68a3      	ldr	r3, [r4, #8]
 8019830:	6922      	ldr	r2, [r4, #16]
 8019832:	bf0c      	ite	eq
 8019834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019838:	2500      	movne	r5, #0
 801983a:	4293      	cmp	r3, r2
 801983c:	bfc4      	itt	gt
 801983e:	1a9b      	subgt	r3, r3, r2
 8019840:	18ed      	addgt	r5, r5, r3
 8019842:	f04f 0900 	mov.w	r9, #0
 8019846:	341a      	adds	r4, #26
 8019848:	454d      	cmp	r5, r9
 801984a:	d11a      	bne.n	8019882 <_printf_common+0xd6>
 801984c:	2000      	movs	r0, #0
 801984e:	e008      	b.n	8019862 <_printf_common+0xb6>
 8019850:	2301      	movs	r3, #1
 8019852:	4652      	mov	r2, sl
 8019854:	4639      	mov	r1, r7
 8019856:	4630      	mov	r0, r6
 8019858:	47c0      	blx	r8
 801985a:	3001      	adds	r0, #1
 801985c:	d103      	bne.n	8019866 <_printf_common+0xba>
 801985e:	f04f 30ff 	mov.w	r0, #4294967295
 8019862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019866:	3501      	adds	r5, #1
 8019868:	e7c3      	b.n	80197f2 <_printf_common+0x46>
 801986a:	18e1      	adds	r1, r4, r3
 801986c:	1c5a      	adds	r2, r3, #1
 801986e:	2030      	movs	r0, #48	; 0x30
 8019870:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019874:	4422      	add	r2, r4
 8019876:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801987a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801987e:	3302      	adds	r3, #2
 8019880:	e7c5      	b.n	801980e <_printf_common+0x62>
 8019882:	2301      	movs	r3, #1
 8019884:	4622      	mov	r2, r4
 8019886:	4639      	mov	r1, r7
 8019888:	4630      	mov	r0, r6
 801988a:	47c0      	blx	r8
 801988c:	3001      	adds	r0, #1
 801988e:	d0e6      	beq.n	801985e <_printf_common+0xb2>
 8019890:	f109 0901 	add.w	r9, r9, #1
 8019894:	e7d8      	b.n	8019848 <_printf_common+0x9c>
	...

08019898 <_printf_i>:
 8019898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801989c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80198a0:	460c      	mov	r4, r1
 80198a2:	7e09      	ldrb	r1, [r1, #24]
 80198a4:	b085      	sub	sp, #20
 80198a6:	296e      	cmp	r1, #110	; 0x6e
 80198a8:	4617      	mov	r7, r2
 80198aa:	4606      	mov	r6, r0
 80198ac:	4698      	mov	r8, r3
 80198ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80198b0:	f000 80b3 	beq.w	8019a1a <_printf_i+0x182>
 80198b4:	d822      	bhi.n	80198fc <_printf_i+0x64>
 80198b6:	2963      	cmp	r1, #99	; 0x63
 80198b8:	d036      	beq.n	8019928 <_printf_i+0x90>
 80198ba:	d80a      	bhi.n	80198d2 <_printf_i+0x3a>
 80198bc:	2900      	cmp	r1, #0
 80198be:	f000 80b9 	beq.w	8019a34 <_printf_i+0x19c>
 80198c2:	2958      	cmp	r1, #88	; 0x58
 80198c4:	f000 8083 	beq.w	80199ce <_printf_i+0x136>
 80198c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80198cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80198d0:	e032      	b.n	8019938 <_printf_i+0xa0>
 80198d2:	2964      	cmp	r1, #100	; 0x64
 80198d4:	d001      	beq.n	80198da <_printf_i+0x42>
 80198d6:	2969      	cmp	r1, #105	; 0x69
 80198d8:	d1f6      	bne.n	80198c8 <_printf_i+0x30>
 80198da:	6820      	ldr	r0, [r4, #0]
 80198dc:	6813      	ldr	r3, [r2, #0]
 80198de:	0605      	lsls	r5, r0, #24
 80198e0:	f103 0104 	add.w	r1, r3, #4
 80198e4:	d52a      	bpl.n	801993c <_printf_i+0xa4>
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	6011      	str	r1, [r2, #0]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	da03      	bge.n	80198f6 <_printf_i+0x5e>
 80198ee:	222d      	movs	r2, #45	; 0x2d
 80198f0:	425b      	negs	r3, r3
 80198f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80198f6:	486f      	ldr	r0, [pc, #444]	; (8019ab4 <_printf_i+0x21c>)
 80198f8:	220a      	movs	r2, #10
 80198fa:	e039      	b.n	8019970 <_printf_i+0xd8>
 80198fc:	2973      	cmp	r1, #115	; 0x73
 80198fe:	f000 809d 	beq.w	8019a3c <_printf_i+0x1a4>
 8019902:	d808      	bhi.n	8019916 <_printf_i+0x7e>
 8019904:	296f      	cmp	r1, #111	; 0x6f
 8019906:	d020      	beq.n	801994a <_printf_i+0xb2>
 8019908:	2970      	cmp	r1, #112	; 0x70
 801990a:	d1dd      	bne.n	80198c8 <_printf_i+0x30>
 801990c:	6823      	ldr	r3, [r4, #0]
 801990e:	f043 0320 	orr.w	r3, r3, #32
 8019912:	6023      	str	r3, [r4, #0]
 8019914:	e003      	b.n	801991e <_printf_i+0x86>
 8019916:	2975      	cmp	r1, #117	; 0x75
 8019918:	d017      	beq.n	801994a <_printf_i+0xb2>
 801991a:	2978      	cmp	r1, #120	; 0x78
 801991c:	d1d4      	bne.n	80198c8 <_printf_i+0x30>
 801991e:	2378      	movs	r3, #120	; 0x78
 8019920:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019924:	4864      	ldr	r0, [pc, #400]	; (8019ab8 <_printf_i+0x220>)
 8019926:	e055      	b.n	80199d4 <_printf_i+0x13c>
 8019928:	6813      	ldr	r3, [r2, #0]
 801992a:	1d19      	adds	r1, r3, #4
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	6011      	str	r1, [r2, #0]
 8019930:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019934:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019938:	2301      	movs	r3, #1
 801993a:	e08c      	b.n	8019a56 <_printf_i+0x1be>
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	6011      	str	r1, [r2, #0]
 8019940:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019944:	bf18      	it	ne
 8019946:	b21b      	sxthne	r3, r3
 8019948:	e7cf      	b.n	80198ea <_printf_i+0x52>
 801994a:	6813      	ldr	r3, [r2, #0]
 801994c:	6825      	ldr	r5, [r4, #0]
 801994e:	1d18      	adds	r0, r3, #4
 8019950:	6010      	str	r0, [r2, #0]
 8019952:	0628      	lsls	r0, r5, #24
 8019954:	d501      	bpl.n	801995a <_printf_i+0xc2>
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	e002      	b.n	8019960 <_printf_i+0xc8>
 801995a:	0668      	lsls	r0, r5, #25
 801995c:	d5fb      	bpl.n	8019956 <_printf_i+0xbe>
 801995e:	881b      	ldrh	r3, [r3, #0]
 8019960:	4854      	ldr	r0, [pc, #336]	; (8019ab4 <_printf_i+0x21c>)
 8019962:	296f      	cmp	r1, #111	; 0x6f
 8019964:	bf14      	ite	ne
 8019966:	220a      	movne	r2, #10
 8019968:	2208      	moveq	r2, #8
 801996a:	2100      	movs	r1, #0
 801996c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019970:	6865      	ldr	r5, [r4, #4]
 8019972:	60a5      	str	r5, [r4, #8]
 8019974:	2d00      	cmp	r5, #0
 8019976:	f2c0 8095 	blt.w	8019aa4 <_printf_i+0x20c>
 801997a:	6821      	ldr	r1, [r4, #0]
 801997c:	f021 0104 	bic.w	r1, r1, #4
 8019980:	6021      	str	r1, [r4, #0]
 8019982:	2b00      	cmp	r3, #0
 8019984:	d13d      	bne.n	8019a02 <_printf_i+0x16a>
 8019986:	2d00      	cmp	r5, #0
 8019988:	f040 808e 	bne.w	8019aa8 <_printf_i+0x210>
 801998c:	4665      	mov	r5, ip
 801998e:	2a08      	cmp	r2, #8
 8019990:	d10b      	bne.n	80199aa <_printf_i+0x112>
 8019992:	6823      	ldr	r3, [r4, #0]
 8019994:	07db      	lsls	r3, r3, #31
 8019996:	d508      	bpl.n	80199aa <_printf_i+0x112>
 8019998:	6923      	ldr	r3, [r4, #16]
 801999a:	6862      	ldr	r2, [r4, #4]
 801999c:	429a      	cmp	r2, r3
 801999e:	bfde      	ittt	le
 80199a0:	2330      	movle	r3, #48	; 0x30
 80199a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80199a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80199aa:	ebac 0305 	sub.w	r3, ip, r5
 80199ae:	6123      	str	r3, [r4, #16]
 80199b0:	f8cd 8000 	str.w	r8, [sp]
 80199b4:	463b      	mov	r3, r7
 80199b6:	aa03      	add	r2, sp, #12
 80199b8:	4621      	mov	r1, r4
 80199ba:	4630      	mov	r0, r6
 80199bc:	f7ff fef6 	bl	80197ac <_printf_common>
 80199c0:	3001      	adds	r0, #1
 80199c2:	d14d      	bne.n	8019a60 <_printf_i+0x1c8>
 80199c4:	f04f 30ff 	mov.w	r0, #4294967295
 80199c8:	b005      	add	sp, #20
 80199ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199ce:	4839      	ldr	r0, [pc, #228]	; (8019ab4 <_printf_i+0x21c>)
 80199d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80199d4:	6813      	ldr	r3, [r2, #0]
 80199d6:	6821      	ldr	r1, [r4, #0]
 80199d8:	1d1d      	adds	r5, r3, #4
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	6015      	str	r5, [r2, #0]
 80199de:	060a      	lsls	r2, r1, #24
 80199e0:	d50b      	bpl.n	80199fa <_printf_i+0x162>
 80199e2:	07ca      	lsls	r2, r1, #31
 80199e4:	bf44      	itt	mi
 80199e6:	f041 0120 	orrmi.w	r1, r1, #32
 80199ea:	6021      	strmi	r1, [r4, #0]
 80199ec:	b91b      	cbnz	r3, 80199f6 <_printf_i+0x15e>
 80199ee:	6822      	ldr	r2, [r4, #0]
 80199f0:	f022 0220 	bic.w	r2, r2, #32
 80199f4:	6022      	str	r2, [r4, #0]
 80199f6:	2210      	movs	r2, #16
 80199f8:	e7b7      	b.n	801996a <_printf_i+0xd2>
 80199fa:	064d      	lsls	r5, r1, #25
 80199fc:	bf48      	it	mi
 80199fe:	b29b      	uxthmi	r3, r3
 8019a00:	e7ef      	b.n	80199e2 <_printf_i+0x14a>
 8019a02:	4665      	mov	r5, ip
 8019a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8019a08:	fb02 3311 	mls	r3, r2, r1, r3
 8019a0c:	5cc3      	ldrb	r3, [r0, r3]
 8019a0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8019a12:	460b      	mov	r3, r1
 8019a14:	2900      	cmp	r1, #0
 8019a16:	d1f5      	bne.n	8019a04 <_printf_i+0x16c>
 8019a18:	e7b9      	b.n	801998e <_printf_i+0xf6>
 8019a1a:	6813      	ldr	r3, [r2, #0]
 8019a1c:	6825      	ldr	r5, [r4, #0]
 8019a1e:	6961      	ldr	r1, [r4, #20]
 8019a20:	1d18      	adds	r0, r3, #4
 8019a22:	6010      	str	r0, [r2, #0]
 8019a24:	0628      	lsls	r0, r5, #24
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	d501      	bpl.n	8019a2e <_printf_i+0x196>
 8019a2a:	6019      	str	r1, [r3, #0]
 8019a2c:	e002      	b.n	8019a34 <_printf_i+0x19c>
 8019a2e:	066a      	lsls	r2, r5, #25
 8019a30:	d5fb      	bpl.n	8019a2a <_printf_i+0x192>
 8019a32:	8019      	strh	r1, [r3, #0]
 8019a34:	2300      	movs	r3, #0
 8019a36:	6123      	str	r3, [r4, #16]
 8019a38:	4665      	mov	r5, ip
 8019a3a:	e7b9      	b.n	80199b0 <_printf_i+0x118>
 8019a3c:	6813      	ldr	r3, [r2, #0]
 8019a3e:	1d19      	adds	r1, r3, #4
 8019a40:	6011      	str	r1, [r2, #0]
 8019a42:	681d      	ldr	r5, [r3, #0]
 8019a44:	6862      	ldr	r2, [r4, #4]
 8019a46:	2100      	movs	r1, #0
 8019a48:	4628      	mov	r0, r5
 8019a4a:	f7e6 fbe9 	bl	8000220 <memchr>
 8019a4e:	b108      	cbz	r0, 8019a54 <_printf_i+0x1bc>
 8019a50:	1b40      	subs	r0, r0, r5
 8019a52:	6060      	str	r0, [r4, #4]
 8019a54:	6863      	ldr	r3, [r4, #4]
 8019a56:	6123      	str	r3, [r4, #16]
 8019a58:	2300      	movs	r3, #0
 8019a5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a5e:	e7a7      	b.n	80199b0 <_printf_i+0x118>
 8019a60:	6923      	ldr	r3, [r4, #16]
 8019a62:	462a      	mov	r2, r5
 8019a64:	4639      	mov	r1, r7
 8019a66:	4630      	mov	r0, r6
 8019a68:	47c0      	blx	r8
 8019a6a:	3001      	adds	r0, #1
 8019a6c:	d0aa      	beq.n	80199c4 <_printf_i+0x12c>
 8019a6e:	6823      	ldr	r3, [r4, #0]
 8019a70:	079b      	lsls	r3, r3, #30
 8019a72:	d413      	bmi.n	8019a9c <_printf_i+0x204>
 8019a74:	68e0      	ldr	r0, [r4, #12]
 8019a76:	9b03      	ldr	r3, [sp, #12]
 8019a78:	4298      	cmp	r0, r3
 8019a7a:	bfb8      	it	lt
 8019a7c:	4618      	movlt	r0, r3
 8019a7e:	e7a3      	b.n	80199c8 <_printf_i+0x130>
 8019a80:	2301      	movs	r3, #1
 8019a82:	464a      	mov	r2, r9
 8019a84:	4639      	mov	r1, r7
 8019a86:	4630      	mov	r0, r6
 8019a88:	47c0      	blx	r8
 8019a8a:	3001      	adds	r0, #1
 8019a8c:	d09a      	beq.n	80199c4 <_printf_i+0x12c>
 8019a8e:	3501      	adds	r5, #1
 8019a90:	68e3      	ldr	r3, [r4, #12]
 8019a92:	9a03      	ldr	r2, [sp, #12]
 8019a94:	1a9b      	subs	r3, r3, r2
 8019a96:	42ab      	cmp	r3, r5
 8019a98:	dcf2      	bgt.n	8019a80 <_printf_i+0x1e8>
 8019a9a:	e7eb      	b.n	8019a74 <_printf_i+0x1dc>
 8019a9c:	2500      	movs	r5, #0
 8019a9e:	f104 0919 	add.w	r9, r4, #25
 8019aa2:	e7f5      	b.n	8019a90 <_printf_i+0x1f8>
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d1ac      	bne.n	8019a02 <_printf_i+0x16a>
 8019aa8:	7803      	ldrb	r3, [r0, #0]
 8019aaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019aae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019ab2:	e76c      	b.n	801998e <_printf_i+0xf6>
 8019ab4:	0801c465 	.word	0x0801c465
 8019ab8:	0801c476 	.word	0x0801c476

08019abc <memmove>:
 8019abc:	4288      	cmp	r0, r1
 8019abe:	b510      	push	{r4, lr}
 8019ac0:	eb01 0302 	add.w	r3, r1, r2
 8019ac4:	d807      	bhi.n	8019ad6 <memmove+0x1a>
 8019ac6:	1e42      	subs	r2, r0, #1
 8019ac8:	4299      	cmp	r1, r3
 8019aca:	d00a      	beq.n	8019ae2 <memmove+0x26>
 8019acc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ad0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019ad4:	e7f8      	b.n	8019ac8 <memmove+0xc>
 8019ad6:	4283      	cmp	r3, r0
 8019ad8:	d9f5      	bls.n	8019ac6 <memmove+0xa>
 8019ada:	1881      	adds	r1, r0, r2
 8019adc:	1ad2      	subs	r2, r2, r3
 8019ade:	42d3      	cmn	r3, r2
 8019ae0:	d100      	bne.n	8019ae4 <memmove+0x28>
 8019ae2:	bd10      	pop	{r4, pc}
 8019ae4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019ae8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019aec:	e7f7      	b.n	8019ade <memmove+0x22>

08019aee <_realloc_r>:
 8019aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019af0:	4607      	mov	r7, r0
 8019af2:	4614      	mov	r4, r2
 8019af4:	460e      	mov	r6, r1
 8019af6:	b921      	cbnz	r1, 8019b02 <_realloc_r+0x14>
 8019af8:	4611      	mov	r1, r2
 8019afa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019afe:	f7ff bc29 	b.w	8019354 <_malloc_r>
 8019b02:	b922      	cbnz	r2, 8019b0e <_realloc_r+0x20>
 8019b04:	f7ff fbd8 	bl	80192b8 <_free_r>
 8019b08:	4625      	mov	r5, r4
 8019b0a:	4628      	mov	r0, r5
 8019b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b0e:	f000 f814 	bl	8019b3a <_malloc_usable_size_r>
 8019b12:	42a0      	cmp	r0, r4
 8019b14:	d20f      	bcs.n	8019b36 <_realloc_r+0x48>
 8019b16:	4621      	mov	r1, r4
 8019b18:	4638      	mov	r0, r7
 8019b1a:	f7ff fc1b 	bl	8019354 <_malloc_r>
 8019b1e:	4605      	mov	r5, r0
 8019b20:	2800      	cmp	r0, #0
 8019b22:	d0f2      	beq.n	8019b0a <_realloc_r+0x1c>
 8019b24:	4631      	mov	r1, r6
 8019b26:	4622      	mov	r2, r4
 8019b28:	f7ff fbb2 	bl	8019290 <memcpy>
 8019b2c:	4631      	mov	r1, r6
 8019b2e:	4638      	mov	r0, r7
 8019b30:	f7ff fbc2 	bl	80192b8 <_free_r>
 8019b34:	e7e9      	b.n	8019b0a <_realloc_r+0x1c>
 8019b36:	4635      	mov	r5, r6
 8019b38:	e7e7      	b.n	8019b0a <_realloc_r+0x1c>

08019b3a <_malloc_usable_size_r>:
 8019b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b3e:	1f18      	subs	r0, r3, #4
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	bfbc      	itt	lt
 8019b44:	580b      	ldrlt	r3, [r1, r0]
 8019b46:	18c0      	addlt	r0, r0, r3
 8019b48:	4770      	bx	lr

08019b4a <fmaxf>:
 8019b4a:	b508      	push	{r3, lr}
 8019b4c:	ed2d 8b02 	vpush	{d8}
 8019b50:	eeb0 8a40 	vmov.f32	s16, s0
 8019b54:	eef0 8a60 	vmov.f32	s17, s1
 8019b58:	f000 f82e 	bl	8019bb8 <__fpclassifyf>
 8019b5c:	b148      	cbz	r0, 8019b72 <fmaxf+0x28>
 8019b5e:	eeb0 0a68 	vmov.f32	s0, s17
 8019b62:	f000 f829 	bl	8019bb8 <__fpclassifyf>
 8019b66:	b130      	cbz	r0, 8019b76 <fmaxf+0x2c>
 8019b68:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b70:	dc01      	bgt.n	8019b76 <fmaxf+0x2c>
 8019b72:	eeb0 8a68 	vmov.f32	s16, s17
 8019b76:	eeb0 0a48 	vmov.f32	s0, s16
 8019b7a:	ecbd 8b02 	vpop	{d8}
 8019b7e:	bd08      	pop	{r3, pc}

08019b80 <fminf>:
 8019b80:	b508      	push	{r3, lr}
 8019b82:	ed2d 8b02 	vpush	{d8}
 8019b86:	eeb0 8a40 	vmov.f32	s16, s0
 8019b8a:	eef0 8a60 	vmov.f32	s17, s1
 8019b8e:	f000 f813 	bl	8019bb8 <__fpclassifyf>
 8019b92:	b148      	cbz	r0, 8019ba8 <fminf+0x28>
 8019b94:	eeb0 0a68 	vmov.f32	s0, s17
 8019b98:	f000 f80e 	bl	8019bb8 <__fpclassifyf>
 8019b9c:	b130      	cbz	r0, 8019bac <fminf+0x2c>
 8019b9e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ba6:	d401      	bmi.n	8019bac <fminf+0x2c>
 8019ba8:	eeb0 8a68 	vmov.f32	s16, s17
 8019bac:	eeb0 0a48 	vmov.f32	s0, s16
 8019bb0:	ecbd 8b02 	vpop	{d8}
 8019bb4:	bd08      	pop	{r3, pc}
	...

08019bb8 <__fpclassifyf>:
 8019bb8:	ee10 3a10 	vmov	r3, s0
 8019bbc:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8019bc0:	d00d      	beq.n	8019bde <__fpclassifyf+0x26>
 8019bc2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8019bc6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8019bca:	d30a      	bcc.n	8019be2 <__fpclassifyf+0x2a>
 8019bcc:	4b07      	ldr	r3, [pc, #28]	; (8019bec <__fpclassifyf+0x34>)
 8019bce:	1e42      	subs	r2, r0, #1
 8019bd0:	429a      	cmp	r2, r3
 8019bd2:	d908      	bls.n	8019be6 <__fpclassifyf+0x2e>
 8019bd4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8019bd8:	4258      	negs	r0, r3
 8019bda:	4158      	adcs	r0, r3
 8019bdc:	4770      	bx	lr
 8019bde:	2002      	movs	r0, #2
 8019be0:	4770      	bx	lr
 8019be2:	2004      	movs	r0, #4
 8019be4:	4770      	bx	lr
 8019be6:	2003      	movs	r0, #3
 8019be8:	4770      	bx	lr
 8019bea:	bf00      	nop
 8019bec:	007ffffe 	.word	0x007ffffe

08019bf0 <pow>:
 8019bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bf4:	ed2d 8b04 	vpush	{d8-d9}
 8019bf8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8019ecc <pow+0x2dc>
 8019bfc:	b08d      	sub	sp, #52	; 0x34
 8019bfe:	ec57 6b10 	vmov	r6, r7, d0
 8019c02:	ec55 4b11 	vmov	r4, r5, d1
 8019c06:	f000 fb73 	bl	801a2f0 <__ieee754_pow>
 8019c0a:	f999 3000 	ldrsb.w	r3, [r9]
 8019c0e:	9300      	str	r3, [sp, #0]
 8019c10:	3301      	adds	r3, #1
 8019c12:	eeb0 8a40 	vmov.f32	s16, s0
 8019c16:	eef0 8a60 	vmov.f32	s17, s1
 8019c1a:	46c8      	mov	r8, r9
 8019c1c:	d05f      	beq.n	8019cde <pow+0xee>
 8019c1e:	4622      	mov	r2, r4
 8019c20:	462b      	mov	r3, r5
 8019c22:	4620      	mov	r0, r4
 8019c24:	4629      	mov	r1, r5
 8019c26:	f7e6 ffa1 	bl	8000b6c <__aeabi_dcmpun>
 8019c2a:	4683      	mov	fp, r0
 8019c2c:	2800      	cmp	r0, #0
 8019c2e:	d156      	bne.n	8019cde <pow+0xee>
 8019c30:	4632      	mov	r2, r6
 8019c32:	463b      	mov	r3, r7
 8019c34:	4630      	mov	r0, r6
 8019c36:	4639      	mov	r1, r7
 8019c38:	f7e6 ff98 	bl	8000b6c <__aeabi_dcmpun>
 8019c3c:	9001      	str	r0, [sp, #4]
 8019c3e:	b1e8      	cbz	r0, 8019c7c <pow+0x8c>
 8019c40:	2200      	movs	r2, #0
 8019c42:	2300      	movs	r3, #0
 8019c44:	4620      	mov	r0, r4
 8019c46:	4629      	mov	r1, r5
 8019c48:	f7e6 ff5e 	bl	8000b08 <__aeabi_dcmpeq>
 8019c4c:	2800      	cmp	r0, #0
 8019c4e:	d046      	beq.n	8019cde <pow+0xee>
 8019c50:	2301      	movs	r3, #1
 8019c52:	9302      	str	r3, [sp, #8]
 8019c54:	4b96      	ldr	r3, [pc, #600]	; (8019eb0 <pow+0x2c0>)
 8019c56:	9303      	str	r3, [sp, #12]
 8019c58:	4b96      	ldr	r3, [pc, #600]	; (8019eb4 <pow+0x2c4>)
 8019c5a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8019c5e:	2200      	movs	r2, #0
 8019c60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019c64:	9b00      	ldr	r3, [sp, #0]
 8019c66:	2b02      	cmp	r3, #2
 8019c68:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8019c6c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019c70:	d033      	beq.n	8019cda <pow+0xea>
 8019c72:	a802      	add	r0, sp, #8
 8019c74:	f001 fbce 	bl	801b414 <matherr>
 8019c78:	bb48      	cbnz	r0, 8019cce <pow+0xde>
 8019c7a:	e05d      	b.n	8019d38 <pow+0x148>
 8019c7c:	f04f 0a00 	mov.w	sl, #0
 8019c80:	f04f 0b00 	mov.w	fp, #0
 8019c84:	4652      	mov	r2, sl
 8019c86:	465b      	mov	r3, fp
 8019c88:	4630      	mov	r0, r6
 8019c8a:	4639      	mov	r1, r7
 8019c8c:	f7e6 ff3c 	bl	8000b08 <__aeabi_dcmpeq>
 8019c90:	ec4b ab19 	vmov	d9, sl, fp
 8019c94:	2800      	cmp	r0, #0
 8019c96:	d054      	beq.n	8019d42 <pow+0x152>
 8019c98:	4652      	mov	r2, sl
 8019c9a:	465b      	mov	r3, fp
 8019c9c:	4620      	mov	r0, r4
 8019c9e:	4629      	mov	r1, r5
 8019ca0:	f7e6 ff32 	bl	8000b08 <__aeabi_dcmpeq>
 8019ca4:	4680      	mov	r8, r0
 8019ca6:	b318      	cbz	r0, 8019cf0 <pow+0x100>
 8019ca8:	2301      	movs	r3, #1
 8019caa:	9302      	str	r3, [sp, #8]
 8019cac:	4b80      	ldr	r3, [pc, #512]	; (8019eb0 <pow+0x2c0>)
 8019cae:	9303      	str	r3, [sp, #12]
 8019cb0:	9b01      	ldr	r3, [sp, #4]
 8019cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8019cb4:	9b00      	ldr	r3, [sp, #0]
 8019cb6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8019cba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019cbe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d0d5      	beq.n	8019c72 <pow+0x82>
 8019cc6:	4b7b      	ldr	r3, [pc, #492]	; (8019eb4 <pow+0x2c4>)
 8019cc8:	2200      	movs	r2, #0
 8019cca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cd0:	b11b      	cbz	r3, 8019cda <pow+0xea>
 8019cd2:	f7ff faa3 	bl	801921c <__errno>
 8019cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cd8:	6003      	str	r3, [r0, #0]
 8019cda:	ed9d 8b08 	vldr	d8, [sp, #32]
 8019cde:	eeb0 0a48 	vmov.f32	s0, s16
 8019ce2:	eef0 0a68 	vmov.f32	s1, s17
 8019ce6:	b00d      	add	sp, #52	; 0x34
 8019ce8:	ecbd 8b04 	vpop	{d8-d9}
 8019cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cf0:	ec45 4b10 	vmov	d0, r4, r5
 8019cf4:	f001 fb86 	bl	801b404 <finite>
 8019cf8:	2800      	cmp	r0, #0
 8019cfa:	d0f0      	beq.n	8019cde <pow+0xee>
 8019cfc:	4652      	mov	r2, sl
 8019cfe:	465b      	mov	r3, fp
 8019d00:	4620      	mov	r0, r4
 8019d02:	4629      	mov	r1, r5
 8019d04:	f7e6 ff0a 	bl	8000b1c <__aeabi_dcmplt>
 8019d08:	2800      	cmp	r0, #0
 8019d0a:	d0e8      	beq.n	8019cde <pow+0xee>
 8019d0c:	2301      	movs	r3, #1
 8019d0e:	9302      	str	r3, [sp, #8]
 8019d10:	4b67      	ldr	r3, [pc, #412]	; (8019eb0 <pow+0x2c0>)
 8019d12:	9303      	str	r3, [sp, #12]
 8019d14:	f999 3000 	ldrsb.w	r3, [r9]
 8019d18:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8019d1c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8019d20:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019d24:	b913      	cbnz	r3, 8019d2c <pow+0x13c>
 8019d26:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8019d2a:	e7a2      	b.n	8019c72 <pow+0x82>
 8019d2c:	4962      	ldr	r1, [pc, #392]	; (8019eb8 <pow+0x2c8>)
 8019d2e:	2000      	movs	r0, #0
 8019d30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019d34:	2b02      	cmp	r3, #2
 8019d36:	d19c      	bne.n	8019c72 <pow+0x82>
 8019d38:	f7ff fa70 	bl	801921c <__errno>
 8019d3c:	2321      	movs	r3, #33	; 0x21
 8019d3e:	6003      	str	r3, [r0, #0]
 8019d40:	e7c5      	b.n	8019cce <pow+0xde>
 8019d42:	eeb0 0a48 	vmov.f32	s0, s16
 8019d46:	eef0 0a68 	vmov.f32	s1, s17
 8019d4a:	f001 fb5b 	bl	801b404 <finite>
 8019d4e:	9000      	str	r0, [sp, #0]
 8019d50:	2800      	cmp	r0, #0
 8019d52:	f040 8081 	bne.w	8019e58 <pow+0x268>
 8019d56:	ec47 6b10 	vmov	d0, r6, r7
 8019d5a:	f001 fb53 	bl	801b404 <finite>
 8019d5e:	2800      	cmp	r0, #0
 8019d60:	d07a      	beq.n	8019e58 <pow+0x268>
 8019d62:	ec45 4b10 	vmov	d0, r4, r5
 8019d66:	f001 fb4d 	bl	801b404 <finite>
 8019d6a:	2800      	cmp	r0, #0
 8019d6c:	d074      	beq.n	8019e58 <pow+0x268>
 8019d6e:	ec53 2b18 	vmov	r2, r3, d8
 8019d72:	ee18 0a10 	vmov	r0, s16
 8019d76:	4619      	mov	r1, r3
 8019d78:	f7e6 fef8 	bl	8000b6c <__aeabi_dcmpun>
 8019d7c:	f999 9000 	ldrsb.w	r9, [r9]
 8019d80:	4b4b      	ldr	r3, [pc, #300]	; (8019eb0 <pow+0x2c0>)
 8019d82:	b1b0      	cbz	r0, 8019db2 <pow+0x1c2>
 8019d84:	2201      	movs	r2, #1
 8019d86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019d8a:	9b00      	ldr	r3, [sp, #0]
 8019d8c:	930a      	str	r3, [sp, #40]	; 0x28
 8019d8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8019d92:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019d96:	f1b9 0f00 	cmp.w	r9, #0
 8019d9a:	d0c4      	beq.n	8019d26 <pow+0x136>
 8019d9c:	4652      	mov	r2, sl
 8019d9e:	465b      	mov	r3, fp
 8019da0:	4650      	mov	r0, sl
 8019da2:	4659      	mov	r1, fp
 8019da4:	f7e6 fd72 	bl	800088c <__aeabi_ddiv>
 8019da8:	f1b9 0f02 	cmp.w	r9, #2
 8019dac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019db0:	e7c1      	b.n	8019d36 <pow+0x146>
 8019db2:	2203      	movs	r2, #3
 8019db4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019db8:	900a      	str	r0, [sp, #40]	; 0x28
 8019dba:	4629      	mov	r1, r5
 8019dbc:	4620      	mov	r0, r4
 8019dbe:	2200      	movs	r2, #0
 8019dc0:	4b3e      	ldr	r3, [pc, #248]	; (8019ebc <pow+0x2cc>)
 8019dc2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019dc6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8019dca:	f7e6 fc35 	bl	8000638 <__aeabi_dmul>
 8019dce:	4604      	mov	r4, r0
 8019dd0:	460d      	mov	r5, r1
 8019dd2:	f1b9 0f00 	cmp.w	r9, #0
 8019dd6:	d124      	bne.n	8019e22 <pow+0x232>
 8019dd8:	4b39      	ldr	r3, [pc, #228]	; (8019ec0 <pow+0x2d0>)
 8019dda:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8019dde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019de2:	4630      	mov	r0, r6
 8019de4:	4652      	mov	r2, sl
 8019de6:	465b      	mov	r3, fp
 8019de8:	4639      	mov	r1, r7
 8019dea:	f7e6 fe97 	bl	8000b1c <__aeabi_dcmplt>
 8019dee:	2800      	cmp	r0, #0
 8019df0:	d056      	beq.n	8019ea0 <pow+0x2b0>
 8019df2:	ec45 4b10 	vmov	d0, r4, r5
 8019df6:	f001 fb17 	bl	801b428 <rint>
 8019dfa:	4622      	mov	r2, r4
 8019dfc:	462b      	mov	r3, r5
 8019dfe:	ec51 0b10 	vmov	r0, r1, d0
 8019e02:	f7e6 fe81 	bl	8000b08 <__aeabi_dcmpeq>
 8019e06:	b920      	cbnz	r0, 8019e12 <pow+0x222>
 8019e08:	4b2e      	ldr	r3, [pc, #184]	; (8019ec4 <pow+0x2d4>)
 8019e0a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8019e0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019e12:	f998 3000 	ldrsb.w	r3, [r8]
 8019e16:	2b02      	cmp	r3, #2
 8019e18:	d142      	bne.n	8019ea0 <pow+0x2b0>
 8019e1a:	f7ff f9ff 	bl	801921c <__errno>
 8019e1e:	2322      	movs	r3, #34	; 0x22
 8019e20:	e78d      	b.n	8019d3e <pow+0x14e>
 8019e22:	4b29      	ldr	r3, [pc, #164]	; (8019ec8 <pow+0x2d8>)
 8019e24:	2200      	movs	r2, #0
 8019e26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8019e2a:	4630      	mov	r0, r6
 8019e2c:	4652      	mov	r2, sl
 8019e2e:	465b      	mov	r3, fp
 8019e30:	4639      	mov	r1, r7
 8019e32:	f7e6 fe73 	bl	8000b1c <__aeabi_dcmplt>
 8019e36:	2800      	cmp	r0, #0
 8019e38:	d0eb      	beq.n	8019e12 <pow+0x222>
 8019e3a:	ec45 4b10 	vmov	d0, r4, r5
 8019e3e:	f001 faf3 	bl	801b428 <rint>
 8019e42:	4622      	mov	r2, r4
 8019e44:	462b      	mov	r3, r5
 8019e46:	ec51 0b10 	vmov	r0, r1, d0
 8019e4a:	f7e6 fe5d 	bl	8000b08 <__aeabi_dcmpeq>
 8019e4e:	2800      	cmp	r0, #0
 8019e50:	d1df      	bne.n	8019e12 <pow+0x222>
 8019e52:	2200      	movs	r2, #0
 8019e54:	4b18      	ldr	r3, [pc, #96]	; (8019eb8 <pow+0x2c8>)
 8019e56:	e7da      	b.n	8019e0e <pow+0x21e>
 8019e58:	2200      	movs	r2, #0
 8019e5a:	2300      	movs	r3, #0
 8019e5c:	ec51 0b18 	vmov	r0, r1, d8
 8019e60:	f7e6 fe52 	bl	8000b08 <__aeabi_dcmpeq>
 8019e64:	2800      	cmp	r0, #0
 8019e66:	f43f af3a 	beq.w	8019cde <pow+0xee>
 8019e6a:	ec47 6b10 	vmov	d0, r6, r7
 8019e6e:	f001 fac9 	bl	801b404 <finite>
 8019e72:	2800      	cmp	r0, #0
 8019e74:	f43f af33 	beq.w	8019cde <pow+0xee>
 8019e78:	ec45 4b10 	vmov	d0, r4, r5
 8019e7c:	f001 fac2 	bl	801b404 <finite>
 8019e80:	2800      	cmp	r0, #0
 8019e82:	f43f af2c 	beq.w	8019cde <pow+0xee>
 8019e86:	2304      	movs	r3, #4
 8019e88:	9302      	str	r3, [sp, #8]
 8019e8a:	4b09      	ldr	r3, [pc, #36]	; (8019eb0 <pow+0x2c0>)
 8019e8c:	9303      	str	r3, [sp, #12]
 8019e8e:	2300      	movs	r3, #0
 8019e90:	930a      	str	r3, [sp, #40]	; 0x28
 8019e92:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8019e96:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8019e9a:	ed8d 9b08 	vstr	d9, [sp, #32]
 8019e9e:	e7b8      	b.n	8019e12 <pow+0x222>
 8019ea0:	a802      	add	r0, sp, #8
 8019ea2:	f001 fab7 	bl	801b414 <matherr>
 8019ea6:	2800      	cmp	r0, #0
 8019ea8:	f47f af11 	bne.w	8019cce <pow+0xde>
 8019eac:	e7b5      	b.n	8019e1a <pow+0x22a>
 8019eae:	bf00      	nop
 8019eb0:	0801c487 	.word	0x0801c487
 8019eb4:	3ff00000 	.word	0x3ff00000
 8019eb8:	fff00000 	.word	0xfff00000
 8019ebc:	3fe00000 	.word	0x3fe00000
 8019ec0:	47efffff 	.word	0x47efffff
 8019ec4:	c7efffff 	.word	0xc7efffff
 8019ec8:	7ff00000 	.word	0x7ff00000
 8019ecc:	20000280 	.word	0x20000280

08019ed0 <sqrt>:
 8019ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019ed4:	ed2d 8b02 	vpush	{d8}
 8019ed8:	b08b      	sub	sp, #44	; 0x2c
 8019eda:	ec55 4b10 	vmov	r4, r5, d0
 8019ede:	f000 ff15 	bl	801ad0c <__ieee754_sqrt>
 8019ee2:	4b26      	ldr	r3, [pc, #152]	; (8019f7c <sqrt+0xac>)
 8019ee4:	eeb0 8a40 	vmov.f32	s16, s0
 8019ee8:	eef0 8a60 	vmov.f32	s17, s1
 8019eec:	f993 6000 	ldrsb.w	r6, [r3]
 8019ef0:	1c73      	adds	r3, r6, #1
 8019ef2:	d02a      	beq.n	8019f4a <sqrt+0x7a>
 8019ef4:	4622      	mov	r2, r4
 8019ef6:	462b      	mov	r3, r5
 8019ef8:	4620      	mov	r0, r4
 8019efa:	4629      	mov	r1, r5
 8019efc:	f7e6 fe36 	bl	8000b6c <__aeabi_dcmpun>
 8019f00:	4607      	mov	r7, r0
 8019f02:	bb10      	cbnz	r0, 8019f4a <sqrt+0x7a>
 8019f04:	f04f 0800 	mov.w	r8, #0
 8019f08:	f04f 0900 	mov.w	r9, #0
 8019f0c:	4642      	mov	r2, r8
 8019f0e:	464b      	mov	r3, r9
 8019f10:	4620      	mov	r0, r4
 8019f12:	4629      	mov	r1, r5
 8019f14:	f7e6 fe02 	bl	8000b1c <__aeabi_dcmplt>
 8019f18:	b1b8      	cbz	r0, 8019f4a <sqrt+0x7a>
 8019f1a:	2301      	movs	r3, #1
 8019f1c:	9300      	str	r3, [sp, #0]
 8019f1e:	4b18      	ldr	r3, [pc, #96]	; (8019f80 <sqrt+0xb0>)
 8019f20:	9301      	str	r3, [sp, #4]
 8019f22:	9708      	str	r7, [sp, #32]
 8019f24:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8019f28:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8019f2c:	b9b6      	cbnz	r6, 8019f5c <sqrt+0x8c>
 8019f2e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8019f32:	4668      	mov	r0, sp
 8019f34:	f001 fa6e 	bl	801b414 <matherr>
 8019f38:	b1d0      	cbz	r0, 8019f70 <sqrt+0xa0>
 8019f3a:	9b08      	ldr	r3, [sp, #32]
 8019f3c:	b11b      	cbz	r3, 8019f46 <sqrt+0x76>
 8019f3e:	f7ff f96d 	bl	801921c <__errno>
 8019f42:	9b08      	ldr	r3, [sp, #32]
 8019f44:	6003      	str	r3, [r0, #0]
 8019f46:	ed9d 8b06 	vldr	d8, [sp, #24]
 8019f4a:	eeb0 0a48 	vmov.f32	s0, s16
 8019f4e:	eef0 0a68 	vmov.f32	s1, s17
 8019f52:	b00b      	add	sp, #44	; 0x2c
 8019f54:	ecbd 8b02 	vpop	{d8}
 8019f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019f5c:	4642      	mov	r2, r8
 8019f5e:	464b      	mov	r3, r9
 8019f60:	4640      	mov	r0, r8
 8019f62:	4649      	mov	r1, r9
 8019f64:	f7e6 fc92 	bl	800088c <__aeabi_ddiv>
 8019f68:	2e02      	cmp	r6, #2
 8019f6a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019f6e:	d1e0      	bne.n	8019f32 <sqrt+0x62>
 8019f70:	f7ff f954 	bl	801921c <__errno>
 8019f74:	2321      	movs	r3, #33	; 0x21
 8019f76:	6003      	str	r3, [r0, #0]
 8019f78:	e7df      	b.n	8019f3a <sqrt+0x6a>
 8019f7a:	bf00      	nop
 8019f7c:	20000280 	.word	0x20000280
 8019f80:	0801c48b 	.word	0x0801c48b

08019f84 <powf>:
 8019f84:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8019f88:	ed2d 8b04 	vpush	{d8-d9}
 8019f8c:	4ca7      	ldr	r4, [pc, #668]	; (801a22c <powf+0x2a8>)
 8019f8e:	b08a      	sub	sp, #40	; 0x28
 8019f90:	eef0 8a40 	vmov.f32	s17, s0
 8019f94:	eeb0 8a60 	vmov.f32	s16, s1
 8019f98:	f000 ff68 	bl	801ae6c <__ieee754_powf>
 8019f9c:	f994 5000 	ldrsb.w	r5, [r4]
 8019fa0:	1c6b      	adds	r3, r5, #1
 8019fa2:	eeb0 9a40 	vmov.f32	s18, s0
 8019fa6:	4626      	mov	r6, r4
 8019fa8:	d05f      	beq.n	801a06a <powf+0xe6>
 8019faa:	eeb4 8a48 	vcmp.f32	s16, s16
 8019fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fb2:	d65a      	bvs.n	801a06a <powf+0xe6>
 8019fb4:	eef4 8a68 	vcmp.f32	s17, s17
 8019fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fbc:	d721      	bvc.n	801a002 <powf+0x7e>
 8019fbe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fc6:	d150      	bne.n	801a06a <powf+0xe6>
 8019fc8:	2301      	movs	r3, #1
 8019fca:	9300      	str	r3, [sp, #0]
 8019fcc:	4b98      	ldr	r3, [pc, #608]	; (801a230 <powf+0x2ac>)
 8019fce:	9301      	str	r3, [sp, #4]
 8019fd0:	ee18 0a90 	vmov	r0, s17
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	9308      	str	r3, [sp, #32]
 8019fd8:	f7e6 fad6 	bl	8000588 <__aeabi_f2d>
 8019fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019fe0:	ee18 0a10 	vmov	r0, s16
 8019fe4:	f7e6 fad0 	bl	8000588 <__aeabi_f2d>
 8019fe8:	4b92      	ldr	r3, [pc, #584]	; (801a234 <powf+0x2b0>)
 8019fea:	2200      	movs	r2, #0
 8019fec:	2d02      	cmp	r5, #2
 8019fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019ff2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019ff6:	d032      	beq.n	801a05e <powf+0xda>
 8019ff8:	4668      	mov	r0, sp
 8019ffa:	f001 fa0b 	bl	801b414 <matherr>
 8019ffe:	bb40      	cbnz	r0, 801a052 <powf+0xce>
 801a000:	e065      	b.n	801a0ce <powf+0x14a>
 801a002:	eddf 9a8d 	vldr	s19, [pc, #564]	; 801a238 <powf+0x2b4>
 801a006:	eef4 8a69 	vcmp.f32	s17, s19
 801a00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a00e:	d163      	bne.n	801a0d8 <powf+0x154>
 801a010:	eeb4 8a69 	vcmp.f32	s16, s19
 801a014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a018:	d12e      	bne.n	801a078 <powf+0xf4>
 801a01a:	2301      	movs	r3, #1
 801a01c:	9300      	str	r3, [sp, #0]
 801a01e:	4b84      	ldr	r3, [pc, #528]	; (801a230 <powf+0x2ac>)
 801a020:	9301      	str	r3, [sp, #4]
 801a022:	ee18 0a90 	vmov	r0, s17
 801a026:	2300      	movs	r3, #0
 801a028:	9308      	str	r3, [sp, #32]
 801a02a:	f7e6 faad 	bl	8000588 <__aeabi_f2d>
 801a02e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a032:	ee18 0a10 	vmov	r0, s16
 801a036:	f7e6 faa7 	bl	8000588 <__aeabi_f2d>
 801a03a:	2200      	movs	r2, #0
 801a03c:	2300      	movs	r3, #0
 801a03e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a042:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a046:	2d00      	cmp	r5, #0
 801a048:	d0d6      	beq.n	8019ff8 <powf+0x74>
 801a04a:	4b7a      	ldr	r3, [pc, #488]	; (801a234 <powf+0x2b0>)
 801a04c:	2200      	movs	r2, #0
 801a04e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a052:	9b08      	ldr	r3, [sp, #32]
 801a054:	b11b      	cbz	r3, 801a05e <powf+0xda>
 801a056:	f7ff f8e1 	bl	801921c <__errno>
 801a05a:	9b08      	ldr	r3, [sp, #32]
 801a05c:	6003      	str	r3, [r0, #0]
 801a05e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a062:	f7e6 fdb9 	bl	8000bd8 <__aeabi_d2f>
 801a066:	ee09 0a10 	vmov	s18, r0
 801a06a:	eeb0 0a49 	vmov.f32	s0, s18
 801a06e:	b00a      	add	sp, #40	; 0x28
 801a070:	ecbd 8b04 	vpop	{d8-d9}
 801a074:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801a078:	eeb0 0a48 	vmov.f32	s0, s16
 801a07c:	f001 fad5 	bl	801b62a <finitef>
 801a080:	2800      	cmp	r0, #0
 801a082:	d0f2      	beq.n	801a06a <powf+0xe6>
 801a084:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a08c:	d5ed      	bpl.n	801a06a <powf+0xe6>
 801a08e:	2301      	movs	r3, #1
 801a090:	9300      	str	r3, [sp, #0]
 801a092:	4b67      	ldr	r3, [pc, #412]	; (801a230 <powf+0x2ac>)
 801a094:	9301      	str	r3, [sp, #4]
 801a096:	ee18 0a90 	vmov	r0, s17
 801a09a:	2300      	movs	r3, #0
 801a09c:	9308      	str	r3, [sp, #32]
 801a09e:	f7e6 fa73 	bl	8000588 <__aeabi_f2d>
 801a0a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a0a6:	ee18 0a10 	vmov	r0, s16
 801a0aa:	f7e6 fa6d 	bl	8000588 <__aeabi_f2d>
 801a0ae:	f994 3000 	ldrsb.w	r3, [r4]
 801a0b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a0b6:	b923      	cbnz	r3, 801a0c2 <powf+0x13e>
 801a0b8:	2200      	movs	r2, #0
 801a0ba:	2300      	movs	r3, #0
 801a0bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a0c0:	e79a      	b.n	8019ff8 <powf+0x74>
 801a0c2:	495e      	ldr	r1, [pc, #376]	; (801a23c <powf+0x2b8>)
 801a0c4:	2000      	movs	r0, #0
 801a0c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a0ca:	2b02      	cmp	r3, #2
 801a0cc:	d194      	bne.n	8019ff8 <powf+0x74>
 801a0ce:	f7ff f8a5 	bl	801921c <__errno>
 801a0d2:	2321      	movs	r3, #33	; 0x21
 801a0d4:	6003      	str	r3, [r0, #0]
 801a0d6:	e7bc      	b.n	801a052 <powf+0xce>
 801a0d8:	f001 faa7 	bl	801b62a <finitef>
 801a0dc:	4605      	mov	r5, r0
 801a0de:	2800      	cmp	r0, #0
 801a0e0:	d173      	bne.n	801a1ca <powf+0x246>
 801a0e2:	eeb0 0a68 	vmov.f32	s0, s17
 801a0e6:	f001 faa0 	bl	801b62a <finitef>
 801a0ea:	2800      	cmp	r0, #0
 801a0ec:	d06d      	beq.n	801a1ca <powf+0x246>
 801a0ee:	eeb0 0a48 	vmov.f32	s0, s16
 801a0f2:	f001 fa9a 	bl	801b62a <finitef>
 801a0f6:	2800      	cmp	r0, #0
 801a0f8:	d067      	beq.n	801a1ca <powf+0x246>
 801a0fa:	ee18 0a90 	vmov	r0, s17
 801a0fe:	f7e6 fa43 	bl	8000588 <__aeabi_f2d>
 801a102:	4680      	mov	r8, r0
 801a104:	ee18 0a10 	vmov	r0, s16
 801a108:	4689      	mov	r9, r1
 801a10a:	f7e6 fa3d 	bl	8000588 <__aeabi_f2d>
 801a10e:	eeb4 9a49 	vcmp.f32	s18, s18
 801a112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a116:	f994 4000 	ldrsb.w	r4, [r4]
 801a11a:	4b45      	ldr	r3, [pc, #276]	; (801a230 <powf+0x2ac>)
 801a11c:	d713      	bvc.n	801a146 <powf+0x1c2>
 801a11e:	2201      	movs	r2, #1
 801a120:	e9cd 2300 	strd	r2, r3, [sp]
 801a124:	9508      	str	r5, [sp, #32]
 801a126:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801a12a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a12e:	2c00      	cmp	r4, #0
 801a130:	d0c2      	beq.n	801a0b8 <powf+0x134>
 801a132:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801a136:	ee17 0a90 	vmov	r0, s15
 801a13a:	f7e6 fa25 	bl	8000588 <__aeabi_f2d>
 801a13e:	2c02      	cmp	r4, #2
 801a140:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a144:	e7c2      	b.n	801a0cc <powf+0x148>
 801a146:	2203      	movs	r2, #3
 801a148:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a14c:	e9cd 2300 	strd	r2, r3, [sp]
 801a150:	9508      	str	r5, [sp, #32]
 801a152:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801a156:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a15a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801a15e:	b9fc      	cbnz	r4, 801a1a0 <powf+0x21c>
 801a160:	4b37      	ldr	r3, [pc, #220]	; (801a240 <powf+0x2bc>)
 801a162:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801a166:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801a16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a16e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a172:	d553      	bpl.n	801a21c <powf+0x298>
 801a174:	eeb0 0a48 	vmov.f32	s0, s16
 801a178:	f001 fa68 	bl	801b64c <rintf>
 801a17c:	eeb4 0a48 	vcmp.f32	s0, s16
 801a180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a184:	d004      	beq.n	801a190 <powf+0x20c>
 801a186:	4b2f      	ldr	r3, [pc, #188]	; (801a244 <powf+0x2c0>)
 801a188:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801a18c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a190:	f996 3000 	ldrsb.w	r3, [r6]
 801a194:	2b02      	cmp	r3, #2
 801a196:	d141      	bne.n	801a21c <powf+0x298>
 801a198:	f7ff f840 	bl	801921c <__errno>
 801a19c:	2322      	movs	r3, #34	; 0x22
 801a19e:	e799      	b.n	801a0d4 <powf+0x150>
 801a1a0:	4b29      	ldr	r3, [pc, #164]	; (801a248 <powf+0x2c4>)
 801a1a2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801a1a6:	2200      	movs	r2, #0
 801a1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a1b0:	d5ee      	bpl.n	801a190 <powf+0x20c>
 801a1b2:	eeb0 0a48 	vmov.f32	s0, s16
 801a1b6:	f001 fa49 	bl	801b64c <rintf>
 801a1ba:	eeb4 0a48 	vcmp.f32	s0, s16
 801a1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1c2:	d0e5      	beq.n	801a190 <powf+0x20c>
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	4b1d      	ldr	r3, [pc, #116]	; (801a23c <powf+0x2b8>)
 801a1c8:	e7e0      	b.n	801a18c <powf+0x208>
 801a1ca:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801a1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1d2:	f47f af4a 	bne.w	801a06a <powf+0xe6>
 801a1d6:	eeb0 0a68 	vmov.f32	s0, s17
 801a1da:	f001 fa26 	bl	801b62a <finitef>
 801a1de:	2800      	cmp	r0, #0
 801a1e0:	f43f af43 	beq.w	801a06a <powf+0xe6>
 801a1e4:	eeb0 0a48 	vmov.f32	s0, s16
 801a1e8:	f001 fa1f 	bl	801b62a <finitef>
 801a1ec:	2800      	cmp	r0, #0
 801a1ee:	f43f af3c 	beq.w	801a06a <powf+0xe6>
 801a1f2:	2304      	movs	r3, #4
 801a1f4:	9300      	str	r3, [sp, #0]
 801a1f6:	4b0e      	ldr	r3, [pc, #56]	; (801a230 <powf+0x2ac>)
 801a1f8:	9301      	str	r3, [sp, #4]
 801a1fa:	ee18 0a90 	vmov	r0, s17
 801a1fe:	2300      	movs	r3, #0
 801a200:	9308      	str	r3, [sp, #32]
 801a202:	f7e6 f9c1 	bl	8000588 <__aeabi_f2d>
 801a206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a20a:	ee18 0a10 	vmov	r0, s16
 801a20e:	f7e6 f9bb 	bl	8000588 <__aeabi_f2d>
 801a212:	2200      	movs	r2, #0
 801a214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a218:	2300      	movs	r3, #0
 801a21a:	e7b7      	b.n	801a18c <powf+0x208>
 801a21c:	4668      	mov	r0, sp
 801a21e:	f001 f8f9 	bl	801b414 <matherr>
 801a222:	2800      	cmp	r0, #0
 801a224:	f47f af15 	bne.w	801a052 <powf+0xce>
 801a228:	e7b6      	b.n	801a198 <powf+0x214>
 801a22a:	bf00      	nop
 801a22c:	20000280 	.word	0x20000280
 801a230:	0801c490 	.word	0x0801c490
 801a234:	3ff00000 	.word	0x3ff00000
 801a238:	00000000 	.word	0x00000000
 801a23c:	fff00000 	.word	0xfff00000
 801a240:	47efffff 	.word	0x47efffff
 801a244:	c7efffff 	.word	0xc7efffff
 801a248:	7ff00000 	.word	0x7ff00000

0801a24c <sqrtf>:
 801a24c:	b510      	push	{r4, lr}
 801a24e:	ed2d 8b02 	vpush	{d8}
 801a252:	b08a      	sub	sp, #40	; 0x28
 801a254:	eeb0 8a40 	vmov.f32	s16, s0
 801a258:	f001 f8c8 	bl	801b3ec <__ieee754_sqrtf>
 801a25c:	4b21      	ldr	r3, [pc, #132]	; (801a2e4 <sqrtf+0x98>)
 801a25e:	f993 4000 	ldrsb.w	r4, [r3]
 801a262:	1c63      	adds	r3, r4, #1
 801a264:	d02c      	beq.n	801a2c0 <sqrtf+0x74>
 801a266:	eeb4 8a48 	vcmp.f32	s16, s16
 801a26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a26e:	d627      	bvs.n	801a2c0 <sqrtf+0x74>
 801a270:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a278:	d522      	bpl.n	801a2c0 <sqrtf+0x74>
 801a27a:	2301      	movs	r3, #1
 801a27c:	9300      	str	r3, [sp, #0]
 801a27e:	4b1a      	ldr	r3, [pc, #104]	; (801a2e8 <sqrtf+0x9c>)
 801a280:	9301      	str	r3, [sp, #4]
 801a282:	ee18 0a10 	vmov	r0, s16
 801a286:	2300      	movs	r3, #0
 801a288:	9308      	str	r3, [sp, #32]
 801a28a:	f7e6 f97d 	bl	8000588 <__aeabi_f2d>
 801a28e:	2200      	movs	r2, #0
 801a290:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a298:	2300      	movs	r3, #0
 801a29a:	b9ac      	cbnz	r4, 801a2c8 <sqrtf+0x7c>
 801a29c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a2a0:	4668      	mov	r0, sp
 801a2a2:	f001 f8b7 	bl	801b414 <matherr>
 801a2a6:	b1b8      	cbz	r0, 801a2d8 <sqrtf+0x8c>
 801a2a8:	9b08      	ldr	r3, [sp, #32]
 801a2aa:	b11b      	cbz	r3, 801a2b4 <sqrtf+0x68>
 801a2ac:	f7fe ffb6 	bl	801921c <__errno>
 801a2b0:	9b08      	ldr	r3, [sp, #32]
 801a2b2:	6003      	str	r3, [r0, #0]
 801a2b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a2b8:	f7e6 fc8e 	bl	8000bd8 <__aeabi_d2f>
 801a2bc:	ee00 0a10 	vmov	s0, r0
 801a2c0:	b00a      	add	sp, #40	; 0x28
 801a2c2:	ecbd 8b02 	vpop	{d8}
 801a2c6:	bd10      	pop	{r4, pc}
 801a2c8:	4610      	mov	r0, r2
 801a2ca:	4619      	mov	r1, r3
 801a2cc:	f7e6 fade 	bl	800088c <__aeabi_ddiv>
 801a2d0:	2c02      	cmp	r4, #2
 801a2d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a2d6:	d1e3      	bne.n	801a2a0 <sqrtf+0x54>
 801a2d8:	f7fe ffa0 	bl	801921c <__errno>
 801a2dc:	2321      	movs	r3, #33	; 0x21
 801a2de:	6003      	str	r3, [r0, #0]
 801a2e0:	e7e2      	b.n	801a2a8 <sqrtf+0x5c>
 801a2e2:	bf00      	nop
 801a2e4:	20000280 	.word	0x20000280
 801a2e8:	0801c495 	.word	0x0801c495
 801a2ec:	00000000 	.word	0x00000000

0801a2f0 <__ieee754_pow>:
 801a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2f4:	b091      	sub	sp, #68	; 0x44
 801a2f6:	ed8d 1b00 	vstr	d1, [sp]
 801a2fa:	e9dd 2900 	ldrd	r2, r9, [sp]
 801a2fe:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801a302:	ea58 0302 	orrs.w	r3, r8, r2
 801a306:	ec57 6b10 	vmov	r6, r7, d0
 801a30a:	f000 84be 	beq.w	801ac8a <__ieee754_pow+0x99a>
 801a30e:	4b7a      	ldr	r3, [pc, #488]	; (801a4f8 <__ieee754_pow+0x208>)
 801a310:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801a314:	429c      	cmp	r4, r3
 801a316:	463d      	mov	r5, r7
 801a318:	ee10 aa10 	vmov	sl, s0
 801a31c:	dc09      	bgt.n	801a332 <__ieee754_pow+0x42>
 801a31e:	d103      	bne.n	801a328 <__ieee754_pow+0x38>
 801a320:	b93e      	cbnz	r6, 801a332 <__ieee754_pow+0x42>
 801a322:	45a0      	cmp	r8, r4
 801a324:	dc0d      	bgt.n	801a342 <__ieee754_pow+0x52>
 801a326:	e001      	b.n	801a32c <__ieee754_pow+0x3c>
 801a328:	4598      	cmp	r8, r3
 801a32a:	dc02      	bgt.n	801a332 <__ieee754_pow+0x42>
 801a32c:	4598      	cmp	r8, r3
 801a32e:	d10e      	bne.n	801a34e <__ieee754_pow+0x5e>
 801a330:	b16a      	cbz	r2, 801a34e <__ieee754_pow+0x5e>
 801a332:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a336:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a33a:	ea54 030a 	orrs.w	r3, r4, sl
 801a33e:	f000 84a4 	beq.w	801ac8a <__ieee754_pow+0x99a>
 801a342:	486e      	ldr	r0, [pc, #440]	; (801a4fc <__ieee754_pow+0x20c>)
 801a344:	b011      	add	sp, #68	; 0x44
 801a346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a34a:	f001 b865 	b.w	801b418 <nan>
 801a34e:	2d00      	cmp	r5, #0
 801a350:	da53      	bge.n	801a3fa <__ieee754_pow+0x10a>
 801a352:	4b6b      	ldr	r3, [pc, #428]	; (801a500 <__ieee754_pow+0x210>)
 801a354:	4598      	cmp	r8, r3
 801a356:	dc4d      	bgt.n	801a3f4 <__ieee754_pow+0x104>
 801a358:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801a35c:	4598      	cmp	r8, r3
 801a35e:	dd4c      	ble.n	801a3fa <__ieee754_pow+0x10a>
 801a360:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a364:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a368:	2b14      	cmp	r3, #20
 801a36a:	dd26      	ble.n	801a3ba <__ieee754_pow+0xca>
 801a36c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801a370:	fa22 f103 	lsr.w	r1, r2, r3
 801a374:	fa01 f303 	lsl.w	r3, r1, r3
 801a378:	4293      	cmp	r3, r2
 801a37a:	d13e      	bne.n	801a3fa <__ieee754_pow+0x10a>
 801a37c:	f001 0101 	and.w	r1, r1, #1
 801a380:	f1c1 0b02 	rsb	fp, r1, #2
 801a384:	2a00      	cmp	r2, #0
 801a386:	d15b      	bne.n	801a440 <__ieee754_pow+0x150>
 801a388:	4b5b      	ldr	r3, [pc, #364]	; (801a4f8 <__ieee754_pow+0x208>)
 801a38a:	4598      	cmp	r8, r3
 801a38c:	d124      	bne.n	801a3d8 <__ieee754_pow+0xe8>
 801a38e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a392:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a396:	ea53 030a 	orrs.w	r3, r3, sl
 801a39a:	f000 8476 	beq.w	801ac8a <__ieee754_pow+0x99a>
 801a39e:	4b59      	ldr	r3, [pc, #356]	; (801a504 <__ieee754_pow+0x214>)
 801a3a0:	429c      	cmp	r4, r3
 801a3a2:	dd2d      	ble.n	801a400 <__ieee754_pow+0x110>
 801a3a4:	f1b9 0f00 	cmp.w	r9, #0
 801a3a8:	f280 8473 	bge.w	801ac92 <__ieee754_pow+0x9a2>
 801a3ac:	2000      	movs	r0, #0
 801a3ae:	2100      	movs	r1, #0
 801a3b0:	ec41 0b10 	vmov	d0, r0, r1
 801a3b4:	b011      	add	sp, #68	; 0x44
 801a3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3ba:	2a00      	cmp	r2, #0
 801a3bc:	d13e      	bne.n	801a43c <__ieee754_pow+0x14c>
 801a3be:	f1c3 0314 	rsb	r3, r3, #20
 801a3c2:	fa48 f103 	asr.w	r1, r8, r3
 801a3c6:	fa01 f303 	lsl.w	r3, r1, r3
 801a3ca:	4543      	cmp	r3, r8
 801a3cc:	f040 8469 	bne.w	801aca2 <__ieee754_pow+0x9b2>
 801a3d0:	f001 0101 	and.w	r1, r1, #1
 801a3d4:	f1c1 0b02 	rsb	fp, r1, #2
 801a3d8:	4b4b      	ldr	r3, [pc, #300]	; (801a508 <__ieee754_pow+0x218>)
 801a3da:	4598      	cmp	r8, r3
 801a3dc:	d118      	bne.n	801a410 <__ieee754_pow+0x120>
 801a3de:	f1b9 0f00 	cmp.w	r9, #0
 801a3e2:	f280 845a 	bge.w	801ac9a <__ieee754_pow+0x9aa>
 801a3e6:	4948      	ldr	r1, [pc, #288]	; (801a508 <__ieee754_pow+0x218>)
 801a3e8:	4632      	mov	r2, r6
 801a3ea:	463b      	mov	r3, r7
 801a3ec:	2000      	movs	r0, #0
 801a3ee:	f7e6 fa4d 	bl	800088c <__aeabi_ddiv>
 801a3f2:	e7dd      	b.n	801a3b0 <__ieee754_pow+0xc0>
 801a3f4:	f04f 0b02 	mov.w	fp, #2
 801a3f8:	e7c4      	b.n	801a384 <__ieee754_pow+0x94>
 801a3fa:	f04f 0b00 	mov.w	fp, #0
 801a3fe:	e7c1      	b.n	801a384 <__ieee754_pow+0x94>
 801a400:	f1b9 0f00 	cmp.w	r9, #0
 801a404:	dad2      	bge.n	801a3ac <__ieee754_pow+0xbc>
 801a406:	e9dd 0300 	ldrd	r0, r3, [sp]
 801a40a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a40e:	e7cf      	b.n	801a3b0 <__ieee754_pow+0xc0>
 801a410:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801a414:	d106      	bne.n	801a424 <__ieee754_pow+0x134>
 801a416:	4632      	mov	r2, r6
 801a418:	463b      	mov	r3, r7
 801a41a:	4610      	mov	r0, r2
 801a41c:	4619      	mov	r1, r3
 801a41e:	f7e6 f90b 	bl	8000638 <__aeabi_dmul>
 801a422:	e7c5      	b.n	801a3b0 <__ieee754_pow+0xc0>
 801a424:	4b39      	ldr	r3, [pc, #228]	; (801a50c <__ieee754_pow+0x21c>)
 801a426:	4599      	cmp	r9, r3
 801a428:	d10a      	bne.n	801a440 <__ieee754_pow+0x150>
 801a42a:	2d00      	cmp	r5, #0
 801a42c:	db08      	blt.n	801a440 <__ieee754_pow+0x150>
 801a42e:	ec47 6b10 	vmov	d0, r6, r7
 801a432:	b011      	add	sp, #68	; 0x44
 801a434:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a438:	f000 bc68 	b.w	801ad0c <__ieee754_sqrt>
 801a43c:	f04f 0b00 	mov.w	fp, #0
 801a440:	ec47 6b10 	vmov	d0, r6, r7
 801a444:	f000 ffd5 	bl	801b3f2 <fabs>
 801a448:	ec51 0b10 	vmov	r0, r1, d0
 801a44c:	f1ba 0f00 	cmp.w	sl, #0
 801a450:	d127      	bne.n	801a4a2 <__ieee754_pow+0x1b2>
 801a452:	b124      	cbz	r4, 801a45e <__ieee754_pow+0x16e>
 801a454:	4b2c      	ldr	r3, [pc, #176]	; (801a508 <__ieee754_pow+0x218>)
 801a456:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801a45a:	429a      	cmp	r2, r3
 801a45c:	d121      	bne.n	801a4a2 <__ieee754_pow+0x1b2>
 801a45e:	f1b9 0f00 	cmp.w	r9, #0
 801a462:	da05      	bge.n	801a470 <__ieee754_pow+0x180>
 801a464:	4602      	mov	r2, r0
 801a466:	460b      	mov	r3, r1
 801a468:	2000      	movs	r0, #0
 801a46a:	4927      	ldr	r1, [pc, #156]	; (801a508 <__ieee754_pow+0x218>)
 801a46c:	f7e6 fa0e 	bl	800088c <__aeabi_ddiv>
 801a470:	2d00      	cmp	r5, #0
 801a472:	da9d      	bge.n	801a3b0 <__ieee754_pow+0xc0>
 801a474:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a478:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a47c:	ea54 030b 	orrs.w	r3, r4, fp
 801a480:	d108      	bne.n	801a494 <__ieee754_pow+0x1a4>
 801a482:	4602      	mov	r2, r0
 801a484:	460b      	mov	r3, r1
 801a486:	4610      	mov	r0, r2
 801a488:	4619      	mov	r1, r3
 801a48a:	f7e5 ff1d 	bl	80002c8 <__aeabi_dsub>
 801a48e:	4602      	mov	r2, r0
 801a490:	460b      	mov	r3, r1
 801a492:	e7ac      	b.n	801a3ee <__ieee754_pow+0xfe>
 801a494:	f1bb 0f01 	cmp.w	fp, #1
 801a498:	d18a      	bne.n	801a3b0 <__ieee754_pow+0xc0>
 801a49a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a49e:	4619      	mov	r1, r3
 801a4a0:	e786      	b.n	801a3b0 <__ieee754_pow+0xc0>
 801a4a2:	0fed      	lsrs	r5, r5, #31
 801a4a4:	1e6b      	subs	r3, r5, #1
 801a4a6:	930d      	str	r3, [sp, #52]	; 0x34
 801a4a8:	ea5b 0303 	orrs.w	r3, fp, r3
 801a4ac:	d102      	bne.n	801a4b4 <__ieee754_pow+0x1c4>
 801a4ae:	4632      	mov	r2, r6
 801a4b0:	463b      	mov	r3, r7
 801a4b2:	e7e8      	b.n	801a486 <__ieee754_pow+0x196>
 801a4b4:	4b16      	ldr	r3, [pc, #88]	; (801a510 <__ieee754_pow+0x220>)
 801a4b6:	4598      	cmp	r8, r3
 801a4b8:	f340 80fe 	ble.w	801a6b8 <__ieee754_pow+0x3c8>
 801a4bc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a4c0:	4598      	cmp	r8, r3
 801a4c2:	dd0a      	ble.n	801a4da <__ieee754_pow+0x1ea>
 801a4c4:	4b0f      	ldr	r3, [pc, #60]	; (801a504 <__ieee754_pow+0x214>)
 801a4c6:	429c      	cmp	r4, r3
 801a4c8:	dc0d      	bgt.n	801a4e6 <__ieee754_pow+0x1f6>
 801a4ca:	f1b9 0f00 	cmp.w	r9, #0
 801a4ce:	f6bf af6d 	bge.w	801a3ac <__ieee754_pow+0xbc>
 801a4d2:	a307      	add	r3, pc, #28	; (adr r3, 801a4f0 <__ieee754_pow+0x200>)
 801a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4d8:	e79f      	b.n	801a41a <__ieee754_pow+0x12a>
 801a4da:	4b0e      	ldr	r3, [pc, #56]	; (801a514 <__ieee754_pow+0x224>)
 801a4dc:	429c      	cmp	r4, r3
 801a4de:	ddf4      	ble.n	801a4ca <__ieee754_pow+0x1da>
 801a4e0:	4b09      	ldr	r3, [pc, #36]	; (801a508 <__ieee754_pow+0x218>)
 801a4e2:	429c      	cmp	r4, r3
 801a4e4:	dd18      	ble.n	801a518 <__ieee754_pow+0x228>
 801a4e6:	f1b9 0f00 	cmp.w	r9, #0
 801a4ea:	dcf2      	bgt.n	801a4d2 <__ieee754_pow+0x1e2>
 801a4ec:	e75e      	b.n	801a3ac <__ieee754_pow+0xbc>
 801a4ee:	bf00      	nop
 801a4f0:	8800759c 	.word	0x8800759c
 801a4f4:	7e37e43c 	.word	0x7e37e43c
 801a4f8:	7ff00000 	.word	0x7ff00000
 801a4fc:	0801c459 	.word	0x0801c459
 801a500:	433fffff 	.word	0x433fffff
 801a504:	3fefffff 	.word	0x3fefffff
 801a508:	3ff00000 	.word	0x3ff00000
 801a50c:	3fe00000 	.word	0x3fe00000
 801a510:	41e00000 	.word	0x41e00000
 801a514:	3feffffe 	.word	0x3feffffe
 801a518:	2200      	movs	r2, #0
 801a51a:	4b63      	ldr	r3, [pc, #396]	; (801a6a8 <__ieee754_pow+0x3b8>)
 801a51c:	f7e5 fed4 	bl	80002c8 <__aeabi_dsub>
 801a520:	a355      	add	r3, pc, #340	; (adr r3, 801a678 <__ieee754_pow+0x388>)
 801a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a526:	4604      	mov	r4, r0
 801a528:	460d      	mov	r5, r1
 801a52a:	f7e6 f885 	bl	8000638 <__aeabi_dmul>
 801a52e:	a354      	add	r3, pc, #336	; (adr r3, 801a680 <__ieee754_pow+0x390>)
 801a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a534:	4606      	mov	r6, r0
 801a536:	460f      	mov	r7, r1
 801a538:	4620      	mov	r0, r4
 801a53a:	4629      	mov	r1, r5
 801a53c:	f7e6 f87c 	bl	8000638 <__aeabi_dmul>
 801a540:	2200      	movs	r2, #0
 801a542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a546:	4b59      	ldr	r3, [pc, #356]	; (801a6ac <__ieee754_pow+0x3bc>)
 801a548:	4620      	mov	r0, r4
 801a54a:	4629      	mov	r1, r5
 801a54c:	f7e6 f874 	bl	8000638 <__aeabi_dmul>
 801a550:	4602      	mov	r2, r0
 801a552:	460b      	mov	r3, r1
 801a554:	a14c      	add	r1, pc, #304	; (adr r1, 801a688 <__ieee754_pow+0x398>)
 801a556:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a55a:	f7e5 feb5 	bl	80002c8 <__aeabi_dsub>
 801a55e:	4622      	mov	r2, r4
 801a560:	462b      	mov	r3, r5
 801a562:	f7e6 f869 	bl	8000638 <__aeabi_dmul>
 801a566:	4602      	mov	r2, r0
 801a568:	460b      	mov	r3, r1
 801a56a:	2000      	movs	r0, #0
 801a56c:	4950      	ldr	r1, [pc, #320]	; (801a6b0 <__ieee754_pow+0x3c0>)
 801a56e:	f7e5 feab 	bl	80002c8 <__aeabi_dsub>
 801a572:	4622      	mov	r2, r4
 801a574:	462b      	mov	r3, r5
 801a576:	4680      	mov	r8, r0
 801a578:	4689      	mov	r9, r1
 801a57a:	4620      	mov	r0, r4
 801a57c:	4629      	mov	r1, r5
 801a57e:	f7e6 f85b 	bl	8000638 <__aeabi_dmul>
 801a582:	4602      	mov	r2, r0
 801a584:	460b      	mov	r3, r1
 801a586:	4640      	mov	r0, r8
 801a588:	4649      	mov	r1, r9
 801a58a:	f7e6 f855 	bl	8000638 <__aeabi_dmul>
 801a58e:	a340      	add	r3, pc, #256	; (adr r3, 801a690 <__ieee754_pow+0x3a0>)
 801a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a594:	f7e6 f850 	bl	8000638 <__aeabi_dmul>
 801a598:	4602      	mov	r2, r0
 801a59a:	460b      	mov	r3, r1
 801a59c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a5a0:	f7e5 fe92 	bl	80002c8 <__aeabi_dsub>
 801a5a4:	4602      	mov	r2, r0
 801a5a6:	460b      	mov	r3, r1
 801a5a8:	4604      	mov	r4, r0
 801a5aa:	460d      	mov	r5, r1
 801a5ac:	4630      	mov	r0, r6
 801a5ae:	4639      	mov	r1, r7
 801a5b0:	f7e5 fe8c 	bl	80002cc <__adddf3>
 801a5b4:	2000      	movs	r0, #0
 801a5b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a5ba:	4632      	mov	r2, r6
 801a5bc:	463b      	mov	r3, r7
 801a5be:	f7e5 fe83 	bl	80002c8 <__aeabi_dsub>
 801a5c2:	4602      	mov	r2, r0
 801a5c4:	460b      	mov	r3, r1
 801a5c6:	4620      	mov	r0, r4
 801a5c8:	4629      	mov	r1, r5
 801a5ca:	f7e5 fe7d 	bl	80002c8 <__aeabi_dsub>
 801a5ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a5d0:	f10b 33ff 	add.w	r3, fp, #4294967295
 801a5d4:	4313      	orrs	r3, r2
 801a5d6:	4606      	mov	r6, r0
 801a5d8:	460f      	mov	r7, r1
 801a5da:	f040 81eb 	bne.w	801a9b4 <__ieee754_pow+0x6c4>
 801a5de:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801a698 <__ieee754_pow+0x3a8>
 801a5e2:	e9dd 4500 	ldrd	r4, r5, [sp]
 801a5e6:	2400      	movs	r4, #0
 801a5e8:	4622      	mov	r2, r4
 801a5ea:	462b      	mov	r3, r5
 801a5ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a5f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a5f4:	f7e5 fe68 	bl	80002c8 <__aeabi_dsub>
 801a5f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a5fc:	f7e6 f81c 	bl	8000638 <__aeabi_dmul>
 801a600:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a604:	4680      	mov	r8, r0
 801a606:	4689      	mov	r9, r1
 801a608:	4630      	mov	r0, r6
 801a60a:	4639      	mov	r1, r7
 801a60c:	f7e6 f814 	bl	8000638 <__aeabi_dmul>
 801a610:	4602      	mov	r2, r0
 801a612:	460b      	mov	r3, r1
 801a614:	4640      	mov	r0, r8
 801a616:	4649      	mov	r1, r9
 801a618:	f7e5 fe58 	bl	80002cc <__adddf3>
 801a61c:	4622      	mov	r2, r4
 801a61e:	462b      	mov	r3, r5
 801a620:	4680      	mov	r8, r0
 801a622:	4689      	mov	r9, r1
 801a624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a628:	f7e6 f806 	bl	8000638 <__aeabi_dmul>
 801a62c:	460b      	mov	r3, r1
 801a62e:	4604      	mov	r4, r0
 801a630:	460d      	mov	r5, r1
 801a632:	4602      	mov	r2, r0
 801a634:	4649      	mov	r1, r9
 801a636:	4640      	mov	r0, r8
 801a638:	e9cd 4500 	strd	r4, r5, [sp]
 801a63c:	f7e5 fe46 	bl	80002cc <__adddf3>
 801a640:	4b1c      	ldr	r3, [pc, #112]	; (801a6b4 <__ieee754_pow+0x3c4>)
 801a642:	4299      	cmp	r1, r3
 801a644:	4606      	mov	r6, r0
 801a646:	460f      	mov	r7, r1
 801a648:	468b      	mov	fp, r1
 801a64a:	f340 82f7 	ble.w	801ac3c <__ieee754_pow+0x94c>
 801a64e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801a652:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801a656:	4303      	orrs	r3, r0
 801a658:	f000 81ea 	beq.w	801aa30 <__ieee754_pow+0x740>
 801a65c:	a310      	add	r3, pc, #64	; (adr r3, 801a6a0 <__ieee754_pow+0x3b0>)
 801a65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a666:	f7e5 ffe7 	bl	8000638 <__aeabi_dmul>
 801a66a:	a30d      	add	r3, pc, #52	; (adr r3, 801a6a0 <__ieee754_pow+0x3b0>)
 801a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a670:	e6d5      	b.n	801a41e <__ieee754_pow+0x12e>
 801a672:	bf00      	nop
 801a674:	f3af 8000 	nop.w
 801a678:	60000000 	.word	0x60000000
 801a67c:	3ff71547 	.word	0x3ff71547
 801a680:	f85ddf44 	.word	0xf85ddf44
 801a684:	3e54ae0b 	.word	0x3e54ae0b
 801a688:	55555555 	.word	0x55555555
 801a68c:	3fd55555 	.word	0x3fd55555
 801a690:	652b82fe 	.word	0x652b82fe
 801a694:	3ff71547 	.word	0x3ff71547
 801a698:	00000000 	.word	0x00000000
 801a69c:	bff00000 	.word	0xbff00000
 801a6a0:	8800759c 	.word	0x8800759c
 801a6a4:	7e37e43c 	.word	0x7e37e43c
 801a6a8:	3ff00000 	.word	0x3ff00000
 801a6ac:	3fd00000 	.word	0x3fd00000
 801a6b0:	3fe00000 	.word	0x3fe00000
 801a6b4:	408fffff 	.word	0x408fffff
 801a6b8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801a6bc:	f04f 0200 	mov.w	r2, #0
 801a6c0:	da05      	bge.n	801a6ce <__ieee754_pow+0x3de>
 801a6c2:	4bd3      	ldr	r3, [pc, #844]	; (801aa10 <__ieee754_pow+0x720>)
 801a6c4:	f7e5 ffb8 	bl	8000638 <__aeabi_dmul>
 801a6c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801a6cc:	460c      	mov	r4, r1
 801a6ce:	1523      	asrs	r3, r4, #20
 801a6d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a6d4:	4413      	add	r3, r2
 801a6d6:	9309      	str	r3, [sp, #36]	; 0x24
 801a6d8:	4bce      	ldr	r3, [pc, #824]	; (801aa14 <__ieee754_pow+0x724>)
 801a6da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a6de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801a6e2:	429c      	cmp	r4, r3
 801a6e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a6e8:	dd08      	ble.n	801a6fc <__ieee754_pow+0x40c>
 801a6ea:	4bcb      	ldr	r3, [pc, #812]	; (801aa18 <__ieee754_pow+0x728>)
 801a6ec:	429c      	cmp	r4, r3
 801a6ee:	f340 815e 	ble.w	801a9ae <__ieee754_pow+0x6be>
 801a6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6f4:	3301      	adds	r3, #1
 801a6f6:	9309      	str	r3, [sp, #36]	; 0x24
 801a6f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801a6fc:	f04f 0a00 	mov.w	sl, #0
 801a700:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801a704:	930c      	str	r3, [sp, #48]	; 0x30
 801a706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a708:	4bc4      	ldr	r3, [pc, #784]	; (801aa1c <__ieee754_pow+0x72c>)
 801a70a:	4413      	add	r3, r2
 801a70c:	ed93 7b00 	vldr	d7, [r3]
 801a710:	4629      	mov	r1, r5
 801a712:	ec53 2b17 	vmov	r2, r3, d7
 801a716:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a71a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a71e:	f7e5 fdd3 	bl	80002c8 <__aeabi_dsub>
 801a722:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a726:	4606      	mov	r6, r0
 801a728:	460f      	mov	r7, r1
 801a72a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a72e:	f7e5 fdcd 	bl	80002cc <__adddf3>
 801a732:	4602      	mov	r2, r0
 801a734:	460b      	mov	r3, r1
 801a736:	2000      	movs	r0, #0
 801a738:	49b9      	ldr	r1, [pc, #740]	; (801aa20 <__ieee754_pow+0x730>)
 801a73a:	f7e6 f8a7 	bl	800088c <__aeabi_ddiv>
 801a73e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801a742:	4602      	mov	r2, r0
 801a744:	460b      	mov	r3, r1
 801a746:	4630      	mov	r0, r6
 801a748:	4639      	mov	r1, r7
 801a74a:	f7e5 ff75 	bl	8000638 <__aeabi_dmul>
 801a74e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a752:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801a756:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801a75a:	2300      	movs	r3, #0
 801a75c:	9302      	str	r3, [sp, #8]
 801a75e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801a762:	106d      	asrs	r5, r5, #1
 801a764:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801a768:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801a76c:	2200      	movs	r2, #0
 801a76e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801a772:	4640      	mov	r0, r8
 801a774:	4649      	mov	r1, r9
 801a776:	4614      	mov	r4, r2
 801a778:	461d      	mov	r5, r3
 801a77a:	f7e5 ff5d 	bl	8000638 <__aeabi_dmul>
 801a77e:	4602      	mov	r2, r0
 801a780:	460b      	mov	r3, r1
 801a782:	4630      	mov	r0, r6
 801a784:	4639      	mov	r1, r7
 801a786:	f7e5 fd9f 	bl	80002c8 <__aeabi_dsub>
 801a78a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a78e:	4606      	mov	r6, r0
 801a790:	460f      	mov	r7, r1
 801a792:	4620      	mov	r0, r4
 801a794:	4629      	mov	r1, r5
 801a796:	f7e5 fd97 	bl	80002c8 <__aeabi_dsub>
 801a79a:	4602      	mov	r2, r0
 801a79c:	460b      	mov	r3, r1
 801a79e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a7a2:	f7e5 fd91 	bl	80002c8 <__aeabi_dsub>
 801a7a6:	4642      	mov	r2, r8
 801a7a8:	464b      	mov	r3, r9
 801a7aa:	f7e5 ff45 	bl	8000638 <__aeabi_dmul>
 801a7ae:	4602      	mov	r2, r0
 801a7b0:	460b      	mov	r3, r1
 801a7b2:	4630      	mov	r0, r6
 801a7b4:	4639      	mov	r1, r7
 801a7b6:	f7e5 fd87 	bl	80002c8 <__aeabi_dsub>
 801a7ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801a7be:	f7e5 ff3b 	bl	8000638 <__aeabi_dmul>
 801a7c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a7c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a7ca:	4610      	mov	r0, r2
 801a7cc:	4619      	mov	r1, r3
 801a7ce:	f7e5 ff33 	bl	8000638 <__aeabi_dmul>
 801a7d2:	a37b      	add	r3, pc, #492	; (adr r3, 801a9c0 <__ieee754_pow+0x6d0>)
 801a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7d8:	4604      	mov	r4, r0
 801a7da:	460d      	mov	r5, r1
 801a7dc:	f7e5 ff2c 	bl	8000638 <__aeabi_dmul>
 801a7e0:	a379      	add	r3, pc, #484	; (adr r3, 801a9c8 <__ieee754_pow+0x6d8>)
 801a7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7e6:	f7e5 fd71 	bl	80002cc <__adddf3>
 801a7ea:	4622      	mov	r2, r4
 801a7ec:	462b      	mov	r3, r5
 801a7ee:	f7e5 ff23 	bl	8000638 <__aeabi_dmul>
 801a7f2:	a377      	add	r3, pc, #476	; (adr r3, 801a9d0 <__ieee754_pow+0x6e0>)
 801a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7f8:	f7e5 fd68 	bl	80002cc <__adddf3>
 801a7fc:	4622      	mov	r2, r4
 801a7fe:	462b      	mov	r3, r5
 801a800:	f7e5 ff1a 	bl	8000638 <__aeabi_dmul>
 801a804:	a374      	add	r3, pc, #464	; (adr r3, 801a9d8 <__ieee754_pow+0x6e8>)
 801a806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a80a:	f7e5 fd5f 	bl	80002cc <__adddf3>
 801a80e:	4622      	mov	r2, r4
 801a810:	462b      	mov	r3, r5
 801a812:	f7e5 ff11 	bl	8000638 <__aeabi_dmul>
 801a816:	a372      	add	r3, pc, #456	; (adr r3, 801a9e0 <__ieee754_pow+0x6f0>)
 801a818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a81c:	f7e5 fd56 	bl	80002cc <__adddf3>
 801a820:	4622      	mov	r2, r4
 801a822:	462b      	mov	r3, r5
 801a824:	f7e5 ff08 	bl	8000638 <__aeabi_dmul>
 801a828:	a36f      	add	r3, pc, #444	; (adr r3, 801a9e8 <__ieee754_pow+0x6f8>)
 801a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a82e:	f7e5 fd4d 	bl	80002cc <__adddf3>
 801a832:	4622      	mov	r2, r4
 801a834:	4606      	mov	r6, r0
 801a836:	460f      	mov	r7, r1
 801a838:	462b      	mov	r3, r5
 801a83a:	4620      	mov	r0, r4
 801a83c:	4629      	mov	r1, r5
 801a83e:	f7e5 fefb 	bl	8000638 <__aeabi_dmul>
 801a842:	4602      	mov	r2, r0
 801a844:	460b      	mov	r3, r1
 801a846:	4630      	mov	r0, r6
 801a848:	4639      	mov	r1, r7
 801a84a:	f7e5 fef5 	bl	8000638 <__aeabi_dmul>
 801a84e:	4642      	mov	r2, r8
 801a850:	4604      	mov	r4, r0
 801a852:	460d      	mov	r5, r1
 801a854:	464b      	mov	r3, r9
 801a856:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a85a:	f7e5 fd37 	bl	80002cc <__adddf3>
 801a85e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a862:	f7e5 fee9 	bl	8000638 <__aeabi_dmul>
 801a866:	4622      	mov	r2, r4
 801a868:	462b      	mov	r3, r5
 801a86a:	f7e5 fd2f 	bl	80002cc <__adddf3>
 801a86e:	4642      	mov	r2, r8
 801a870:	4606      	mov	r6, r0
 801a872:	460f      	mov	r7, r1
 801a874:	464b      	mov	r3, r9
 801a876:	4640      	mov	r0, r8
 801a878:	4649      	mov	r1, r9
 801a87a:	f7e5 fedd 	bl	8000638 <__aeabi_dmul>
 801a87e:	2200      	movs	r2, #0
 801a880:	4b68      	ldr	r3, [pc, #416]	; (801aa24 <__ieee754_pow+0x734>)
 801a882:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a886:	f7e5 fd21 	bl	80002cc <__adddf3>
 801a88a:	4632      	mov	r2, r6
 801a88c:	463b      	mov	r3, r7
 801a88e:	f7e5 fd1d 	bl	80002cc <__adddf3>
 801a892:	9802      	ldr	r0, [sp, #8]
 801a894:	460d      	mov	r5, r1
 801a896:	4604      	mov	r4, r0
 801a898:	4602      	mov	r2, r0
 801a89a:	460b      	mov	r3, r1
 801a89c:	4640      	mov	r0, r8
 801a89e:	4649      	mov	r1, r9
 801a8a0:	f7e5 feca 	bl	8000638 <__aeabi_dmul>
 801a8a4:	2200      	movs	r2, #0
 801a8a6:	4680      	mov	r8, r0
 801a8a8:	4689      	mov	r9, r1
 801a8aa:	4b5e      	ldr	r3, [pc, #376]	; (801aa24 <__ieee754_pow+0x734>)
 801a8ac:	4620      	mov	r0, r4
 801a8ae:	4629      	mov	r1, r5
 801a8b0:	f7e5 fd0a 	bl	80002c8 <__aeabi_dsub>
 801a8b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801a8b8:	f7e5 fd06 	bl	80002c8 <__aeabi_dsub>
 801a8bc:	4602      	mov	r2, r0
 801a8be:	460b      	mov	r3, r1
 801a8c0:	4630      	mov	r0, r6
 801a8c2:	4639      	mov	r1, r7
 801a8c4:	f7e5 fd00 	bl	80002c8 <__aeabi_dsub>
 801a8c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a8cc:	f7e5 feb4 	bl	8000638 <__aeabi_dmul>
 801a8d0:	4622      	mov	r2, r4
 801a8d2:	4606      	mov	r6, r0
 801a8d4:	460f      	mov	r7, r1
 801a8d6:	462b      	mov	r3, r5
 801a8d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a8dc:	f7e5 feac 	bl	8000638 <__aeabi_dmul>
 801a8e0:	4602      	mov	r2, r0
 801a8e2:	460b      	mov	r3, r1
 801a8e4:	4630      	mov	r0, r6
 801a8e6:	4639      	mov	r1, r7
 801a8e8:	f7e5 fcf0 	bl	80002cc <__adddf3>
 801a8ec:	4606      	mov	r6, r0
 801a8ee:	460f      	mov	r7, r1
 801a8f0:	4602      	mov	r2, r0
 801a8f2:	460b      	mov	r3, r1
 801a8f4:	4640      	mov	r0, r8
 801a8f6:	4649      	mov	r1, r9
 801a8f8:	f7e5 fce8 	bl	80002cc <__adddf3>
 801a8fc:	9802      	ldr	r0, [sp, #8]
 801a8fe:	a33c      	add	r3, pc, #240	; (adr r3, 801a9f0 <__ieee754_pow+0x700>)
 801a900:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a904:	4604      	mov	r4, r0
 801a906:	460d      	mov	r5, r1
 801a908:	f7e5 fe96 	bl	8000638 <__aeabi_dmul>
 801a90c:	4642      	mov	r2, r8
 801a90e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a912:	464b      	mov	r3, r9
 801a914:	4620      	mov	r0, r4
 801a916:	4629      	mov	r1, r5
 801a918:	f7e5 fcd6 	bl	80002c8 <__aeabi_dsub>
 801a91c:	4602      	mov	r2, r0
 801a91e:	460b      	mov	r3, r1
 801a920:	4630      	mov	r0, r6
 801a922:	4639      	mov	r1, r7
 801a924:	f7e5 fcd0 	bl	80002c8 <__aeabi_dsub>
 801a928:	a333      	add	r3, pc, #204	; (adr r3, 801a9f8 <__ieee754_pow+0x708>)
 801a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a92e:	f7e5 fe83 	bl	8000638 <__aeabi_dmul>
 801a932:	a333      	add	r3, pc, #204	; (adr r3, 801aa00 <__ieee754_pow+0x710>)
 801a934:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a938:	4606      	mov	r6, r0
 801a93a:	460f      	mov	r7, r1
 801a93c:	4620      	mov	r0, r4
 801a93e:	4629      	mov	r1, r5
 801a940:	f7e5 fe7a 	bl	8000638 <__aeabi_dmul>
 801a944:	4602      	mov	r2, r0
 801a946:	460b      	mov	r3, r1
 801a948:	4630      	mov	r0, r6
 801a94a:	4639      	mov	r1, r7
 801a94c:	f7e5 fcbe 	bl	80002cc <__adddf3>
 801a950:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a952:	4b35      	ldr	r3, [pc, #212]	; (801aa28 <__ieee754_pow+0x738>)
 801a954:	4413      	add	r3, r2
 801a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a95a:	f7e5 fcb7 	bl	80002cc <__adddf3>
 801a95e:	4604      	mov	r4, r0
 801a960:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a962:	460d      	mov	r5, r1
 801a964:	f7e5 fdfe 	bl	8000564 <__aeabi_i2d>
 801a968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a96a:	4b30      	ldr	r3, [pc, #192]	; (801aa2c <__ieee754_pow+0x73c>)
 801a96c:	4413      	add	r3, r2
 801a96e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a972:	4606      	mov	r6, r0
 801a974:	460f      	mov	r7, r1
 801a976:	4622      	mov	r2, r4
 801a978:	462b      	mov	r3, r5
 801a97a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a97e:	f7e5 fca5 	bl	80002cc <__adddf3>
 801a982:	4642      	mov	r2, r8
 801a984:	464b      	mov	r3, r9
 801a986:	f7e5 fca1 	bl	80002cc <__adddf3>
 801a98a:	4632      	mov	r2, r6
 801a98c:	463b      	mov	r3, r7
 801a98e:	f7e5 fc9d 	bl	80002cc <__adddf3>
 801a992:	9802      	ldr	r0, [sp, #8]
 801a994:	4632      	mov	r2, r6
 801a996:	463b      	mov	r3, r7
 801a998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a99c:	f7e5 fc94 	bl	80002c8 <__aeabi_dsub>
 801a9a0:	4642      	mov	r2, r8
 801a9a2:	464b      	mov	r3, r9
 801a9a4:	f7e5 fc90 	bl	80002c8 <__aeabi_dsub>
 801a9a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a9ac:	e607      	b.n	801a5be <__ieee754_pow+0x2ce>
 801a9ae:	f04f 0a01 	mov.w	sl, #1
 801a9b2:	e6a5      	b.n	801a700 <__ieee754_pow+0x410>
 801a9b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801aa08 <__ieee754_pow+0x718>
 801a9b8:	e613      	b.n	801a5e2 <__ieee754_pow+0x2f2>
 801a9ba:	bf00      	nop
 801a9bc:	f3af 8000 	nop.w
 801a9c0:	4a454eef 	.word	0x4a454eef
 801a9c4:	3fca7e28 	.word	0x3fca7e28
 801a9c8:	93c9db65 	.word	0x93c9db65
 801a9cc:	3fcd864a 	.word	0x3fcd864a
 801a9d0:	a91d4101 	.word	0xa91d4101
 801a9d4:	3fd17460 	.word	0x3fd17460
 801a9d8:	518f264d 	.word	0x518f264d
 801a9dc:	3fd55555 	.word	0x3fd55555
 801a9e0:	db6fabff 	.word	0xdb6fabff
 801a9e4:	3fdb6db6 	.word	0x3fdb6db6
 801a9e8:	33333303 	.word	0x33333303
 801a9ec:	3fe33333 	.word	0x3fe33333
 801a9f0:	e0000000 	.word	0xe0000000
 801a9f4:	3feec709 	.word	0x3feec709
 801a9f8:	dc3a03fd 	.word	0xdc3a03fd
 801a9fc:	3feec709 	.word	0x3feec709
 801aa00:	145b01f5 	.word	0x145b01f5
 801aa04:	be3e2fe0 	.word	0xbe3e2fe0
 801aa08:	00000000 	.word	0x00000000
 801aa0c:	3ff00000 	.word	0x3ff00000
 801aa10:	43400000 	.word	0x43400000
 801aa14:	0003988e 	.word	0x0003988e
 801aa18:	000bb679 	.word	0x000bb679
 801aa1c:	0801c4a0 	.word	0x0801c4a0
 801aa20:	3ff00000 	.word	0x3ff00000
 801aa24:	40080000 	.word	0x40080000
 801aa28:	0801c4c0 	.word	0x0801c4c0
 801aa2c:	0801c4b0 	.word	0x0801c4b0
 801aa30:	a3b4      	add	r3, pc, #720	; (adr r3, 801ad04 <__ieee754_pow+0xa14>)
 801aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa36:	4640      	mov	r0, r8
 801aa38:	4649      	mov	r1, r9
 801aa3a:	f7e5 fc47 	bl	80002cc <__adddf3>
 801aa3e:	4622      	mov	r2, r4
 801aa40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aa44:	462b      	mov	r3, r5
 801aa46:	4630      	mov	r0, r6
 801aa48:	4639      	mov	r1, r7
 801aa4a:	f7e5 fc3d 	bl	80002c8 <__aeabi_dsub>
 801aa4e:	4602      	mov	r2, r0
 801aa50:	460b      	mov	r3, r1
 801aa52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aa56:	f7e6 f87f 	bl	8000b58 <__aeabi_dcmpgt>
 801aa5a:	2800      	cmp	r0, #0
 801aa5c:	f47f adfe 	bne.w	801a65c <__ieee754_pow+0x36c>
 801aa60:	4aa3      	ldr	r2, [pc, #652]	; (801acf0 <__ieee754_pow+0xa00>)
 801aa62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801aa66:	4293      	cmp	r3, r2
 801aa68:	f340 810a 	ble.w	801ac80 <__ieee754_pow+0x990>
 801aa6c:	151b      	asrs	r3, r3, #20
 801aa6e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801aa72:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801aa76:	fa4a f303 	asr.w	r3, sl, r3
 801aa7a:	445b      	add	r3, fp
 801aa7c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801aa80:	4e9c      	ldr	r6, [pc, #624]	; (801acf4 <__ieee754_pow+0xa04>)
 801aa82:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801aa86:	4116      	asrs	r6, r2
 801aa88:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801aa8c:	2000      	movs	r0, #0
 801aa8e:	ea23 0106 	bic.w	r1, r3, r6
 801aa92:	f1c2 0214 	rsb	r2, r2, #20
 801aa96:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801aa9a:	fa4a fa02 	asr.w	sl, sl, r2
 801aa9e:	f1bb 0f00 	cmp.w	fp, #0
 801aaa2:	4602      	mov	r2, r0
 801aaa4:	460b      	mov	r3, r1
 801aaa6:	4620      	mov	r0, r4
 801aaa8:	4629      	mov	r1, r5
 801aaaa:	bfb8      	it	lt
 801aaac:	f1ca 0a00 	rsblt	sl, sl, #0
 801aab0:	f7e5 fc0a 	bl	80002c8 <__aeabi_dsub>
 801aab4:	e9cd 0100 	strd	r0, r1, [sp]
 801aab8:	4642      	mov	r2, r8
 801aaba:	464b      	mov	r3, r9
 801aabc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801aac0:	f7e5 fc04 	bl	80002cc <__adddf3>
 801aac4:	2000      	movs	r0, #0
 801aac6:	a378      	add	r3, pc, #480	; (adr r3, 801aca8 <__ieee754_pow+0x9b8>)
 801aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aacc:	4604      	mov	r4, r0
 801aace:	460d      	mov	r5, r1
 801aad0:	f7e5 fdb2 	bl	8000638 <__aeabi_dmul>
 801aad4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aad8:	4606      	mov	r6, r0
 801aada:	460f      	mov	r7, r1
 801aadc:	4620      	mov	r0, r4
 801aade:	4629      	mov	r1, r5
 801aae0:	f7e5 fbf2 	bl	80002c8 <__aeabi_dsub>
 801aae4:	4602      	mov	r2, r0
 801aae6:	460b      	mov	r3, r1
 801aae8:	4640      	mov	r0, r8
 801aaea:	4649      	mov	r1, r9
 801aaec:	f7e5 fbec 	bl	80002c8 <__aeabi_dsub>
 801aaf0:	a36f      	add	r3, pc, #444	; (adr r3, 801acb0 <__ieee754_pow+0x9c0>)
 801aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaf6:	f7e5 fd9f 	bl	8000638 <__aeabi_dmul>
 801aafa:	a36f      	add	r3, pc, #444	; (adr r3, 801acb8 <__ieee754_pow+0x9c8>)
 801aafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab00:	4680      	mov	r8, r0
 801ab02:	4689      	mov	r9, r1
 801ab04:	4620      	mov	r0, r4
 801ab06:	4629      	mov	r1, r5
 801ab08:	f7e5 fd96 	bl	8000638 <__aeabi_dmul>
 801ab0c:	4602      	mov	r2, r0
 801ab0e:	460b      	mov	r3, r1
 801ab10:	4640      	mov	r0, r8
 801ab12:	4649      	mov	r1, r9
 801ab14:	f7e5 fbda 	bl	80002cc <__adddf3>
 801ab18:	4604      	mov	r4, r0
 801ab1a:	460d      	mov	r5, r1
 801ab1c:	4602      	mov	r2, r0
 801ab1e:	460b      	mov	r3, r1
 801ab20:	4630      	mov	r0, r6
 801ab22:	4639      	mov	r1, r7
 801ab24:	f7e5 fbd2 	bl	80002cc <__adddf3>
 801ab28:	4632      	mov	r2, r6
 801ab2a:	463b      	mov	r3, r7
 801ab2c:	4680      	mov	r8, r0
 801ab2e:	4689      	mov	r9, r1
 801ab30:	f7e5 fbca 	bl	80002c8 <__aeabi_dsub>
 801ab34:	4602      	mov	r2, r0
 801ab36:	460b      	mov	r3, r1
 801ab38:	4620      	mov	r0, r4
 801ab3a:	4629      	mov	r1, r5
 801ab3c:	f7e5 fbc4 	bl	80002c8 <__aeabi_dsub>
 801ab40:	4642      	mov	r2, r8
 801ab42:	4606      	mov	r6, r0
 801ab44:	460f      	mov	r7, r1
 801ab46:	464b      	mov	r3, r9
 801ab48:	4640      	mov	r0, r8
 801ab4a:	4649      	mov	r1, r9
 801ab4c:	f7e5 fd74 	bl	8000638 <__aeabi_dmul>
 801ab50:	a35b      	add	r3, pc, #364	; (adr r3, 801acc0 <__ieee754_pow+0x9d0>)
 801ab52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab56:	4604      	mov	r4, r0
 801ab58:	460d      	mov	r5, r1
 801ab5a:	f7e5 fd6d 	bl	8000638 <__aeabi_dmul>
 801ab5e:	a35a      	add	r3, pc, #360	; (adr r3, 801acc8 <__ieee754_pow+0x9d8>)
 801ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab64:	f7e5 fbb0 	bl	80002c8 <__aeabi_dsub>
 801ab68:	4622      	mov	r2, r4
 801ab6a:	462b      	mov	r3, r5
 801ab6c:	f7e5 fd64 	bl	8000638 <__aeabi_dmul>
 801ab70:	a357      	add	r3, pc, #348	; (adr r3, 801acd0 <__ieee754_pow+0x9e0>)
 801ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab76:	f7e5 fba9 	bl	80002cc <__adddf3>
 801ab7a:	4622      	mov	r2, r4
 801ab7c:	462b      	mov	r3, r5
 801ab7e:	f7e5 fd5b 	bl	8000638 <__aeabi_dmul>
 801ab82:	a355      	add	r3, pc, #340	; (adr r3, 801acd8 <__ieee754_pow+0x9e8>)
 801ab84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab88:	f7e5 fb9e 	bl	80002c8 <__aeabi_dsub>
 801ab8c:	4622      	mov	r2, r4
 801ab8e:	462b      	mov	r3, r5
 801ab90:	f7e5 fd52 	bl	8000638 <__aeabi_dmul>
 801ab94:	a352      	add	r3, pc, #328	; (adr r3, 801ace0 <__ieee754_pow+0x9f0>)
 801ab96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab9a:	f7e5 fb97 	bl	80002cc <__adddf3>
 801ab9e:	4622      	mov	r2, r4
 801aba0:	462b      	mov	r3, r5
 801aba2:	f7e5 fd49 	bl	8000638 <__aeabi_dmul>
 801aba6:	4602      	mov	r2, r0
 801aba8:	460b      	mov	r3, r1
 801abaa:	4640      	mov	r0, r8
 801abac:	4649      	mov	r1, r9
 801abae:	f7e5 fb8b 	bl	80002c8 <__aeabi_dsub>
 801abb2:	4604      	mov	r4, r0
 801abb4:	460d      	mov	r5, r1
 801abb6:	4602      	mov	r2, r0
 801abb8:	460b      	mov	r3, r1
 801abba:	4640      	mov	r0, r8
 801abbc:	4649      	mov	r1, r9
 801abbe:	f7e5 fd3b 	bl	8000638 <__aeabi_dmul>
 801abc2:	2200      	movs	r2, #0
 801abc4:	e9cd 0100 	strd	r0, r1, [sp]
 801abc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801abcc:	4620      	mov	r0, r4
 801abce:	4629      	mov	r1, r5
 801abd0:	f7e5 fb7a 	bl	80002c8 <__aeabi_dsub>
 801abd4:	4602      	mov	r2, r0
 801abd6:	460b      	mov	r3, r1
 801abd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801abdc:	f7e5 fe56 	bl	800088c <__aeabi_ddiv>
 801abe0:	4632      	mov	r2, r6
 801abe2:	4604      	mov	r4, r0
 801abe4:	460d      	mov	r5, r1
 801abe6:	463b      	mov	r3, r7
 801abe8:	4640      	mov	r0, r8
 801abea:	4649      	mov	r1, r9
 801abec:	f7e5 fd24 	bl	8000638 <__aeabi_dmul>
 801abf0:	4632      	mov	r2, r6
 801abf2:	463b      	mov	r3, r7
 801abf4:	f7e5 fb6a 	bl	80002cc <__adddf3>
 801abf8:	4602      	mov	r2, r0
 801abfa:	460b      	mov	r3, r1
 801abfc:	4620      	mov	r0, r4
 801abfe:	4629      	mov	r1, r5
 801ac00:	f7e5 fb62 	bl	80002c8 <__aeabi_dsub>
 801ac04:	4642      	mov	r2, r8
 801ac06:	464b      	mov	r3, r9
 801ac08:	f7e5 fb5e 	bl	80002c8 <__aeabi_dsub>
 801ac0c:	4602      	mov	r2, r0
 801ac0e:	460b      	mov	r3, r1
 801ac10:	2000      	movs	r0, #0
 801ac12:	4939      	ldr	r1, [pc, #228]	; (801acf8 <__ieee754_pow+0xa08>)
 801ac14:	f7e5 fb58 	bl	80002c8 <__aeabi_dsub>
 801ac18:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801ac1c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801ac20:	4602      	mov	r2, r0
 801ac22:	460b      	mov	r3, r1
 801ac24:	da2f      	bge.n	801ac86 <__ieee754_pow+0x996>
 801ac26:	4650      	mov	r0, sl
 801ac28:	ec43 2b10 	vmov	d0, r2, r3
 801ac2c:	f000 fc80 	bl	801b530 <scalbn>
 801ac30:	ec51 0b10 	vmov	r0, r1, d0
 801ac34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ac38:	f7ff bbf1 	b.w	801a41e <__ieee754_pow+0x12e>
 801ac3c:	4b2f      	ldr	r3, [pc, #188]	; (801acfc <__ieee754_pow+0xa0c>)
 801ac3e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ac42:	429e      	cmp	r6, r3
 801ac44:	f77f af0c 	ble.w	801aa60 <__ieee754_pow+0x770>
 801ac48:	4b2d      	ldr	r3, [pc, #180]	; (801ad00 <__ieee754_pow+0xa10>)
 801ac4a:	440b      	add	r3, r1
 801ac4c:	4303      	orrs	r3, r0
 801ac4e:	d00b      	beq.n	801ac68 <__ieee754_pow+0x978>
 801ac50:	a325      	add	r3, pc, #148	; (adr r3, 801ace8 <__ieee754_pow+0x9f8>)
 801ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ac5a:	f7e5 fced 	bl	8000638 <__aeabi_dmul>
 801ac5e:	a322      	add	r3, pc, #136	; (adr r3, 801ace8 <__ieee754_pow+0x9f8>)
 801ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac64:	f7ff bbdb 	b.w	801a41e <__ieee754_pow+0x12e>
 801ac68:	4622      	mov	r2, r4
 801ac6a:	462b      	mov	r3, r5
 801ac6c:	f7e5 fb2c 	bl	80002c8 <__aeabi_dsub>
 801ac70:	4642      	mov	r2, r8
 801ac72:	464b      	mov	r3, r9
 801ac74:	f7e5 ff66 	bl	8000b44 <__aeabi_dcmpge>
 801ac78:	2800      	cmp	r0, #0
 801ac7a:	f43f aef1 	beq.w	801aa60 <__ieee754_pow+0x770>
 801ac7e:	e7e7      	b.n	801ac50 <__ieee754_pow+0x960>
 801ac80:	f04f 0a00 	mov.w	sl, #0
 801ac84:	e718      	b.n	801aab8 <__ieee754_pow+0x7c8>
 801ac86:	4621      	mov	r1, r4
 801ac88:	e7d4      	b.n	801ac34 <__ieee754_pow+0x944>
 801ac8a:	2000      	movs	r0, #0
 801ac8c:	491a      	ldr	r1, [pc, #104]	; (801acf8 <__ieee754_pow+0xa08>)
 801ac8e:	f7ff bb8f 	b.w	801a3b0 <__ieee754_pow+0xc0>
 801ac92:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ac96:	f7ff bb8b 	b.w	801a3b0 <__ieee754_pow+0xc0>
 801ac9a:	4630      	mov	r0, r6
 801ac9c:	4639      	mov	r1, r7
 801ac9e:	f7ff bb87 	b.w	801a3b0 <__ieee754_pow+0xc0>
 801aca2:	4693      	mov	fp, r2
 801aca4:	f7ff bb98 	b.w	801a3d8 <__ieee754_pow+0xe8>
 801aca8:	00000000 	.word	0x00000000
 801acac:	3fe62e43 	.word	0x3fe62e43
 801acb0:	fefa39ef 	.word	0xfefa39ef
 801acb4:	3fe62e42 	.word	0x3fe62e42
 801acb8:	0ca86c39 	.word	0x0ca86c39
 801acbc:	be205c61 	.word	0xbe205c61
 801acc0:	72bea4d0 	.word	0x72bea4d0
 801acc4:	3e663769 	.word	0x3e663769
 801acc8:	c5d26bf1 	.word	0xc5d26bf1
 801accc:	3ebbbd41 	.word	0x3ebbbd41
 801acd0:	af25de2c 	.word	0xaf25de2c
 801acd4:	3f11566a 	.word	0x3f11566a
 801acd8:	16bebd93 	.word	0x16bebd93
 801acdc:	3f66c16c 	.word	0x3f66c16c
 801ace0:	5555553e 	.word	0x5555553e
 801ace4:	3fc55555 	.word	0x3fc55555
 801ace8:	c2f8f359 	.word	0xc2f8f359
 801acec:	01a56e1f 	.word	0x01a56e1f
 801acf0:	3fe00000 	.word	0x3fe00000
 801acf4:	000fffff 	.word	0x000fffff
 801acf8:	3ff00000 	.word	0x3ff00000
 801acfc:	4090cbff 	.word	0x4090cbff
 801ad00:	3f6f3400 	.word	0x3f6f3400
 801ad04:	652b82fe 	.word	0x652b82fe
 801ad08:	3c971547 	.word	0x3c971547

0801ad0c <__ieee754_sqrt>:
 801ad0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad10:	4955      	ldr	r1, [pc, #340]	; (801ae68 <__ieee754_sqrt+0x15c>)
 801ad12:	ec55 4b10 	vmov	r4, r5, d0
 801ad16:	43a9      	bics	r1, r5
 801ad18:	462b      	mov	r3, r5
 801ad1a:	462a      	mov	r2, r5
 801ad1c:	d112      	bne.n	801ad44 <__ieee754_sqrt+0x38>
 801ad1e:	ee10 2a10 	vmov	r2, s0
 801ad22:	ee10 0a10 	vmov	r0, s0
 801ad26:	4629      	mov	r1, r5
 801ad28:	f7e5 fc86 	bl	8000638 <__aeabi_dmul>
 801ad2c:	4602      	mov	r2, r0
 801ad2e:	460b      	mov	r3, r1
 801ad30:	4620      	mov	r0, r4
 801ad32:	4629      	mov	r1, r5
 801ad34:	f7e5 faca 	bl	80002cc <__adddf3>
 801ad38:	4604      	mov	r4, r0
 801ad3a:	460d      	mov	r5, r1
 801ad3c:	ec45 4b10 	vmov	d0, r4, r5
 801ad40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad44:	2d00      	cmp	r5, #0
 801ad46:	ee10 0a10 	vmov	r0, s0
 801ad4a:	4621      	mov	r1, r4
 801ad4c:	dc0f      	bgt.n	801ad6e <__ieee754_sqrt+0x62>
 801ad4e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ad52:	4330      	orrs	r0, r6
 801ad54:	d0f2      	beq.n	801ad3c <__ieee754_sqrt+0x30>
 801ad56:	b155      	cbz	r5, 801ad6e <__ieee754_sqrt+0x62>
 801ad58:	ee10 2a10 	vmov	r2, s0
 801ad5c:	4620      	mov	r0, r4
 801ad5e:	4629      	mov	r1, r5
 801ad60:	f7e5 fab2 	bl	80002c8 <__aeabi_dsub>
 801ad64:	4602      	mov	r2, r0
 801ad66:	460b      	mov	r3, r1
 801ad68:	f7e5 fd90 	bl	800088c <__aeabi_ddiv>
 801ad6c:	e7e4      	b.n	801ad38 <__ieee754_sqrt+0x2c>
 801ad6e:	151b      	asrs	r3, r3, #20
 801ad70:	d073      	beq.n	801ae5a <__ieee754_sqrt+0x14e>
 801ad72:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ad76:	07dd      	lsls	r5, r3, #31
 801ad78:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801ad7c:	bf48      	it	mi
 801ad7e:	0fc8      	lsrmi	r0, r1, #31
 801ad80:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801ad84:	bf44      	itt	mi
 801ad86:	0049      	lslmi	r1, r1, #1
 801ad88:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801ad8c:	2500      	movs	r5, #0
 801ad8e:	1058      	asrs	r0, r3, #1
 801ad90:	0fcb      	lsrs	r3, r1, #31
 801ad92:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801ad96:	0049      	lsls	r1, r1, #1
 801ad98:	2316      	movs	r3, #22
 801ad9a:	462c      	mov	r4, r5
 801ad9c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801ada0:	19a7      	adds	r7, r4, r6
 801ada2:	4297      	cmp	r7, r2
 801ada4:	bfde      	ittt	le
 801ada6:	19bc      	addle	r4, r7, r6
 801ada8:	1bd2      	suble	r2, r2, r7
 801adaa:	19ad      	addle	r5, r5, r6
 801adac:	0fcf      	lsrs	r7, r1, #31
 801adae:	3b01      	subs	r3, #1
 801adb0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801adb4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801adb8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801adbc:	d1f0      	bne.n	801ada0 <__ieee754_sqrt+0x94>
 801adbe:	f04f 0c20 	mov.w	ip, #32
 801adc2:	469e      	mov	lr, r3
 801adc4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801adc8:	42a2      	cmp	r2, r4
 801adca:	eb06 070e 	add.w	r7, r6, lr
 801adce:	dc02      	bgt.n	801add6 <__ieee754_sqrt+0xca>
 801add0:	d112      	bne.n	801adf8 <__ieee754_sqrt+0xec>
 801add2:	428f      	cmp	r7, r1
 801add4:	d810      	bhi.n	801adf8 <__ieee754_sqrt+0xec>
 801add6:	2f00      	cmp	r7, #0
 801add8:	eb07 0e06 	add.w	lr, r7, r6
 801addc:	da42      	bge.n	801ae64 <__ieee754_sqrt+0x158>
 801adde:	f1be 0f00 	cmp.w	lr, #0
 801ade2:	db3f      	blt.n	801ae64 <__ieee754_sqrt+0x158>
 801ade4:	f104 0801 	add.w	r8, r4, #1
 801ade8:	1b12      	subs	r2, r2, r4
 801adea:	428f      	cmp	r7, r1
 801adec:	bf88      	it	hi
 801adee:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801adf2:	1bc9      	subs	r1, r1, r7
 801adf4:	4433      	add	r3, r6
 801adf6:	4644      	mov	r4, r8
 801adf8:	0052      	lsls	r2, r2, #1
 801adfa:	f1bc 0c01 	subs.w	ip, ip, #1
 801adfe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801ae02:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ae06:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ae0a:	d1dd      	bne.n	801adc8 <__ieee754_sqrt+0xbc>
 801ae0c:	430a      	orrs	r2, r1
 801ae0e:	d006      	beq.n	801ae1e <__ieee754_sqrt+0x112>
 801ae10:	1c5c      	adds	r4, r3, #1
 801ae12:	bf13      	iteet	ne
 801ae14:	3301      	addne	r3, #1
 801ae16:	3501      	addeq	r5, #1
 801ae18:	4663      	moveq	r3, ip
 801ae1a:	f023 0301 	bicne.w	r3, r3, #1
 801ae1e:	106a      	asrs	r2, r5, #1
 801ae20:	085b      	lsrs	r3, r3, #1
 801ae22:	07e9      	lsls	r1, r5, #31
 801ae24:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801ae28:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801ae2c:	bf48      	it	mi
 801ae2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801ae32:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801ae36:	461c      	mov	r4, r3
 801ae38:	e780      	b.n	801ad3c <__ieee754_sqrt+0x30>
 801ae3a:	0aca      	lsrs	r2, r1, #11
 801ae3c:	3815      	subs	r0, #21
 801ae3e:	0549      	lsls	r1, r1, #21
 801ae40:	2a00      	cmp	r2, #0
 801ae42:	d0fa      	beq.n	801ae3a <__ieee754_sqrt+0x12e>
 801ae44:	02d6      	lsls	r6, r2, #11
 801ae46:	d50a      	bpl.n	801ae5e <__ieee754_sqrt+0x152>
 801ae48:	f1c3 0420 	rsb	r4, r3, #32
 801ae4c:	fa21 f404 	lsr.w	r4, r1, r4
 801ae50:	1e5d      	subs	r5, r3, #1
 801ae52:	4099      	lsls	r1, r3
 801ae54:	4322      	orrs	r2, r4
 801ae56:	1b43      	subs	r3, r0, r5
 801ae58:	e78b      	b.n	801ad72 <__ieee754_sqrt+0x66>
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	e7f0      	b.n	801ae40 <__ieee754_sqrt+0x134>
 801ae5e:	0052      	lsls	r2, r2, #1
 801ae60:	3301      	adds	r3, #1
 801ae62:	e7ef      	b.n	801ae44 <__ieee754_sqrt+0x138>
 801ae64:	46a0      	mov	r8, r4
 801ae66:	e7bf      	b.n	801ade8 <__ieee754_sqrt+0xdc>
 801ae68:	7ff00000 	.word	0x7ff00000

0801ae6c <__ieee754_powf>:
 801ae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae70:	ee10 5a90 	vmov	r5, s1
 801ae74:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801ae78:	ed2d 8b02 	vpush	{d8}
 801ae7c:	eeb0 8a40 	vmov.f32	s16, s0
 801ae80:	eef0 8a60 	vmov.f32	s17, s1
 801ae84:	f000 8293 	beq.w	801b3ae <__ieee754_powf+0x542>
 801ae88:	ee10 8a10 	vmov	r8, s0
 801ae8c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801ae90:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801ae94:	dc06      	bgt.n	801aea4 <__ieee754_powf+0x38>
 801ae96:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801ae9a:	dd0a      	ble.n	801aeb2 <__ieee754_powf+0x46>
 801ae9c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801aea0:	f000 8285 	beq.w	801b3ae <__ieee754_powf+0x542>
 801aea4:	ecbd 8b02 	vpop	{d8}
 801aea8:	48d9      	ldr	r0, [pc, #868]	; (801b210 <__ieee754_powf+0x3a4>)
 801aeaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aeae:	f000 bbc7 	b.w	801b640 <nanf>
 801aeb2:	f1b8 0f00 	cmp.w	r8, #0
 801aeb6:	da1d      	bge.n	801aef4 <__ieee754_powf+0x88>
 801aeb8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801aebc:	da2c      	bge.n	801af18 <__ieee754_powf+0xac>
 801aebe:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801aec2:	db30      	blt.n	801af26 <__ieee754_powf+0xba>
 801aec4:	15fb      	asrs	r3, r7, #23
 801aec6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801aeca:	fa47 f603 	asr.w	r6, r7, r3
 801aece:	fa06 f303 	lsl.w	r3, r6, r3
 801aed2:	42bb      	cmp	r3, r7
 801aed4:	d127      	bne.n	801af26 <__ieee754_powf+0xba>
 801aed6:	f006 0601 	and.w	r6, r6, #1
 801aeda:	f1c6 0602 	rsb	r6, r6, #2
 801aede:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801aee2:	d122      	bne.n	801af2a <__ieee754_powf+0xbe>
 801aee4:	2d00      	cmp	r5, #0
 801aee6:	f280 8268 	bge.w	801b3ba <__ieee754_powf+0x54e>
 801aeea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801aeee:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801aef2:	e00d      	b.n	801af10 <__ieee754_powf+0xa4>
 801aef4:	2600      	movs	r6, #0
 801aef6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801aefa:	d1f0      	bne.n	801aede <__ieee754_powf+0x72>
 801aefc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801af00:	f000 8255 	beq.w	801b3ae <__ieee754_powf+0x542>
 801af04:	dd0a      	ble.n	801af1c <__ieee754_powf+0xb0>
 801af06:	2d00      	cmp	r5, #0
 801af08:	f280 8254 	bge.w	801b3b4 <__ieee754_powf+0x548>
 801af0c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801b214 <__ieee754_powf+0x3a8>
 801af10:	ecbd 8b02 	vpop	{d8}
 801af14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af18:	2602      	movs	r6, #2
 801af1a:	e7ec      	b.n	801aef6 <__ieee754_powf+0x8a>
 801af1c:	2d00      	cmp	r5, #0
 801af1e:	daf5      	bge.n	801af0c <__ieee754_powf+0xa0>
 801af20:	eeb1 0a68 	vneg.f32	s0, s17
 801af24:	e7f4      	b.n	801af10 <__ieee754_powf+0xa4>
 801af26:	2600      	movs	r6, #0
 801af28:	e7d9      	b.n	801aede <__ieee754_powf+0x72>
 801af2a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801af2e:	d102      	bne.n	801af36 <__ieee754_powf+0xca>
 801af30:	ee28 0a08 	vmul.f32	s0, s16, s16
 801af34:	e7ec      	b.n	801af10 <__ieee754_powf+0xa4>
 801af36:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801af3a:	eeb0 0a48 	vmov.f32	s0, s16
 801af3e:	d108      	bne.n	801af52 <__ieee754_powf+0xe6>
 801af40:	f1b8 0f00 	cmp.w	r8, #0
 801af44:	db05      	blt.n	801af52 <__ieee754_powf+0xe6>
 801af46:	ecbd 8b02 	vpop	{d8}
 801af4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af4e:	f000 ba4d 	b.w	801b3ec <__ieee754_sqrtf>
 801af52:	f000 fb63 	bl	801b61c <fabsf>
 801af56:	b124      	cbz	r4, 801af62 <__ieee754_powf+0xf6>
 801af58:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801af5c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801af60:	d117      	bne.n	801af92 <__ieee754_powf+0x126>
 801af62:	2d00      	cmp	r5, #0
 801af64:	bfbc      	itt	lt
 801af66:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801af6a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801af6e:	f1b8 0f00 	cmp.w	r8, #0
 801af72:	dacd      	bge.n	801af10 <__ieee754_powf+0xa4>
 801af74:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801af78:	ea54 0306 	orrs.w	r3, r4, r6
 801af7c:	d104      	bne.n	801af88 <__ieee754_powf+0x11c>
 801af7e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801af82:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801af86:	e7c3      	b.n	801af10 <__ieee754_powf+0xa4>
 801af88:	2e01      	cmp	r6, #1
 801af8a:	d1c1      	bne.n	801af10 <__ieee754_powf+0xa4>
 801af8c:	eeb1 0a40 	vneg.f32	s0, s0
 801af90:	e7be      	b.n	801af10 <__ieee754_powf+0xa4>
 801af92:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801af96:	3801      	subs	r0, #1
 801af98:	ea56 0300 	orrs.w	r3, r6, r0
 801af9c:	d104      	bne.n	801afa8 <__ieee754_powf+0x13c>
 801af9e:	ee38 8a48 	vsub.f32	s16, s16, s16
 801afa2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801afa6:	e7b3      	b.n	801af10 <__ieee754_powf+0xa4>
 801afa8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801afac:	dd6d      	ble.n	801b08a <__ieee754_powf+0x21e>
 801afae:	4b9a      	ldr	r3, [pc, #616]	; (801b218 <__ieee754_powf+0x3ac>)
 801afb0:	429c      	cmp	r4, r3
 801afb2:	dc06      	bgt.n	801afc2 <__ieee754_powf+0x156>
 801afb4:	2d00      	cmp	r5, #0
 801afb6:	daa9      	bge.n	801af0c <__ieee754_powf+0xa0>
 801afb8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 801b21c <__ieee754_powf+0x3b0>
 801afbc:	ee20 0a00 	vmul.f32	s0, s0, s0
 801afc0:	e7a6      	b.n	801af10 <__ieee754_powf+0xa4>
 801afc2:	4b97      	ldr	r3, [pc, #604]	; (801b220 <__ieee754_powf+0x3b4>)
 801afc4:	429c      	cmp	r4, r3
 801afc6:	dd02      	ble.n	801afce <__ieee754_powf+0x162>
 801afc8:	2d00      	cmp	r5, #0
 801afca:	dcf5      	bgt.n	801afb8 <__ieee754_powf+0x14c>
 801afcc:	e79e      	b.n	801af0c <__ieee754_powf+0xa0>
 801afce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801afd2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801afd6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801b224 <__ieee754_powf+0x3b8>
 801afda:	eef1 6a40 	vneg.f32	s13, s0
 801afde:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801afe2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801afe6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801afea:	eee7 7a40 	vfms.f32	s15, s14, s0
 801afee:	ee60 0a00 	vmul.f32	s1, s0, s0
 801aff2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 801b228 <__ieee754_powf+0x3bc>
 801aff6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801affa:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801b22c <__ieee754_powf+0x3c0>
 801affe:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801b002:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b006:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801b230 <__ieee754_powf+0x3c4>
 801b00a:	eeb0 6a67 	vmov.f32	s12, s15
 801b00e:	eea0 6a07 	vfma.f32	s12, s0, s14
 801b012:	ee16 3a10 	vmov	r3, s12
 801b016:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801b01a:	f023 030f 	bic.w	r3, r3, #15
 801b01e:	ee00 3a90 	vmov	s1, r3
 801b022:	eee6 0a87 	vfma.f32	s1, s13, s14
 801b026:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801b02a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801b02e:	f025 050f 	bic.w	r5, r5, #15
 801b032:	ee07 5a10 	vmov	s14, r5
 801b036:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801b03a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801b03e:	ee07 3a90 	vmov	s15, r3
 801b042:	eee7 0a27 	vfma.f32	s1, s14, s15
 801b046:	3e01      	subs	r6, #1
 801b048:	ea56 0200 	orrs.w	r2, r6, r0
 801b04c:	ee07 5a10 	vmov	s14, r5
 801b050:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b054:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801b058:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801b05c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801b060:	ee17 4a10 	vmov	r4, s14
 801b064:	bf08      	it	eq
 801b066:	eeb0 8a40 	vmoveq.f32	s16, s0
 801b06a:	2c00      	cmp	r4, #0
 801b06c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801b070:	f340 8184 	ble.w	801b37c <__ieee754_powf+0x510>
 801b074:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801b078:	f340 80fc 	ble.w	801b274 <__ieee754_powf+0x408>
 801b07c:	eddf 7a67 	vldr	s15, [pc, #412]	; 801b21c <__ieee754_powf+0x3b0>
 801b080:	ee28 0a27 	vmul.f32	s0, s16, s15
 801b084:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b088:	e742      	b.n	801af10 <__ieee754_powf+0xa4>
 801b08a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 801b08e:	bfbf      	itttt	lt
 801b090:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 801b234 <__ieee754_powf+0x3c8>
 801b094:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801b098:	f06f 0217 	mvnlt.w	r2, #23
 801b09c:	ee17 4a90 	vmovlt	r4, s15
 801b0a0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801b0a4:	bfa8      	it	ge
 801b0a6:	2200      	movge	r2, #0
 801b0a8:	3b7f      	subs	r3, #127	; 0x7f
 801b0aa:	4413      	add	r3, r2
 801b0ac:	4a62      	ldr	r2, [pc, #392]	; (801b238 <__ieee754_powf+0x3cc>)
 801b0ae:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801b0b2:	4294      	cmp	r4, r2
 801b0b4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801b0b8:	dd06      	ble.n	801b0c8 <__ieee754_powf+0x25c>
 801b0ba:	4a60      	ldr	r2, [pc, #384]	; (801b23c <__ieee754_powf+0x3d0>)
 801b0bc:	4294      	cmp	r4, r2
 801b0be:	f340 80a5 	ble.w	801b20c <__ieee754_powf+0x3a0>
 801b0c2:	3301      	adds	r3, #1
 801b0c4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801b0c8:	2400      	movs	r4, #0
 801b0ca:	4a5d      	ldr	r2, [pc, #372]	; (801b240 <__ieee754_powf+0x3d4>)
 801b0cc:	00a7      	lsls	r7, r4, #2
 801b0ce:	443a      	add	r2, r7
 801b0d0:	ee07 1a90 	vmov	s15, r1
 801b0d4:	ed92 7a00 	vldr	s14, [r2]
 801b0d8:	4a5a      	ldr	r2, [pc, #360]	; (801b244 <__ieee754_powf+0x3d8>)
 801b0da:	ee37 6a27 	vadd.f32	s12, s14, s15
 801b0de:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801b0e2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801b0e6:	1049      	asrs	r1, r1, #1
 801b0e8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801b0ec:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801b0f0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801b0f4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 801b0f8:	ee06 1a10 	vmov	s12, r1
 801b0fc:	ee65 4aa6 	vmul.f32	s9, s11, s13
 801b100:	ee14 ca90 	vmov	ip, s9
 801b104:	ea02 0c0c 	and.w	ip, r2, ip
 801b108:	ee05 ca10 	vmov	s10, ip
 801b10c:	eeb1 4a45 	vneg.f32	s8, s10
 801b110:	eee4 5a06 	vfma.f32	s11, s8, s12
 801b114:	ee36 6a47 	vsub.f32	s12, s12, s14
 801b118:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801b248 <__ieee754_powf+0x3dc>
 801b11c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801b120:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801b124:	eee4 5a06 	vfma.f32	s11, s8, s12
 801b128:	ee67 3aa7 	vmul.f32	s7, s15, s15
 801b12c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 801b130:	eddf 5a46 	vldr	s11, [pc, #280]	; 801b24c <__ieee754_powf+0x3e0>
 801b134:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801b138:	eddf 5a45 	vldr	s11, [pc, #276]	; 801b250 <__ieee754_powf+0x3e4>
 801b13c:	eee7 5a27 	vfma.f32	s11, s14, s15
 801b140:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801b224 <__ieee754_powf+0x3b8>
 801b144:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801b148:	eddf 5a42 	vldr	s11, [pc, #264]	; 801b254 <__ieee754_powf+0x3e8>
 801b14c:	eee7 5a27 	vfma.f32	s11, s14, s15
 801b150:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801b258 <__ieee754_powf+0x3ec>
 801b154:	ee75 6a24 	vadd.f32	s13, s10, s9
 801b158:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801b15c:	ee66 6a86 	vmul.f32	s13, s13, s12
 801b160:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801b164:	eef0 7a65 	vmov.f32	s15, s11
 801b168:	eee3 6a87 	vfma.f32	s13, s7, s14
 801b16c:	eee5 7a05 	vfma.f32	s15, s10, s10
 801b170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b174:	ee17 1a90 	vmov	r1, s15
 801b178:	4011      	ands	r1, r2
 801b17a:	ee07 1a90 	vmov	s15, r1
 801b17e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 801b182:	eddf 5a36 	vldr	s11, [pc, #216]	; 801b25c <__ieee754_powf+0x3f0>
 801b186:	eea4 7a05 	vfma.f32	s14, s8, s10
 801b18a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801b18e:	ee27 7a24 	vmul.f32	s14, s14, s9
 801b192:	eea7 7a86 	vfma.f32	s14, s15, s12
 801b196:	eeb0 6a47 	vmov.f32	s12, s14
 801b19a:	eea5 6a27 	vfma.f32	s12, s10, s15
 801b19e:	ee16 1a10 	vmov	r1, s12
 801b1a2:	4011      	ands	r1, r2
 801b1a4:	ee06 1a90 	vmov	s13, r1
 801b1a8:	eee4 6a27 	vfma.f32	s13, s8, s15
 801b1ac:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801b260 <__ieee754_powf+0x3f4>
 801b1b0:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b1b4:	ee06 1a10 	vmov	s12, r1
 801b1b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801b1bc:	eddf 7a29 	vldr	s15, [pc, #164]	; 801b264 <__ieee754_powf+0x3f8>
 801b1c0:	4929      	ldr	r1, [pc, #164]	; (801b268 <__ieee754_powf+0x3fc>)
 801b1c2:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b1c6:	4439      	add	r1, r7
 801b1c8:	edd1 7a00 	vldr	s15, [r1]
 801b1cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b1d0:	ee07 3a90 	vmov	s15, r3
 801b1d4:	eef0 0a47 	vmov.f32	s1, s14
 801b1d8:	4b24      	ldr	r3, [pc, #144]	; (801b26c <__ieee754_powf+0x400>)
 801b1da:	eee6 0a25 	vfma.f32	s1, s12, s11
 801b1de:	443b      	add	r3, r7
 801b1e0:	ed93 5a00 	vldr	s10, [r3]
 801b1e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801b1e8:	ee70 0a85 	vadd.f32	s1, s1, s10
 801b1ec:	ee70 7aa6 	vadd.f32	s15, s1, s13
 801b1f0:	ee17 3a90 	vmov	r3, s15
 801b1f4:	4013      	ands	r3, r2
 801b1f6:	ee07 3a90 	vmov	s15, r3
 801b1fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b1fe:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801b202:	eee6 7a65 	vfms.f32	s15, s12, s11
 801b206:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b20a:	e70e      	b.n	801b02a <__ieee754_powf+0x1be>
 801b20c:	2401      	movs	r4, #1
 801b20e:	e75c      	b.n	801b0ca <__ieee754_powf+0x25e>
 801b210:	0801c459 	.word	0x0801c459
 801b214:	00000000 	.word	0x00000000
 801b218:	3f7ffff7 	.word	0x3f7ffff7
 801b21c:	7149f2ca 	.word	0x7149f2ca
 801b220:	3f800007 	.word	0x3f800007
 801b224:	3eaaaaab 	.word	0x3eaaaaab
 801b228:	36eca570 	.word	0x36eca570
 801b22c:	3fb8aa3b 	.word	0x3fb8aa3b
 801b230:	3fb8aa00 	.word	0x3fb8aa00
 801b234:	4b800000 	.word	0x4b800000
 801b238:	001cc471 	.word	0x001cc471
 801b23c:	005db3d6 	.word	0x005db3d6
 801b240:	0801c4d0 	.word	0x0801c4d0
 801b244:	fffff000 	.word	0xfffff000
 801b248:	3e6c3255 	.word	0x3e6c3255
 801b24c:	3e53f142 	.word	0x3e53f142
 801b250:	3e8ba305 	.word	0x3e8ba305
 801b254:	3edb6db7 	.word	0x3edb6db7
 801b258:	3f19999a 	.word	0x3f19999a
 801b25c:	3f763800 	.word	0x3f763800
 801b260:	3f76384f 	.word	0x3f76384f
 801b264:	369dc3a0 	.word	0x369dc3a0
 801b268:	0801c4e0 	.word	0x0801c4e0
 801b26c:	0801c4d8 	.word	0x0801c4d8
 801b270:	3338aa3c 	.word	0x3338aa3c
 801b274:	f040 8092 	bne.w	801b39c <__ieee754_powf+0x530>
 801b278:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801b270 <__ieee754_powf+0x404>
 801b27c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b280:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801b284:	eef4 6ac7 	vcmpe.f32	s13, s14
 801b288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b28c:	f73f aef6 	bgt.w	801b07c <__ieee754_powf+0x210>
 801b290:	15db      	asrs	r3, r3, #23
 801b292:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801b296:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801b29a:	4103      	asrs	r3, r0
 801b29c:	4423      	add	r3, r4
 801b29e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b2a2:	4947      	ldr	r1, [pc, #284]	; (801b3c0 <__ieee754_powf+0x554>)
 801b2a4:	3a7f      	subs	r2, #127	; 0x7f
 801b2a6:	4111      	asrs	r1, r2
 801b2a8:	ea23 0101 	bic.w	r1, r3, r1
 801b2ac:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801b2b0:	ee07 1a10 	vmov	s14, r1
 801b2b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801b2b8:	f1c2 0217 	rsb	r2, r2, #23
 801b2bc:	4110      	asrs	r0, r2
 801b2be:	2c00      	cmp	r4, #0
 801b2c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b2c4:	bfb8      	it	lt
 801b2c6:	4240      	neglt	r0, r0
 801b2c8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801b2cc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801b3c4 <__ieee754_powf+0x558>
 801b2d0:	ee17 3a10 	vmov	r3, s14
 801b2d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801b2d8:	f023 030f 	bic.w	r3, r3, #15
 801b2dc:	ee07 3a10 	vmov	s14, r3
 801b2e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b2e4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801b2e8:	eddf 7a37 	vldr	s15, [pc, #220]	; 801b3c8 <__ieee754_powf+0x55c>
 801b2ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b2f0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801b2f4:	eddf 6a35 	vldr	s13, [pc, #212]	; 801b3cc <__ieee754_powf+0x560>
 801b2f8:	eeb0 0a67 	vmov.f32	s0, s15
 801b2fc:	eea7 0a26 	vfma.f32	s0, s14, s13
 801b300:	eeb0 6a40 	vmov.f32	s12, s0
 801b304:	eea7 6a66 	vfms.f32	s12, s14, s13
 801b308:	ee20 7a00 	vmul.f32	s14, s0, s0
 801b30c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801b310:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801b3d0 <__ieee754_powf+0x564>
 801b314:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801b3d4 <__ieee754_powf+0x568>
 801b318:	eea7 6a26 	vfma.f32	s12, s14, s13
 801b31c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 801b3d8 <__ieee754_powf+0x56c>
 801b320:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b324:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801b3dc <__ieee754_powf+0x570>
 801b328:	eea6 6a87 	vfma.f32	s12, s13, s14
 801b32c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 801b3e0 <__ieee754_powf+0x574>
 801b330:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b334:	eeb0 6a40 	vmov.f32	s12, s0
 801b338:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801b33c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801b340:	eeb0 7a46 	vmov.f32	s14, s12
 801b344:	ee77 6a66 	vsub.f32	s13, s14, s13
 801b348:	ee20 6a06 	vmul.f32	s12, s0, s12
 801b34c:	eee0 7a27 	vfma.f32	s15, s0, s15
 801b350:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801b354:	ee77 7a67 	vsub.f32	s15, s14, s15
 801b358:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b35c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801b360:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801b364:	ee10 3a10 	vmov	r3, s0
 801b368:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801b36c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801b370:	da1a      	bge.n	801b3a8 <__ieee754_powf+0x53c>
 801b372:	f000 f9c5 	bl	801b700 <scalbnf>
 801b376:	ee20 0a08 	vmul.f32	s0, s0, s16
 801b37a:	e5c9      	b.n	801af10 <__ieee754_powf+0xa4>
 801b37c:	4a19      	ldr	r2, [pc, #100]	; (801b3e4 <__ieee754_powf+0x578>)
 801b37e:	4293      	cmp	r3, r2
 801b380:	dd02      	ble.n	801b388 <__ieee754_powf+0x51c>
 801b382:	eddf 7a19 	vldr	s15, [pc, #100]	; 801b3e8 <__ieee754_powf+0x57c>
 801b386:	e67b      	b.n	801b080 <__ieee754_powf+0x214>
 801b388:	d108      	bne.n	801b39c <__ieee754_powf+0x530>
 801b38a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801b38e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801b392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b396:	f6ff af7b 	blt.w	801b290 <__ieee754_powf+0x424>
 801b39a:	e7f2      	b.n	801b382 <__ieee754_powf+0x516>
 801b39c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801b3a0:	f73f af76 	bgt.w	801b290 <__ieee754_powf+0x424>
 801b3a4:	2000      	movs	r0, #0
 801b3a6:	e78f      	b.n	801b2c8 <__ieee754_powf+0x45c>
 801b3a8:	ee00 3a10 	vmov	s0, r3
 801b3ac:	e7e3      	b.n	801b376 <__ieee754_powf+0x50a>
 801b3ae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b3b2:	e5ad      	b.n	801af10 <__ieee754_powf+0xa4>
 801b3b4:	eeb0 0a68 	vmov.f32	s0, s17
 801b3b8:	e5aa      	b.n	801af10 <__ieee754_powf+0xa4>
 801b3ba:	eeb0 0a48 	vmov.f32	s0, s16
 801b3be:	e5a7      	b.n	801af10 <__ieee754_powf+0xa4>
 801b3c0:	007fffff 	.word	0x007fffff
 801b3c4:	3f317218 	.word	0x3f317218
 801b3c8:	35bfbe8c 	.word	0x35bfbe8c
 801b3cc:	3f317200 	.word	0x3f317200
 801b3d0:	3331bb4c 	.word	0x3331bb4c
 801b3d4:	b5ddea0e 	.word	0xb5ddea0e
 801b3d8:	388ab355 	.word	0x388ab355
 801b3dc:	bb360b61 	.word	0xbb360b61
 801b3e0:	3e2aaaab 	.word	0x3e2aaaab
 801b3e4:	43160000 	.word	0x43160000
 801b3e8:	0da24260 	.word	0x0da24260

0801b3ec <__ieee754_sqrtf>:
 801b3ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801b3f0:	4770      	bx	lr

0801b3f2 <fabs>:
 801b3f2:	ec51 0b10 	vmov	r0, r1, d0
 801b3f6:	ee10 2a10 	vmov	r2, s0
 801b3fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b3fe:	ec43 2b10 	vmov	d0, r2, r3
 801b402:	4770      	bx	lr

0801b404 <finite>:
 801b404:	ee10 3a90 	vmov	r3, s1
 801b408:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801b40c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801b410:	0fc0      	lsrs	r0, r0, #31
 801b412:	4770      	bx	lr

0801b414 <matherr>:
 801b414:	2000      	movs	r0, #0
 801b416:	4770      	bx	lr

0801b418 <nan>:
 801b418:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b420 <nan+0x8>
 801b41c:	4770      	bx	lr
 801b41e:	bf00      	nop
 801b420:	00000000 	.word	0x00000000
 801b424:	7ff80000 	.word	0x7ff80000

0801b428 <rint>:
 801b428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b42a:	ec51 0b10 	vmov	r0, r1, d0
 801b42e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b432:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801b436:	2e13      	cmp	r6, #19
 801b438:	460b      	mov	r3, r1
 801b43a:	ee10 4a10 	vmov	r4, s0
 801b43e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801b442:	dc56      	bgt.n	801b4f2 <rint+0xca>
 801b444:	2e00      	cmp	r6, #0
 801b446:	da2b      	bge.n	801b4a0 <rint+0x78>
 801b448:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801b44c:	4302      	orrs	r2, r0
 801b44e:	d023      	beq.n	801b498 <rint+0x70>
 801b450:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801b454:	4302      	orrs	r2, r0
 801b456:	4254      	negs	r4, r2
 801b458:	4314      	orrs	r4, r2
 801b45a:	0c4b      	lsrs	r3, r1, #17
 801b45c:	0b24      	lsrs	r4, r4, #12
 801b45e:	045b      	lsls	r3, r3, #17
 801b460:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801b464:	ea44 0103 	orr.w	r1, r4, r3
 801b468:	460b      	mov	r3, r1
 801b46a:	492f      	ldr	r1, [pc, #188]	; (801b528 <rint+0x100>)
 801b46c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801b470:	e9d1 6700 	ldrd	r6, r7, [r1]
 801b474:	4602      	mov	r2, r0
 801b476:	4639      	mov	r1, r7
 801b478:	4630      	mov	r0, r6
 801b47a:	f7e4 ff27 	bl	80002cc <__adddf3>
 801b47e:	e9cd 0100 	strd	r0, r1, [sp]
 801b482:	463b      	mov	r3, r7
 801b484:	4632      	mov	r2, r6
 801b486:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b48a:	f7e4 ff1d 	bl	80002c8 <__aeabi_dsub>
 801b48e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b492:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801b496:	4639      	mov	r1, r7
 801b498:	ec41 0b10 	vmov	d0, r0, r1
 801b49c:	b003      	add	sp, #12
 801b49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4a0:	4a22      	ldr	r2, [pc, #136]	; (801b52c <rint+0x104>)
 801b4a2:	4132      	asrs	r2, r6
 801b4a4:	ea01 0702 	and.w	r7, r1, r2
 801b4a8:	4307      	orrs	r7, r0
 801b4aa:	d0f5      	beq.n	801b498 <rint+0x70>
 801b4ac:	0852      	lsrs	r2, r2, #1
 801b4ae:	4011      	ands	r1, r2
 801b4b0:	430c      	orrs	r4, r1
 801b4b2:	d00b      	beq.n	801b4cc <rint+0xa4>
 801b4b4:	ea23 0202 	bic.w	r2, r3, r2
 801b4b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b4bc:	2e13      	cmp	r6, #19
 801b4be:	fa43 f306 	asr.w	r3, r3, r6
 801b4c2:	bf0c      	ite	eq
 801b4c4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801b4c8:	2400      	movne	r4, #0
 801b4ca:	4313      	orrs	r3, r2
 801b4cc:	4916      	ldr	r1, [pc, #88]	; (801b528 <rint+0x100>)
 801b4ce:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801b4d2:	4622      	mov	r2, r4
 801b4d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b4d8:	4620      	mov	r0, r4
 801b4da:	4629      	mov	r1, r5
 801b4dc:	f7e4 fef6 	bl	80002cc <__adddf3>
 801b4e0:	e9cd 0100 	strd	r0, r1, [sp]
 801b4e4:	4622      	mov	r2, r4
 801b4e6:	462b      	mov	r3, r5
 801b4e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b4ec:	f7e4 feec 	bl	80002c8 <__aeabi_dsub>
 801b4f0:	e7d2      	b.n	801b498 <rint+0x70>
 801b4f2:	2e33      	cmp	r6, #51	; 0x33
 801b4f4:	dd07      	ble.n	801b506 <rint+0xde>
 801b4f6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801b4fa:	d1cd      	bne.n	801b498 <rint+0x70>
 801b4fc:	ee10 2a10 	vmov	r2, s0
 801b500:	f7e4 fee4 	bl	80002cc <__adddf3>
 801b504:	e7c8      	b.n	801b498 <rint+0x70>
 801b506:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801b50a:	f04f 32ff 	mov.w	r2, #4294967295
 801b50e:	40f2      	lsrs	r2, r6
 801b510:	4210      	tst	r0, r2
 801b512:	d0c1      	beq.n	801b498 <rint+0x70>
 801b514:	0852      	lsrs	r2, r2, #1
 801b516:	4210      	tst	r0, r2
 801b518:	bf1f      	itttt	ne
 801b51a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801b51e:	ea20 0202 	bicne.w	r2, r0, r2
 801b522:	4134      	asrne	r4, r6
 801b524:	4314      	orrne	r4, r2
 801b526:	e7d1      	b.n	801b4cc <rint+0xa4>
 801b528:	0801c4e8 	.word	0x0801c4e8
 801b52c:	000fffff 	.word	0x000fffff

0801b530 <scalbn>:
 801b530:	b570      	push	{r4, r5, r6, lr}
 801b532:	ec55 4b10 	vmov	r4, r5, d0
 801b536:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801b53a:	4606      	mov	r6, r0
 801b53c:	462b      	mov	r3, r5
 801b53e:	b9aa      	cbnz	r2, 801b56c <scalbn+0x3c>
 801b540:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801b544:	4323      	orrs	r3, r4
 801b546:	d03b      	beq.n	801b5c0 <scalbn+0x90>
 801b548:	4b31      	ldr	r3, [pc, #196]	; (801b610 <scalbn+0xe0>)
 801b54a:	4629      	mov	r1, r5
 801b54c:	2200      	movs	r2, #0
 801b54e:	ee10 0a10 	vmov	r0, s0
 801b552:	f7e5 f871 	bl	8000638 <__aeabi_dmul>
 801b556:	4b2f      	ldr	r3, [pc, #188]	; (801b614 <scalbn+0xe4>)
 801b558:	429e      	cmp	r6, r3
 801b55a:	4604      	mov	r4, r0
 801b55c:	460d      	mov	r5, r1
 801b55e:	da12      	bge.n	801b586 <scalbn+0x56>
 801b560:	a327      	add	r3, pc, #156	; (adr r3, 801b600 <scalbn+0xd0>)
 801b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b566:	f7e5 f867 	bl	8000638 <__aeabi_dmul>
 801b56a:	e009      	b.n	801b580 <scalbn+0x50>
 801b56c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801b570:	428a      	cmp	r2, r1
 801b572:	d10c      	bne.n	801b58e <scalbn+0x5e>
 801b574:	ee10 2a10 	vmov	r2, s0
 801b578:	4620      	mov	r0, r4
 801b57a:	4629      	mov	r1, r5
 801b57c:	f7e4 fea6 	bl	80002cc <__adddf3>
 801b580:	4604      	mov	r4, r0
 801b582:	460d      	mov	r5, r1
 801b584:	e01c      	b.n	801b5c0 <scalbn+0x90>
 801b586:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b58a:	460b      	mov	r3, r1
 801b58c:	3a36      	subs	r2, #54	; 0x36
 801b58e:	4432      	add	r2, r6
 801b590:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801b594:	428a      	cmp	r2, r1
 801b596:	dd0b      	ble.n	801b5b0 <scalbn+0x80>
 801b598:	ec45 4b11 	vmov	d1, r4, r5
 801b59c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801b608 <scalbn+0xd8>
 801b5a0:	f000 f90e 	bl	801b7c0 <copysign>
 801b5a4:	a318      	add	r3, pc, #96	; (adr r3, 801b608 <scalbn+0xd8>)
 801b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5aa:	ec51 0b10 	vmov	r0, r1, d0
 801b5ae:	e7da      	b.n	801b566 <scalbn+0x36>
 801b5b0:	2a00      	cmp	r2, #0
 801b5b2:	dd08      	ble.n	801b5c6 <scalbn+0x96>
 801b5b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b5b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b5bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b5c0:	ec45 4b10 	vmov	d0, r4, r5
 801b5c4:	bd70      	pop	{r4, r5, r6, pc}
 801b5c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801b5ca:	da0d      	bge.n	801b5e8 <scalbn+0xb8>
 801b5cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b5d0:	429e      	cmp	r6, r3
 801b5d2:	ec45 4b11 	vmov	d1, r4, r5
 801b5d6:	dce1      	bgt.n	801b59c <scalbn+0x6c>
 801b5d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801b600 <scalbn+0xd0>
 801b5dc:	f000 f8f0 	bl	801b7c0 <copysign>
 801b5e0:	a307      	add	r3, pc, #28	; (adr r3, 801b600 <scalbn+0xd0>)
 801b5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e6:	e7e0      	b.n	801b5aa <scalbn+0x7a>
 801b5e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b5ec:	3236      	adds	r2, #54	; 0x36
 801b5ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801b5f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b5f6:	4620      	mov	r0, r4
 801b5f8:	4629      	mov	r1, r5
 801b5fa:	2200      	movs	r2, #0
 801b5fc:	4b06      	ldr	r3, [pc, #24]	; (801b618 <scalbn+0xe8>)
 801b5fe:	e7b2      	b.n	801b566 <scalbn+0x36>
 801b600:	c2f8f359 	.word	0xc2f8f359
 801b604:	01a56e1f 	.word	0x01a56e1f
 801b608:	8800759c 	.word	0x8800759c
 801b60c:	7e37e43c 	.word	0x7e37e43c
 801b610:	43500000 	.word	0x43500000
 801b614:	ffff3cb0 	.word	0xffff3cb0
 801b618:	3c900000 	.word	0x3c900000

0801b61c <fabsf>:
 801b61c:	ee10 3a10 	vmov	r3, s0
 801b620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b624:	ee00 3a10 	vmov	s0, r3
 801b628:	4770      	bx	lr

0801b62a <finitef>:
 801b62a:	ee10 3a10 	vmov	r3, s0
 801b62e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801b632:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801b636:	bfac      	ite	ge
 801b638:	2000      	movge	r0, #0
 801b63a:	2001      	movlt	r0, #1
 801b63c:	4770      	bx	lr
	...

0801b640 <nanf>:
 801b640:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b648 <nanf+0x8>
 801b644:	4770      	bx	lr
 801b646:	bf00      	nop
 801b648:	7fc00000 	.word	0x7fc00000

0801b64c <rintf>:
 801b64c:	b513      	push	{r0, r1, r4, lr}
 801b64e:	ee10 1a10 	vmov	r1, s0
 801b652:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b656:	0ddc      	lsrs	r4, r3, #23
 801b658:	3c7f      	subs	r4, #127	; 0x7f
 801b65a:	2c16      	cmp	r4, #22
 801b65c:	dc46      	bgt.n	801b6ec <rintf+0xa0>
 801b65e:	b32b      	cbz	r3, 801b6ac <rintf+0x60>
 801b660:	2c00      	cmp	r4, #0
 801b662:	ee10 2a10 	vmov	r2, s0
 801b666:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801b66a:	da21      	bge.n	801b6b0 <rintf+0x64>
 801b66c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 801b670:	425b      	negs	r3, r3
 801b672:	4a21      	ldr	r2, [pc, #132]	; (801b6f8 <rintf+0xac>)
 801b674:	0a5b      	lsrs	r3, r3, #9
 801b676:	0d09      	lsrs	r1, r1, #20
 801b678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b67c:	0509      	lsls	r1, r1, #20
 801b67e:	430b      	orrs	r3, r1
 801b680:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801b684:	ee07 3a90 	vmov	s15, r3
 801b688:	edd2 6a00 	vldr	s13, [r2]
 801b68c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801b690:	ed8d 7a01 	vstr	s14, [sp, #4]
 801b694:	eddd 7a01 	vldr	s15, [sp, #4]
 801b698:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b69c:	ee17 3a90 	vmov	r3, s15
 801b6a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b6a4:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801b6a8:	ee00 3a10 	vmov	s0, r3
 801b6ac:	b002      	add	sp, #8
 801b6ae:	bd10      	pop	{r4, pc}
 801b6b0:	4b12      	ldr	r3, [pc, #72]	; (801b6fc <rintf+0xb0>)
 801b6b2:	4123      	asrs	r3, r4
 801b6b4:	4219      	tst	r1, r3
 801b6b6:	d0f9      	beq.n	801b6ac <rintf+0x60>
 801b6b8:	085b      	lsrs	r3, r3, #1
 801b6ba:	4219      	tst	r1, r3
 801b6bc:	d006      	beq.n	801b6cc <rintf+0x80>
 801b6be:	ea21 0203 	bic.w	r2, r1, r3
 801b6c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801b6c6:	fa43 f404 	asr.w	r4, r3, r4
 801b6ca:	4322      	orrs	r2, r4
 801b6cc:	4b0a      	ldr	r3, [pc, #40]	; (801b6f8 <rintf+0xac>)
 801b6ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b6d2:	ed90 7a00 	vldr	s14, [r0]
 801b6d6:	ee07 2a90 	vmov	s15, r2
 801b6da:	ee77 7a27 	vadd.f32	s15, s14, s15
 801b6de:	edcd 7a01 	vstr	s15, [sp, #4]
 801b6e2:	ed9d 0a01 	vldr	s0, [sp, #4]
 801b6e6:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b6ea:	e7df      	b.n	801b6ac <rintf+0x60>
 801b6ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b6f0:	d3dc      	bcc.n	801b6ac <rintf+0x60>
 801b6f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b6f6:	e7d9      	b.n	801b6ac <rintf+0x60>
 801b6f8:	0801c4f8 	.word	0x0801c4f8
 801b6fc:	007fffff 	.word	0x007fffff

0801b700 <scalbnf>:
 801b700:	b508      	push	{r3, lr}
 801b702:	ee10 2a10 	vmov	r2, s0
 801b706:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801b70a:	ed2d 8b02 	vpush	{d8}
 801b70e:	eef0 0a40 	vmov.f32	s1, s0
 801b712:	d004      	beq.n	801b71e <scalbnf+0x1e>
 801b714:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801b718:	d306      	bcc.n	801b728 <scalbnf+0x28>
 801b71a:	ee70 0a00 	vadd.f32	s1, s0, s0
 801b71e:	ecbd 8b02 	vpop	{d8}
 801b722:	eeb0 0a60 	vmov.f32	s0, s1
 801b726:	bd08      	pop	{r3, pc}
 801b728:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801b72c:	d21c      	bcs.n	801b768 <scalbnf+0x68>
 801b72e:	4b1f      	ldr	r3, [pc, #124]	; (801b7ac <scalbnf+0xac>)
 801b730:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801b7b0 <scalbnf+0xb0>
 801b734:	4298      	cmp	r0, r3
 801b736:	ee60 0a27 	vmul.f32	s1, s0, s15
 801b73a:	db10      	blt.n	801b75e <scalbnf+0x5e>
 801b73c:	ee10 2a90 	vmov	r2, s1
 801b740:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801b744:	3b19      	subs	r3, #25
 801b746:	4403      	add	r3, r0
 801b748:	2bfe      	cmp	r3, #254	; 0xfe
 801b74a:	dd0f      	ble.n	801b76c <scalbnf+0x6c>
 801b74c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801b7b4 <scalbnf+0xb4>
 801b750:	eeb0 0a48 	vmov.f32	s0, s16
 801b754:	f000 f843 	bl	801b7de <copysignf>
 801b758:	ee60 0a08 	vmul.f32	s1, s0, s16
 801b75c:	e7df      	b.n	801b71e <scalbnf+0x1e>
 801b75e:	eddf 7a16 	vldr	s15, [pc, #88]	; 801b7b8 <scalbnf+0xb8>
 801b762:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801b766:	e7da      	b.n	801b71e <scalbnf+0x1e>
 801b768:	0ddb      	lsrs	r3, r3, #23
 801b76a:	e7ec      	b.n	801b746 <scalbnf+0x46>
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	dd06      	ble.n	801b77e <scalbnf+0x7e>
 801b770:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801b774:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801b778:	ee00 3a90 	vmov	s1, r3
 801b77c:	e7cf      	b.n	801b71e <scalbnf+0x1e>
 801b77e:	f113 0f16 	cmn.w	r3, #22
 801b782:	da06      	bge.n	801b792 <scalbnf+0x92>
 801b784:	f24c 3350 	movw	r3, #50000	; 0xc350
 801b788:	4298      	cmp	r0, r3
 801b78a:	dcdf      	bgt.n	801b74c <scalbnf+0x4c>
 801b78c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801b7b8 <scalbnf+0xb8>
 801b790:	e7de      	b.n	801b750 <scalbnf+0x50>
 801b792:	3319      	adds	r3, #25
 801b794:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801b798:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801b79c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801b7bc <scalbnf+0xbc>
 801b7a0:	ee07 3a10 	vmov	s14, r3
 801b7a4:	ee67 0a27 	vmul.f32	s1, s14, s15
 801b7a8:	e7b9      	b.n	801b71e <scalbnf+0x1e>
 801b7aa:	bf00      	nop
 801b7ac:	ffff3cb0 	.word	0xffff3cb0
 801b7b0:	4c000000 	.word	0x4c000000
 801b7b4:	7149f2ca 	.word	0x7149f2ca
 801b7b8:	0da24260 	.word	0x0da24260
 801b7bc:	33000000 	.word	0x33000000

0801b7c0 <copysign>:
 801b7c0:	ec51 0b10 	vmov	r0, r1, d0
 801b7c4:	ee11 0a90 	vmov	r0, s3
 801b7c8:	ee10 2a10 	vmov	r2, s0
 801b7cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b7d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801b7d4:	ea41 0300 	orr.w	r3, r1, r0
 801b7d8:	ec43 2b10 	vmov	d0, r2, r3
 801b7dc:	4770      	bx	lr

0801b7de <copysignf>:
 801b7de:	ee10 3a10 	vmov	r3, s0
 801b7e2:	ee10 2a90 	vmov	r2, s1
 801b7e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b7ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801b7ee:	4313      	orrs	r3, r2
 801b7f0:	ee00 3a10 	vmov	s0, r3
 801b7f4:	4770      	bx	lr
	...

0801b7f8 <_init>:
 801b7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7fa:	bf00      	nop
 801b7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7fe:	bc08      	pop	{r3}
 801b800:	469e      	mov	lr, r3
 801b802:	4770      	bx	lr

0801b804 <_fini>:
 801b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b806:	bf00      	nop
 801b808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b80a:	bc08      	pop	{r3}
 801b80c:	469e      	mov	lr, r3
 801b80e:	4770      	bx	lr
